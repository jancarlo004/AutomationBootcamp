






<!DOCTYPE html>
<html
  lang="en"
  
  data-color-mode="auto" data-light-theme="light" data-dark-theme="dark"
  data-a11y-animated-images="system" data-a11y-link-underlines="true"
  >



  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">
  <link rel="preconnect" href="https://github.githubassets.com" crossorigin>
  <link rel="preconnect" href="https://avatars.githubusercontent.com">

  

  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/light-efd2f2257c96.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/dark-6b1e37da2254.css" /><link data-color-theme="dark_dimmed" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_dimmed-aa16bfa90fb8.css" /><link data-color-theme="dark_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_high_contrast-f4daad25d8cf.css" /><link data-color-theme="dark_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_colorblind-a4629b2e906b.css" /><link data-color-theme="light_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_colorblind-afcc3a6a38dd.css" /><link data-color-theme="light_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_high_contrast-79bca7145393.css" /><link data-color-theme="light_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_tritanopia-fe4137b54b26.css" /><link data-color-theme="dark_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_tritanopia-1911f0cf0db4.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-primitives-8500c2c7ce5f.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-f9b5bfe6b656.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/global-526475a50099.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/github-5948a5a1f8dc.css" />
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/repository-a21555e5abb4.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/code-c1319e071dda.css" />

  


  <script type="application/json" id="client-env">{"locale":"en","featureFlags":["code_vulnerability_scanning","copilot_chat_static_thread_suggestions","copilot_conversational_ux_history_refs","copilot_followup_to_agent","copilot_smell_icebreaker_ux","copilot_implicit_context","copilot_stop_response","failbot_handle_non_errors","geojson_azure_maps","image_metric_tracking","marketing_forms_api_integration_contact_request","marketing_pages_search_explore_provider","turbo_experiment_risky","sample_network_conn_type","no_character_key_shortcuts_in_inputs","react_start_transition_for_navigations","custom_inp","remove_child_patch","kb_source_repos"]}</script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/wp-runtime-4b8f01981535.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_dompurify_dist_purify_js-810e4b1b9abd.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_oddbird_popover-polyfill_dist_popover_js-4ac41d0a76fd.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_smoothscroll-polyfill_dist_smoothscroll_js-node_modules_stacktrace-parse-a448e4-bdc28e06dc01.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/environment-65dcc25bed15.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_behaviors_dist_esm_focus-zone_js-03bcda509ec9.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_selector-observer_dist_index_esm_js-9f960d9b217c.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_combobox-nav_dist_index_js-node_modules_github_markdown-toolbar-e-820fc0-1176135e4d90.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_auto-complete-element_dist_index_js-node_modules_github_catalyst_-392fe4-5df1d85d02da.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_text-expander-element_dist_index_js-b2135edb5ced.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_filter-input-element_dist_index_js-node_modules_github_remote-inp-b7d8f4-6e6f83bcc978.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_delegated-events_dist_in-b63d41-1e3984e4dd2f.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_file-attachment-element_dist_index_js-node_modules_primer_view-co-3959a9-1ccb1cef5682.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_onfocus_ts-ui_packages_trusted-types-policies_policy_ts-ui_packages-6fe316-4083e7233d28.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/github-elements-c9cd2492b1b3.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/element-registry-d895c841bd92.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_braintree_browser-detection_dist_browser-detection_js-node_modules_githu-fd5530-79ffdad54bcd.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lit-html_lit-html_js-cc7cb714ead5.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_morphdom_dist_morphdom-esm_js-node_modules_github_memoize_dist_esm_index_js-8d7117d67c36.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_turbo_dist_turbo_es2017-esm_js-1cea0f5eff45.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-893f9f-880ac2bbb719.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_scroll-anchoring_dist_scroll-anchoring_esm_js-node_modules_github_hotkey-1a1d91-1bb71f3f93c2.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_color-convert_index_js-cdd1e82b3795.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_behaviors_dist_esm_dimensions_js-node_modules_github_jtml_lib_index_js-b1947a1d4855.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_session-resume_dist_index_js-node_modules_primer_behaviors_dist_e-da6ec6-77ce2f267f4e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_quote-selection_dist_index_js-node_modules_github_textarea-autosi-9e0349-7c78ee755ad3.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_updatable-content_ts-7fcc5f2841d8.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_task-list_ts-app_assets_modules_github_onfocus_ts-app_ass-421cec-d3af2356fb47.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_sticky-scroll-into-view_ts-3dc342dedcb0.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_ajax-error_ts-app_assets_modules_github_behaviors_include-467754-0b06f9573e1c.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_commenting_edit_ts-app_assets_modules_github_behaviors_ht-83c235-5276a3faf037.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_blob-anchor_ts-app_assets_modules_github_filter-sort_ts-app_assets_-c96432-b934f03f8602.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/behaviors-4a2e178d5769.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_delegated-events_dist_index_js-node_modules_github_catalyst_lib_index_js-06ff531-2ea61fcc9a71.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/notifications-global-0409f6303340.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_virtualized-list_es_index_js-node_modules_github_template-parts_lib_index_js-878844713bc9.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-e53a3f-52039a64560e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_ref-selector_ts-fa04da463305.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/codespaces-e5084321c6dd.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_filter-input-element_dist_index_js-node_modules_github_mini-throt-1f9a80-bb6794a6e5c6.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_file-attachment-element_dist_index_js-node_modules_github_mini-th-9dbbd2-dba0157157f7.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_repositories_get-repo-element_ts-e21ae6671295.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/repositories-1d69946468f7.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/code-menu-67595c3a6d0c.js"></script>
  

  <title>GitHub - karatelabs/karate: Test Automation Made Simple</title>



  <meta name="route-pattern" content="/:user_id/:repository" data-turbo-transient>
  <meta name="route-controller" content="files" data-turbo-transient>
  <meta name="route-action" content="disambiguate" data-turbo-transient>

    
  <meta name="current-catalog-service-hash" content="82c569b93da5c18ed649ebd4c2c79437db4611a6a1373e805a3cb001c64130b7">


  <meta name="request-id" content="EC12:13D0CD:D102FDD:D528749:6679F9B2" data-pjax-transient="true"/><meta name="html-safe-nonce" content="36a143cf93352f32ac4229cda860bba1ab3ca78169a3b8f6bfcd51ba5d3436f6" data-pjax-transient="true"/><meta name="visitor-payload" content="eyJyZWZlcnJlciI6IiIsInJlcXVlc3RfaWQiOiJFQzEyOjEzRDBDRDpEMTAyRkREOkQ1Mjg3NDk6NjY3OUY5QjIiLCJ2aXNpdG9yX2lkIjoiMTYyMjcyMTkyNTU2MzkzOTI1MSIsInJlZ2lvbl9lZGdlIjoic2VhIiwicmVnaW9uX3JlbmRlciI6InNlYSJ9" data-pjax-transient="true"/><meta name="visitor-hmac" content="2c3de51e774f11c1ce14fc3209a575cd8a11b15472743d6a048b47797977d6a6" data-pjax-transient="true"/>


    <meta name="hovercard-subject-tag" content="repository:81226206" data-turbo-transient>


  <meta name="github-keyboard-shortcuts" content="repository,copilot" data-turbo-transient="true" />
  

  <meta name="selected-link" value="repo_source" data-turbo-transient>
  <link rel="assets" href="https://github.githubassets.com/">

    <meta name="google-site-verification" content="Apib7-x98H0j5cPqHWwSMm6dNU4GmODRoqxLiDzdx9I">

<meta name="octolytics-url" content="https://collector.github.com/github/collect" />

  <meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;" data-turbo-transient="true" />

  




    <meta name="user-login" content="">

  

    <meta name="viewport" content="width=device-width">

    

      <meta name="description" content="Test Automation Made Simple. Contribute to karatelabs/karate development by creating an account on GitHub.">

      <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">

    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <meta property="fb:app_id" content="1401488693436528">
    <meta name="apple-itunes-app" content="app-id=1477376905, app-argument=https://github.com/karatelabs/karate" />

      <meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/81226206/2392b041-2ddb-438c-91ae-4022cf7f4549" /><meta name="twitter:site" content="@github" /><meta name="twitter:card" content="summary_large_image" /><meta name="twitter:title" content="GitHub - karatelabs/karate: Test Automation Made Simple" /><meta name="twitter:description" content="Test Automation Made Simple. Contribute to karatelabs/karate development by creating an account on GitHub." />
  <meta property="og:image" content="https://repository-images.githubusercontent.com/81226206/2392b041-2ddb-438c-91ae-4022cf7f4549" /><meta property="og:image:alt" content="Test Automation Made Simple. Contribute to karatelabs/karate development by creating an account on GitHub." /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="GitHub - karatelabs/karate: Test Automation Made Simple" /><meta property="og:url" content="https://github.com/karatelabs/karate" /><meta property="og:description" content="Test Automation Made Simple. Contribute to karatelabs/karate development by creating an account on GitHub." />
  




      <meta name="hostname" content="github.com">



        <meta name="expected-hostname" content="github.com">


  <meta http-equiv="x-pjax-version" content="6d11718eaa9879699f9f891255c82b37b0472bc5fb32e762d849f3b6439ee062" data-turbo-track="reload">
  <meta http-equiv="x-pjax-csp-version" content="f6e41c3092c5e1167d95330a2a482f695598c31ad79963c59b07ab79dbfb87f7" data-turbo-track="reload">
  <meta http-equiv="x-pjax-css-version" content="0190bc89fa4bb4c24de7bdeeb5e5385d7a279ed92f71166adb6e586571880bfc" data-turbo-track="reload">
  <meta http-equiv="x-pjax-js-version" content="d3edb528b121cf1559fd20456abad8de530fdc94443b4e7afbaf334788fecfcc" data-turbo-track="reload">

  <meta name="turbo-cache-control" content="no-preview" data-turbo-transient="">

      <meta data-hydrostats="publish">
  <meta name="go-import" content="github.com/karatelabs/karate git https://github.com/karatelabs/karate.git">

  <meta name="octolytics-dimension-user_id" content="91312095" /><meta name="octolytics-dimension-user_login" content="karatelabs" /><meta name="octolytics-dimension-repository_id" content="81226206" /><meta name="octolytics-dimension-repository_nwo" content="karatelabs/karate" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="81226206" /><meta name="octolytics-dimension-repository_network_root_nwo" content="karatelabs/karate" />



      <link rel="canonical" href="https://github.com/karatelabs/karate" data-turbo-transient>


    <meta name="turbo-body-classes" content="logged-out env-production page-responsive">


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://github.githubassets.com/assets/pinned-octocat-093da3e6fa40.svg" color="#000000">
  <link rel="alternate icon" class="js-site-favicon" type="image/png" href="https://github.githubassets.com/favicons/favicon.png">
  <link rel="icon" class="js-site-favicon" type="image/svg+xml" href="https://github.githubassets.com/favicons/favicon.svg">

<meta name="theme-color" content="#1e2327">
<meta name="color-scheme" content="light dark" />


  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-responsive" style="word-wrap: break-word;">
    <div data-turbo-body class="logged-out env-production page-responsive" style="word-wrap: break-word;">
      


    <div class="position-relative js-header-wrapper ">
      <a href="#start-of-content" data-skip-target-assigned="false" class="px-2 py-4 color-bg-accent-emphasis color-fg-on-emphasis show-on-focus js-skip-to-content">Skip to content</a>

      <span data-view-component="true" class="progress-pjax-loader Progress position-fixed width-full">
    <span style="width: 0%;" data-view-component="true" class="Progress-item progress-pjax-loader-bar left-0 top-0 color-bg-accent-emphasis"></span>
</span>      
      
      







<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_Button_IconButton_js-node_modules_primer_react_lib--1cd808-94bb79d8a6de.js"></script>

<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/keyboard-shortcuts-dialog-a295f4fdc247.js"></script>

<react-partial
  partial-name="keyboard-shortcuts-dialog"
  data-ssr="false"
>
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>




      

        

            
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-94fd67-8743f7dc256e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/sessions-458fee042571.js"></script>
<header class="Header-old header-logged-out js-details-container Details position-relative f4 py-3" role="banner" data-color-mode=light data-light-theme=light data-dark-theme=dark>
  <h2 class="sr-only">Navigation Menu</h2>

  <button type="button" class="Header-backdrop d-lg-none border-0 position-fixed top-0 left-0 width-full height-full js-details-target" aria-label="Toggle navigation">
    <span class="d-none">Toggle navigation</span>
  </button>

  <div class=" d-flex flex-column flex-lg-row flex-items-center p-responsive height-full position-relative z-1">
    <div class="d-flex flex-justify-between flex-items-center width-full width-lg-auto">
      <a class="mr-lg-3 color-fg-inherit flex-order-2" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
        <svg height="32" aria-hidden="true" viewBox="0 0 16 16" version="1.1" width="32" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"></path>
</svg>
      </a>

      <div class="flex-1">
        <a href="/login?return_to=https%3A%2F%2Fgithub.com%2Fkaratelabs%2Fkarate"
          class="d-inline-block d-lg-none flex-order-1 f5 no-underline border color-border-default rounded-2 px-2 py-1 color-fg-inherit"
          data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/karatelabs/karate&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c7a5337177ec406edef775627a19b1908a2907a9d63d3bd7f12140259452918a"
          data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">
          Sign in
        </a>
      </div>

      <div class="flex-1 flex-order-2 text-right">
        <button aria-label="Toggle navigation" aria-expanded="false" type="button" data-view-component="true" class="js-details-target Button--link Button--medium Button d-lg-none color-fg-inherit p-1">  <span class="Button-content">
    <span class="Button-label"><div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div></span>
  </span>
</button>
      </div>
    </div>


    <div class="HeaderMenu--logged-out p-responsive height-fit position-lg-relative d-lg-flex flex-column flex-auto pt-7 pb-4 top-0">
      <div class="header-menu-wrapper d-flex flex-column flex-self-end flex-lg-row flex-justify-between flex-auto p-3 p-lg-0 rounded rounded-lg-0 mt-3 mt-lg-0">
          <nav class="mt-0 px-3 px-lg-0 mb-3 mb-lg-0" aria-label="Global">
            <ul class="d-lg-flex list-style-none">
                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Product
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 d-lg-flex dropdown-menu-wide">
          <div class="px-lg-4 border-lg-right mb-4 mb-lg-0 pr-lg-7">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Actions&quot;,&quot;label&quot;:&quot;ref_cta:Actions;&quot;}" href="https://github.com/features/actions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-workflow color-fg-subtle mr-3">
    <path d="M1 3a2 2 0 0 1 2-2h6.5a2 2 0 0 1 2 2v6.5a2 2 0 0 1-2 2H7v4.063C7 16.355 7.644 17 8.438 17H12.5v-2.5a2 2 0 0 1 2-2H21a2 2 0 0 1 2 2V21a2 2 0 0 1-2 2h-6.5a2 2 0 0 1-2-2v-2.5H8.437A2.939 2.939 0 0 1 5.5 15.562V11.5H3a2 2 0 0 1-2-2Zm2-.5a.5.5 0 0 0-.5.5v6.5a.5.5 0 0 0 .5.5h6.5a.5.5 0 0 0 .5-.5V3a.5.5 0 0 0-.5-.5ZM14.5 14a.5.5 0 0 0-.5.5V21a.5.5 0 0 0 .5.5H21a.5.5 0 0 0 .5-.5v-6.5a.5.5 0 0 0-.5-.5Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Actions</div>
        Automate any workflow
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Packages&quot;,&quot;label&quot;:&quot;ref_cta:Packages;&quot;}" href="https://github.com/features/packages">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-package color-fg-subtle mr-3">
    <path d="M12.876.64V.639l8.25 4.763c.541.313.875.89.875 1.515v9.525a1.75 1.75 0 0 1-.875 1.516l-8.25 4.762a1.748 1.748 0 0 1-1.75 0l-8.25-4.763a1.75 1.75 0 0 1-.875-1.515V6.917c0-.625.334-1.202.875-1.515L11.126.64a1.748 1.748 0 0 1 1.75 0Zm-1 1.298L4.251 6.34l7.75 4.474 7.75-4.474-7.625-4.402a.248.248 0 0 0-.25 0Zm.875 19.123 7.625-4.402a.25.25 0 0 0 .125-.216V7.639l-7.75 4.474ZM3.501 7.64v8.803c0 .09.048.172.125.216l7.625 4.402v-8.947Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Packages</div>
        Host and manage packages
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Security&quot;,&quot;label&quot;:&quot;ref_cta:Security;&quot;}" href="https://github.com/features/security">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-shield-check color-fg-subtle mr-3">
    <path d="M16.53 9.78a.75.75 0 0 0-1.06-1.06L11 13.19l-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5Z"></path><path d="m12.54.637 8.25 2.675A1.75 1.75 0 0 1 22 4.976V10c0 6.19-3.771 10.704-9.401 12.83a1.704 1.704 0 0 1-1.198 0C5.77 20.705 2 16.19 2 10V4.976c0-.758.489-1.43 1.21-1.664L11.46.637a1.748 1.748 0 0 1 1.08 0Zm-.617 1.426-8.25 2.676a.249.249 0 0 0-.173.237V10c0 5.46 3.28 9.483 8.43 11.426a.199.199 0 0 0 .14 0C17.22 19.483 20.5 15.461 20.5 10V4.976a.25.25 0 0 0-.173-.237l-8.25-2.676a.253.253 0 0 0-.154 0Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Security</div>
        Find and fix vulnerabilities
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Codespaces&quot;,&quot;label&quot;:&quot;ref_cta:Codespaces;&quot;}" href="https://github.com/features/codespaces">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-codespaces color-fg-subtle mr-3">
    <path d="M3.5 3.75C3.5 2.784 4.284 2 5.25 2h13.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 18.75 13H5.25a1.75 1.75 0 0 1-1.75-1.75Zm-2 12c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v4a1.75 1.75 0 0 1-1.75 1.75H3.25a1.75 1.75 0 0 1-1.75-1.75ZM5.25 3.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h13.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Zm-2 12a.25.25 0 0 0-.25.25v4c0 .138.112.25.25.25h17.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25Z"></path><path d="M10 17.75a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Zm-4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1-.75-.75Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Codespaces</div>
        Instant dev environments
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to GitHub Copilot&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Copilot;&quot;}" href="https://github.com/features/copilot">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-copilot color-fg-subtle mr-3">
    <path d="M23.922 16.992c-.861 1.495-5.859 5.023-11.922 5.023-6.063 0-11.061-3.528-11.922-5.023A.641.641 0 0 1 0 16.736v-2.869a.841.841 0 0 1 .053-.22c.372-.935 1.347-2.292 2.605-2.656.167-.429.414-1.055.644-1.517a10.195 10.195 0 0 1-.052-1.086c0-1.331.282-2.499 1.132-3.368.397-.406.89-.717 1.474-.952 1.399-1.136 3.392-2.093 6.122-2.093 2.731 0 4.767.957 6.166 2.093.584.235 1.077.546 1.474.952.85.869 1.132 2.037 1.132 3.368 0 .368-.014.733-.052 1.086.23.462.477 1.088.644 1.517 1.258.364 2.233 1.721 2.605 2.656a.832.832 0 0 1 .053.22v2.869a.641.641 0 0 1-.078.256ZM12.172 11h-.344a4.323 4.323 0 0 1-.355.508C10.703 12.455 9.555 13 7.965 13c-1.725 0-2.989-.359-3.782-1.259a2.005 2.005 0 0 1-.085-.104L4 11.741v6.585c1.435.779 4.514 2.179 8 2.179 3.486 0 6.565-1.4 8-2.179v-6.585l-.098-.104s-.033.045-.085.104c-.793.9-2.057 1.259-3.782 1.259-1.59 0-2.738-.545-3.508-1.492a4.323 4.323 0 0 1-.355-.508h-.016.016Zm.641-2.935c.136 1.057.403 1.913.878 2.497.442.544 1.134.938 2.344.938 1.573 0 2.292-.337 2.657-.751.384-.435.558-1.15.558-2.361 0-1.14-.243-1.847-.705-2.319-.477-.488-1.319-.862-2.824-1.025-1.487-.161-2.192.138-2.533.529-.269.307-.437.808-.438 1.578v.021c0 .265.021.562.063.893Zm-1.626 0c.042-.331.063-.628.063-.894v-.02c-.001-.77-.169-1.271-.438-1.578-.341-.391-1.046-.69-2.533-.529-1.505.163-2.347.537-2.824 1.025-.462.472-.705 1.179-.705 2.319 0 1.211.175 1.926.558 2.361.365.414 1.084.751 2.657.751 1.21 0 1.902-.394 2.344-.938.475-.584.742-1.44.878-2.497Z"></path><path d="M14.5 14.25a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Zm-5 0a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">GitHub Copilot</div>
        Write better code with AI
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Code review&quot;,&quot;label&quot;:&quot;ref_cta:Code review;&quot;}" href="https://github.com/features/code-review">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-code-review color-fg-subtle mr-3">
    <path d="M10.3 6.74a.75.75 0 0 1-.04 1.06l-2.908 2.7 2.908 2.7a.75.75 0 1 1-1.02 1.1l-3.5-3.25a.75.75 0 0 1 0-1.1l3.5-3.25a.75.75 0 0 1 1.06.04Zm3.44 1.06a.75.75 0 1 1 1.02-1.1l3.5 3.25a.75.75 0 0 1 0 1.1l-3.5 3.25a.75.75 0 1 1-1.02-1.1l2.908-2.7-2.908-2.7Z"></path><path d="M1.5 4.25c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v12.5a1.75 1.75 0 0 1-1.75 1.75h-9.69l-3.573 3.573A1.458 1.458 0 0 1 5 21.043V18.5H3.25a1.75 1.75 0 0 1-1.75-1.75ZM3.25 4a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h2.5a.75.75 0 0 1 .75.75v3.19l3.72-3.72a.749.749 0 0 1 .53-.22h10a.25.25 0 0 0 .25-.25V4.25a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Code review</div>
        Manage code changes
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Issues&quot;,&quot;label&quot;:&quot;ref_cta:Issues;&quot;}" href="https://github.com/features/issues">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-issue-opened color-fg-subtle mr-3">
    <path d="M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1ZM2.5 12a9.5 9.5 0 0 0 9.5 9.5 9.5 9.5 0 0 0 9.5-9.5A9.5 9.5 0 0 0 12 2.5 9.5 9.5 0 0 0 2.5 12Zm9.5 2a2 2 0 1 1-.001-3.999A2 2 0 0 1 12 14Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Issues</div>
        Plan and track work
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Discussions&quot;,&quot;label&quot;:&quot;ref_cta:Discussions;&quot;}" href="https://github.com/features/discussions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-comment-discussion color-fg-subtle mr-3">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"></path><path d="M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Discussions</div>
        Collaborate outside of code
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="px-lg-4">
              <span class="d-block h4 color-fg-default my-1" id="product-explore-heading">Explore</span>
            <ul class="list-style-none f5" aria-labelledby="product-explore-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to All features&quot;,&quot;label&quot;:&quot;ref_cta:All features;&quot;}" href="https://github.com/features">
      All features

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Documentation&quot;,&quot;label&quot;:&quot;ref_cta:Documentation;&quot;}" href="https://docs.github.com">
      Documentation

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to GitHub Skills&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Skills;&quot;}" href="https://skills.github.com">
      GitHub Skills

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Product&quot;,&quot;action&quot;:&quot;click to go to Blog&quot;,&quot;label&quot;:&quot;ref_cta:Blog;&quot;}" href="https://github.blog">
      Blog

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Solutions
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 px-lg-4">
          <div class="border-bottom pb-3 mb-3">
              <span class="d-block h4 color-fg-default my-1" id="solutions-for-heading">For</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-for-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Enterprise&quot;,&quot;label&quot;:&quot;ref_cta:Enterprise;&quot;}" href="https://github.com/enterprise">
      Enterprise

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Teams&quot;,&quot;label&quot;:&quot;ref_cta:Teams;&quot;}" href="https://github.com/team">
      Teams

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Startups&quot;,&quot;label&quot;:&quot;ref_cta:Startups;&quot;}" href="https://github.com/enterprise/startups">
      Startups

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Education&quot;,&quot;label&quot;:&quot;ref_cta:Education;&quot;}" href="https://education.github.com">
      Education

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
          <div class="border-bottom pb-3 mb-3">
              <span class="d-block h4 color-fg-default my-1" id="solutions-by-solution-heading">By Solution</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-by-solution-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to CI/CD &amp;amp; Automation&quot;,&quot;label&quot;:&quot;ref_cta:CI/CD &amp;amp; Automation;&quot;}" href="https://github.com/solutions/ci-cd">
      CI/CD &amp; Automation

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to DevOps&quot;,&quot;label&quot;:&quot;ref_cta:DevOps;&quot;}" href="https://github.com/solutions/devops">
      DevOps

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to DevSecOps&quot;,&quot;label&quot;:&quot;ref_cta:DevSecOps;&quot;}" href="https://github.com/solutions/devsecops">
      DevSecOps

    
</a></li>

            </ul>
          </div>
          <div class="">
              <span class="d-block h4 color-fg-default my-1" id="solutions-resources-heading">Resources</span>
            <ul class="list-style-none f5" aria-labelledby="solutions-resources-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Learning Pathways&quot;,&quot;label&quot;:&quot;ref_cta:Learning Pathways;&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to White papers, Ebooks, Webinars&quot;,&quot;label&quot;:&quot;ref_cta:White papers, Ebooks, Webinars;&quot;}" href="https://resources.github.com">
      White papers, Ebooks, Webinars

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Customer Stories&quot;,&quot;label&quot;:&quot;ref_cta:Customer Stories;&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" target="_blank" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Solutions&quot;,&quot;action&quot;:&quot;click to go to Partners&quot;,&quot;label&quot;:&quot;ref_cta:Partners;&quot;}" href="https://partner.github.com">
      Partners

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Open Source
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 px-lg-4">
          <div class="border-bottom pb-3 mb-3">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to GitHub Sponsors&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Sponsors;&quot;}" href="/sponsors">
      
      <div>
        <div class="color-fg-default h4">GitHub Sponsors</div>
        Fund open source developers
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="border-bottom pb-3 mb-3">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to The ReadME Project&quot;,&quot;label&quot;:&quot;ref_cta:The ReadME Project;&quot;}" href="https://github.com/readme">
      
      <div>
        <div class="color-fg-default h4">The ReadME Project</div>
        GitHub community articles
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="">
              <span class="d-block h4 color-fg-default my-1" id="open-source-repositories-heading">Repositories</span>
            <ul class="list-style-none f5" aria-labelledby="open-source-repositories-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Topics&quot;,&quot;label&quot;:&quot;ref_cta:Topics;&quot;}" href="https://github.com/topics">
      Topics

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Trending&quot;,&quot;label&quot;:&quot;ref_cta:Trending;&quot;}" href="https://github.com/trending">
      Trending

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Open Source&quot;,&quot;action&quot;:&quot;click to go to Collections&quot;,&quot;label&quot;:&quot;ref_cta:Collections;&quot;}" href="https://github.com/collections">
      Collections

    
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-3 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Enterprise
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>
      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 py-2 py-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 px-lg-4">
          <div class="border-bottom pb-3 mb-3">
            <ul class="list-style-none f5" >
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Enterprise&quot;,&quot;action&quot;:&quot;click to go to Enterprise platform&quot;,&quot;label&quot;:&quot;ref_cta:Enterprise platform;&quot;}" href="/enterprise">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-stack color-fg-subtle mr-3">
    <path d="M11.063 1.456a1.749 1.749 0 0 1 1.874 0l8.383 5.316a1.751 1.751 0 0 1 0 2.956l-8.383 5.316a1.749 1.749 0 0 1-1.874 0L2.68 9.728a1.751 1.751 0 0 1 0-2.956Zm1.071 1.267a.25.25 0 0 0-.268 0L3.483 8.039a.25.25 0 0 0 0 .422l8.383 5.316a.25.25 0 0 0 .268 0l8.383-5.316a.25.25 0 0 0 0-.422Z"></path><path d="M1.867 12.324a.75.75 0 0 1 1.035-.232l8.964 5.685a.25.25 0 0 0 .268 0l8.964-5.685a.75.75 0 0 1 .804 1.267l-8.965 5.685a1.749 1.749 0 0 1-1.874 0l-8.965-5.685a.75.75 0 0 1-.231-1.035Z"></path><path d="M1.867 16.324a.75.75 0 0 1 1.035-.232l8.964 5.685a.25.25 0 0 0 .268 0l8.964-5.685a.75.75 0 0 1 .804 1.267l-8.965 5.685a1.749 1.749 0 0 1-1.874 0l-8.965-5.685a.75.75 0 0 1-.231-1.035Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Enterprise platform</div>
        AI-powered developer platform
      </div>

    
</a></li>

            </ul>
          </div>
          <div class="">
              <span class="d-block h4 color-fg-default my-1" id="enterprise-available-add-ons-heading">Available add-ons</span>
            <ul class="list-style-none f5" aria-labelledby="enterprise-available-add-ons-heading">
                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Enterprise&quot;,&quot;action&quot;:&quot;click to go to Advanced Security&quot;,&quot;label&quot;:&quot;ref_cta:Advanced Security;&quot;}" href="https://github.com/enterprise/advanced-security">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-shield-check color-fg-subtle mr-3">
    <path d="M16.53 9.78a.75.75 0 0 0-1.06-1.06L11 13.19l-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5Z"></path><path d="m12.54.637 8.25 2.675A1.75 1.75 0 0 1 22 4.976V10c0 6.19-3.771 10.704-9.401 12.83a1.704 1.704 0 0 1-1.198 0C5.77 20.705 2 16.19 2 10V4.976c0-.758.489-1.43 1.21-1.664L11.46.637a1.748 1.748 0 0 1 1.08 0Zm-.617 1.426-8.25 2.676a.249.249 0 0 0-.173.237V10c0 5.46 3.28 9.483 8.43 11.426a.199.199 0 0 0 .14 0C17.22 19.483 20.5 15.461 20.5 10V4.976a.25.25 0 0 0-.173-.237l-8.25-2.676a.253.253 0 0 0-.154 0Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Advanced Security</div>
        Enterprise-grade security features
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center pb-lg-3" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Enterprise&quot;,&quot;action&quot;:&quot;click to go to GitHub Copilot&quot;,&quot;label&quot;:&quot;ref_cta:GitHub Copilot;&quot;}" href="/features/copilot#enterprise">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-copilot color-fg-subtle mr-3">
    <path d="M23.922 16.992c-.861 1.495-5.859 5.023-11.922 5.023-6.063 0-11.061-3.528-11.922-5.023A.641.641 0 0 1 0 16.736v-2.869a.841.841 0 0 1 .053-.22c.372-.935 1.347-2.292 2.605-2.656.167-.429.414-1.055.644-1.517a10.195 10.195 0 0 1-.052-1.086c0-1.331.282-2.499 1.132-3.368.397-.406.89-.717 1.474-.952 1.399-1.136 3.392-2.093 6.122-2.093 2.731 0 4.767.957 6.166 2.093.584.235 1.077.546 1.474.952.85.869 1.132 2.037 1.132 3.368 0 .368-.014.733-.052 1.086.23.462.477 1.088.644 1.517 1.258.364 2.233 1.721 2.605 2.656a.832.832 0 0 1 .053.22v2.869a.641.641 0 0 1-.078.256ZM12.172 11h-.344a4.323 4.323 0 0 1-.355.508C10.703 12.455 9.555 13 7.965 13c-1.725 0-2.989-.359-3.782-1.259a2.005 2.005 0 0 1-.085-.104L4 11.741v6.585c1.435.779 4.514 2.179 8 2.179 3.486 0 6.565-1.4 8-2.179v-6.585l-.098-.104s-.033.045-.085.104c-.793.9-2.057 1.259-3.782 1.259-1.59 0-2.738-.545-3.508-1.492a4.323 4.323 0 0 1-.355-.508h-.016.016Zm.641-2.935c.136 1.057.403 1.913.878 2.497.442.544 1.134.938 2.344.938 1.573 0 2.292-.337 2.657-.751.384-.435.558-1.15.558-2.361 0-1.14-.243-1.847-.705-2.319-.477-.488-1.319-.862-2.824-1.025-1.487-.161-2.192.138-2.533.529-.269.307-.437.808-.438 1.578v.021c0 .265.021.562.063.893Zm-1.626 0c.042-.331.063-.628.063-.894v-.02c-.001-.77-.169-1.271-.438-1.578-.341-.391-1.046-.69-2.533-.529-1.505.163-2.347.537-2.824 1.025-.462.472-.705 1.179-.705 2.319 0 1.211.175 1.926.558 2.361.365.414 1.084.751 2.657.751 1.21 0 1.902-.394 2.344-.938.475-.584.742-1.44.878-2.497Z"></path><path d="M14.5 14.25a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Zm-5 0a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">GitHub Copilot</div>
        Enterprise-grade AI features
      </div>

    
</a></li>

                <li>
  <a class="HeaderMenu-dropdown-link lh-condensed d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center" data-analytics-event="{&quot;category&quot;:&quot;Header dropdown (logged out), Enterprise&quot;,&quot;action&quot;:&quot;click to go to Premium Support&quot;,&quot;label&quot;:&quot;ref_cta:Premium Support;&quot;}" href="/premium-support">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-comment-discussion color-fg-subtle mr-3">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"></path><path d="M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"></path>
</svg>
      <div>
        <div class="color-fg-default h4">Premium Support</div>
        Enterprise-grade 24/7 support
      </div>

    
</a></li>

            </ul>
          </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
    <a class="HeaderMenu-link no-underline px-0 px-lg-2 py-3 py-lg-2 d-block d-lg-inline-block" data-analytics-event="{&quot;category&quot;:&quot;Header menu top item (logged out)&quot;,&quot;action&quot;:&quot;click to go to Pricing&quot;,&quot;label&quot;:&quot;ref_cta:Pricing;&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div class="d-lg-flex flex-items-center mb-3 mb-lg-0 text-center text-lg-left ml-3" style="">
                


<qbsearch-input class="search-input" data-scope="repo:karatelabs/karate" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="-eUSmhlAZQ_deVE3U9W2_6MQj2xn_L5CgXySThaB3oJ8zaMBjCzAG2THwTLWirHBn1dkJei-tS4HXczlJTn9Cw" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="karatelabs/karate" data-current-org="karatelabs" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-blackbird-indexed-repo-csrf="<esi:include src=&quot;/_esi/rails_csrf_token_form_hidden?r=1qk2oEkrHr3z5dpwxKqE7kPWjvdXHaz%2B76%2Fa2HoXsOxEFw2fU2xvfxSvfHkBwmMRL%2BuAADZwso6p4kOCj418v%2FKEY2HOeDr%2BDfdQar%2FsTnKBsrYDvm1BM1wCYGJPAx1OM8L5451Mm%2BkvLGk1wP9y%2BpcfBZ1J4J%2BmphQ3QB0M9pOKsLPZ6UqzcnVflNQH%2BzfsJ1hRx3TOhGzLExm6L92DGLDvoJK9JcQomWL8%2BXe4sh2Xw23vanDoHTIMtDnT8vhsDkVFQgeqnaQqova%2BJehpD3bz95pLzv9H1wSg4AJ5LcHnMdONU4yUwqsO57qzCKGKzeNc5LKEcjpYDw9GEXCLRApKBZM4oA57xl6%2F%2BW1mH5JVe6aSacd%2BjxPazIvVCmmSu6oNvCYsrtLvHO1unK7fif7EvtAGwi%2B2muEj2MzA3TjrY3%2B9xk5am7fhDo3%2BeLsSCl8YNQUzB5EorU6BsMwvsnhtDbMPpPjm2F2Lnw9NFhh05oaUy00c8pLUz802Ue6MIQhMnS0pzBkK0Jlo5%2BU%3D--vwOkQvpFIofBfvER--LQESN07B%2BG1dL5YrRuI8uQ%3D%3D&quot; />">
  <div
    class="search-input-container search-with-dialog position-relative d-flex flex-row flex-items-center mr-4 rounded"
    data-action="click:qbsearch-input#searchInputContainerClicked"
  >
      <button
        type="button"
        class="header-search-button placeholder  input-button form-control d-flex flex-1 flex-self-stretch flex-items-center no-wrap width-full py-0 pl-2 pr-0 text-left border-0 box-shadow-none"
        data-target="qbsearch-input.inputButton"
        placeholder="Search or jump to..."
        data-hotkey=s,/
        autocapitalize="off"
        data-action="click:qbsearch-input#handleExpand"
      >
        <div class="mr-2 color-fg-muted">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
        </div>
        <span class="flex-1" data-target="qbsearch-input.inputButtonText">Search or jump to...</span>
          <div class="d-flex" data-target="qbsearch-input.hotkeyIndicator">
            <svg xmlns="http://www.w3.org/2000/svg" width="22" height="20" aria-hidden="true" class="mr-1"><path fill="none" stroke="#979A9C" opacity=".4" d="M3.5.5h12c1.7 0 3 1.3 3 3v13c0 1.7-1.3 3-3 3h-12c-1.7 0-3-1.3-3-3v-13c0-1.7 1.3-3 3-3z"></path><path fill="#979A9C" d="M11.8 6L8 15.1h-.9L10.8 6h1z"></path></svg>

          </div>
      </button>

    <input type="hidden" name="type" class="js-site-search-type-field">

    
<div class="Overlay--hidden " data-modal-dialog-overlay>
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true" class="Overlay Overlay--width-large Overlay--height-auto">
      <h1 id="search-suggestions-dialog-header" class="sr-only">Search code, repositories, users, issues, pull requests...</h1>
    <div class="Overlay-body Overlay-body--paddingNone">
      
          <div data-view-component="true">        <div class="search-suggestions position-fixed width-full color-shadow-large border color-fg-default color-bg-default overflow-hidden d-flex flex-column query-builder-container"
          style="border-radius: 12px;"
          data-target="qbsearch-input.queryBuilderContainer"
          hidden
        >
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="query-builder-test-form" action="" accept-charset="UTF-8" method="get">
  <query-builder data-target="qbsearch-input.queryBuilder" id="query-builder-query-builder-test" data-filter-key=":" data-view-component="true" class="QueryBuilder search-query-builder">
    <div class="FormControl FormControl--fullWidth">
      <label id="query-builder-test-label" for="query-builder-test" class="FormControl-label sr-only">
        Search
      </label>
      <div
        class="QueryBuilder-StyledInput width-fit "
        data-target="query-builder.styledInput"
      >
          <span id="query-builder-test-leadingvisual-wrap" class="FormControl-input-leadingVisualWrap QueryBuilder-leadingVisualWrap">
            <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search FormControl-input-leadingVisual">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
          </span>
        <div data-target="query-builder.styledInputContainer" class="QueryBuilder-StyledInputContainer">
          <div
            aria-hidden="true"
            class="QueryBuilder-StyledInputContent"
            data-target="query-builder.styledInputContent"
          ></div>
          <div class="QueryBuilder-InputWrapper">
            <div aria-hidden="true" class="QueryBuilder-Sizer" data-target="query-builder.sizer"></div>
            <input id="query-builder-test" name="query-builder-test" value="" autocomplete="off" type="text" role="combobox" spellcheck="false" aria-expanded="false" aria-describedby="validation-ded66691-9904-4931-8736-626956accc6f" data-target="query-builder.input" data-action="
          input:query-builder#inputChange
          blur:query-builder#inputBlur
          keydown:query-builder#inputKeydown
          focus:query-builder#inputFocus
        " data-view-component="true" class="FormControl-input QueryBuilder-Input FormControl-medium" />
          </div>
        </div>
          <span class="sr-only" id="query-builder-test-clear">Clear</span>
          <button role="button" id="query-builder-test-clear-button" aria-labelledby="query-builder-test-clear query-builder-test-label" data-target="query-builder.clearButton" data-action="
                click:query-builder#clear
                focus:query-builder#clearButtonFocus
                blur:query-builder#clearButtonBlur
              " variant="small" hidden="hidden" type="button" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium mr-1 px-2 py-0 d-flex flex-items-center rounded-1 color-fg-muted">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x-circle-fill Button-visual">
    <path d="M2.343 13.657A8 8 0 1 1 13.658 2.343 8 8 0 0 1 2.343 13.657ZM6.03 4.97a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042L6.94 8 4.97 9.97a.749.749 0 0 0 .326 1.275.749.749 0 0 0 .734-.215L8 9.06l1.97 1.97a.749.749 0 0 0 1.275-.326.749.749 0 0 0-.215-.734L9.06 8l1.97-1.97a.749.749 0 0 0-.326-1.275.749.749 0 0 0-.734.215L8 6.94Z"></path>
</svg>
</button>

      </div>
      <template id="search-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
</template>

<template id="code-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</template>

<template id="file-code-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-file-code">
    <path d="M4 1.75C4 .784 4.784 0 5.75 0h5.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v8.586A1.75 1.75 0 0 1 14.25 15h-9a.75.75 0 0 1 0-1.5h9a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 10 4.25V1.5H5.75a.25.25 0 0 0-.25.25v2.5a.75.75 0 0 1-1.5 0Zm1.72 4.97a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734l1.47-1.47-1.47-1.47a.75.75 0 0 1 0-1.06ZM3.28 7.78 1.81 9.25l1.47 1.47a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018l-2-2a.75.75 0 0 1 0-1.06l2-2a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Zm8.22-6.218V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path>
</svg>
</template>

<template id="history-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-history">
    <path d="m.427 1.927 1.215 1.215a8.002 8.002 0 1 1-1.6 5.685.75.75 0 1 1 1.493-.154 6.5 6.5 0 1 0 1.18-4.458l1.358 1.358A.25.25 0 0 1 3.896 6H.25A.25.25 0 0 1 0 5.75V2.104a.25.25 0 0 1 .427-.177ZM7.75 4a.75.75 0 0 1 .75.75v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5A.75.75 0 0 1 7.75 4Z"></path>
</svg>
</template>

<template id="repo-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
</template>

<template id="bookmark-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bookmark">
    <path d="M3 2.75C3 1.784 3.784 1 4.75 1h6.5c.966 0 1.75.784 1.75 1.75v11.5a.75.75 0 0 1-1.227.579L8 11.722l-3.773 3.107A.751.751 0 0 1 3 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.91l3.023-2.489a.75.75 0 0 1 .954 0l3.023 2.49V2.75a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="plus-circle-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-plus-circle">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm7.25-3.25v2.5h2.5a.75.75 0 0 1 0 1.5h-2.5v2.5a.75.75 0 0 1-1.5 0v-2.5h-2.5a.75.75 0 0 1 0-1.5h2.5v-2.5a.75.75 0 0 1 1.5 0Z"></path>
</svg>
</template>

<template id="circle-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
</template>

<template id="trash-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-trash">
    <path d="M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75ZM4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.748 1.748 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15ZM6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25Z"></path>
</svg>
</template>

<template id="team-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-people">
    <path d="M2 5.5a3.5 3.5 0 1 1 5.898 2.549 5.508 5.508 0 0 1 3.034 4.084.75.75 0 1 1-1.482.235 4 4 0 0 0-7.9 0 .75.75 0 0 1-1.482-.236A5.507 5.507 0 0 1 3.102 8.05 3.493 3.493 0 0 1 2 5.5ZM11 4a3.001 3.001 0 0 1 2.22 5.018 5.01 5.01 0 0 1 2.56 3.012.749.749 0 0 1-.885.954.752.752 0 0 1-.549-.514 3.507 3.507 0 0 0-2.522-2.372.75.75 0 0 1-.574-.73v-.352a.75.75 0 0 1 .416-.672A1.5 1.5 0 0 0 11 5.5.75.75 0 0 1 11 4Zm-5.5-.5a2 2 0 1 0-.001 3.999A2 2 0 0 0 5.5 3.5Z"></path>
</svg>
</template>

<template id="project-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
</template>

<template id="pencil-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-pencil">
    <path d="M11.013 1.427a1.75 1.75 0 0 1 2.474 0l1.086 1.086a1.75 1.75 0 0 1 0 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 0 1-.927-.928l.929-3.25c.081-.286.235-.547.445-.758l8.61-8.61Zm.176 4.823L9.75 4.81l-6.286 6.287a.253.253 0 0 0-.064.108l-.558 1.953 1.953-.558a.253.253 0 0 0 .108-.064Zm1.238-3.763a.25.25 0 0 0-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 0 0 0-.354Z"></path>
</svg>
</template>

<template id="copilot-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copilot">
    <path d="M7.998 15.035c-4.562 0-7.873-2.914-7.998-3.749V9.338c.085-.628.677-1.686 1.588-2.065.013-.07.024-.143.036-.218.029-.183.06-.384.126-.612-.201-.508-.254-1.084-.254-1.656 0-.87.128-1.769.693-2.484.579-.733 1.494-1.124 2.724-1.261 1.206-.134 2.262.034 2.944.765.05.053.096.108.139.165.044-.057.094-.112.143-.165.682-.731 1.738-.899 2.944-.765 1.23.137 2.145.528 2.724 1.261.566.715.693 1.614.693 2.484 0 .572-.053 1.148-.254 1.656.066.228.098.429.126.612.012.076.024.148.037.218.924.385 1.522 1.471 1.591 2.095v1.872c0 .766-3.351 3.795-8.002 3.795Zm0-1.485c2.28 0 4.584-1.11 5.002-1.433V7.862l-.023-.116c-.49.21-1.075.291-1.727.291-1.146 0-2.059-.327-2.71-.991A3.222 3.222 0 0 1 8 6.303a3.24 3.24 0 0 1-.544.743c-.65.664-1.563.991-2.71.991-.652 0-1.236-.081-1.727-.291l-.023.116v4.255c.419.323 2.722 1.433 5.002 1.433ZM6.762 2.83c-.193-.206-.637-.413-1.682-.297-1.019.113-1.479.404-1.713.7-.247.312-.369.789-.369 1.554 0 .793.129 1.171.308 1.371.162.181.519.379 1.442.379.853 0 1.339-.235 1.638-.54.315-.322.527-.827.617-1.553.117-.935-.037-1.395-.241-1.614Zm4.155-.297c-1.044-.116-1.488.091-1.681.297-.204.219-.359.679-.242 1.614.091.726.303 1.231.618 1.553.299.305.784.54 1.638.54.922 0 1.28-.198 1.442-.379.179-.2.308-.578.308-1.371 0-.765-.123-1.242-.37-1.554-.233-.296-.693-.587-1.713-.7Z"></path><path d="M6.25 9.037a.75.75 0 0 1 .75.75v1.501a.75.75 0 0 1-1.5 0V9.787a.75.75 0 0 1 .75-.75Zm4.25.75v1.501a.75.75 0 0 1-1.5 0V9.787a.75.75 0 0 1 1.5 0Z"></path>
</svg>
</template>

<template id="workflow-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-workflow">
    <path d="M0 1.75C0 .784.784 0 1.75 0h3.5C6.216 0 7 .784 7 1.75v3.5A1.75 1.75 0 0 1 5.25 7H4v4a1 1 0 0 0 1 1h4v-1.25C9 9.784 9.784 9 10.75 9h3.5c.966 0 1.75.784 1.75 1.75v3.5A1.75 1.75 0 0 1 14.25 16h-3.5A1.75 1.75 0 0 1 9 14.25v-.75H5A2.5 2.5 0 0 1 2.5 11V7h-.75A1.75 1.75 0 0 1 0 5.25Zm1.75-.25a.25.25 0 0 0-.25.25v3.5c0 .138.112.25.25.25h3.5a.25.25 0 0 0 .25-.25v-3.5a.25.25 0 0 0-.25-.25Zm9 9a.25.25 0 0 0-.25.25v3.5c0 .138.112.25.25.25h3.5a.25.25 0 0 0 .25-.25v-3.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="book-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-book">
    <path d="M0 1.75A.75.75 0 0 1 .75 1h4.253c1.227 0 2.317.59 3 1.501A3.743 3.743 0 0 1 11.006 1h4.245a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-4.507a2.25 2.25 0 0 0-1.591.659l-.622.621a.75.75 0 0 1-1.06 0l-.622-.621A2.25 2.25 0 0 0 5.258 13H.75a.75.75 0 0 1-.75-.75Zm7.251 10.324.004-5.073-.002-2.253A2.25 2.25 0 0 0 5.003 2.5H1.5v9h3.757a3.75 3.75 0 0 1 1.994.574ZM8.755 4.75l-.004 7.322a3.752 3.752 0 0 1 1.992-.572H14.5v-9h-3.495a2.25 2.25 0 0 0-2.25 2.25Z"></path>
</svg>
</template>

<template id="code-review-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code-review">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 13H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25v-8.5C0 1.784.784 1 1.75 1ZM1.5 2.75v8.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-8.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Zm5.28 1.72a.75.75 0 0 1 0 1.06L5.31 7l1.47 1.47a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018l-2-2a.75.75 0 0 1 0-1.06l2-2a.75.75 0 0 1 1.06 0Zm2.44 0a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L10.69 7 9.22 5.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</template>

<template id="codespaces-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-codespaces">
    <path d="M0 11.25c0-.966.784-1.75 1.75-1.75h12.5c.966 0 1.75.784 1.75 1.75v3A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25Zm2-9.5C2 .784 2.784 0 3.75 0h8.5C13.216 0 14 .784 14 1.75v5a1.75 1.75 0 0 1-1.75 1.75h-8.5A1.75 1.75 0 0 1 2 6.75Zm1.75-.25a.25.25 0 0 0-.25.25v5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-5a.25.25 0 0 0-.25-.25Zm-2 9.5a.25.25 0 0 0-.25.25v3c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-3a.25.25 0 0 0-.25-.25Z"></path><path d="M7 12.75a.75.75 0 0 1 .75-.75h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1-.75-.75Zm-4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1-.75-.75Z"></path>
</svg>
</template>

<template id="comment-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-comment">
    <path d="M1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 13.25 12H9.06l-2.573 2.573A1.458 1.458 0 0 1 4 13.543V12H2.75A1.75 1.75 0 0 1 1 10.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h4.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="comment-discussion-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-comment-discussion">
    <path d="M1.75 1h8.5c.966 0 1.75.784 1.75 1.75v5.5A1.75 1.75 0 0 1 10.25 10H7.061l-2.574 2.573A1.458 1.458 0 0 1 2 11.543V10h-.25A1.75 1.75 0 0 1 0 8.25v-5.5C0 1.784.784 1 1.75 1ZM1.5 2.75v5.5c0 .138.112.25.25.25h1a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h3.5a.25.25 0 0 0 .25-.25v-5.5a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25Zm13 2a.25.25 0 0 0-.25-.25h-.5a.75.75 0 0 1 0-1.5h.5c.966 0 1.75.784 1.75 1.75v5.5A1.75 1.75 0 0 1 14.25 12H14v1.543a1.458 1.458 0 0 1-2.487 1.03L9.22 12.28a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l2.22 2.22v-2.19a.75.75 0 0 1 .75-.75h1a.25.25 0 0 0 .25-.25Z"></path>
</svg>
</template>

<template id="organization-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-organization">
    <path d="M1.75 16A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0h8.5C11.216 0 12 .784 12 1.75v12.5c0 .085-.006.168-.018.25h2.268a.25.25 0 0 0 .25-.25V8.285a.25.25 0 0 0-.111-.208l-1.055-.703a.749.749 0 1 1 .832-1.248l1.055.703c.487.325.779.871.779 1.456v5.965A1.75 1.75 0 0 1 14.25 16h-3.5a.766.766 0 0 1-.197-.026c-.099.017-.2.026-.303.026h-3a.75.75 0 0 1-.75-.75V14h-1v1.25a.75.75 0 0 1-.75.75Zm-.25-1.75c0 .138.112.25.25.25H4v-1.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 .75.75v1.25h2.25a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25ZM3.75 6h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5ZM3 3.75A.75.75 0 0 1 3.75 3h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 3.75Zm4 3A.75.75 0 0 1 7.75 6h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 7 6.75ZM7.75 3h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5ZM3 9.75A.75.75 0 0 1 3.75 9h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 9.75ZM7.75 9h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5Z"></path>
</svg>
</template>

<template id="rocket-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-rocket">
    <path d="M14.064 0h.186C15.216 0 16 .784 16 1.75v.186a8.752 8.752 0 0 1-2.564 6.186l-.458.459c-.314.314-.641.616-.979.904v3.207c0 .608-.315 1.172-.833 1.49l-2.774 1.707a.749.749 0 0 1-1.11-.418l-.954-3.102a1.214 1.214 0 0 1-.145-.125L3.754 9.816a1.218 1.218 0 0 1-.124-.145L.528 8.717a.749.749 0 0 1-.418-1.11l1.71-2.774A1.748 1.748 0 0 1 3.31 4h3.204c.288-.338.59-.665.904-.979l.459-.458A8.749 8.749 0 0 1 14.064 0ZM8.938 3.623h-.002l-.458.458c-.76.76-1.437 1.598-2.02 2.5l-1.5 2.317 2.143 2.143 2.317-1.5c.902-.583 1.74-1.26 2.499-2.02l.459-.458a7.25 7.25 0 0 0 2.123-5.127V1.75a.25.25 0 0 0-.25-.25h-.186a7.249 7.249 0 0 0-5.125 2.123ZM3.56 14.56c-.732.732-2.334 1.045-3.005 1.148a.234.234 0 0 1-.201-.064.234.234 0 0 1-.064-.201c.103-.671.416-2.273 1.15-3.003a1.502 1.502 0 1 1 2.12 2.12Zm6.94-3.935c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 0 0 .119-.213ZM3.678 8.116 5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 0 0-.213.119l-1.2 1.95ZM12 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
</template>

<template id="shield-check-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield-check">
    <path d="m8.533.133 5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667l5.25-1.68a1.748 1.748 0 0 1 1.066 0Zm-.61 1.429.001.001-5.25 1.68a.251.251 0 0 0-.174.237V7c0 1.36.275 2.666 1.057 3.859.784 1.194 2.121 2.342 4.366 3.298a.196.196 0 0 0 .154 0c2.245-.957 3.582-2.103 4.366-3.297C13.225 9.666 13.5 8.358 13.5 7V3.48a.25.25 0 0 0-.174-.238l-5.25-1.68a.25.25 0 0 0-.153 0ZM11.28 6.28l-3.5 3.5a.75.75 0 0 1-1.06 0l-1.5-1.5a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l.97.97 2.97-2.97a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
</template>

<template id="heart-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart">
    <path d="m8 14.25.345.666a.75.75 0 0 1-.69 0l-.008-.004-.018-.01a7.152 7.152 0 0 1-.31-.17 22.055 22.055 0 0 1-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.066 22.066 0 0 1-3.744 2.584l-.018.01-.006.003h-.002ZM4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.58 20.58 0 0 0 8 13.393a20.58 20.58 0 0 0 3.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.749.749 0 0 1-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5Z"></path>
</svg>
</template>

<template id="server-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-server">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v4c0 .372-.116.717-.314 1 .198.283.314.628.314 1v4a1.75 1.75 0 0 1-1.75 1.75H1.75A1.75 1.75 0 0 1 0 12.75v-4c0-.358.109-.707.314-1a1.739 1.739 0 0 1-.314-1v-4C0 1.784.784 1 1.75 1ZM1.5 2.75v4c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Zm.25 5.75a.25.25 0 0 0-.25.25v4c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25ZM7 4.75A.75.75 0 0 1 7.75 4h4.5a.75.75 0 0 1 0 1.5h-4.5A.75.75 0 0 1 7 4.75ZM7.75 10h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM3 4.75A.75.75 0 0 1 3.75 4h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 4.75ZM3.75 10h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5Z"></path>
</svg>
</template>

<template id="globe-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-globe">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM5.78 8.75a9.64 9.64 0 0 0 1.363 4.177c.255.426.542.832.857 1.215.245-.296.551-.705.857-1.215A9.64 9.64 0 0 0 10.22 8.75Zm4.44-1.5a9.64 9.64 0 0 0-1.363-4.177c-.307-.51-.612-.919-.857-1.215a9.927 9.927 0 0 0-.857 1.215A9.64 9.64 0 0 0 5.78 7.25Zm-5.944 1.5H1.543a6.507 6.507 0 0 0 4.666 5.5c-.123-.181-.24-.365-.352-.552-.715-1.192-1.437-2.874-1.581-4.948Zm-2.733-1.5h2.733c.144-2.074.866-3.756 1.58-4.948.12-.197.237-.381.353-.552a6.507 6.507 0 0 0-4.666 5.5Zm10.181 1.5c-.144 2.074-.866 3.756-1.58 4.948-.12.197-.237.381-.353.552a6.507 6.507 0 0 0 4.666-5.5Zm2.733-1.5a6.507 6.507 0 0 0-4.666-5.5c.123.181.24.365.353.552.714 1.192 1.436 2.874 1.58 4.948Z"></path>
</svg>
</template>

<template id="issue-opened-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
</template>

<template id="device-mobile-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-mobile">
    <path d="M3.75 0h8.5C13.216 0 14 .784 14 1.75v12.5A1.75 1.75 0 0 1 12.25 16h-8.5A1.75 1.75 0 0 1 2 14.25V1.75C2 .784 2.784 0 3.75 0ZM3.5 1.75v12.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25ZM8 13a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
</svg>
</template>

<template id="package-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-package">
    <path d="m8.878.392 5.25 3.045c.54.314.872.89.872 1.514v6.098a1.75 1.75 0 0 1-.872 1.514l-5.25 3.045a1.75 1.75 0 0 1-1.756 0l-5.25-3.045A1.75 1.75 0 0 1 1 11.049V4.951c0-.624.332-1.201.872-1.514L7.122.392a1.75 1.75 0 0 1 1.756 0ZM7.875 1.69l-4.63 2.685L8 7.133l4.755-2.758-4.63-2.685a.248.248 0 0 0-.25 0ZM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432Zm6.25 8.271 4.625-2.683a.25.25 0 0 0 .125-.216V5.677L8.75 8.432Z"></path>
</svg>
</template>

<template id="credit-card-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-credit-card">
    <path d="M10.75 9a.75.75 0 0 0 0 1.5h1.5a.75.75 0 0 0 0-1.5h-1.5Z"></path><path d="M0 3.75C0 2.784.784 2 1.75 2h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 14H1.75A1.75 1.75 0 0 1 0 12.25ZM14.5 6.5h-13v5.75c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25Zm0-2.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25V5h13Z"></path>
</svg>
</template>

<template id="play-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
</template>

<template id="gift-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-gift">
    <path d="M2 2.75A2.75 2.75 0 0 1 4.75 0c.983 0 1.873.42 2.57 1.232.268.318.497.668.68 1.042.183-.375.411-.725.68-1.044C9.376.42 10.266 0 11.25 0a2.75 2.75 0 0 1 2.45 4h.55c.966 0 1.75.784 1.75 1.75v2c0 .698-.409 1.301-1 1.582v4.918A1.75 1.75 0 0 1 13.25 16H2.75A1.75 1.75 0 0 1 1 14.25V9.332C.409 9.05 0 8.448 0 7.75v-2C0 4.784.784 4 1.75 4h.55c-.192-.375-.3-.8-.3-1.25ZM7.25 9.5H2.5v4.75c0 .138.112.25.25.25h4.5Zm1.5 0v5h4.5a.25.25 0 0 0 .25-.25V9.5Zm0-4V8h5.5a.25.25 0 0 0 .25-.25v-2a.25.25 0 0 0-.25-.25Zm-7 0a.25.25 0 0 0-.25.25v2c0 .138.112.25.25.25h5.5V5.5h-5.5Zm3-4a1.25 1.25 0 0 0 0 2.5h2.309c-.233-.818-.542-1.401-.878-1.793-.43-.502-.915-.707-1.431-.707ZM8.941 4h2.309a1.25 1.25 0 0 0 0-2.5c-.516 0-1 .205-1.43.707-.337.392-.646.975-.879 1.793Z"></path>
</svg>
</template>

<template id="code-square-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code-square">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25Zm7.47 3.97a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L10.69 8 9.22 6.53a.75.75 0 0 1 0-1.06ZM6.78 6.53 5.31 8l1.47 1.47a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215l-2-2a.75.75 0 0 1 0-1.06l2-2a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
</template>

<template id="device-desktop-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-desktop">
    <path d="M14.25 1c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 14.25 12h-3.727c.099 1.041.52 1.872 1.292 2.757A.752.752 0 0 1 11.25 16h-6.5a.75.75 0 0 1-.565-1.243c.772-.885 1.192-1.716 1.292-2.757H1.75A1.75 1.75 0 0 1 0 10.25v-7.5C0 1.784.784 1 1.75 1ZM1.75 2.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25ZM9.018 12H6.982a5.72 5.72 0 0 1-.765 2.5h3.566a5.72 5.72 0 0 1-.765-2.5Z"></path>
</svg>
</template>

        <div class="position-relative">
                <ul
                  role="listbox"
                  class="ActionListWrap QueryBuilder-ListWrap"
                  aria-label="Suggestions"
                  data-action="
                    combobox-commit:query-builder#comboboxCommit
                    mousedown:query-builder#resultsMousedown
                  "
                  data-target="query-builder.resultsList"
                  data-persist-list=false
                  id="query-builder-test-results"
                ></ul>
        </div>
      <div class="FormControl-inlineValidation" id="validation-ded66691-9904-4931-8736-626956accc6f" hidden="hidden">
        <span class="FormControl-inlineValidation--visual">
          <svg aria-hidden="true" height="12" viewBox="0 0 12 12" version="1.1" width="12" data-view-component="true" class="octicon octicon-alert-fill">
    <path d="M4.855.708c.5-.896 1.79-.896 2.29 0l4.675 8.351a1.312 1.312 0 0 1-1.146 1.954H1.33A1.313 1.313 0 0 1 .183 9.058ZM7 7V3H5v4Zm-1 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"></path>
</svg>
        </span>
        <span></span>
</div>    </div>
    <div data-target="query-builder.screenReaderFeedback" aria-live="polite" aria-atomic="true" class="sr-only"></div>
</query-builder></form>
          <div class="d-flex flex-row color-fg-muted px-3 text-small color-bg-default search-feedback-prompt">
            <a target="_blank" href="https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax" data-view-component="true" class="Link color-fg-accent text-normal ml-2">
              Search syntax tips
</a>            <div class="d-flex flex-1"></div>
          </div>
        </div>
</div>

    </div>
</modal-dialog></div>
  </div>
  <div data-action="click:qbsearch-input#retract" class="dark-backdrop position-fixed" hidden data-target="qbsearch-input.darkBackdrop"></div>
  <div class="color-fg-default">
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true" class="Overlay Overlay-whenNarrow Overlay--size-medium Overlay--motion-scaleFade">
    <div data-view-component="true" class="Overlay-header">
  <div class="Overlay-headerContentWrap">
    <div class="Overlay-titleWrap">
      <h1 class="Overlay-title " id="feedback-dialog-title">
        Provide feedback
      </h1>
        
    </div>
    <div class="Overlay-actionWrap">
      <button data-close-dialog-id="feedback-dialog" aria-label="Close" type="button" data-view-component="true" class="close-button Overlay-closeButton"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
    </div>
  </div>
  
</div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        <div data-view-component="true" class="Overlay-body">        <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="code-search-feedback-form" data-turbo="false" action="/search/feedback" accept-charset="UTF-8" method="post"><input type="hidden" data-csrf="true" name="authenticity_token" value="hRh3zrjL+kQvp833ARK0aRnjcP414SjK8q6WV0te2mMCS9M4VEKRvrQW48FRmKWwet4oRIeYeAFmKaONQeDuqw==" />
          <p>We read every piece of feedback, and take your input very seriously.</p>
          <textarea name="feedback" class="form-control width-full mb-2" style="height: 120px" id="feedback"></textarea>
          <input name="include_email" id="include_email" aria-label="Include my email address so I can be contacted" class="form-control mr-2" type="checkbox">
          <label for="include_email" style="font-weight: normal">Include my email address so I can be contacted</label>
</form></div>
      </scrollable-region>
      <div data-view-component="true" class="Overlay-footer Overlay-footer--alignEnd">          <button data-close-dialog-id="feedback-dialog" type="button" data-view-component="true" class="btn">    Cancel
</button>
          <button form="code-search-feedback-form" data-action="click:qbsearch-input#submitFeedback" type="submit" data-view-component="true" class="btn-primary btn">    Submit feedback
</button>
</div>
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true" class="Overlay Overlay-whenNarrow Overlay--size-medium Overlay--motion-scaleFade">
    <div data-view-component="true" class="Overlay-header Overlay-header--divided">
  <div class="Overlay-headerContentWrap">
    <div class="Overlay-titleWrap">
      <h1 class="Overlay-title " id="custom-scopes-dialog-title">
        Saved searches
      </h1>
        <h2 id="custom-scopes-dialog-description" class="Overlay-description">Use saved searches to filter your results more quickly</h2>
    </div>
    <div class="Overlay-actionWrap">
      <button data-close-dialog-id="custom-scopes-dialog" aria-label="Close" type="button" data-view-component="true" class="close-button Overlay-closeButton"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
    </div>
  </div>
  
</div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        <div data-view-component="true" class="Overlay-body">        <div data-target="custom-scopes.customScopesModalDialogFlash"></div>

        <div hidden class="create-custom-scope-form" data-target="custom-scopes.createCustomScopeForm">
        <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="custom-scopes-dialog-form" data-turbo="false" action="/search/custom_scopes" accept-charset="UTF-8" method="post"><input type="hidden" data-csrf="true" name="authenticity_token" value="+I8Kpl/HJ4IyQjnJj2Y05s22sJJ/bPlNogW/0gSUohtA5l7EBoKfYQexYzf3LpHmD5LGhlhfLqcJ+XSrYSIyiQ==" />
          <div data-target="custom-scopes.customScopesModalDialogFlash"></div>

          <input type="hidden" id="custom_scope_id" name="custom_scope_id" data-target="custom-scopes.customScopesIdField">

          <div class="form-group">
            <label for="custom_scope_name">Name</label>
            <auto-check src="/search/custom_scopes/check_name" required>
              <input
                type="text"
                name="custom_scope_name"
                id="custom_scope_name"
                data-target="custom-scopes.customScopesNameField"
                class="form-control"
                autocomplete="off"
                placeholder="github-ruby"
                required
                maxlength="50">
              <input type="hidden" data-csrf="true" value="YBNyae0/VncRXcJsUu45ajxOI6es47XvlOwDO65VWzedfyfo4DoZAwZ7tA9ju7vGMXWJsLn6cxhltVSGGOSJFQ==" />
            </auto-check>
          </div>

          <div class="form-group">
            <label for="custom_scope_query">Query</label>
            <input
              type="text"
              name="custom_scope_query"
              id="custom_scope_query"
              data-target="custom-scopes.customScopesQueryField"
              class="form-control"
              autocomplete="off"
              placeholder="(repo:mona/a OR repo:mona/b) AND lang:python"
              required
              maxlength="500">
          </div>

          <p class="text-small color-fg-muted">
            To see all available qualifiers, see our <a class="Link--inTextBlock" href="https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax">documentation</a>.
          </p>
</form>        </div>

        <div data-target="custom-scopes.manageCustomScopesForm">
          <div data-target="custom-scopes.list"></div>
        </div>

</div>
      </scrollable-region>
      <div data-view-component="true" class="Overlay-footer Overlay-footer--alignEnd Overlay-footer--divided">          <button data-action="click:custom-scopes#customScopesCancel" type="button" data-view-component="true" class="btn">    Cancel
</button>
          <button form="custom-scopes-dialog-form" data-action="click:custom-scopes#customScopesSubmit" data-target="custom-scopes.customScopesSubmitButton" type="submit" data-view-component="true" class="btn-primary btn">    Create saved search
</button>
</div>
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input><input type="hidden" data-csrf="true" class="js-data-jump-to-suggestions-path-csrf" value="6jWLKm6I5vFnb4ZcEi5aXIyGCfwhcbTVNtju2LIVXjvW6vwLQj8kg+B5azadr4nczpBkri0Jiliu+64VThW+1Q==" />


          <div class="position-relative mr-lg-3 d-lg-inline-block">
            <a href="/login?return_to=https%3A%2F%2Fgithub.com%2Fkaratelabs%2Fkarate"
              class="HeaderMenu-link HeaderMenu-link--sign-in flex-shrink-0 no-underline d-block d-lg-inline-block border border-lg-0 rounded rounded-lg-0 p-2 p-lg-0"
              data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/karatelabs/karate&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c7a5337177ec406edef775627a19b1908a2907a9d63d3bd7f12140259452918a"
              data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">
              Sign in
            </a>
          </div>

            <a href="/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E&amp;source=header-repo&amp;source_repo=karatelabs%2Fkarate"
              class="HeaderMenu-link HeaderMenu-link--sign-up flex-shrink-0 d-none d-lg-inline-block no-underline border color-border-default rounded px-2 py-1"
              data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/karatelabs/karate&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c7a5337177ec406edef775627a19b1908a2907a9d63d3bd7f12140259452918a"
              data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/&lt;user-name&gt;/&lt;repo-name&gt;;ref_cta:Sign up;ref_loc:header logged out&quot;}"
            >
              Sign up
            </a>
        </div>
      </div>
    </div>
  </div>
</header>

      <div hidden="hidden" data-view-component="true" class="js-stale-session-flash stale-session-flash flash flash-warn flash-full mb-3">
  
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        <span class="js-stale-session-flash-signed-in" hidden>You signed in with another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>
        <span class="js-stale-session-flash-signed-out" hidden>You signed out in another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>
        <span class="js-stale-session-flash-switched" hidden>You switched accounts on another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>

    <button id="icon-button-89539477-8dcb-4a48-a840-c1d1893a7b84" aria-labelledby="tooltip-72dfac8a-2292-4a08-be1d-c0c24d6325b5" type="button" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium flash-close js-flash-close">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x Button-visual">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</button><tool-tip id="tooltip-72dfac8a-2292-4a08-be1d-c0c24d6325b5" for="icon-button-89539477-8dcb-4a48-a840-c1d1893a7b84" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Dismiss alert</tool-tip>


  
</div>
    </div>

  <div id="start-of-content" class="show-on-focus"></div>








    <div id="js-flash-container" class="flash-container" data-turbo-replace>





  <template class="js-flash-template">
    
<div class="flash flash-full   {{ className }}">
  <div >
    <button autofocus class="flash-close js-flash-close" type="button" aria-label="Dismiss this message">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    <div aria-atomic="true" role="alert" class="js-flash-alert">
      
      <div>{{ message }}</div>

    </div>
  </div>
</div>
  </template>
</div>


    
    <include-fragment class="js-notification-shelf-include-fragment" data-base-src="https://github.com/notifications/beta/shelf"></include-fragment>





  <div
    class="application-main "
    data-commit-hovercards-enabled
    data-discussion-hovercards-enabled
    data-issue-and-pr-hovercards-enabled
  >
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <main id="js-repo-pjax-container" >
      
  





    
    

    






  
  <div id="repository-container-header"  class="pt-3 hide-full-screen" style="background-color: var(--page-header-bgColor, var(--color-page-header-bg));" data-turbo-replace>

      <div class="d-flex flex-wrap flex-justify-end mb-3  px-3 px-md-4 px-lg-5" style="gap: 1rem;">

        <div class="flex-auto min-width-0 width-fit mr-3">
            
  <div class=" d-flex flex-wrap flex-items-center wb-break-word f3 text-normal">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo color-fg-muted mr-2">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
    
    <span class="author flex-self-stretch" itemprop="author">
      <a class="url fn" rel="author" data-hovercard-type="organization" data-hovercard-url="/orgs/karatelabs/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/karatelabs">
        karatelabs
</a>    </span>
    <span class="mx-1 flex-self-stretch color-fg-muted">/</span>
    <strong itemprop="name" class="mr-2 flex-self-stretch">
      <a data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/karatelabs/karate">karate</a>
    </strong>

    <span></span><span class="Label Label--secondary v-align-middle mr-1">Public</span>
  </div>


        </div>

        <div id="repository-details-container" data-turbo-replace>
            <ul class="pagehead-actions flex-shrink-0 d-none d-md-inline" style="padding: 2px 0;">
    
        <li>
          <include-fragment src="/karatelabs/karate/sponsor_button"></include-fragment>
        </li>

      

  <li>
            <a href="/login?return_to=%2Fkaratelabs%2Fkarate" rel="nofollow" id="repository-details-watch-button" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;notification subscription menu watch&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/karatelabs/karate&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="ea5918e256b6015120498dd9ebe63976c2fa6153689e15208ba356dcf30f505a" aria-label="You must be signed in to change notification settings" data-view-component="true" class="btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bell mr-2">
    <path d="M8 16a2 2 0 0 0 1.985-1.75c.017-.137-.097-.25-.235-.25h-3.5c-.138 0-.252.113-.235.25A2 2 0 0 0 8 16ZM3 5a5 5 0 0 1 10 0v2.947c0 .05.015.098.042.139l1.703 2.555A1.519 1.519 0 0 1 13.482 13H2.518a1.516 1.516 0 0 1-1.263-2.36l1.703-2.554A.255.255 0 0 0 3 7.947Zm5-3.5A3.5 3.5 0 0 0 4.5 5v2.947c0 .346-.102.683-.294.97l-1.703 2.556a.017.017 0 0 0-.003.01l.001.006c0 .002.002.004.004.006l.006.004.007.001h10.964l.007-.001.006-.004.004-.006.001-.007a.017.017 0 0 0-.003-.01l-1.703-2.554a1.745 1.745 0 0 1-.294-.97V5A3.5 3.5 0 0 0 8 1.5Z"></path>
</svg>Notifications
</a>    <tool-tip id="tooltip-81a2c325-fcd0-42b6-a83e-97af589c551c" for="repository-details-watch-button" popover="manual" data-direction="s" data-type="description" data-view-component="true" class="sr-only position-absolute">You must be signed in to change notification settings</tool-tip>

  </li>

  <li>
          <a icon="repo-forked" id="fork-button" href="/login?return_to=%2Fkaratelabs%2Fkarate" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;repo details fork button&quot;,&quot;repository_id&quot;:81226206,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/karatelabs/karate&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="8dbccda9d14cc61222d3fb72c3d0de3e820e9732b9e75661fe984df0f58340c0" data-view-component="true" class="btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-2">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>Fork
    <span id="repo-network-counter" data-pjax-replace="true" data-turbo-replace="true" title="1,918" data-view-component="true" class="Counter">1.9k</span>
</a>
  </li>

  <li>
        <div data-view-component="true" class="BtnGroup d-flex">
        <a href="/login?return_to=%2Fkaratelabs%2Fkarate" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;star button&quot;,&quot;repository_id&quot;:81226206,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/karatelabs/karate&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="4f4e123e3e1a24c5e2bd440762558fcb30deef94770e1c6e42fe0035857da90d" aria-label="You must be signed in to star a repository" data-view-component="true" class="tooltipped tooltipped-s btn-sm btn BtnGroup-item">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star v-align-text-bottom d-inline-block mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg><span data-view-component="true" class="d-inline">
          Star
</span>          <span id="repo-stars-counter-star" aria-label="7949 users starred this repository" data-singular-suffix="user starred this repository" data-plural-suffix="users starred this repository" data-turbo-replace="true" title="7,949" data-view-component="true" class="Counter js-social-count">7.9k</span>
</a>        <button aria-label="You must be signed in to add this repository to a list" type="button" disabled="disabled" data-view-component="true" class="btn-sm btn BtnGroup-item px-2">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-triangle-down">
    <path d="m4.427 7.427 3.396 3.396a.25.25 0 0 0 .354 0l3.396-3.396A.25.25 0 0 0 11.396 7H4.604a.25.25 0 0 0-.177.427Z"></path>
</svg>
</button></div>
  </li>

    <li>
        

    </li>
</ul>

        </div>
      </div>

        <div id="responsive-meta-container" data-turbo-replace>
      <div class="d-block d-md-none mb-2 px-3 px-md-4 px-lg-5">
      <p class="f4 mb-3 ">
        Test Automation Made Simple
      </p>
      <div class="mb-2 d-flex flex-items-center Link--secondary">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link flex-shrink-0 mr-2">
    <path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path>
</svg>
        <span class="flex-auto min-width-0 css-truncate css-truncate-target width-fit">
          <a title="https://karatelabs.github.io/karate" role="link" target="_blank" class="text-bold" rel="noopener noreferrer" href="https://karatelabs.github.io/karate">karatelabs.github.io/karate</a>
        </span>
      </div>

    
      <h3 class="sr-only">License</h3>
  <div class="mb-2">
    <a href="/karatelabs/karate/blob/master/LICENSE"
      class="Link--muted"
      
      data-analytics-event="{&quot;category&quot;:&quot;Repository Overview&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;location:sidebar;file:license&quot;}"
    >
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-law mr-2">
    <path d="M8.75.75V2h.985c.304 0 .603.08.867.231l1.29.736c.038.022.08.033.124.033h2.234a.75.75 0 0 1 0 1.5h-.427l2.111 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.006.005-.01.01-.045.04c-.21.176-.441.327-.686.45C14.556 10.78 13.88 11 13 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L12.178 4.5h-.162c-.305 0-.604-.079-.868-.231l-1.29-.736a.245.245 0 0 0-.124-.033H8.75V13h2.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1 0-1.5h2.5V3.5h-.984a.245.245 0 0 0-.124.033l-1.289.737c-.265.15-.564.23-.869.23h-.162l2.112 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.016.015-.045.04c-.21.176-.441.327-.686.45C4.556 10.78 3.88 11 3 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L2.178 4.5H1.75a.75.75 0 0 1 0-1.5h2.234a.249.249 0 0 0 .125-.033l1.288-.737c.265-.15.564-.23.869-.23h.984V.75a.75.75 0 0 1 1.5 0Zm2.945 8.477c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L13 6.327Zm-10 0c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L3 6.327Z"></path>
</svg>
     MIT license
    </a>
  </div>


    <div class="mb-3">
        <a class="Link--secondary no-underline mr-3" href="/karatelabs/karate/stargazers">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star mr-1">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
          <span class="text-bold">7.9k</span>
          stars
</a>        <a class="Link--secondary no-underline mr-3" href="/karatelabs/karate/forks">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-1">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>
          <span class="text-bold">1.9k</span>
          forks
</a>          <a class="Link--secondary no-underline mr-3 d-inline-block" href="/karatelabs/karate/branches">
            <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-branch mr-1">
    <path d="M9.5 3.25a2.25 2.25 0 1 1 3 2.122V6A2.5 2.5 0 0 1 10 8.5H6a1 1 0 0 0-1 1v1.128a2.251 2.251 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.5 0v1.836A2.493 2.493 0 0 1 6 7h4a1 1 0 0 0 1-1v-.628A2.25 2.25 0 0 1 9.5 3.25Zm-6 0a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Zm8.25-.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5ZM4.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"></path>
</svg>
            <span>Branches</span>
</a>          <a class="Link--secondary no-underline d-inline-block" href="/karatelabs/karate/tags">
            <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-tag mr-1">
    <path d="M1 7.775V2.75C1 1.784 1.784 1 2.75 1h5.025c.464 0 .91.184 1.238.513l6.25 6.25a1.75 1.75 0 0 1 0 2.474l-5.026 5.026a1.75 1.75 0 0 1-2.474 0l-6.25-6.25A1.752 1.752 0 0 1 1 7.775Zm1.5 0c0 .066.026.13.073.177l6.25 6.25a.25.25 0 0 0 .354 0l5.025-5.025a.25.25 0 0 0 0-.354l-6.25-6.25a.25.25 0 0 0-.177-.073H2.75a.25.25 0 0 0-.25.25ZM6 5a1 1 0 1 1 0 2 1 1 0 0 1 0-2Z"></path>
</svg>
            <span>Tags</span>
</a>        <a class="Link--secondary no-underline d-inline-block" href="/karatelabs/karate/activity">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-pulse mr-1">
    <path d="M6 2c.306 0 .582.187.696.471L10 10.731l1.304-3.26A.751.751 0 0 1 12 7h3.25a.75.75 0 0 1 0 1.5h-2.742l-1.812 4.528a.751.751 0 0 1-1.392 0L6 4.77 4.696 8.03A.75.75 0 0 1 4 8.5H.75a.75.75 0 0 1 0-1.5h2.742l1.812-4.529A.751.751 0 0 1 6 2Z"></path>
</svg>
          <span>Activity</span>
</a>    </div>

      <div class="d-flex flex-wrap gap-2">
        <div class="flex-1">
            <div data-view-component="true" class="BtnGroup d-flex">
        <a href="/login?return_to=%2Fkaratelabs%2Fkarate" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;star button&quot;,&quot;repository_id&quot;:81226206,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/karatelabs/karate&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="4f4e123e3e1a24c5e2bd440762558fcb30deef94770e1c6e42fe0035857da90d" aria-label="You must be signed in to star a repository" data-view-component="true" class="tooltipped tooltipped-s btn-sm btn btn-block BtnGroup-item">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star v-align-text-bottom d-inline-block mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg><span data-view-component="true" class="d-inline">
          Star
</span>
</a>        <button aria-label="You must be signed in to add this repository to a list" type="button" disabled="disabled" data-view-component="true" class="btn-sm btn BtnGroup-item px-2">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-triangle-down">
    <path d="m4.427 7.427 3.396 3.396a.25.25 0 0 0 .354 0l3.396-3.396A.25.25 0 0 0 11.396 7H4.604a.25.25 0 0 0-.177.427Z"></path>
</svg>
</button></div>
        </div>
        <div class="flex-1">
                <a href="/login?return_to=%2Fkaratelabs%2Fkarate" rel="nofollow" id="files-overview-watch-button" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;notification subscription menu watch&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/karatelabs/karate&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="ea5918e256b6015120498dd9ebe63976c2fa6153689e15208ba356dcf30f505a" aria-label="You must be signed in to change notification settings" data-view-component="true" class="btn-sm btn btn-block">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bell mr-2">
    <path d="M8 16a2 2 0 0 0 1.985-1.75c.017-.137-.097-.25-.235-.25h-3.5c-.138 0-.252.113-.235.25A2 2 0 0 0 8 16ZM3 5a5 5 0 0 1 10 0v2.947c0 .05.015.098.042.139l1.703 2.555A1.519 1.519 0 0 1 13.482 13H2.518a1.516 1.516 0 0 1-1.263-2.36l1.703-2.554A.255.255 0 0 0 3 7.947Zm5-3.5A3.5 3.5 0 0 0 4.5 5v2.947c0 .346-.102.683-.294.97l-1.703 2.556a.017.017 0 0 0-.003.01l.001.006c0 .002.002.004.004.006l.006.004.007.001h10.964l.007-.001.006-.004.004-.006.001-.007a.017.017 0 0 0-.003-.01l-1.703-2.554a1.745 1.745 0 0 1-.294-.97V5A3.5 3.5 0 0 0 8 1.5Z"></path>
</svg>Notifications
</a>    <tool-tip id="tooltip-a7537fc2-f9ac-4284-b074-b6912cc50cb8" for="files-overview-watch-button" popover="manual" data-direction="s" data-type="description" data-view-component="true" class="sr-only position-absolute">You must be signed in to change notification settings</tool-tip>

        </div>
          <span>
            

          </span>
      </div>
  </div>

</div>


          <nav data-pjax="#js-repo-pjax-container" aria-label="Repository" data-view-component="true" class="js-repo-nav js-sidenav-container-pjax js-responsive-underlinenav overflow-hidden UnderlineNav px-3 px-md-4 px-lg-5">

  <ul data-view-component="true" class="UnderlineNav-body list-style-none">
      <li data-view-component="true" class="d-inline-flex">
  <a id="code-tab" href="/karatelabs/karate" data-tab-item="i0code-tab" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages repo_deployments repo_attestations /karatelabs/karate" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g c" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Code&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" aria-current="page" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item selected">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code UnderlineNav-octicon d-none d-sm-inline">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
        <span data-content="Code">Code</span>
          <span id="code-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="issues-tab" href="/karatelabs/karate/issues" data-tab-item="i1issues-tab" data-selected-links="repo_issues repo_labels repo_milestones /karatelabs/karate/issues /_view_fragments/issues/index/karatelabs/karate/layout" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g i" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Issues&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
        <span data-content="Issues">Issues</span>
          <span id="issues-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="61" data-view-component="true" class="Counter">61</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="pull-requests-tab" href="/karatelabs/karate/pulls" data-tab-item="i2pull-requests-tab" data-selected-links="repo_pulls checks /karatelabs/karate/pulls" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g p" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Pull requests&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-pull-request UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"></path>
</svg>
        <span data-content="Pull requests">Pull requests</span>
          <span id="pull-requests-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="4" data-view-component="true" class="Counter">4</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="actions-tab" href="/karatelabs/karate/actions" data-tab-item="i3actions-tab" data-selected-links="repo_actions /karatelabs/karate/actions" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g a" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Actions&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
        <span data-content="Actions">Actions</span>
          <span id="actions-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="projects-tab" href="/karatelabs/karate/projects" data-tab-item="i4projects-tab" data-selected-links="repo_projects new_repo_project repo_project /karatelabs/karate/projects" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g b" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Projects&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-table UnderlineNav-octicon d-none d-sm-inline">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25ZM6.5 6.5v8h7.75a.25.25 0 0 0 .25-.25V6.5Zm8-1.5V1.75a.25.25 0 0 0-.25-.25H6.5V5Zm-13 1.5v7.75c0 .138.112.25.25.25H5v-8ZM5 5V1.5H1.75a.25.25 0 0 0-.25.25V5Z"></path>
</svg>
        <span data-content="Projects">Projects</span>
          <span id="projects-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="1" data-view-component="true" class="Counter">1</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="wiki-tab" href="/karatelabs/karate/wiki" data-tab-item="i5wiki-tab" data-selected-links="repo_wiki /karatelabs/karate/wiki" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g w" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Wiki&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-book UnderlineNav-octicon d-none d-sm-inline">
    <path d="M0 1.75A.75.75 0 0 1 .75 1h4.253c1.227 0 2.317.59 3 1.501A3.743 3.743 0 0 1 11.006 1h4.245a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-4.507a2.25 2.25 0 0 0-1.591.659l-.622.621a.75.75 0 0 1-1.06 0l-.622-.621A2.25 2.25 0 0 0 5.258 13H.75a.75.75 0 0 1-.75-.75Zm7.251 10.324.004-5.073-.002-2.253A2.25 2.25 0 0 0 5.003 2.5H1.5v9h3.757a3.75 3.75 0 0 1 1.994.574ZM8.755 4.75l-.004 7.322a3.752 3.752 0 0 1 1.992-.572H14.5v-9h-3.495a2.25 2.25 0 0 0-2.25 2.25Z"></path>
</svg>
        <span data-content="Wiki">Wiki</span>
          <span id="wiki-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="security-tab" href="/karatelabs/karate/security" data-tab-item="i6security-tab" data-selected-links="security overview alerts policy token_scanning code_scanning /karatelabs/karate/security" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g s" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Security&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield UnderlineNav-octicon d-none d-sm-inline">
    <path d="M7.467.133a1.748 1.748 0 0 1 1.066 0l5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667Zm.61 1.429a.25.25 0 0 0-.153 0l-5.25 1.68a.25.25 0 0 0-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.196.196 0 0 0 .154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.251.251 0 0 0-.174-.237l-5.25-1.68ZM8.75 4.75v3a.75.75 0 0 1-1.5 0v-3a.75.75 0 0 1 1.5 0ZM9 10.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        <span data-content="Security">Security</span>
          <include-fragment src="/karatelabs/karate/security/overall-count" accept="text/fragment+html"></include-fragment>

    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="insights-tab" href="/karatelabs/karate/pulse" data-tab-item="i7insights-tab" data-selected-links="repo_graphs repo_contributors dependency_graph dependabot_updates pulse people community /karatelabs/karate/pulse" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Insights&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-graph UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
        <span data-content="Insights">Insights</span>
          <span id="insights-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
</ul>
    <div style="visibility:hidden;" data-view-component="true" class="UnderlineNav-actions js-responsive-underlinenav-overflow position-absolute pr-3 pr-md-4 pr-lg-5 right-0">      <action-menu data-select-variant="none" data-view-component="true">
  <focus-group direction="vertical" mnemonics retain>
    <button id="action-menu-96980876-9124-4f0a-865e-e4a4dfd18936-button" popovertarget="action-menu-96980876-9124-4f0a-865e-e4a4dfd18936-overlay" aria-controls="action-menu-96980876-9124-4f0a-865e-e4a4dfd18936-list" aria-haspopup="true" aria-labelledby="tooltip-5673876b-360b-4661-85c2-a2ada2e4665d" type="button" data-view-component="true" class="Button Button--iconOnly Button--secondary Button--medium UnderlineNav-item">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-kebab-horizontal Button-visual">
    <path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path>
</svg>
</button><tool-tip id="tooltip-5673876b-360b-4661-85c2-a2ada2e4665d" for="action-menu-96980876-9124-4f0a-865e-e4a4dfd18936-button" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Additional navigation options</tool-tip>


<anchored-position id="action-menu-96980876-9124-4f0a-865e-e4a4dfd18936-overlay" anchor="action-menu-96980876-9124-4f0a-865e-e4a4dfd18936-button" align="start" side="outside-bottom" anchor-offset="normal" popover="auto" data-view-component="true">
  <div data-view-component="true" class="Overlay Overlay--size-auto">
    
      <div data-view-component="true" class="Overlay-body Overlay-body--paddingNone">          <action-list>
  <div data-view-component="true">
    <ul aria-labelledby="action-menu-96980876-9124-4f0a-865e-e4a4dfd18936-button" id="action-menu-96980876-9124-4f0a-865e-e4a4dfd18936-list" role="menu" data-view-component="true" class="ActionListWrap--inset ActionListWrap">
        <li hidden="hidden" data-menu-item="i0code-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-e63c84bf-70f2-4db0-92f8-67010c4bedc3" href="/karatelabs/karate" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Code
</span></a>
  
</li>
        <li hidden="hidden" data-menu-item="i1issues-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-a18e48f5-056d-4777-a3e0-87f856c965d0" href="/karatelabs/karate/issues" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Issues
</span></a>
  
</li>
        <li hidden="hidden" data-menu-item="i2pull-requests-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-13932730-e018-4d89-8d50-e7b67fb17e77" href="/karatelabs/karate/pulls" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-pull-request">
    <path d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Pull requests
</span></a>
  
</li>
        <li hidden="hidden" data-menu-item="i3actions-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-35fa0240-31a2-48bf-b679-b5f31e8f243b" href="/karatelabs/karate/actions" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Actions
</span></a>
  
</li>
        <li hidden="hidden" data-menu-item="i4projects-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-5de322ee-5d17-41f4-8d7e-704c992da43e" href="/karatelabs/karate/projects" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-table">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25ZM6.5 6.5v8h7.75a.25.25 0 0 0 .25-.25V6.5Zm8-1.5V1.75a.25.25 0 0 0-.25-.25H6.5V5Zm-13 1.5v7.75c0 .138.112.25.25.25H5v-8ZM5 5V1.5H1.75a.25.25 0 0 0-.25.25V5Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Projects
</span></a>
  
</li>
        <li hidden="hidden" data-menu-item="i5wiki-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-5388333a-2a84-4705-940e-d6870e75954a" href="/karatelabs/karate/wiki" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-book">
    <path d="M0 1.75A.75.75 0 0 1 .75 1h4.253c1.227 0 2.317.59 3 1.501A3.743 3.743 0 0 1 11.006 1h4.245a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-4.507a2.25 2.25 0 0 0-1.591.659l-.622.621a.75.75 0 0 1-1.06 0l-.622-.621A2.25 2.25 0 0 0 5.258 13H.75a.75.75 0 0 1-.75-.75Zm7.251 10.324.004-5.073-.002-2.253A2.25 2.25 0 0 0 5.003 2.5H1.5v9h3.757a3.75 3.75 0 0 1 1.994.574ZM8.755 4.75l-.004 7.322a3.752 3.752 0 0 1 1.992-.572H14.5v-9h-3.495a2.25 2.25 0 0 0-2.25 2.25Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Wiki
</span></a>
  
</li>
        <li hidden="hidden" data-menu-item="i6security-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-187be341-043d-42af-ac9e-382f4d4e2f30" href="/karatelabs/karate/security" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield">
    <path d="M7.467.133a1.748 1.748 0 0 1 1.066 0l5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667Zm.61 1.429a.25.25 0 0 0-.153 0l-5.25 1.68a.25.25 0 0 0-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.196.196 0 0 0 .154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.251.251 0 0 0-.174-.237l-5.25-1.68ZM8.75 4.75v3a.75.75 0 0 1-1.5 0v-3a.75.75 0 0 1 1.5 0ZM9 10.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Security
</span></a>
  
</li>
        <li hidden="hidden" data-menu-item="i7insights-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-ec02df70-10f5-4b0c-ba53-43c4d6abc67e" href="/karatelabs/karate/pulse" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-graph">
    <path d="M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Insights
</span></a>
  
</li>
</ul>    
</div></action-list>


</div>
      
</div></anchored-position>  </focus-group>
</action-menu></div>
</nav>

  </div>

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance" class="">
    <div id="repo-content-pjax-container" class="repository-content " >
    



    
      
  <h1 class='sr-only'>karatelabs/karate</h1>
  <div class="clearfix container-xl px-md-4 px-lg-5 px-3">
    <div>

  <div id="spoof-warning" class="mt-0 pb-3" hidden aria-hidden>
  <div data-view-component="true" class="flash flash-warn mt-0 clearfix">
  
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert float-left mt-1">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>

      <div class="overflow-hidden">This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.</div>


  
</div></div>

  <include-fragment src="/karatelabs/karate/spoofed_commit_check/e4c8cacb21218db76dd7890adfce4c4466d16640" data-test-selector="spoofed-commit-check"></include-fragment>

  <div style="max-width: 100%" data-view-component="true" class="Layout Layout--flowRow-until-md react-repos-overview-margin Layout--sidebarPosition-end Layout--sidebarPosition-flowRow-end">
  <div data-view-component="true" class="Layout-main">        <script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/react-lib-dc88c1a68b28.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_octicons-react_dist_index_esm_js-node_modules_primer_react_lib-es-541a38-2ad77ede4dad.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_Box_Box_js-5a335cbe71ad.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_FeatureFlags_FeatureFlags_js-node_modules_github_ca-9009bd-47065f21e9ac.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_Button_Button_js-618154c88198.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_TooltipV2_Tooltip_js-98aea6945770.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_node_modules_primer_octicons-react_dist_index_esm_mjs-dc98a76c65d6.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_ActionList_index_js-a2fe8fc7236e.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_TextInput_TextInput_js-57e9c5f82efe.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_ActionMenu_ActionMenu_js-node_modules_primer_react_-5b2420-3d111386e1c1.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_react-router-dom_dist_index_js-2b1dbeadb6d4.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_Link_Link_js-node_modules_primer_react_lib-esm_Rela-a903d7-17c01d44f123.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_UnderlineNav_index_js-68e5d02e2cf2.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_Flash_Flash_js-node_modules_primer_react_lib-esm_La-0046ca-f78267fddf9f.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_AvatarStack_AvatarStack_js-node_modules_primer_reac-b27144-74a13f323a4c.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_react_lib-esm_Button_LinkButton_js-node_modules_primer_react_lib--7365fc-85bd7451d145.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_react-core_create-browser-history_ts-ui_packages_safe-storage_safe-storage_ts-ui_-682c2c-44ed51a2083d.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_paths_index_ts-3271f4d81cab.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_ref-selector_RefSelector_tsx-84a0dce6bcb2.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_code-view-shared_hooks_use-canonical-object_ts-ui_packages_code-view-shared_hooks-5efa81-354e6a50d2b7.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_code-view-shared_hooks_use-file-page-payload_ts-ui_packages_code-view-shared_util-0109ca-fb536cc4ade2.js"></script>
<script crossorigin="anonymous" defer="defer" type="application/javascript" src="https://github.githubassets.com/assets/repos-overview-9d39f61fe6af.js"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/repos-overview.47cf64b9ae0677ccb350.module.css" />

<react-partial
  partial-name="repos-overview"
  data-ssr="true"
>
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{"initialPayload":{"allShortcutsEnabled":false,"path":"/","repo":{"id":81226206,"defaultBranch":"master","name":"karate","ownerLogin":"karatelabs","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2017-02-07T15:59:17.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/91312095?v=4","public":true,"private":false,"isOrgOwned":true},"currentUser":null,"refInfo":{"name":"master","listCacheKey":"v0:1717647900.0","canEdit":false,"refType":"branch","currentOid":"e4c8cacb21218db76dd7890adfce4c4466d16640"},"tree":{"items":[{"name":".github","path":".github","contentType":"directory"},{"name":"_includes","path":"_includes","contentType":"directory"},{"name":"examples","path":"examples","contentType":"directory"},{"name":"karate-archetype","path":"karate-archetype","contentType":"directory"},{"name":"karate-core","path":"karate-core","contentType":"directory"},{"name":"karate-demo","path":"karate-demo","contentType":"directory"},{"name":"karate-docker","path":"karate-docker","contentType":"directory"},{"name":"karate-e2e-tests","path":"karate-e2e-tests","contentType":"directory"},{"name":"karate-gatling","path":"karate-gatling","contentType":"directory"},{"name":"karate-junit5","path":"karate-junit5","contentType":"directory"},{"name":"karate-netty","path":"karate-netty","contentType":"directory"},{"name":"karate-robot","path":"karate-robot","contentType":"directory"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"LICENSE","path":"LICENSE","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"SECURITY.md","path":"SECURITY.md","contentType":"file"},{"name":"_config.yml","path":"_config.yml","contentType":"file"},{"name":"build-docker.sh","path":"build-docker.sh","contentType":"file"},{"name":"jbang-catalog.json","path":"jbang-catalog.json","contentType":"file"},{"name":"pom.xml","path":"pom.xml","contentType":"file"}],"templateDirectorySuggestionUrl":null,"readme":null,"totalCount":20,"showBranchInfobar":false},"fileTree":null,"fileTreeProcessingTime":null,"foldersToFetch":[],"treeExpanded":false,"symbolsExpanded":false,"isOverview":true,"overview":{"banners":{"shouldRecommendReadme":false,"isPersonalRepo":false,"showUseActionBanner":false,"actionSlug":null,"actionId":null,"showProtectBranchBanner":false,"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_repo","releasePath":"/karatelabs/karate/releases/new?marketplace=true","showPublishActionBanner":false},"interactionLimitBanner":null,"showInvitationBanner":false,"inviterName":null},"codeButton":{"contactPath":"/contact","isEnterprise":false,"local":{"protocolInfo":{"httpAvailable":true,"sshAvailable":null,"httpUrl":"https://github.com/karatelabs/karate.git","showCloneWarning":null,"sshUrl":null,"sshCertificatesRequired":null,"sshCertificatesAvailable":null,"ghCliUrl":"gh repo clone karatelabs/karate","defaultProtocol":"http","newSshKeyUrl":"/settings/ssh/new","setProtocolPath":"/users/set_protocol"},"platformInfo":{"cloneUrl":"https://desktop.github.com","showVisualStudioCloneButton":false,"visualStudioCloneUrl":"https://windows.github.com","showXcodeCloneButton":false,"xcodeCloneUrl":"https://developer.apple.com","zipballUrl":"/karatelabs/karate/archive/refs/heads/master.zip"}},"newCodespacePath":"/codespaces/new?hide_repo_select=true\u0026repo=81226206"},"popovers":{"rename":null,"renamedParentRepo":null},"commitCount":"4,401","overviewFiles":[{"displayName":"README.md","repoName":"karate","refName":"master","path":"README.md","preferredFileType":"readme","tabName":"README","richText":"\u003carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003e\u003ctable\u003e\n  \u003ctbody\u003e\u003ctr\u003e \n    \u003cth\u003e\n      \u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\n          \u003ca href=\"https://github.com/karatelabs/karate/wiki/Get-Started\"\u003e⏩ \u003cbr\u003e Get Started\u003c/a\u003e\n      \u003c/h3\u003e\u003ca id=\"user-content-------------get-started------\" class=\"anchor\" aria-label=\"Permalink: ⏩  Get Started\" href=\"#------------get-started------\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n   \u003c/th\u003e\n   \u003ctd\u003e\n     Get started using VS Code, IntelliJ, Maven, Gradle, NPM, \u003cbr\u003e GitHub Codespaces, Docker or the command-line\n   \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n    \u003cth\u003e\n      \u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\n          \u003ca href=\"https://github.com/karatelabs/karate-examples/blob/main/README.md\"\u003e💡 \u003cbr\u003e Examples\u003c/a\u003e\n      \u003c/h3\u003e\u003ca id=\"user-content-------------examples------\" class=\"anchor\" aria-label=\"Permalink: 💡  Examples\" href=\"#------------examples------\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n   \u003c/th\u003e\n   \u003ctd\u003e\n     Examples and demos of integrations with other frameworks\n   \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e \n    \u003cth\u003e\n      \u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\n          \u003ca href=\"https://www.youtube.com/playlist?list=PLnONaB4tNFOkxwM3dOvXLXJstSg_wMJSs\" rel=\"nofollow\"\u003e📺 \u003cbr\u003e Kick Start Videos\u003c/a\u003e\n      \u003c/h3\u003e\u003ca id=\"user-content-------------kick-start-videos------\" class=\"anchor\" aria-label=\"Permalink: 📺  Kick Start Videos\" href=\"#------------kick-start-videos------\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n   \u003c/th\u003e\n   \u003ctd\u003e\n     Beginner-friendly step-by-step guides to starting from scratch\n   \u003c/td\u003e\n  \u003c/tr\u003e    \n\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eKarate\u003c/h1\u003e\u003ca id=\"user-content-karate\" class=\"anchor\" aria-label=\"Permalink: Karate\" href=\"#karate\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eTest Automation Made \u003ccode\u003eSimple.\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-test-automation-made-simple\" class=\"anchor\" aria-label=\"Permalink: Test Automation Made Simple.\" href=\"#test-automation-made-simple\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv dir=\"auto\"\u003e \n  \u003ca href=\"https://github.com/karatelabs/karate/wiki/Support\"\u003e\n    \u003cimg src=\"https://camo.githubusercontent.com/2a2eb2545ac3cb7105773f4347ccf34db4da685dc30df30980854f3c7bf1c21e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f737570706f72742d77696b692d7265642e737667\" data-canonical-src=\"https://img.shields.io/badge/support-wiki-red.svg\" style=\"max-width: 100%;\"\u003e\n  \u003c/a\u003e\n  \u003ca href=\"https://twitter.com/getkarate\" rel=\"nofollow\"\u003e\n    \u003cimg src=\"https://camo.githubusercontent.com/bbe7243e0dd4c90084042986fe332dccab5b5539a52f4151780012038f13362e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f406765746b61726174652d2d6c69676874677265793f6c6f676f3d74776974746572267374796c653d736f6369616c\" data-canonical-src=\"https://img.shields.io/badge/@getkarate--lightgrey?logo=twitter\u0026amp;style=social\" style=\"max-width: 100%;\"\u003e\n  \u003c/a\u003e\n  \u003ca href=\"https://github.com/karatelabs/karate/stargazers\"\u003e\n    \u003cimg src=\"https://camo.githubusercontent.com/3b298e987c15ffc43d10395a3b59639e589d4f19791eaf0e33306f9a1cbb018b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6b61726174656c6162732f6b61726174653f7374796c653d736f6369616c\" data-canonical-src=\"https://img.shields.io/github/stars/karatelabs/karate?style=social\" style=\"max-width: 100%;\"\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\u003cdiv dir=\"auto\"\u003e\n  \u003ca href=\"https://central.sonatype.com/namespace/com.intuit.karate\" rel=\"nofollow\"\u003e\n    \u003cimg src=\"https://camo.githubusercontent.com/1bdeaff0afcb6bd0d71029eccd155404e306689b555782894d533965edbd20d9/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e696e747569742e6b61726174652f6b61726174652d636f72652e737667\" data-canonical-src=\"https://img.shields.io/maven-central/v/com.intuit.karate/karate-core.svg\" style=\"max-width: 100%;\"\u003e\n  \u003c/a\u003e\n  \u003ca href=\"https://github.com/karatelabs/karate/actions?query=workflow%3Amaven-build\"\u003e\n    \u003cimg src=\"https://github.com/karatelabs/karate/actions/workflows/maven-build.yml/badge.svg?branch=develop\" style=\"max-width: 100%;\"\u003e\n  \u003c/a\u003e\n  \u003ca href=\"https://github.com/karatelabs/karate/releases\"\u003e\n    \u003cimg src=\"https://camo.githubusercontent.com/484cfa5b2433d603ae734ae7f1815b2e53e776f8cae374076ff7dd37c4b9cb48/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6b61726174656c6162732f6b61726174652e737667\" data-canonical-src=\"https://img.shields.io/github/release/karatelabs/karate.svg\" style=\"max-width: 100%;\"\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://karatelabs.io\" rel=\"nofollow\"\u003e\u003cimg src=\"/karatelabs/karate/raw/master/karate-core/src/test/resources/karate-map.jpg\" height=\"650\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eKarate is the only open-source tool to combine API test-automation, \u003ca href=\"/karatelabs/karate/blob/master/karate-netty\"\u003emocks\u003c/a\u003e, \u003ca href=\"/karatelabs/karate/blob/master/karate-gatling\"\u003eperformance-testing\u003c/a\u003e and even \u003ca href=\"/karatelabs/karate/blob/master/karate-core\"\u003eUI automation\u003c/a\u003e into a \u003cstrong\u003esingle\u003c/strong\u003e, \u003cem\u003eunified\u003c/em\u003e framework. The syntax is language-neutral, and easy for even non-programmers. Assertions and HTML reports are built-in, and you can run tests in parallel for speed.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThere's also a cross-platform \u003ca href=\"/karatelabs/karate/blob/master/karate-netty#standalone-jar\"\u003estand-alone executable\u003c/a\u003e for teams not comfortable with Java. You don't have to compile code. Just write tests in a \u003cstrong\u003esimple\u003c/strong\u003e, \u003cem\u003ereadable\u003c/em\u003e syntax - carefully designed for HTTP, JSON, GraphQL and XML. And you can mix API and \u003ca href=\"/karatelabs/karate/blob/master/karate-core\"\u003eUI test-automation\u003c/a\u003e within the same test script.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA \u003ca href=\"#java-api\"\u003eJava API\u003c/a\u003e also exists for those who prefer to programmatically integrate Karate's rich automation and data-assertion capabilities.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eHello World\u003c/h2\u003e\u003ca id=\"user-content-hello-world\" class=\"anchor\" aria-label=\"Permalink: Hello World\" href=\"#hello-world\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eFor API Testing\u003c/h3\u003e\u003ca id=\"user-content-for-api-testing\" class=\"anchor\" aria-label=\"Permalink: For API Testing\" href=\"#for-api-testing\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://gist.github.com/ptrthomas/d5a2d9e15d0b07e4f1b46f692a599f93\"\u003e\u003cimg src=\"/karatelabs/karate/raw/master/karate-demo/src/test/resources/karate-hello-world.jpg\" height=\"400\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eIf you are familiar with Cucumber / Gherkin, the \u003ca href=\"#cucumber-vs-karate\"\u003e\u003cem\u003ebig difference\u003c/em\u003e\u003c/a\u003e here is that you \u003cstrong\u003edon't\u003c/strong\u003e need to write extra \"glue\" code or Java \"step definitions\" !\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eIt is worth pointing out that JSON is a 'first class citizen' of the syntax such that you can express payload and expected data without having to use double-quotes and without having to enclose JSON field names in quotes.  There is no need to 'escape' characters like you would have had to in Java or other programming languages.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAnd you don't need to create additional Java classes for any of the payloads that you need to work with.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eIndex\u003c/h1\u003e\u003ca id=\"user-content-index\" class=\"anchor\" aria-label=\"Permalink: Index\" href=\"#index\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003ctable\u003e\n\u003ctbody\u003e\u003ctr\u003e\n  \u003cth\u003eStart\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#maven\"\u003eMaven\u003c/a\u003e \n    | \u003ca href=\"#gradle\"\u003eGradle\u003c/a\u003e\n    | \u003ca href=\"#quickstart\"\u003eQuickstart\u003c/a\u003e\n    | \u003ca href=\"https://github.com/karatelabs/karate/tree/master/karate-netty#standalone-jar\"\u003eStandalone Executable\u003c/a\u003e\n    | \u003ca href=\"#folder-structure\"\u003eNaming Conventions\u003c/a\u003e\n    | \u003ca href=\"#script-structure\"\u003eScript Structure\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eRun\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#junit-5\"\u003eJUnit 5\u003c/a\u003e\n    | \u003ca href=\"#command-line\"\u003eCommand Line\u003c/a\u003e\n    | \u003ca href=\"#ide-support\"\u003eIDE Support\u003c/a\u003e    \n    | \u003ca href=\"#tags\"\u003eTags / Grouping\u003c/a\u003e\n    | \u003ca href=\"#parallel-execution\"\u003eParallel Execution\u003c/a\u003e\n    | \u003ca href=\"#java-api\"\u003eJava API\u003c/a\u003e \n    | \u003ca href=\"#jbang\"\u003ejbang\u003c/a\u003e    \n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eReport\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#configuration\"\u003eConfiguration\u003c/a\u003e \n    | \u003ca href=\"#switching-the-environment\"\u003eEnvironment Switching\u003c/a\u003e\n    | \u003ca href=\"#test-reports\"\u003eReports\u003c/a\u003e\n    | \u003ca href=\"#junit-html-report\"\u003eJUnit HTML Report\u003c/a\u003e\n    | \u003ca href=\"#dry-run\"\u003eDry Run\u003c/a\u003e\n    | \u003ca href=\"#report-verbosity\"\u003eReport Verbosity\u003c/a\u003e\n    | \u003ca href=\"#logging\"\u003eLogging\u003c/a\u003e\n    | \u003ca href=\"#log-masking\"\u003eLog Masking\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eTypes\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#json\"\u003eJSON\u003c/a\u003e \n    | \u003ca href=\"#xml\"\u003eXML\u003c/a\u003e\n    | \u003ca href=\"#javascript-functions\"\u003eJavaScript Functions\u003c/a\u003e\n    | \u003ca href=\"#reading-files\"\u003eReading Files\u003c/a\u003e\n    | \u003ca href=\"#type-conversion\"\u003eType / String Conversion\u003c/a\u003e\n    | \u003ca href=\"#floats-and-integers\"\u003eFloats and Integers\u003c/a\u003e\n    | \u003ca href=\"#embedded-expressions\"\u003eEmbedded Expressions\u003c/a\u003e\n    | \u003ca href=\"#jsonpath-filters\"\u003eJsonPath\u003c/a\u003e\n    | \u003ca href=\"#xpath-functions\"\u003eXPath\u003c/a\u003e\n    | \u003ca href=\"#karate-expressions\"\u003eKarate Expressions\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eVariables\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#text\"\u003e\u003ccode\u003etext\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#table\"\u003e\u003ccode\u003etable\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#yaml\"\u003e\u003ccode\u003eyaml\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#csv\"\u003e\u003ccode\u003ecsv\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#type-string\"\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#type-json\"\u003e\u003ccode\u003ejson\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#type-xml\"\u003e\u003ccode\u003exml\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#type-xmlstring\"\u003e\u003ccode\u003exmlstring\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#type-bytes\"\u003e\u003ccode\u003ebytes\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#type-copy\"\u003e\u003ccode\u003ecopy\u003c/code\u003e\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eActions\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#assert\"\u003e\u003ccode\u003eassert\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#print\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#replace\"\u003e\u003ccode\u003ereplace\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#get\"\u003e\u003ccode\u003eget\u003c/code\u003e\u003c/a\u003e \n    | \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#remove\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e    \n    | \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e \n    | \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#listen\"\u003e\u003ccode\u003elisten\u003c/code\u003e\u003c/a\u003e \n    | \u003ca href=\"#doc\"\u003e\u003ccode\u003edoc\u003c/code\u003e\u003c/a\u003e    \n    | \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread()\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#compare-image\"\u003e\u003ccode\u003ecompareImage\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#the-karate-object\"\u003e\u003ccode\u003ekarate\u003c/code\u003e JS API\u003c/a\u003e  \n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eHTTP\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#url\"\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/a\u003e \n    | \u003ca href=\"#path\"\u003e\u003ccode\u003epath\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#request\"\u003e\u003ccode\u003erequest\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#method\"\u003e\u003ccode\u003emethod\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#status\"\u003e\u003ccode\u003estatus\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#soap-action\"\u003e\u003ccode\u003esoap action\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#retry-until\"\u003e\u003ccode\u003eretry until\u003c/code\u003e\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eRequest\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#param\"\u003e\u003ccode\u003eparam\u003c/code\u003e\u003c/a\u003e \n    | \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e    \n    | \u003ca href=\"#cookie\"\u003e\u003ccode\u003ecookie\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#form-field\"\u003e\u003ccode\u003eform field\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#multipart-file\"\u003e\u003ccode\u003emultipart file\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#multipart-field\"\u003e\u003ccode\u003emultipart field\u003c/code\u003e\u003c/a\u003e       \n    | \u003ca href=\"#multipart-entity\"\u003e\u003ccode\u003emultipart entity\u003c/code\u003e\u003c/a\u003e    \n    | \u003ca href=\"#params\"\u003e\u003ccode\u003eparams\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#headers\"\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#cookies\"\u003e\u003ccode\u003ecookies\u003c/code\u003e\u003c/a\u003e        \n    | \u003ca href=\"#form-fields\"\u003e\u003ccode\u003eform fields\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#multipart-files\"\u003e\u003ccode\u003emultipart files\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#multipart-fields\"\u003e\u003ccode\u003emultipart fields\u003c/code\u003e\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eResponse\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#responsebytes\"\u003e\u003ccode\u003eresponseBytes\u003c/code\u003e\u003c/a\u003e \n    | \u003ca href=\"#responsestatus\"\u003e\u003ccode\u003eresponseStatus\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#responseheaders\"\u003e\u003ccode\u003eresponseHeaders\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#responsecookies\"\u003e\u003ccode\u003eresponseCookies\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#responsetime\"\u003e\u003ccode\u003eresponseTime\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#responsetype\"\u003e\u003ccode\u003eresponseType\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#requesttimestamp\"\u003e\u003ccode\u003erequestTimeStamp\u003c/code\u003e\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eAssert\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#match\"\u003e\u003ccode\u003ematch ==\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match--not-equals\"\u003e\u003ccode\u003ematch !=\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match-contains\"\u003e\u003ccode\u003ematch contains\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match-contains-only\"\u003e\u003ccode\u003ematch contains only\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match-contains-any\"\u003e\u003ccode\u003ematch contains any\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match-contains-deep\"\u003e\u003ccode\u003ematch contains deep\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match-contains-only-deep\"\u003e\u003ccode\u003ematch contains only deep\u003c/code\u003e\u003c/a\u003e       \n    | \u003ca href=\"#not-contains\"\u003e\u003ccode\u003ematch !contains\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match-each\"\u003e\u003ccode\u003ematch each\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match-each-contains-deep\"\u003e\u003ccode\u003ematch each contains deep\u003c/code\u003e\u003c/a\u003e\n    | \u003ca href=\"#match-header\"\u003e\u003ccode\u003ematch header\u003c/code\u003e\u003c/a\u003e    \n    | \u003ca href=\"#fuzzy-matching\"\u003eFuzzy Matching\u003c/a\u003e\n    | \u003ca href=\"#schema-validation\"\u003eSchema Validation\u003c/a\u003e\n    | \u003ca href=\"#contains-short-cuts\"\u003e\u003ccode\u003econtains\u003c/code\u003e short-cuts\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eRe-Use\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#calling-other-feature-files\"\u003eCalling Other \u003ccode\u003e*.feature\u003c/code\u003e Files\u003c/a\u003e\n    | \u003ca href=\"#data-driven-features\"\u003eData Driven Features\u003c/a\u003e       \n    | \u003ca href=\"#calling-javascript-functions\"\u003eCalling JavaScript Functions\u003c/a\u003e\n    | \u003ca href=\"#calling-java\"\u003eCalling Java Code\u003c/a\u003e\n    | \u003ca href=\"#commonly-needed-utilities\"\u003eCommonly Needed Utilities\u003c/a\u003e\n    | \u003ca href=\"#data-driven-tests\"\u003eData Driven Scenarios\u003c/a\u003e    \n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eAdvanced\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"#polling\"\u003ePolling\u003c/a\u003e\n    | \u003ca href=\"#conditional-logic\"\u003eConditional Logic\u003c/a\u003e\n    | \u003ca href=\"#hooks\"\u003eBefore / After Hooks\u003c/a\u003e\n    | \u003ca href=\"#json-transforms\"\u003eJSON Transforms\u003c/a\u003e\n    | \u003ca href=\"#loops\"\u003eLoops\u003c/a\u003e\n    | \u003ca href=\"#http-basic-authentication-example\"\u003eHTTP Basic Auth\u003c/a\u003e \n    | \u003ca href=\"#http-header-manipulation\"\u003eHeader Manipulation\u003c/a\u003e \n    | \u003ca href=\"#text\"\u003eGraphQL\u003c/a\u003e\n    | \u003ca href=\"#async\"\u003eWebsockets / Async\u003c/a\u003e\n    | \u003ca href=\"#call-vs-read\"\u003e\u003ccode\u003ecall\u003c/code\u003e vs \u003ccode\u003eread()\u003c/code\u003e\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n  \u003cth\u003eMore\u003c/th\u003e\n  \u003ctd\u003e\n      \u003ca href=\"/karatelabs/karate/blob/master/karate-netty\"\u003eTest Doubles\u003c/a\u003e\n    | \u003ca href=\"/karatelabs/karate/blob/master/karate-gatling\"\u003ePerformance Testing\u003c/a\u003e\n    | \u003ca href=\"/karatelabs/karate/blob/master/karate-core\"\u003eUI Testing\u003c/a\u003e\n    | \u003ca href=\"/karatelabs/karate/blob/master/karate-robot\"\u003eDesktop Automation\u003c/a\u003e\n    | \u003ca href=\"https://github.com/karatelabs/karate/wiki/IDE-Support#vs-code-karate-plugin\"\u003eVS Code / Debug\u003c/a\u003e\n    | \u003ca href=\"#comparison-with-rest-assured\"\u003eKarate vs REST-assured\u003c/a\u003e\n    | \u003ca href=\"#cucumber-vs-karate\"\u003eKarate vs Cucumber\u003c/a\u003e\n    | \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003eExamples and Demos\u003c/a\u003e\n  \u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eFeatures\u003c/h1\u003e\u003ca id=\"user-content-features\" class=\"anchor\" aria-label=\"Permalink: Features\" href=\"#features\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eJava knowledge is not required and even non-programmers can write tests\u003c/li\u003e\n\u003cli\u003eScripts are plain-text, require no compilation step or IDE, and teams can collaborate using Git / standard SCM\u003c/li\u003e\n\u003cli\u003eBased on the popular Cucumber / Gherkin standard - with \u003ca href=\"https://github.com/karatelabs/karate/wiki/IDE-Support\"\u003eIDE support\u003c/a\u003e and syntax-coloring options\u003c/li\u003e\n\u003cli\u003eElegant \u003ca href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" rel=\"nofollow\"\u003eDSL\u003c/a\u003e syntax 'natively' supports JSON and XML - including \u003ca href=\"#set\"\u003eJsonPath\u003c/a\u003e and \u003ca href=\"#xpath-functions\"\u003eXPath\u003c/a\u003e expressions\u003c/li\u003e\n\u003cli\u003eEliminate the need for 'Java Beans' or 'helper code' to represent payloads and HTTP end-points, and \u003ca href=\"https://twitter.com/KarateDSL/status/873035687817117696\" rel=\"nofollow\"\u003edramatically reduce the lines of code\u003c/a\u003e needed for a test\u003c/li\u003e\n\u003cli\u003eIdeal for testing the highly dynamic responses from \u003ca href=\"http://graphql.org\" rel=\"nofollow\"\u003eGraphQL\u003c/a\u003e API-s because of Karate's built-in \u003ca href=\"#text\"\u003etext-manipulation\u003c/a\u003e and \u003ca href=\"https://github.com/json-path/JsonPath#path-examples\"\u003eJsonPath\u003c/a\u003e capabilities\u003c/li\u003e\n\u003cli\u003eTests are super-readable - as scenario data can be expressed in-line, in human-friendly \u003ca href=\"#json\"\u003eJSON\u003c/a\u003e, \u003ca href=\"#xml\"\u003eXML\u003c/a\u003e, Cucumber \u003ca href=\"#the-cucumber-way\"\u003eScenario\u003c/a\u003e Outline \u003ca href=\"#table\"\u003etables\u003c/a\u003e, or a \u003ca href=\"#set-multiple\"\u003epayload builder\u003c/a\u003e approach \u003ca href=\"https://gist.github.com/ptrthomas/d6beb17e92a43220d254af942e3ed3d9\"\u003eunique to Karate\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExpress expected results as readable, well-formed JSON or XML, and \u003ca href=\"#match\"\u003eassert in a single step\u003c/a\u003e that the entire response payload (no matter how complex or deeply nested) - is as expected\u003c/li\u003e\n\u003cli\u003eComprehensive \u003ca href=\"#fuzzy-matching\"\u003eassertion capabilities\u003c/a\u003e - and failures clearly report which data element (and path) is not as expected, for easy troubleshooting of even large payloads\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/karatelabs/karate/wiki/IDE-Support#vs-code-karate-plugin\"\u003eFully featured debugger\u003c/a\u003e that can step \u003cem\u003ebackwards\u003c/em\u003e and even \u003ca href=\"https://twitter.com/KarateDSL/status/1167533484560142336\" rel=\"nofollow\"\u003ere-play a step while editing it\u003c/a\u003e - a \u003cem\u003ehuge\u003c/em\u003e time-saver\u003c/li\u003e\n\u003cli\u003eSimpler and more \u003ca href=\"https://twitter.com/KarateDSL/status/878984854012022784\" rel=\"nofollow\"\u003epowerful alternative\u003c/a\u003e to JSON-schema for \u003ca href=\"#schema-validation\"\u003evalidating payload structure\u003c/a\u003e and format - that even supports \u003ca href=\"#referring-to-the-json-root\"\u003ecross-field\u003c/a\u003e / domain validation logic\u003c/li\u003e\n\u003cli\u003eScripts can \u003ca href=\"#calling-other-feature-files\"\u003ecall other scripts\u003c/a\u003e - which means that you can easily re-use and maintain authentication and 'set up' flows efficiently, across multiple tests\u003c/li\u003e\n\u003cli\u003eEmbedded JavaScript engine that allows you to build a library of \u003ca href=\"#calling-javascript-functions\"\u003ere-usable functions\u003c/a\u003e that suit your specific environment or organization\u003c/li\u003e\n\u003cli\u003eRe-use of payload-data and user-defined functions across tests is \u003ca href=\"#reading-files\"\u003eso easy\u003c/a\u003e - that it becomes a natural habit for the test-developer\u003c/li\u003e\n\u003cli\u003eBuilt-in support for \u003ca href=\"#switching-the-environment\"\u003eswitching configuration\u003c/a\u003e across different environments (e.g. dev, QA, pre-prod)\u003c/li\u003e\n\u003cli\u003eSupport for \u003ca href=\"#data-driven-tests\"\u003edata-driven tests\u003c/a\u003e and being able to \u003ca href=\"#tags\"\u003etag or group\u003c/a\u003e tests is built-in, no need to rely on an external framework\u003c/li\u003e\n\u003cli\u003eNative support for reading \u003ca href=\"#yaml\"\u003eYAML\u003c/a\u003e and even \u003ca href=\"#csv-files\"\u003eCSV\u003c/a\u003e files - and you can use them for data-driven tests\u003c/li\u003e\n\u003cli\u003eStandard Java / Maven project structure, and \u003ca href=\"#command-line\"\u003eseamless integration\u003c/a\u003e into CI / CD pipelines - and support for \u003ca href=\"#junit-5\"\u003eJUnit 5\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOption to use as a light-weight \u003ca href=\"https://github.com/karatelabs/karate/tree/master/karate-netty#standalone-jar\"\u003estand-alone executable\u003c/a\u003e - convenient for teams not comfortable with Java\u003c/li\u003e\n\u003cli\u003eMulti-threaded \u003ca href=\"#parallel-execution\"\u003eparallel execution\u003c/a\u003e, which is a huge time-saver, especially for integration and end-to-end tests\u003c/li\u003e\n\u003cli\u003eBuilt-in \u003ca href=\"#test-reports\"\u003etest-reports\u003c/a\u003e compatible with Cucumber so that you have the option of using third-party (open-source) maven-plugins for even \u003ca href=\"/karatelabs/karate/blob/master/karate-demo#example-report\"\u003ebetter-looking reports\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReports include HTTP request and response \u003ca href=\"#test-reports\"\u003elogs \u003cem\u003ein-line\u003c/em\u003e\u003c/a\u003e, which makes \u003ca href=\"https://twitter.com/KarateDSL/status/899671441221623809\" rel=\"nofollow\"\u003etroubleshooting\u003c/a\u003e and \u003ca href=\"https://twitter.com/KarateDSL/status/935029435140489216\" rel=\"nofollow\"\u003edebugging\u003c/a\u003e easier\u003c/li\u003e\n\u003cli\u003eEasily invoke JDK classes, Java libraries, or re-use custom Java code if needed, for \u003ca href=\"#calling-java\"\u003eultimate extensibility\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSimple plug-in system for \u003ca href=\"#http-basic-authentication-example\"\u003eauthentication\u003c/a\u003e and HTTP \u003ca href=\"#configure-headers\"\u003eheader management\u003c/a\u003e that will handle any complex, real-world scenario\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-core\"\u003eCross-browser Web UI automation\u003c/a\u003e so that you can test \u003cem\u003eall\u003c/em\u003e layers of your application with the same framework\u003c/li\u003e\n\u003cli\u003e[experimental] \u003ca href=\"https://github.com/karatelabs/karate/issues/743\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/743/hovercard\"\u003eAndroid and iOS mobile support\u003c/a\u003e via \u003ca href=\"http://appium.io\" rel=\"nofollow\"\u003eAppium\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVisual Validation via the built-in \u003ca href=\"#compare-image\"\u003eimage comparison\u003c/a\u003e capabilities\u003c/li\u003e\n\u003cli\u003eCross platform \u003ca href=\"/karatelabs/karate/blob/master/karate-robot\"\u003eDesktop Automation\u003c/a\u003e that can be \u003ca href=\"https://twitter.com/ptrthomas/status/1215534821234995200\" rel=\"nofollow\"\u003emixed into Web Automation flows\u003c/a\u003e if needed\u003c/li\u003e\n\u003cli\u003eOption to invoke via a \u003ca href=\"#java-api\"\u003eJava API\u003c/a\u003e,  which means that you can easily \u003ca href=\"https://stackoverflow.com/q/47795762/143475\" rel=\"nofollow\"\u003emix Karate into Java projects or legacy UI-automation suites\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/ptrthomas/status/986463717465391104\" rel=\"nofollow\"\u003eSave significant effort\u003c/a\u003e by re-using Karate test-suites as \u003ca href=\"/karatelabs/karate/blob/master/karate-gatling\"\u003eGatling performance tests\u003c/a\u003e that \u003cem\u003edeeply\u003c/em\u003e assert that server responses are accurate under load\u003c/li\u003e\n\u003cli\u003eGatling integration can hook into \u003ca href=\"https://github.com/karatelabs/karate/tree/master/karate-gatling#custom\"\u003e\u003cem\u003eany\u003c/em\u003e custom Java code\u003c/a\u003e - which means that you can perf-test even non-HTTP protocols such as \u003ca href=\"https://github.com/thinkerou/karate-grpc\"\u003egRPC\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-netty\"\u003eAPI mocks\u003c/a\u003e or test-doubles that even \u003ca href=\"https://hackernoon.com/api-consumer-contract-tests-and-test-doubles-with-karate-72c30ea25c18\" rel=\"nofollow\"\u003emaintain CRUD 'state'\u003c/a\u003e across multiple calls - enabling TDD for micro-services and \u003ca href=\"https://martinfowler.com/articles/consumerDrivenContracts.html\" rel=\"nofollow\"\u003eConsumer Driven Contracts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#async\"\u003eAsync\u003c/a\u003e support that allows you to seamlessly integrate the handling of custom events or listening to message-queues\u003c/li\u003e\n\u003cli\u003eBuilt-in \u003ca href=\"https://twitter.com/KarateDSL/status/1338892932691070976\" rel=\"nofollow\"\u003eHTML templating\u003c/a\u003e so that you can extend your test-reports into readable specifications\u003c/li\u003e\n\u003cli\u003eComprehensive support for different flavors of HTTP calls:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#soap-action\"\u003eSOAP\u003c/a\u003e / XML requests\u003c/li\u003e\n\u003cli\u003eHTTPS / \u003ca href=\"#configure\"\u003eSSL\u003c/a\u003e - without needing certificates, key-stores or trust-stores\u003c/li\u003e\n\u003cli\u003eHTTP \u003ca href=\"#configure\"\u003eproxy server\u003c/a\u003e support\u003c/li\u003e\n\u003cli\u003eURL-encoded \u003ca href=\"#form-field\"\u003eHTML-form\u003c/a\u003e data\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#multipart-field\"\u003eMulti-part\u003c/a\u003e file-upload - including \u003ccode\u003emultipart/mixed\u003c/code\u003e and \u003ccode\u003emultipart/related\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eBrowser-like \u003ca href=\"#cookie\"\u003ecookie\u003c/a\u003e handling\u003c/li\u003e\n\u003cli\u003eFull control over HTTP \u003ca href=\"#header\"\u003eheaders\u003c/a\u003e, \u003ca href=\"#path\"\u003epath\u003c/a\u003e and query \u003ca href=\"#param\"\u003eparameters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#retry-until\"\u003eRe-try\u003c/a\u003e until condition\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.websocket.org\" rel=\"nofollow\"\u003eWebsocket\u003c/a\u003e \u003ca href=\"#async\"\u003esupport\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eReal World Examples\u003c/h2\u003e\u003ca id=\"user-content-real-world-examples\" class=\"anchor\" aria-label=\"Permalink: Real World Examples\" href=\"#real-world-examples\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA set of real-life examples can be found here: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003eKarate Demos\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eComparison with REST-assured\u003c/h2\u003e\u003ca id=\"user-content-comparison-with-rest-assured\" class=\"anchor\" aria-label=\"Permalink: Comparison with REST-assured\" href=\"#comparison-with-rest-assured\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor teams familiar with or currently using \u003ca href=\"http://rest-assured.io\" rel=\"nofollow\"\u003eREST-assured\u003c/a\u003e, this detailed comparison of \u003ca href=\"http://tinyurl.com/karatera\" rel=\"nofollow\"\u003eKarate vs REST-assured\u003c/a\u003e - can help you evaluate Karate. Do note that if you prefer a pure Java API - Karate has \u003ca href=\"#java-api\"\u003ethat covered\u003c/a\u003e, and with far more capabilities.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eReferences\u003c/h2\u003e\u003ca id=\"user-content-references\" class=\"anchor\" aria-label=\"Permalink: References\" href=\"#references\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://youtu.be/WT4gg7Jutzg\" rel=\"nofollow\"\u003eAPI Testing with Karate\u003c/a\u003e - video + demos by \u003ca href=\"https://twitter.com/ptrthomas\" rel=\"nofollow\"\u003ePeter Thomas\u003c/a\u003e (creator / lead dev of Karate)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://youtu.be/yu3uupBZyxc\" rel=\"nofollow\"\u003eIntro to all features of Karate\u003c/a\u003e - video + demos by \u003ca href=\"https://twitter.com/ptrthomas\" rel=\"nofollow\"\u003ePeter Thomas\u003c/a\u003e (creator / lead dev of Karate)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/KarateDSL/status/1120985060843249664\" rel=\"nofollow\"\u003eKarate entered the ThoughtWorks Tech Radar\u003c/a\u003e in 2019 and was \u003ca href=\"https://twitter.com/KarateDSL/status/1262719979104817152\" rel=\"nofollow\"\u003eupgraded in ranking\u003c/a\u003e in May 2020\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://speakerdeck.com/takanorig/microservices-testing-automation-with-karate\" rel=\"nofollow\"\u003eマイクロサービスにおけるテスト自動化 with Karate\u003c/a\u003e - (\u003cem\u003eMicroservices Test Automation with Karate\u003c/em\u003e) presentation by \u003ca href=\"https://twitter.com/takanorig\" rel=\"nofollow\"\u003eTakanori Suzuki\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.softwaretester.blog/writing-api-tests-with-karate\" rel=\"nofollow\"\u003eWriting API Tests with Karate\u003c/a\u003e - book by \u003ca href=\"https://www.softwaretester.blog/about\" rel=\"nofollow\"\u003eBenjamin Bischoff\u003c/a\u003e, Packt Publishing, 2023\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=cXDIYpT6zck\u0026amp;t=4333s\" rel=\"nofollow\"\u003eKarate Webinar\u003c/a\u003e - Simplificando automação de API com Karate Framework by \u003ca href=\"https://www.linkedin.com/in/luanapassis/\" rel=\"nofollow\"\u003eLuana Assis\u003c/a\u003e from \u003ca href=\"https://www.base2.com.br/\" rel=\"nofollow\"\u003eBase2 Tecnologia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eKarate also has a dedicated \"tag\", and a very active and supportive community at \u003ca href=\"https://stackoverflow.com/questions/tagged/karate\" rel=\"nofollow\"\u003eStack Overflow\u003c/a\u003e - where you can get support and ask questions.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can find a lot more references, tutorials and blog-posts at \u003ca href=\"https://karatelabs.io\" rel=\"nofollow\"\u003ekaratelabs.io\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eGetting Started\u003c/h1\u003e\u003ca id=\"user-content-getting-started\" class=\"anchor\" aria-label=\"Permalink: Getting Started\" href=\"#getting-started\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you are a Java developer - Karate requires at least \u003ca href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" rel=\"nofollow\"\u003eJava\u003c/a\u003e 11 and then either \u003ca href=\"http://maven.apache.org\" rel=\"nofollow\"\u003eMaven\u003c/a\u003e, \u003ca href=\"https://gradle.org\" rel=\"nofollow\"\u003eGradle\u003c/a\u003e, or a Java IDE that embeds either to be installed. Note that Karate works fine on OpenJDK.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you are new to programming or test-automation, the \u003ca href=\"https://plugins.jetbrains.com/plugin/19232-karate\" rel=\"nofollow\"\u003eofficial IntelliJ plugin\u003c/a\u003e is recommended.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you \u003cem\u003edon't\u003c/em\u003e want to use Java, the \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=karatelabs.karate\" rel=\"nofollow\"\u003eKarate extension for Visual Studio Code\u003c/a\u003e is recommended, and JavaScript, .NET, Ruby and Python programmers will feel right at home.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBoth the official Visual Studio Code and IntelliJ plugins support step-through debugging of Karate tests.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eMaven\u003c/h2\u003e\u003ca id=\"user-content-maven\" class=\"anchor\" aria-label=\"Permalink: Maven\" href=\"#maven\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAll you need is available in the \u003ca href=\"https://search.maven.org/artifact/com.intuit.karate/karate-core\" rel=\"nofollow\"\u003e\u003ccode\u003ekarate-core\u003c/code\u003e\u003c/a\u003e artifact. You can run tests with this \u003ca href=\"#parallel-execution\"\u003edirectly\u003c/a\u003e, but teams can choose the JUnit variant (shown below) that pulls in JUnit 5 and \u003ca href=\"https://stackoverflow.com/a/65578167/143475\" rel=\"nofollow\"\u003eslightly improves the in-IDE experience\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;dependency\u0026gt;\n    \u0026lt;groupId\u0026gt;com.intuit.karate\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;karate-junit5\u0026lt;/artifactId\u0026gt;\n    \u0026lt;version\u0026gt;1.4.1\u0026lt;/version\u0026gt;\n    \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt;\n\u0026lt;/dependency\u0026gt;\"\u003e\u003cpre\u003e\u0026lt;\u003cspan class=\"pl-ent\"\u003edependency\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003egroupId\u003c/span\u003e\u0026gt;com.intuit.karate\u0026lt;/\u003cspan class=\"pl-ent\"\u003egroupId\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eartifactId\u003c/span\u003e\u0026gt;karate-junit5\u0026lt;/\u003cspan class=\"pl-ent\"\u003eartifactId\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eversion\u003c/span\u003e\u0026gt;1.4.1\u0026lt;/\u003cspan class=\"pl-ent\"\u003eversion\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003escope\u003c/span\u003e\u0026gt;test\u0026lt;/\u003cspan class=\"pl-ent\"\u003escope\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan class=\"pl-ent\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eGradle\u003c/h2\u003e\u003ca id=\"user-content-gradle\" class=\"anchor\" aria-label=\"Permalink: Gradle\" href=\"#gradle\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlternatively for \u003ca href=\"https://gradle.org\" rel=\"nofollow\"\u003eGradle\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-yaml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"    testCompile 'com.intuit.karate:karate-junit5:1.4.1'\"\u003e\u003cpre\u003e    \u003cspan class=\"pl-s\"\u003etestCompile 'com.intuit.karate:karate-junit5:1.4.1'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlso refer to the wiki for using \u003ca href=\"https://github.com/karatelabs/karate/wiki/Gradle\"\u003eKarate with Gradle\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eKarate Core \"Fat JAR\"\u003c/h3\u003e\u003ca id=\"user-content-karate-core-fat-jar\" class=\"anchor\" aria-label=\"Permalink: Karate Core \u0026quot;Fat JAR\u0026quot;\" href=\"#karate-core-fat-jar\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you mix Karate into a Maven or Gradle project with many other dependendies, you may run into problems because of dependency conflicts. For example a lot of Java projects directly (or indirectly) depend on Netty or Thymeleaf or ANTLR, etc.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you face issues such as \"class not found\", just pull in the \u003ccode\u003ekarate-core\u003c/code\u003e dependency, and use the \u003ccode\u003eall\u003c/code\u003e \u003ca href=\"https://www.baeldung.com/maven-artifact-classifiers\" rel=\"nofollow\"\u003eclassifier\u003c/a\u003e in your \u003ccode\u003epom.xml\u003c/code\u003e (or \u003ccode\u003ebuild.gradle\u003c/code\u003e).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor example when using Maven:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;dependency\u0026gt;\n  \u0026lt;groupId\u0026gt;com.intuit.karate\u0026lt;/groupId\u0026gt;\n  \u0026lt;artifactId\u0026gt;karate-core\u0026lt;/artifactId\u0026gt;\n  \u0026lt;version\u0026gt;${karate.version}\u0026lt;/version\u0026gt;\n  \u0026lt;classifier\u0026gt;all\u0026lt;/classifier\u0026gt;\n  \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt;\n\u0026lt;/dependency\u0026gt;\"\u003e\u003cpre\u003e\u0026lt;\u003cspan class=\"pl-ent\"\u003edependency\u003c/span\u003e\u0026gt;\n  \u0026lt;\u003cspan class=\"pl-ent\"\u003egroupId\u003c/span\u003e\u0026gt;com.intuit.karate\u0026lt;/\u003cspan class=\"pl-ent\"\u003egroupId\u003c/span\u003e\u0026gt;\n  \u0026lt;\u003cspan class=\"pl-ent\"\u003eartifactId\u003c/span\u003e\u0026gt;karate-core\u0026lt;/\u003cspan class=\"pl-ent\"\u003eartifactId\u003c/span\u003e\u0026gt;\n  \u0026lt;\u003cspan class=\"pl-ent\"\u003eversion\u003c/span\u003e\u0026gt;${karate.version}\u0026lt;/\u003cspan class=\"pl-ent\"\u003eversion\u003c/span\u003e\u0026gt;\n  \u0026lt;\u003cspan class=\"pl-ent\"\u003eclassifier\u003c/span\u003e\u0026gt;all\u0026lt;/\u003cspan class=\"pl-ent\"\u003eclassifier\u003c/span\u003e\u0026gt;\n  \u0026lt;\u003cspan class=\"pl-ent\"\u003escope\u003c/span\u003e\u0026gt;test\u0026lt;/\u003cspan class=\"pl-ent\"\u003escope\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan class=\"pl-ent\"\u003edependency\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that for very complicated projects you can consider using a \u003ca href=\"https://maven.apache.org/guides/introduction/introduction-to-profiles.html\" rel=\"nofollow\"\u003eMaven profile\u003c/a\u003e so that testing-related dependencies don't collide with your development-time dependencies. Of course it is an option to have Karate tests in a separate stand-alone maven project and folder, while still being in the same Git repository.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eQuickstart\u003c/h3\u003e\u003ca id=\"user-content-quickstart\" class=\"anchor\" aria-label=\"Permalink: Quickstart\" href=\"#quickstart\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt may be easier for you to use the Karate Maven archetype to create a skeleton project with one command. You can then skip the next few sections, as the \u003ccode\u003epom.xml\u003c/code\u003e, recommended directory structure, sample test and \u003ca href=\"#junit-5\"\u003eJUnit 5\u003c/a\u003e runners - will be created for you.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eIf you are behind a corporate proxy, or especially if your local Maven installation has been configured to point to a repository within your local network, the command below may not work. One workaround is to temporarily disable or rename your Maven \u003ca href=\"https://maven.apache.org/settings.html\" rel=\"nofollow\"\u003e\u003ccode\u003esettings.xml\u003c/code\u003e\u003c/a\u003e file, and try again.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eYou can replace the values of \u003ccode\u003ecom.mycompany\u003c/code\u003e and \u003ccode\u003emyproject\u003c/code\u003e as per your needs.\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn archetype:generate \\\n-DarchetypeGroupId=com.intuit.karate \\\n-DarchetypeArtifactId=karate-archetype \\\n-DarchetypeVersion=1.4.1 \\\n-DgroupId=com.mycompany \\\n-DartifactId=myproject\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn archetype:generate \\\n-DarchetypeGroupId=com.intuit.karate \\\n-DarchetypeArtifactId=karate-archetype \\\n-DarchetypeVersion=1.4.1 \\\n-DgroupId=com.mycompany \\\n-DartifactId=myproject\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis will create a folder called \u003ccode\u003emyproject\u003c/code\u003e (or whatever you set the name to).\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eIDE Support\u003c/h2\u003e\u003ca id=\"user-content-ide-support\" class=\"anchor\" aria-label=\"Permalink: IDE Support\" href=\"#ide-support\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRefer to the wiki - \u003ca href=\"https://github.com/karatelabs/karate/wiki/IDE-Support\"\u003eIDE Support\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eFolder Structure\u003c/h2\u003e\u003ca id=\"user-content-folder-structure\" class=\"anchor\" aria-label=\"Permalink: Folder Structure\" href=\"#folder-structure\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA Karate test script has the file extension \u003ccode\u003e.feature\u003c/code\u003e which is the standard followed by Cucumber.  You are free to organize your files using regular Java package conventions.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe Maven tradition is to have non-Java source files in a separate \u003ccode\u003esrc/test/resources\u003c/code\u003e folder structure - but we recommend that you keep them side-by-side with your \u003ccode\u003e*.java\u003c/code\u003e files. When you have a large and complex project, you will end up with a few data files (e.g. \u003ccode\u003e*.js\u003c/code\u003e, \u003ccode\u003e*.json\u003c/code\u003e, \u003ccode\u003e*.txt\u003c/code\u003e) as well and it is much more convenient to see the \u003ccode\u003e*.java\u003c/code\u003e and \u003ccode\u003e*.feature\u003c/code\u003e files and all related artifacts in the same place.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis can be easily achieved with the following tweak to your maven \u003ccode\u003e\u0026lt;build\u0026gt;\u003c/code\u003e section.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;build\u0026gt;\n    \u0026lt;testResources\u0026gt;\n        \u0026lt;testResource\u0026gt;\n            \u0026lt;directory\u0026gt;src/test/java\u0026lt;/directory\u0026gt;\n            \u0026lt;excludes\u0026gt;\n                \u0026lt;exclude\u0026gt;**/*.java\u0026lt;/exclude\u0026gt;\n            \u0026lt;/excludes\u0026gt;\n        \u0026lt;/testResource\u0026gt;\n    \u0026lt;/testResources\u0026gt;        \n    \u0026lt;plugins\u0026gt;\n    ...\n    \u0026lt;/plugins\u0026gt;\n\u0026lt;/build\u0026gt;\"\u003e\u003cpre\u003e\u0026lt;\u003cspan class=\"pl-ent\"\u003ebuild\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003etestResources\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan class=\"pl-ent\"\u003etestResource\u003c/span\u003e\u0026gt;\n            \u0026lt;\u003cspan class=\"pl-ent\"\u003edirectory\u003c/span\u003e\u0026gt;src/test/java\u0026lt;/\u003cspan class=\"pl-ent\"\u003edirectory\u003c/span\u003e\u0026gt;\n            \u0026lt;\u003cspan class=\"pl-ent\"\u003eexcludes\u003c/span\u003e\u0026gt;\n                \u0026lt;\u003cspan class=\"pl-ent\"\u003eexclude\u003c/span\u003e\u0026gt;**/*.java\u0026lt;/\u003cspan class=\"pl-ent\"\u003eexclude\u003c/span\u003e\u0026gt;\n            \u0026lt;/\u003cspan class=\"pl-ent\"\u003eexcludes\u003c/span\u003e\u0026gt;\n        \u0026lt;/\u003cspan class=\"pl-ent\"\u003etestResource\u003c/span\u003e\u0026gt;\n    \u0026lt;/\u003cspan class=\"pl-ent\"\u003etestResources\u003c/span\u003e\u0026gt;        \n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eplugins\u003c/span\u003e\u0026gt;\n    ...\n    \u0026lt;/\u003cspan class=\"pl-ent\"\u003eplugins\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan class=\"pl-ent\"\u003ebuild\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is very common in the world of Maven users and keep in mind that these are tests and not production code.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAlternatively, if using Gradle then add the following \u003ccode\u003esourceSets\u003c/code\u003e definition\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-yaml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"sourceSets {\n    test {\n        resources {\n            srcDir file('src/test/java')\n            exclude '**/*.java'\n        }\n    }\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-s\"\u003esourceSets {\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003etest {\u003c/span\u003e\n        \u003cspan class=\"pl-s\"\u003eresources {\u003c/span\u003e\n            \u003cspan class=\"pl-s\"\u003esrcDir file('src/test/java')\u003c/span\u003e\n            \u003cspan class=\"pl-s\"\u003eexclude '**/*.java'\u003c/span\u003e\n        \u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWith the above in place, you don't have to keep switching between your \u003ccode\u003esrc/test/java\u003c/code\u003e and \u003ccode\u003esrc/test/resources\u003c/code\u003e folders, you can have all your test-code and artifacts under \u003ccode\u003esrc/test/java\u003c/code\u003e and everything will work as expected.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eOnce you get used to this, you may even start wondering why projects need a \u003ccode\u003esrc/test/resources\u003c/code\u003e folder at all !\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSpring Boot Example\u003c/h3\u003e\u003ca id=\"user-content-spring-boot-example\" class=\"anchor\" aria-label=\"Permalink: Spring Boot Example\" href=\"#spring-boot-example\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://twitter.com/sdaas\" rel=\"nofollow\"\u003eSoumendra Daas\u003c/a\u003e has created a nice example and guide that you can use as a reference here: \u003ca href=\"https://github.com/Sdaas/hello-karate\"\u003e\u003ccode\u003ehello-karate\u003c/code\u003e\u003c/a\u003e. This demonstrates a Java Maven + JUnit 5 project set up to test a \u003ca href=\"http://projects.spring.io/spring-boot/\" rel=\"nofollow\"\u003eSpring Boot\u003c/a\u003e app.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eNaming Conventions\u003c/h2\u003e\u003ca id=\"user-content-naming-conventions\" class=\"anchor\" aria-label=\"Permalink: Naming Conventions\" href=\"#naming-conventions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince these are tests and not production Java code, you don't need to be bound by the \u003ccode\u003ecom.mycompany.foo.bar\u003c/code\u003e convention and the un-necessary explosion of sub-folders that ensues. We suggest that you have a folder hierarchy only one or two levels deep - where the folder names clearly identify which 'resource', 'entity' or API is the web-service under test.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"src/test/java\n    |\n    +-- karate-config.js\n    +-- logback-test.xml\n    +-- some-reusable.feature\n    +-- some-classpath-function.js\n    +-- some-classpath-payload.json\n    |\n    \\-- animals\n        |\n        +-- AnimalsTest.java\n        |\n        +-- cats\n        |   |\n        |   +-- cats-post.feature\n        |   +-- cats-get.feature\n        |   +-- cat.json\n        |   \\-- CatsRunner.java\n        |\n        \\-- dogs\n            |\n            +-- dog-crud.feature\n            +-- dog.json\n            +-- some-helper-function.js\n            \\-- DogsRunner.java\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003esrc/test/java\n    |\n    +-- karate-config.js\n    +-- logback-test.xml\n    +-- some-reusable.feature\n    +-- some-classpath-function.js\n    +-- some-classpath-payload.json\n    |\n    \\-- animals\n        |\n        +-- AnimalsTest.java\n        |\n        +-- cats\n        |   |\n        |   +-- cats-post.feature\n        |   +-- cats-get.feature\n        |   +-- cat.json\n        |   \\-- CatsRunner.java\n        |\n        \\-- dogs\n            |\n            +-- dog-crud.feature\n            +-- dog.json\n            +-- some-helper-function.js\n            \\-- DogsRunner.java\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAssuming you use JUnit, there are some good reasons for the recommended (best practice) naming convention and choice of file-placement shown above:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eNot using the \u003ccode\u003e*Test.java\u003c/code\u003e convention for the JUnit classes (e.g. \u003ccode\u003eCatsRunner.java\u003c/code\u003e) in the \u003ccode\u003ecats\u003c/code\u003e and \u003ccode\u003edogs\u003c/code\u003e folder ensures that these tests will \u003cstrong\u003enot\u003c/strong\u003e be picked up when invoking \u003ccode\u003emvn test\u003c/code\u003e (for the whole project) from the \u003ca href=\"#command-line\"\u003ecommand line\u003c/a\u003e. But you can still invoke these tests from the IDE, which is convenient when in development mode.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnimalsTest.java\u003c/code\u003e (the only file that follows the \u003ccode\u003e*Test.java\u003c/code\u003e naming convention) acts as the 'test suite' for the entire project. By default, Karate will load all \u003ccode\u003e*.feature\u003c/code\u003e files from sub-directories as well. But since \u003ccode\u003esome-reusable.feature\u003c/code\u003e is \u003cem\u003eabove\u003c/em\u003e \u003ccode\u003eAnimalsTest.java\u003c/code\u003e in the folder hierarchy, it will \u003cstrong\u003enot\u003c/strong\u003e be picked-up. Which is exactly what we want, because \u003ccode\u003esome-reusable.feature\u003c/code\u003e is designed to be \u003ca href=\"#calling-other-feature-files\"\u003ecalled\u003c/a\u003e only from one of the other test scripts (perhaps with some parameters being passed). You can also use \u003ca href=\"#tags\"\u003etags\u003c/a\u003e to skip files.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esome-classpath-function.js\u003c/code\u003e and \u003ccode\u003esome-classpath-payload.json\u003c/code\u003e are in the 'root' of the Java \u003ca href=\"#classpath\"\u003e'classpath'\u003c/a\u003e which means they can be easily \u003ca href=\"#reading-files\"\u003eread\u003c/a\u003e (and re-used) from any test-script by using the \u003ccode\u003eclasspath:\u003c/code\u003e prefix, for e.g: \u003ccode\u003eread('classpath:some-classpath-function.js')\u003c/code\u003e. Relative paths will also work.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eFor details on what actually goes into a script or \u003ccode\u003e*.feature\u003c/code\u003e file, refer to the \u003ca href=\"#syntax-guide\"\u003esyntax guide\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJUnit 5\u003c/h2\u003e\u003ca id=\"user-content-junit-5\" class=\"anchor\" aria-label=\"Permalink: JUnit 5\" href=\"#junit-5\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate supports \u003ca href=\"https://junit.org/junit5\" rel=\"nofollow\"\u003eJUnit 5\u003c/a\u003e and the advantage is that you can have multiple methods in a test-class. Only 1 \u003ccode\u003eimport\u003c/code\u003e is needed, and instead of a class-level annotation, you use a nice \u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" rel=\"nofollow\"\u003eDRY\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Fluent_interface\" rel=\"nofollow\"\u003efluent-api\u003c/a\u003e to express which tests and tags you want to use.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that the Java class does not need to be \u003ccode\u003epublic\u003c/code\u003e and even the test methods do not need to be \u003ccode\u003epublic\u003c/code\u003e - so tests end up being very concise.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eKarate will traverse sub-directories and look for \u003ccode\u003e*.feature\u003c/code\u003e files. For example if you have the JUnit class in the \u003ccode\u003ecom.mycompany\u003c/code\u003e package, \u003ccode\u003e*.feature\u003c/code\u003e files in \u003ccode\u003ecom.mycompany.foo\u003c/code\u003e and \u003ccode\u003ecom.mycompany.bar\u003c/code\u003e will also be run. This is one reason why you may want to prefer a 'flat' directory structure as \u003ca href=\"#naming-conventions\"\u003eexplained above\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eHere is an \u003ca href=\"/karatelabs/karate/blob/master/karate-junit5/src/test/java/karate/SampleTest.java\"\u003eexample\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package karate;\n\nimport com.intuit.karate.junit5.Karate;\n\nclass SampleTest {\n\n    @Karate.Test\n    Karate testSample() {\n        return Karate.run(\u0026quot;sample\u0026quot;).relativeTo(getClass());\n    }\n    \n    @Karate.Test\n    Karate testTags() {\n        return Karate.run(\u0026quot;tags\u0026quot;).tags(\u0026quot;@second\u0026quot;).relativeTo(getClass());\n    }\n\n    @Karate.Test\n    Karate testSystemProperty() {\n        return Karate.run(\u0026quot;classpath:karate/tags.feature\u0026quot;)\n                .tags(\u0026quot;@second\u0026quot;)\n                .karateEnv(\u0026quot;e2e\u0026quot;)\n                .systemProperty(\u0026quot;foo\u0026quot;, \u0026quot;bar\u0026quot;);\n    }\n\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003epackage\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e;\n\n\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ecom\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eintuit\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ejunit5\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eKarate\u003c/span\u003e;\n\n\u003cspan class=\"pl-k\"\u003eclass\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eSampleTest\u003c/span\u003e {\n\n    \u003cspan class=\"pl-c1\"\u003e@\u003c/span\u003e\u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eTest\u003c/span\u003e\n    \u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e \u003cspan class=\"pl-en\"\u003etestSample\u003c/span\u003e() {\n        \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003erun\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"sample\"\u003c/span\u003e).\u003cspan class=\"pl-en\"\u003erelativeTo\u003c/span\u003e(\u003cspan class=\"pl-en\"\u003egetClass\u003c/span\u003e());\n    }\n    \n    \u003cspan class=\"pl-c1\"\u003e@\u003c/span\u003e\u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eTest\u003c/span\u003e\n    \u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e \u003cspan class=\"pl-en\"\u003etestTags\u003c/span\u003e() {\n        \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003erun\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"tags\"\u003c/span\u003e).\u003cspan class=\"pl-en\"\u003etags\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"@second\"\u003c/span\u003e).\u003cspan class=\"pl-en\"\u003erelativeTo\u003c/span\u003e(\u003cspan class=\"pl-en\"\u003egetClass\u003c/span\u003e());\n    }\n\n    \u003cspan class=\"pl-c1\"\u003e@\u003c/span\u003e\u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eTest\u003c/span\u003e\n    \u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e \u003cspan class=\"pl-en\"\u003etestSystemProperty\u003c/span\u003e() {\n        \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eKarate\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003erun\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"classpath:karate/tags.feature\"\u003c/span\u003e)\n                .\u003cspan class=\"pl-en\"\u003etags\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"@second\"\u003c/span\u003e)\n                .\u003cspan class=\"pl-en\"\u003ekarateEnv\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"e2e\"\u003c/span\u003e)\n                .\u003cspan class=\"pl-en\"\u003esystemProperty\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"foo\"\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e\"bar\"\u003c/span\u003e);\n    }\n\n}\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that more \"builder\" methods are available from the \u003ca href=\"#parallel-execution\"\u003e\u003ccode\u003eRunner.Builder\u003c/code\u003e\u003c/a\u003e class such as \u003ccode\u003ereportDir()\u003c/code\u003e etc.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou should be able to right-click and run a single method using your IDE - which should be sufficient when you are in development mode. But to be able to run JUnit 5 tests from the command-line, you need to ensure that the latest version of the \u003ca href=\"https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html\" rel=\"nofollow\"\u003emaven-surefire-plugin\u003c/a\u003e is present in your project \u003ccode\u003epom.xml\u003c/code\u003e (within the \u003ccode\u003e\u0026lt;build\u0026gt;/\u0026lt;plugins\u0026gt;\u003c/code\u003e section):\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;plugin\u0026gt;\n    \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;maven-surefire-plugin\u0026lt;/artifactId\u0026gt;\n    \u0026lt;version\u0026gt;2.22.2\u0026lt;/version\u0026gt;\n\u0026lt;/plugin\u0026gt;\"\u003e\u003cpre\u003e\u0026lt;\u003cspan class=\"pl-ent\"\u003eplugin\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003egroupId\u003c/span\u003e\u0026gt;org.apache.maven.plugins\u0026lt;/\u003cspan class=\"pl-ent\"\u003egroupId\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eartifactId\u003c/span\u003e\u0026gt;maven-surefire-plugin\u0026lt;/\u003cspan class=\"pl-ent\"\u003eartifactId\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eversion\u003c/span\u003e\u0026gt;2.22.2\u0026lt;/\u003cspan class=\"pl-ent\"\u003eversion\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan class=\"pl-ent\"\u003eplugin\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eTo run a single test method, for example the \u003ccode\u003etestTags()\u003c/code\u003e in the example above, you can do this:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn test -Dtest=SampleTest#testTags\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn test -Dtest=SampleTest#testTags\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlso look at how to run tests via the \u003ca href=\"#command-line\"\u003ecommand-line\u003c/a\u003e and the \u003ca href=\"#parallel-execution\"\u003eparallel runner\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJUnit HTML report\u003c/h3\u003e\u003ca id=\"user-content-junit-html-report\" class=\"anchor\" aria-label=\"Permalink: JUnit HTML report\" href=\"#junit-html-report\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen you use the JUnit runner - after the execution of each feature, an HTML report is output to the \u003ccode\u003etarget/karate-reports\u003c/code\u003e folder and the full path will be printed to the console (see \u003ca href=\"https://twitter.com/KarateDSL/status/935029435140489216\" rel=\"nofollow\"\u003evideo\u003c/a\u003e).\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"html report: (paste into browser to view)\n-----------------------------------------\nfile:///projects/myproject/target/karate-reports/mypackage.myfeature.html\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003ehtml report: (paste into browser to view)\n-----------------------------------------\nfile:///projects/myproject/target/karate-reports/mypackage.myfeature.html\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can easily select (double-click), copy and paste this \u003ccode\u003efile:\u003c/code\u003e URL into your browser address bar. This report is useful for troubleshooting and debugging a test because all requests and responses are shown in-line with the steps, along with error messages and the output of \u003ca href=\"#print\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e statements. Just re-fresh your browser window if you re-run the test.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eDry Run\u003c/h3\u003e\u003ca id=\"user-content-dry-run\" class=\"anchor\" aria-label=\"Permalink: Dry Run\" href=\"#dry-run\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis will give you the usual HTML report showing what features will be run, including all steps shown (including comments) so that it can be reviewed. Of course the actual time-durations, and logs will be missing, and \u003cem\u003eeverything\u003c/em\u003e will pass.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe “dry run” report is useful to review the tag \"coverage\" of what will be run. For example you can get a nice feature “coverage” report, provided you have a rich set of \u003ca href=\"#tags\"\u003etags\u003c/a\u003e. e.g. \u003ccode\u003e@smoke @module=one @module=two\u003c/code\u003e etc.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ca href=\"#parallel-execution\"\u003e\u003ccode\u003eRunner.Builder\u003c/code\u003e\u003c/a\u003e API has a \u003ccode\u003edryRun()\u003c/code\u003e method to switch this on. Note that this mode can be also triggered via the command-line by adding \u003ccode\u003e-D\u003c/code\u003e or \u003ccode\u003e--dryrun\u003c/code\u003e to the \u003ca href=\"#karateoptions\"\u003e\u003ccode\u003ekarate.options\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCommand Line\u003c/h2\u003e\u003ca id=\"user-content-command-line\" class=\"anchor\" aria-label=\"Permalink: Command Line\" href=\"#command-line\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you are using Karate via the \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=karatelabs.karate\" rel=\"nofollow\"\u003eVS Code Plugin\u003c/a\u003e or the stand-alone JAR, refer to the \u003ca href=\"https://github.com/karatelabs/karate/wiki/Get-Started:-Other-Runtime-Options\"\u003eCLI usage guide\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCommand Line - Maven\u003c/h3\u003e\u003ca id=\"user-content-command-line---maven\" class=\"anchor\" aria-label=\"Permalink: Command Line - Maven\" href=\"#command-line---maven\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNormally in dev mode, you will use your IDE to run a \u003ccode\u003e*.feature\u003c/code\u003e file directly or via the companion 'runner' JUnit Java class. When you have a 'runner' class in place, it would be possible to run it from the command-line as well.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that the \u003ccode\u003emvn test\u003c/code\u003e command only runs test classes that follow the \u003ccode\u003e*Test.java\u003c/code\u003e \u003ca href=\"#naming-conventions\"\u003enaming convention\u003c/a\u003e by default. But you can choose a single test to run like this:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn test -Dtest=CatsRunner\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn test -Dtest=CatsRunner\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ekarate.options\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-karateoptions\" class=\"anchor\" aria-label=\"Permalink: karate.options\" href=\"#karateoptions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen your Java test \"runner\" is linked to multiple feature files, which will be the case when you use the recommended \u003ca href=\"#parallel-execution\"\u003eparallel runner\u003c/a\u003e, you can narrow down your scope to a single feature, scenario or directory via the command-line, useful in dev-mode. Note how even \u003ca href=\"#tags\"\u003etags\u003c/a\u003e to exclude (or include) can be specified:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that any \u003ccode\u003eFeature\u003c/code\u003e or \u003ccode\u003eScenario\u003c/code\u003e with the \u003ca href=\"#special-tags\"\u003especial \u003ccode\u003e@ignore\u003c/code\u003e tag\u003c/a\u003e will be skipped by default.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn test \u0026quot;-Dkarate.options=--tags ~@skipme classpath:demo/cats/cats.feature\u0026quot; -Dtest=DemoTestParallel\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn test \"-Dkarate.options=--tags ~@skipme classpath:demo/cats/cats.feature\" -Dtest=DemoTestParallel\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eMultiple feature files (or paths) can be specified, de-limited by the space character. They should be at the end of the \u003ccode\u003ekarate.options\u003c/code\u003e. To run only a single scenario, append the line number on which the scenario is defined, de-limited by \u003ccode\u003e:\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn test \u0026quot;-Dkarate.options=PathToFeatureFiles/order.feature:12\u0026quot; -Dtest=DemoTestParallel\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn test \"-Dkarate.options=PathToFeatureFiles/order.feature:12\" -Dtest=DemoTestParallel\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince paths are expected at the end of the command-line options - if you want to only over-ride tags, use the \u003ccode\u003e=\u003c/code\u003e sign to make argument values clear. For example:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn test -Dkarate.options='-t=@dev -t=@src' -Dtest=ExamplesTest\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn test -Dkarate.options='-t=@dev -t=@src' -Dtest=ExamplesTest\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCommand Line - Gradle\u003c/h3\u003e\u003ca id=\"user-content-command-line---gradle\" class=\"anchor\" aria-label=\"Permalink: Command Line - Gradle\" href=\"#command-line---gradle\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor Gradle, you must extend the test task to allow the \u003ccode\u003ekarate.options\u003c/code\u003e to be passed to the runtime (otherwise they get consumed by Gradle itself). To do that, add the following:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-yaml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"test {\n    // pull karate options into the runtime\n    systemProperty \u0026quot;karate.options\u0026quot;, System.properties.getProperty(\u0026quot;karate.options\u0026quot;)\n    // pull karate env into the runtime\n    systemProperty \u0026quot;karate.env\u0026quot;, System.properties.getProperty(\u0026quot;karate.env\u0026quot;)\n    // ensure tests are always run\n    outputs.upToDateWhen { false }\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-s\"\u003etest {\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e// pull karate options into the runtime\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003esystemProperty \"karate.options\", System.properties.getProperty(\"karate.options\")\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e// pull karate env into the runtime\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003esystemProperty \"karate.env\", System.properties.getProperty(\"karate.env\")\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e// ensure tests are always run\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003eoutputs.upToDateWhen { false }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd then the above command in Gradle would look like:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"./gradlew test --tests *CatsRunner\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003e./gradlew test --tests *CatsRunner\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eor\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"./gradlew test -Dtest.single=CatsRunner\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003e./gradlew test -Dtest.single=CatsRunner\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eTest Suites\u003c/h3\u003e\u003ca id=\"user-content-test-suites\" class=\"anchor\" aria-label=\"Permalink: Test Suites\" href=\"#test-suites\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThe recommended way to define and run test-suites and reporting in Karate is to use the \u003ca href=\"#parallel-execution\"\u003eparallel runner\u003c/a\u003e, described in the next section. The approach in this section is more suited for troubleshooting in dev-mode, using your IDE.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eOne way to define 'test-suites' in Karate is to have a JUnit class at a level 'above' (in terms of folder hierarchy) all the \u003ccode\u003e*.feature\u003c/code\u003e files in your project. So if you take the previous \u003ca href=\"#naming-conventions\"\u003efolder structure example\u003c/a\u003e, you can do this on the command-line:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn test \u0026quot;-Dkarate.options=--tags ~@skipme\u0026quot; -Dtest=AnimalsTest\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn test \"-Dkarate.options=--tags ~@skipme\" -Dtest=AnimalsTest\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eHere, \u003ccode\u003eAnimalsTest\u003c/code\u003e is the name of the Java class we designated to run the multiple \u003ccode\u003e*.feature\u003c/code\u003e files that make up your test-suite. There is a neat way to \u003ca href=\"#tags\"\u003etag your tests\u003c/a\u003e and the above example demonstrates how to run all tests \u003cem\u003eexcept\u003c/em\u003e the ones tagged \u003ccode\u003e@skipme\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that the special, built-in tag \u003ccode\u003e@ignore\u003c/code\u003e will \u003cem\u003ealways\u003c/em\u003e be skipped by default, and you don't need to specify \u003ccode\u003e~@ignore\u003c/code\u003e anywhere.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can 'lock down' the fact that you only want to execute the single JUnit class that functions as a test-suite - by using the following \u003ca href=\"http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html\" rel=\"nofollow\"\u003emaven-surefire-plugin configuration\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;plugin\u0026gt;\n    \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;\n    \u0026lt;artifactId\u0026gt;maven-surefire-plugin\u0026lt;/artifactId\u0026gt;\n    \u0026lt;version\u0026gt;${maven.surefire.version}\u0026lt;/version\u0026gt;\n    \u0026lt;configuration\u0026gt;\n        \u0026lt;includes\u0026gt;\n            \u0026lt;include\u0026gt;animals/AnimalsTest.java\u0026lt;/include\u0026gt;\n        \u0026lt;/includes\u0026gt;\n        \u0026lt;systemProperties\u0026gt;\n            \u0026lt;karate.options\u0026gt;--tags @smoke\u0026lt;/karate.options\u0026gt;\n        \u0026lt;/systemProperties\u0026gt;            \n    \u0026lt;/configuration\u0026gt;\n\u0026lt;/plugin\u0026gt; \"\u003e\u003cpre\u003e\u0026lt;\u003cspan class=\"pl-ent\"\u003eplugin\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003egroupId\u003c/span\u003e\u0026gt;org.apache.maven.plugins\u0026lt;/\u003cspan class=\"pl-ent\"\u003egroupId\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eartifactId\u003c/span\u003e\u0026gt;maven-surefire-plugin\u0026lt;/\u003cspan class=\"pl-ent\"\u003eartifactId\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eversion\u003c/span\u003e\u0026gt;${maven.surefire.version}\u0026lt;/\u003cspan class=\"pl-ent\"\u003eversion\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan class=\"pl-ent\"\u003econfiguration\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan class=\"pl-ent\"\u003eincludes\u003c/span\u003e\u0026gt;\n            \u0026lt;\u003cspan class=\"pl-ent\"\u003einclude\u003c/span\u003e\u0026gt;animals/AnimalsTest.java\u0026lt;/\u003cspan class=\"pl-ent\"\u003einclude\u003c/span\u003e\u0026gt;\n        \u0026lt;/\u003cspan class=\"pl-ent\"\u003eincludes\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan class=\"pl-ent\"\u003esystemProperties\u003c/span\u003e\u0026gt;\n            \u0026lt;\u003cspan class=\"pl-ent\"\u003ekarate\u003c/span\u003e.options\u0026gt;--tags @smoke\u0026lt;/\u003cspan class=\"pl-ent\"\u003ekarate\u003c/span\u003e.options\u0026gt;\n        \u0026lt;/\u003cspan class=\"pl-ent\"\u003esystemProperties\u003c/span\u003e\u0026gt;            \n    \u0026lt;/\u003cspan class=\"pl-ent\"\u003econfiguration\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan class=\"pl-ent\"\u003eplugin\u003c/span\u003e\u0026gt; \u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote how the \u003ca href=\"#karateoptions\"\u003e\u003ccode\u003ekarate.options\u003c/code\u003e\u003c/a\u003e can be specified using the \u003ccode\u003e\u0026lt;systemProperties\u0026gt;\u003c/code\u003e configuration.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor Gradle, you simply specify the test which is to be \u003ccode\u003einclude\u003c/code\u003e-d:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-yaml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"test {\n    include 'animals/AnimalsTest.java'\n    // pull karate options into the runtime\n    systemProperty \u0026quot;karate.options\u0026quot;, System.properties.getProperty(\u0026quot;karate.options\u0026quot;)\n    // pull karate env into the runtime\n    systemProperty \u0026quot;karate.env\u0026quot;, System.properties.getProperty(\u0026quot;karate.env\u0026quot;)\n    // ensure tests are always run\n    outputs.upToDateWhen { false }\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-s\"\u003etest {\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003einclude 'animals/AnimalsTest.java'\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e// pull karate options into the runtime\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003esystemProperty \"karate.options\", System.properties.getProperty(\"karate.options\")\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e// pull karate env into the runtime\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003esystemProperty \"karate.env\", System.properties.getProperty(\"karate.env\")\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003e// ensure tests are always run\u003c/span\u003e\n    \u003cspan class=\"pl-s\"\u003eoutputs.upToDateWhen { false }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe big drawback of the approach above is that you cannot run tests in parallel. The recommended approach for Karate reporting in a Continuous Integration set-up is described in the next section which can generate the \u003ca href=\"https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin\" rel=\"nofollow\"\u003eJUnit XML\u003c/a\u003e format that most CI tools can consume. The \u003ca href=\"https://cucumber.io/docs/cucumber/reporting\" rel=\"nofollow\"\u003eCucumber JSON format\u003c/a\u003e can be also emitted, which gives you plenty of options for generating pretty reports using third-party maven plugins.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAnd most importantly - you can run tests in parallel without having to depend on third-party hacks that introduce code-generation and config 'bloat' into your \u003ccode\u003epom.xml\u003c/code\u003e or \u003ccode\u003ebuild.gradle\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eParallel Execution\u003c/h2\u003e\u003ca id=\"user-content-parallel-execution\" class=\"anchor\" aria-label=\"Permalink: Parallel Execution\" href=\"#parallel-execution\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003ePlease note that some \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/resources/analytics.md\"\u003euser analytics is tracked\u003c/a\u003e only when you view the built-in Karate HTML report.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eKarate can run tests in parallel, and dramatically cut down execution time. This is a 'core' feature and does not depend on JUnit, Maven or Gradle.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eFor those running Karate in non-Java projects via the command-line, note that you can set the number of threads via \u003ccode\u003e--threads\u003c/code\u003e or \u003ccode\u003e-T\u003c/code\u003e as explained \u003ca href=\"https://karatelabs.github.io/karate/karate-netty/#parallel-execution\" rel=\"nofollow\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eYou can easily \"choose\" features and tags to run and compose test-suites in a very flexible manner.\u003c/li\u003e\n\u003cli\u003eYou can use the returned \u003ccode\u003eResults\u003c/code\u003e object to check if any scenarios failed, and to even summarize the errors\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin\" rel=\"nofollow\"\u003eJUnit XML\u003c/a\u003e reports can be generated in the \"\u003ccode\u003ereportDir\u003c/code\u003e\" path you specify, and you can easily configure your CI to look for these files after a build (for e.g. in \u003ccode\u003e**/*.xml\u003c/code\u003e or \u003ccode\u003e**/karate-reports/*.xml\u003c/code\u003e). Note that you have to call the \u003ccode\u003eoutputJunitXml(true)\u003c/code\u003e method on the \u003ccode\u003eRunner\u003c/code\u003e \"builder\".\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cucumber.io/docs/cucumber/reporting\" rel=\"nofollow\"\u003eCucumber JSON reports\u003c/a\u003e can be generated, except that the extension will be \u003ccode\u003e.json\u003c/code\u003e instead of \u003ccode\u003e.xml\u003c/code\u003e. Note that you have to call the \u003ccode\u003eoutputCucumberJson(true)\u003c/code\u003e method on the \u003ccode\u003eRunner\u003c/code\u003e \"builder\".\u003c/li\u003e\n\u003cli\u003eHTML reports can be disabled by calling \u003ca href=\"https://github.com/karatelabs/karate/blob/v1.2.1.RC1/karate-core/src/main/java/com/karatelabs/karate/Runner.java#L515\"\u003e\u003ccode\u003eoutputHtmlReport(false)\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eRunner.path()\u003c/code\u003e \"builder\" method in \u003ccode\u003ekarate-core\u003c/code\u003e is how you refer to the package you want to execute, and all feature files within sub-directories will be picked up\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRunner.path()\u003c/code\u003e takes multiple string parameters, so you can refer to multiple packages or even individual \u003ccode\u003e*.feature\u003c/code\u003e files and easily \"compose\" a test-suite\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003ee.g. \u003ccode\u003eRunner.path(\"classpath:animals\", \"classpath:some/other/package.feature\")\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTo \u003ca href=\"#tags\"\u003echoose tags\u003c/a\u003e, call the \u003ccode\u003etags()\u003c/code\u003e API, note that by default, any \u003ccode\u003e*.feature\u003c/code\u003e file tagged with the special (built-in) tag: \u003ccode\u003e@ignore\u003c/code\u003e will be skipped. You can also specify tags on the \u003ca href=\"#test-suites\"\u003ecommand-line\u003c/a\u003e. The \u003ccode\u003etags()\u003c/code\u003e method also takes multiple arguments, for e.g.\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003ethis is an \"AND\" operation: \u003ccode\u003etags(\"@customer\", \"@smoke\")\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eand this is an \"OR\" operation: \u003ccode\u003etags(\"@customer,@smoke\")\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThere is an optional \u003ccode\u003ereportDir()\u003c/code\u003e method if you want to customize the directory to which the \u003ca href=\"#parallel-execution\"\u003eHTML, XML and JSON\u003c/a\u003e files will be output, it defaults to \u003ccode\u003etarget/karate-reports\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIf you want to dynamically and programmatically determine the tags and features to be included - the API also accepts \u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e as the \u003ccode\u003epath()\u003c/code\u003e and \u003ccode\u003etags()\u003c/code\u003e methods arguments\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eparallel()\u003c/code\u003e \u003cem\u003ehas\u003c/em\u003e to be the last method called, and you pass the number of parallel threads needed. It returns a \u003ccode\u003eResults\u003c/code\u003e object that has all the information you need - such as the number of passed or failed tests.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJUnit 5 Parallel Execution\u003c/h3\u003e\u003ca id=\"user-content-junit-5-parallel-execution\" class=\"anchor\" aria-label=\"Permalink: JUnit 5 Parallel Execution\" href=\"#junit-5-parallel-execution\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe example below assumes that \u003ca href=\"https://junit.org/junit5\" rel=\"nofollow\"\u003eJUnit 5\u003c/a\u003e is available on the classpath, and uses the \u003ccode\u003e@Test\u003c/code\u003e annotation and the \u003ccode\u003eassertEquals()\u003c/code\u003e method.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eBut if you really want, you could use the \u003ccode\u003eRunner\u003c/code\u003e and \u003ccode\u003eResults\u003c/code\u003e API directly in \u003cem\u003eany\u003c/em\u003e Java class, and even a \"main\" method.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eUse the \u003ca href=\"https://github.com/karatelabs/karate-template\"\u003e\u003ccode\u003ekarate-template\u003c/code\u003e\u003c/a\u003e project if you want to get an \u003ca href=\"https://github.com/karatelabs/karate-template/blob/main/src/test/java/examples/ExamplesTest.java\"\u003eexample\u003c/a\u003e as part of a working, \"skeleton\" project.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import com.intuit.karate.Results;\nimport com.intuit.karate.Runner;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\nclass TestParallel {\n\n    @Test\n    void testParallel() {\n        Results results = Runner.path(\u0026quot;classpath:animals\u0026quot;).tags(\u0026quot;~@skipme\u0026quot;).parallel(5);\n        assertEquals(0, results.getFailCount(), results.getErrorMessages());\n    }\n\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ecom\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eintuit\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eResults\u003c/span\u003e;\n\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ecom\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eintuit\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eRunner\u003c/span\u003e;\n\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-k\"\u003estatic\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eorg\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ejunit\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ejupiter\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eapi\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eAssertions\u003c/span\u003e.*;\n\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eorg\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ejunit\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ejupiter\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eapi\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eTest\u003c/span\u003e;\n\n\u003cspan class=\"pl-k\"\u003eclass\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eTestParallel\u003c/span\u003e {\n\n    \u003cspan class=\"pl-c1\"\u003e@\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eTest\u003c/span\u003e\n    \u003cspan class=\"pl-smi\"\u003evoid\u003c/span\u003e \u003cspan class=\"pl-en\"\u003etestParallel\u003c/span\u003e() {\n        \u003cspan class=\"pl-smi\"\u003eResults\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eresults\u003c/span\u003e = \u003cspan class=\"pl-smi\"\u003eRunner\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003epath\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"classpath:animals\"\u003c/span\u003e).\u003cspan class=\"pl-en\"\u003etags\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"~@skipme\"\u003c/span\u003e).\u003cspan class=\"pl-en\"\u003eparallel\u003c/span\u003e(\u003cspan class=\"pl-c1\"\u003e5\u003c/span\u003e);\n        \u003cspan class=\"pl-en\"\u003eassertEquals\u003c/span\u003e(\u003cspan class=\"pl-c1\"\u003e0\u003c/span\u003e, \u003cspan class=\"pl-s1\"\u003eresults\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003egetFailCount\u003c/span\u003e(), \u003cspan class=\"pl-s1\"\u003eresults\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003egetErrorMessages\u003c/span\u003e());\n    }\n\n}\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eParallel Stats\u003c/h3\u003e\u003ca id=\"user-content-parallel-stats\" class=\"anchor\" aria-label=\"Permalink: Parallel Stats\" href=\"#parallel-stats\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor convenience, some stats are logged to the console when execution completes, which should look something like this:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"======================================================\nelapsed:   2.35 | threads:    5 | thread time: 4.98 \nfeatures:    54 | ignored:   25 | efficiency: 0.42\nscenarios:  145 | passed:   145 | failed: 0\n======================================================\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003e======================================================\nelapsed:   2.35 | threads:    5 | thread time: 4.98 \nfeatures:    54 | ignored:   25 | efficiency: 0.42\nscenarios:  145 | passed:   145 | failed: 0\n======================================================\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe parallel runner will always run \u003ccode\u003eFeature\u003c/code\u003e-s in parallel. Karate will also run \u003ccode\u003eScenario\u003c/code\u003e-s in parallel by default. So if you have a \u003ccode\u003eFeature\u003c/code\u003e with multiple \u003ccode\u003eScenario\u003c/code\u003e-s in it - they will execute in parallel, and even each \u003ccode\u003eExamples\u003c/code\u003e row in a \u003ccode\u003eScenario Outline\u003c/code\u003e will do so !\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA \u003ccode\u003ekarate-timeline.html\u003c/code\u003e file will also be saved to the report output directory mentioned above (\u003ccode\u003etarget/karate-reports\u003c/code\u003e by default) - which is useful for visually verifying or troubleshooting the effectiveness of the test-run (\u003ca href=\"https://twitter.com/KarateDSL/status/1049321708241317888\" rel=\"nofollow\"\u003esee video\u003c/a\u003e).\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003e@parallel=false\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-parallelfalse\" class=\"anchor\" aria-label=\"Permalink: @parallel=false\" href=\"#parallelfalse\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn rare cases you may want to suppress the default of \u003ccode\u003eScenario\u003c/code\u003e-s executing in parallel and the special \u003ca href=\"#tags\"\u003e\u003ccode\u003etag\u003c/code\u003e\u003c/a\u003e \u003ccode\u003e@parallel=false\u003c/code\u003e can be used. If you place it above the \u003ca href=\"#script-structure\"\u003e\u003ccode\u003eFeature\u003c/code\u003e\u003c/a\u003e keyword, it will apply to all \u003ccode\u003eScenario\u003c/code\u003e-s. And if you just want one or two \u003ccode\u003eScenario\u003c/code\u003e-s to NOT run in parallel, you can place this tag above only \u003cem\u003ethose\u003c/em\u003e \u003ccode\u003eScenario\u003c/code\u003e-s. See \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/encoding/encoding.feature\"\u003eexample\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that forcing \u003ccode\u003eScenario\u003c/code\u003e-s to run in a particular sequence \u003ca href=\"https://stackoverflow.com/a/46080568/143475\" rel=\"nofollow\"\u003eis an anti-pattern\u003c/a\u003e, and should be avoided as far as possible.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eTest Reports\u003c/h2\u003e\u003ca id=\"user-content-test-reports\" class=\"anchor\" aria-label=\"Permalink: Test Reports\" href=\"#test-reports\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAs mentioned above, most CI tools would be able to process the JUnit XML output of the \u003ca href=\"#parallel-execution\"\u003eparallel runner\u003c/a\u003e and determine the status of the build as well as generate reports.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003eKarate Demo\u003c/a\u003e has a working example of the recommended parallel-runner set up. It also \u003ca href=\"/karatelabs/karate/blob/master/karate-demo#example-report\"\u003edetails how\u003c/a\u003e a third-party library can be easily used to generate some very nice-looking reports, from the JSON output of the parallel runner.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor example, here below is an actual report generated by the \u003ca href=\"https://github.com/damianszczepanik/cucumber-reporting\"\u003ecucumber-reporting\u003c/a\u003e open-source library.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"/karatelabs/karate/blob/master/karate-demo/src/test/resources/karate-maven-report.jpg\"\u003e\u003cimg src=\"/karatelabs/karate/raw/master/karate-demo/src/test/resources/karate-maven-report.jpg\" height=\"600px\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAnother example for a popular Maven reporting plugin that is compatible with Karate JSON is \u003ca href=\"https://github.com/trivago/cluecumber-report-plugin\"\u003eCluecumber\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe demo also features \u003ca href=\"/karatelabs/karate/blob/master/karate-demo#code-coverage-using-jacoco\"\u003ecode-coverage using Jacoco\u003c/a\u003e, and some tips for even non-Java back-ends. Some third-party report-server solutions integrate with Karate such as \u003ca href=\"https://github.com/reportportal/agent-java-karate\"\u003eReportPortal.io\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eLogging\u003c/h2\u003e\u003ca id=\"user-content-logging\" class=\"anchor\" aria-label=\"Permalink: Logging\" href=\"#logging\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThis is optional, and Karate will work without the logging config in place, but the default console logging may be too verbose for your needs.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eKarate uses \u003ca href=\"http://logback.qos.ch\" rel=\"nofollow\"\u003eLOGBack\u003c/a\u003e which looks for a file called \u003ccode\u003elogback-test.xml\u003c/code\u003e on the '\u003ca href=\"#classpath\"\u003eclasspath\u003c/a\u003e'.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eIn rare cases, e.g. if you are using Karate to create a Java application, \u003ca href=\"http://logback.qos.ch/manual/configuration.html\" rel=\"nofollow\"\u003eLOGBack will look for \u003ccode\u003elogback.xml\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eHere is a sample \u003ccode\u003elogback-test.xml\u003c/code\u003e for you to get started.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\n\u0026lt;configuration\u0026gt;\n \n    \u0026lt;appender name=\u0026quot;STDOUT\u0026quot; class=\u0026quot;ch.qos.logback.core.ConsoleAppender\u0026quot;\u0026gt;\n        \u0026lt;encoder\u0026gt;\n            \u0026lt;pattern\u0026gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u0026lt;/pattern\u0026gt;\n        \u0026lt;/encoder\u0026gt;\n    \u0026lt;/appender\u0026gt;\n  \n    \u0026lt;appender name=\u0026quot;FILE\u0026quot; class=\u0026quot;ch.qos.logback.core.FileAppender\u0026quot;\u0026gt;\n        \u0026lt;file\u0026gt;target/karate.log\u0026lt;/file\u0026gt;\n        \u0026lt;encoder\u0026gt;\n            \u0026lt;pattern\u0026gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u0026lt;/pattern\u0026gt;\n        \u0026lt;/encoder\u0026gt;\n    \u0026lt;/appender\u0026gt;    \n   \n    \u0026lt;logger name=\u0026quot;com.intuit.karate\u0026quot; level=\u0026quot;DEBUG\u0026quot;/\u0026gt;\n   \n    \u0026lt;root level=\u0026quot;info\u0026quot;\u0026gt;\n        \u0026lt;appender-ref ref=\u0026quot;STDOUT\u0026quot; /\u0026gt;\n        \u0026lt;appender-ref ref=\u0026quot;FILE\u0026quot; /\u0026gt;\n    \u0026lt;/root\u0026gt;\n  \n\u0026lt;/configuration\u0026gt;\"\u003e\u003cpre\u003e\u0026lt;?\u003cspan class=\"pl-ent\"\u003exml\u003c/span\u003e\u003cspan class=\"pl-e\"\u003e version\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e1.0\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"pl-e\"\u003e encoding\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eUTF-8\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e?\u0026gt;\n\u0026lt;\u003cspan class=\"pl-ent\"\u003econfiguration\u003c/span\u003e\u0026gt;\n \n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eappender\u003c/span\u003e \u003cspan class=\"pl-e\"\u003ename\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eSTDOUT\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"pl-e\"\u003eclass\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ech.qos.logback.core.ConsoleAppender\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan class=\"pl-ent\"\u003eencoder\u003c/span\u003e\u0026gt;\n            \u0026lt;\u003cspan class=\"pl-ent\"\u003epattern\u003c/span\u003e\u0026gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u0026lt;/\u003cspan class=\"pl-ent\"\u003epattern\u003c/span\u003e\u0026gt;\n        \u0026lt;/\u003cspan class=\"pl-ent\"\u003eencoder\u003c/span\u003e\u0026gt;\n    \u0026lt;/\u003cspan class=\"pl-ent\"\u003eappender\u003c/span\u003e\u0026gt;\n  \n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eappender\u003c/span\u003e \u003cspan class=\"pl-e\"\u003ename\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eFILE\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"pl-e\"\u003eclass\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ech.qos.logback.core.FileAppender\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan class=\"pl-ent\"\u003efile\u003c/span\u003e\u0026gt;target/karate.log\u0026lt;/\u003cspan class=\"pl-ent\"\u003efile\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan class=\"pl-ent\"\u003eencoder\u003c/span\u003e\u0026gt;\n            \u0026lt;\u003cspan class=\"pl-ent\"\u003epattern\u003c/span\u003e\u0026gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u0026lt;/\u003cspan class=\"pl-ent\"\u003epattern\u003c/span\u003e\u0026gt;\n        \u0026lt;/\u003cspan class=\"pl-ent\"\u003eencoder\u003c/span\u003e\u0026gt;\n    \u0026lt;/\u003cspan class=\"pl-ent\"\u003eappender\u003c/span\u003e\u0026gt;    \n   \n    \u0026lt;\u003cspan class=\"pl-ent\"\u003elogger\u003c/span\u003e \u003cspan class=\"pl-e\"\u003ename\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ecom.intuit.karate\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"pl-e\"\u003elevel\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eDEBUG\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e/\u0026gt;\n   \n    \u0026lt;\u003cspan class=\"pl-ent\"\u003eroot\u003c/span\u003e \u003cspan class=\"pl-e\"\u003elevel\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003einfo\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan class=\"pl-ent\"\u003eappender-ref\u003c/span\u003e \u003cspan class=\"pl-e\"\u003eref\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eSTDOUT\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e /\u0026gt;\n        \u0026lt;\u003cspan class=\"pl-ent\"\u003eappender-ref\u003c/span\u003e \u003cspan class=\"pl-e\"\u003eref\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eFILE\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e /\u0026gt;\n    \u0026lt;/\u003cspan class=\"pl-ent\"\u003eroot\u003c/span\u003e\u0026gt;\n  \n\u0026lt;/\u003cspan class=\"pl-ent\"\u003econfiguration\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can change the \u003ccode\u003ecom.intuit.karate\u003c/code\u003e logger level to \u003ccode\u003eINFO\u003c/code\u003e to reduce the amount of logging. When the level is \u003ccode\u003eDEBUG\u003c/code\u003e the entire request and response payloads are logged. If you use the above config, logs will be captured in \u003ccode\u003etarget/karate.log\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you want to keep the level as \u003ccode\u003eDEBUG\u003c/code\u003e (\u003ca href=\"#test-reports\"\u003efor HTML reports\u003c/a\u003e) but suppress logging to the console, you can comment out the \u003ccode\u003eSTDOUT\u003c/code\u003e \"root\" \u003ccode\u003eappender-ref\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  \u0026lt;root level=\u0026quot;warn\u0026quot;\u0026gt;\n      \u0026lt;!-- \u0026lt;appender-ref ref=\u0026quot;STDOUT\u0026quot; /\u0026gt; --\u0026gt;\n      \u0026lt;appender-ref ref=\u0026quot;FILE\u0026quot; /\u0026gt;\n  \u0026lt;/root\u0026gt;\"\u003e\u003cpre\u003e  \u0026lt;\u003cspan class=\"pl-ent\"\u003eroot\u003c/span\u003e \u003cspan class=\"pl-e\"\u003elevel\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ewarn\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u0026gt;\n      \u003cspan class=\"pl-c\"\u003e\u003cspan class=\"pl-c\"\u003e\u0026lt;!--\u003c/span\u003e \u0026lt;appender-ref ref=\"STDOUT\" /\u0026gt; \u003cspan class=\"pl-c\"\u003e--\u0026gt;\u003c/span\u003e\u003c/span\u003e\n      \u0026lt;\u003cspan class=\"pl-ent\"\u003eappender-ref\u003c/span\u003e \u003cspan class=\"pl-e\"\u003eref\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eFILE\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e /\u0026gt;\n  \u0026lt;/\u003cspan class=\"pl-ent\"\u003eroot\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOr another option is to use a \u003ca href=\"http://logback.qos.ch/manual/filters.html#thresholdFilter\" rel=\"nofollow\"\u003e\u003ccode\u003eThresholdFilter\u003c/code\u003e\u003c/a\u003e, so you still see critical logs on the console:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  \u0026lt;appender name=\u0026quot;STDOUT\u0026quot; class=\u0026quot;ch.qos.logback.core.ConsoleAppender\u0026quot;\u0026gt;\n      \u0026lt;filter class=\u0026quot;ch.qos.logback.classic.filter.ThresholdFilter\u0026quot;\u0026gt;\n          \u0026lt;level\u0026gt;WARN\u0026lt;/level\u0026gt;\n      \u0026lt;/filter\u0026gt;\n      \u0026lt;encoder\u0026gt;\n          \u0026lt;pattern\u0026gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u0026lt;/pattern\u0026gt;\n      \u0026lt;/encoder\u0026gt;\n  \u0026lt;/appender\u0026gt;\"\u003e\u003cpre\u003e  \u0026lt;\u003cspan class=\"pl-ent\"\u003eappender\u003c/span\u003e \u003cspan class=\"pl-e\"\u003ename\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003eSTDOUT\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e \u003cspan class=\"pl-e\"\u003eclass\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ech.qos.logback.core.ConsoleAppender\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u0026gt;\n      \u0026lt;\u003cspan class=\"pl-ent\"\u003efilter\u003c/span\u003e \u003cspan class=\"pl-e\"\u003eclass\u003c/span\u003e=\u003cspan class=\"pl-s\"\u003e\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003ech.qos.logback.classic.filter.ThresholdFilter\u003cspan class=\"pl-pds\"\u003e\"\u003c/span\u003e\u003c/span\u003e\u0026gt;\n          \u0026lt;\u003cspan class=\"pl-ent\"\u003elevel\u003c/span\u003e\u0026gt;WARN\u0026lt;/\u003cspan class=\"pl-ent\"\u003elevel\u003c/span\u003e\u0026gt;\n      \u0026lt;/\u003cspan class=\"pl-ent\"\u003efilter\u003c/span\u003e\u0026gt;\n      \u0026lt;\u003cspan class=\"pl-ent\"\u003eencoder\u003c/span\u003e\u0026gt;\n          \u0026lt;\u003cspan class=\"pl-ent\"\u003epattern\u003c/span\u003e\u0026gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u0026lt;/\u003cspan class=\"pl-ent\"\u003epattern\u003c/span\u003e\u0026gt;\n      \u0026lt;/\u003cspan class=\"pl-ent\"\u003eencoder\u003c/span\u003e\u0026gt;\n  \u0026lt;/\u003cspan class=\"pl-ent\"\u003eappender\u003c/span\u003e\u0026gt;\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you want to exclude the logs from your CI/CD pipeline but keep them in the execution of your users in their locals you can configure your logback using \u003ca href=\"http://logback.qos.ch/manual/configuration.html#conditional\" rel=\"nofollow\"\u003eJanino\u003c/a\u003e. In such cases it might be desirable to have your tests using \u003ccode\u003ekarate.logger.debug('your additional info')\u003c/code\u003e instead of the \u003ccode\u003eprint\u003c/code\u003e keyword so you can keep logs in your pipeline in INFO.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor suppressing sensitive information such as secrets and passwords from the log and reports, see \u003ca href=\"#log-masking\"\u003eLog Masking\u003c/a\u003e and \u003ca href=\"#report-verbosity\"\u003eReport Verbosity\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eConfiguration\u003c/h1\u003e\u003ca id=\"user-content-configuration\" class=\"anchor\" aria-label=\"Permalink: Configuration\" href=\"#configuration\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eYou can skip this section and jump straight to the \u003ca href=\"#syntax-guide\"\u003eSyntax Guide\u003c/a\u003e if you are in a hurry to get started with Karate. Things will work even if the \u003ccode\u003ekarate-config.js\u003c/code\u003e file is not present.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eClasspath\u003c/h2\u003e\u003ca id=\"user-content-classpath\" class=\"anchor\" aria-label=\"Permalink: Classpath\" href=\"#classpath\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe 'classpath' is a Java concept and is where some configuration files such as the one for \u003ca href=\"#logging\"\u003elogging\u003c/a\u003e are expected to be by default. If you use the Maven \u003ccode\u003e\u0026lt;test-resources\u0026gt;\u003c/code\u003e tweak \u003ca href=\"#folder-structure\"\u003edescribed earlier\u003c/a\u003e (recommended), the 'root' of the classpath will be in the \u003ccode\u003esrc/test/java\u003c/code\u003e folder, or else would be \u003ccode\u003esrc/test/resources\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-karate-configjs\" class=\"anchor\" aria-label=\"Permalink: karate-config.js\" href=\"#karate-configjs\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe only 'rule' is that on start-up Karate expects a file called \u003ccode\u003ekarate-config.js\u003c/code\u003e to exist on the 'classpath' and contain a \u003ca href=\"#javascript-functions\"\u003eJavaScript function\u003c/a\u003e. The function is expected to return a JSON object and all keys and values in that JSON object will be made available as script variables.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAnd that's all there is to Karate configuration ! You can easily get the value of the \u003ca href=\"#switching-the-environment\"\u003ecurrent 'environment' or 'profile'\u003c/a\u003e, and then set up 'global' variables using some simple JavaScript. Here is an example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function fn() {   \n  var env = karate.env; // get java system property 'karate.env'\n  karate.log('karate.env system property was:', env);\n  if (!env) {\n    env = 'dev'; // a custom 'intelligent' default\n  }\n  var config = { // base config JSON\n    appId: 'my.app.id',\n    appSecret: 'my.secret',\n    someUrlBase: 'https://some-host.com/v1/auth/',\n    anotherUrlBase: 'https://another-host.com/v1/'\n  };\n  if (env == 'stage') {\n    // over-ride only those that need to be\n    config.someUrlBase = 'https://stage-host/v1/auth';\n  } else if (env == 'e2e') {\n    config.someUrlBase = 'https://e2e-host/v1/auth';\n  }\n  // don't waste time waiting for a connection or if servers don't respond within 5 seconds\n  karate.configure('connectTimeout', 5000);\n  karate.configure('readTimeout', 5000);\n  return config;\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003efn\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e   \n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eenv\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eenv\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e \u003cspan class=\"pl-c\"\u003e// get java system property 'karate.env'\u003c/span\u003e\n  \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003elog\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'karate.env system property was:'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eenv\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003e!\u003c/span\u003e\u003cspan class=\"pl-s1\"\u003eenv\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"pl-s1\"\u003eenv\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'dev'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e \u003cspan class=\"pl-c\"\u003e// a custom 'intelligent' default\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003econfig\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c\"\u003e// base config JSON\u003c/span\u003e\n    \u003cspan class=\"pl-c1\"\u003eappId\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'my.app.id'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"pl-c1\"\u003eappSecret\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'my.secret'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"pl-c1\"\u003esomeUrlBase\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'https://some-host.com/v1/auth/'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"pl-c1\"\u003eanotherUrlBase\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'https://another-host.com/v1/'\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s1\"\u003eenv\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e==\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'stage'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"pl-c\"\u003e// over-ride only those that need to be\u003c/span\u003e\n    \u003cspan class=\"pl-s1\"\u003econfig\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003esomeUrlBase\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'https://stage-host/v1/auth'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e \u003cspan class=\"pl-k\"\u003eelse\u003c/span\u003e \u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s1\"\u003eenv\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e==\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'e2e'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"pl-s1\"\u003econfig\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003esomeUrlBase\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'https://e2e-host/v1/auth'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"pl-c\"\u003e// don't waste time waiting for a connection or if servers don't respond within 5 seconds\u003c/span\u003e\n  \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'connectTimeout'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e5000\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'readTimeout'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e5000\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003econfig\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eHere above, you see the \u003ca href=\"#karate-log\"\u003e\u003ccode\u003ekarate.log()\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#karate-env\"\u003e\u003ccode\u003ekarate.env\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#karate-configure\"\u003e\u003ccode\u003ekarate.configure()\u003c/code\u003e\u003c/a\u003e \"helpers\" being used. Note that the \u003ccode\u003ekarate-config.js\u003c/code\u003e is re-processed for \u003cem\u003eevery\u003c/em\u003e \u003ccode\u003eScenario\u003c/code\u003e and in rare cases, you may want to initialize (e.g. auth tokens) only once for all of your tests. This can be achieved using \u003ca href=\"#karatecallsingle\"\u003e\u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eA common requirement is to pass dynamic parameter values via the command line, and you can use the \u003ca href=\"#karate-properties\"\u003e\u003ccode\u003ekarate.properties['some.name']\u003c/code\u003e\u003c/a\u003e syntax for getting a system property passed via JVM options in the form \u003ccode\u003e-Dsome.name=foo\u003c/code\u003e. Refer to the section on \u003ca href=\"#dynamic-port-numbers\"\u003edynamic port numbers\u003c/a\u003e for an example.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eYou can even retrieve operating-system environment variables via \u003ca href=\"#calling-java\"\u003eJava interop\u003c/a\u003e as follows: \u003ccode\u003evar systemPath = java.lang.System.getenv('PATH');\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThis decision to use JavaScript for config is influenced by years of experience with the set-up of complicated test-suites and fighting with \u003ca href=\"http://maven.apache.org/guides/introduction/introduction-to-profiles.html\" rel=\"nofollow\"\u003eMaven profiles\u003c/a\u003e, \u003ca href=\"https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html\" rel=\"nofollow\"\u003eMaven resource-filtering\u003c/a\u003e and the XML-soup that somehow gets summoned by the \u003ca href=\"http://maven.apache.org/plugins/maven-antrun-plugin/usage.html\" rel=\"nofollow\"\u003eMaven AntRun plugin\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eKarate's approach frees you from Maven, is far more expressive, allows you to eyeball all environments in one place, and is still a plain-text file.  If you want, you could even create \u003ca href=\"https://stackoverflow.com/a/49693808/143475\" rel=\"nofollow\"\u003enested chunks of JSON that 'name-space' your config variables\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eOne way to appreciate Karate's approach is to think over what it takes to add a new environment-dependent variable (e.g. a password) into a test. In typical frameworks it could mean changing multiple properties files, maven profiles and placeholders, and maybe even threading the value via a dependency-injection framework - before you can even access the value within your test.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThis approach is indeed slightly more complicated than traditional \u003ccode\u003e*.properties\u003c/code\u003e files - but you \u003cem\u003eneed\u003c/em\u003e this complexity. Keep in mind that these are tests (not production code) and this config is going to be maintained more by the dev or QE team instead of the 'ops' or operations team.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAnd there is no more worrying about Maven profiles and whether the 'right' \u003ccode\u003e*.properties\u003c/code\u003e file has been copied to the proper place.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSwitching the Environment\u003c/h2\u003e\u003ca id=\"user-content-switching-the-environment\" class=\"anchor\" aria-label=\"Permalink: Switching the Environment\" href=\"#switching-the-environment\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThere is only one thing you need to do to switch the environment - which is to set a Java system property.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eBy default, the value of \u003ccode\u003ekarate.env\u003c/code\u003e when you access it within \u003ca href=\"#karate-configjs\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e - would be \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThe recipe for doing this when running Maven from the command line is:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn test -DargLine=\u0026quot;-Dkarate.env=e2e\u0026quot;\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn test -DargLine=\"-Dkarate.env=e2e\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOr in Gradle:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"./gradlew test -Dkarate.env=e2e\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003e./gradlew test -Dkarate.env=e2e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can refer to the documentation of the\n\u003ca href=\"http://maven.apache.org/plugins-archives/maven-surefire-plugin-2.12.4/examples/system-properties.html\" rel=\"nofollow\"\u003eMaven Surefire Plugin\u003c/a\u003e for alternate ways of achieving this, but the \u003ccode\u003eargLine\u003c/code\u003e approach is the simplest and should be more than sufficient for your Continuous Integration or test-automation needs.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere's a reminder that running any \u003ca href=\"https://maven.apache.org/surefire/maven-surefire-plugin/examples/single-test.html\" rel=\"nofollow\"\u003esingle JUnit test via Maven\u003c/a\u003e can be done by:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"mvn test -Dtest=CatsRunner\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003emvn test -Dtest=CatsRunner\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhere \u003ccode\u003eCatsRunner\u003c/code\u003e is the JUnit class name (in any package) you wish to run.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eKarate is flexible, you can easily over-write config variables within the Java or JUnit \"runner\" - which is very convenient when in dev-mode or rapid-prototyping.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"System.setProperty(\u0026quot;karate.env\u0026quot;, \u0026quot;pre-prod\u0026quot;);\"\u003e\u003cpre\u003e\u003cspan class=\"pl-smi\"\u003eSystem\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003esetProperty\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"karate.env\"\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e\"pre-prod\"\u003c/span\u003e);\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eBut the recommended way is to use the \u003ccode\u003ekarateEnv(name, value)\u003c/code\u003e or \u003ccode\u003esystemProperty(name, value)\u003c/code\u003e API on the \u003ca href=\"#parallel-execution\"\u003eparallel-runner\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor advanced users, note that \u003ca href=\"#tags\"\u003etags\u003c/a\u003e and the \u003ccode\u003ekarate.env\u003c/code\u003e environment-switch can be \"linked\" using the special \u003ca href=\"#environment-tags\"\u003eenvironment tags\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eEnvironment Specific Config\u003c/h2\u003e\u003ca id=\"user-content-environment-specific-config\" class=\"anchor\" aria-label=\"Permalink: Environment Specific Config\" href=\"#environment-specific-config\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen your project gets complex, you can have separate \u003ccode\u003ekarate-config-\u0026lt;env\u0026gt;.js\u003c/code\u003e files that will be processed for that specific value of \u003ca href=\"#switching-the-environment\"\u003e\u003ccode\u003ekarate.env\u003c/code\u003e\u003c/a\u003e. This is especially useful when you want to maintain passwords, secrets or even URL-s specific for your local dev environment.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eMake sure you configure your source code management system (e.g. Git) to ignore \u003ccode\u003ekarate-config-*.js\u003c/code\u003e if needed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThere should always be \u003ccode\u003ekarate-config.js\u003c/code\u003e in the \"root\" folder, even if you don't have any \"common\" config. In such cases, the function can do nothing or return an empty JSON. \u003ca href=\"https://github.com/karatelabs/karate/issues/1588\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/1588/hovercard\"\u003eLearn more\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eHere are the rules Karate uses on bootstrap (before every \u003ccode\u003eScenario\u003c/code\u003e or \u003ccode\u003eExamples\u003c/code\u003e row in a \u003ccode\u003eScenario Outline\u003c/code\u003e):\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eif the system-property \u003ccode\u003ekarate.config.dir\u003c/code\u003e was set, Karate will look in this folder for \u003ccode\u003ekarate-config.js\u003c/code\u003e - and if found, will process it\u003c/li\u003e\n\u003cli\u003eelse if \u003ccode\u003ekarate-config.js\u003c/code\u003e was not found in the above location (or \u003ccode\u003ekarate.config.dir\u003c/code\u003e was not set), \u003ca href=\"#configuration\"\u003e\u003ccode\u003eclasspath:karate-config.js\u003c/code\u003e\u003c/a\u003e would be processed (this is the default / common case)\u003c/li\u003e\n\u003cli\u003eif the \u003ccode\u003ekarate.env\u003c/code\u003e system property was set\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eif \u003ccode\u003ekarate.config.dir\u003c/code\u003e was set, Karate will also look for \u003ccode\u003efile:\u0026lt;karate.config.dir\u0026gt;/karate-config-\u0026lt;env\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eelse (if the \u003ccode\u003ekarate.config.dir\u003c/code\u003e was \u003cem\u003enot\u003c/em\u003e set), Karate will look for \u003ccode\u003eclasspath:karate-config-\u0026lt;env\u0026gt;.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eif the over-ride \u003ccode\u003ekarate-config-\u0026lt;env\u0026gt;.js\u003c/code\u003e exists, it will be processed, and the configuration (JSON entries) returned by this function will over-ride any set by \u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eRefer to the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003ekarate demo\u003c/a\u003e for an \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/karate-config-contract.js\"\u003eexample\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ekarate-base.js\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-karate-basejs\" class=\"anchor\" aria-label=\"Permalink: karate-base.js\" href=\"#karate-basejs\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAdvanced users who build frameworks on top of Karate have the option to supply a \u003ccode\u003ekarate-base.js\u003c/code\u003e file that Karate will look for on the \u003ca href=\"#classpath\"\u003e\u003ccode\u003eclasspath:\u003c/code\u003e\u003c/a\u003e. This is useful when you ship a JAR file containing re-usable features and JavaScript / Java code and want to 'default' a few variables that teams can 'inherit' from. So an additional rule in the above flow of 'rules' (before the \u003cem\u003efirst\u003c/em\u003e step) is as follows:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eif \u003ccode\u003eclasspath:karate-base.js\u003c/code\u003e exists - Karate will process this as a \u003ca href=\"#configuration\"\u003econfiguration source\u003c/a\u003e before anything else\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSyntax Guide\u003c/h1\u003e\u003ca id=\"user-content-syntax-guide\" class=\"anchor\" aria-label=\"Permalink: Syntax Guide\" href=\"#syntax-guide\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eScript Structure\u003c/h2\u003e\u003ca id=\"user-content-script-structure\" class=\"anchor\" aria-label=\"Permalink: Script Structure\" href=\"#script-structure\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate scripts are technically in '\u003ca href=\"https://docs.cucumber.io/gherkin/reference/\" rel=\"nofollow\"\u003eGherkin\u003c/a\u003e' format - but all you need to grok as someone who needs to test web-services are the three sections: \u003ccode\u003eFeature\u003c/code\u003e, \u003ccode\u003eBackground\u003c/code\u003e and \u003ccode\u003eScenario\u003c/code\u003e. There can be multiple Scenario-s in a \u003ccode\u003e*.feature\u003c/code\u003e file, and at least one should be present. The \u003ccode\u003eBackground\u003c/code\u003e is optional.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eVariables set using \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e in the \u003ccode\u003eBackground\u003c/code\u003e will be re-set before \u003cem\u003eevery\u003c/em\u003e \u003ccode\u003eScenario\u003c/code\u003e. If you are looking for a way to do something only \u003cstrong\u003eonce\u003c/strong\u003e per \u003ccode\u003eFeature\u003c/code\u003e, take a look at \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e. On the other hand, if you are expecting a variable in the \u003ccode\u003eBackground\u003c/code\u003e to be modified by one \u003ccode\u003eScenario\u003c/code\u003e so that later ones can see the updated value - that is \u003cem\u003enot\u003c/em\u003e how you should think of them, and you should combine your 'flow' into one scenario. Keep in mind that you should be able to comment-out a \u003ccode\u003eScenario\u003c/code\u003e or skip some via \u003ca href=\"#tags\"\u003e\u003ccode\u003etags\u003c/code\u003e\u003c/a\u003e without impacting any others. Note that the \u003ca href=\"#parallel-execution\"\u003eparallel runner\u003c/a\u003e will run \u003ccode\u003eScenario\u003c/code\u003e-s in parallel, which means they can run in \u003cem\u003eany\u003c/em\u003e order. If you are looking for ways to do something only \u003cem\u003eonce\u003c/em\u003e per feature or across \u003cem\u003eall\u003c/em\u003e your tests, see \u003ca href=\"#hooks\"\u003eHooks\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eLines that start with a \u003ccode\u003e#\u003c/code\u003e are comments.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature: brief description of what is being tested\n    more lines of description if needed.\n\nBackground:\n  # this section is optional !\n  # steps here are executed before each Scenario in this file\n  # variables defined here will be 'global' to all scenarios\n  # and will be re-initialized before every scenario\n\nScenario: brief description of this scenario\n  # steps for this scenario\n\nScenario: a different scenario\n  # steps for this other scenario\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eFeature\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e brief description of what is being tested\u003c/span\u003e\n    more lines of description if needed.\n\n\u003cspan class=\"pl-k\"\u003eBackground\u003c/span\u003e:\n\u003cspan class=\"pl-c\"\u003e  # this section is optional !\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e  # steps here are executed before each Scenario in this file\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e  # variables defined here will be 'global' to all scenarios\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e  # and will be re-initialized before every scenario\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e brief description of this scenario\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e  # steps for this scenario\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e a different scenario\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e  # steps for this other scenario\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThere is also a variant of \u003ccode\u003eScenario\u003c/code\u003e called \u003ccode\u003eScenario Outline\u003c/code\u003e along with \u003ccode\u003eExamples\u003c/code\u003e, useful for \u003ca href=\"#data-driven-tests\"\u003edata-driven tests\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eGiven-When-Then\u003c/h3\u003e\u003ca id=\"user-content-given-when-then\" class=\"anchor\" aria-label=\"Permalink: Given-When-Then\" href=\"#given-when-then\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe business of web-services testing requires access to low-level aspects such as HTTP headers, URL-paths, query-parameters, complex JSON or XML payloads and response-codes. And Karate gives you control over these aspects with the small set of keywords focused on HTTP such as \u003ca href=\"#url\"\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#path\"\u003e\u003ccode\u003epath\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#param\"\u003e\u003ccode\u003eparam\u003c/code\u003e\u003c/a\u003e, etc.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eKarate does not attempt to have tests be in \"natural language\" like how Cucumber tests are \u003ca href=\"https://docs.cucumber.io/gherkin/reference/\" rel=\"nofollow\"\u003etraditionally expected to be\u003c/a\u003e. That said, the syntax is very concise, and the convention of every step having to start with either \u003ccode\u003eGiven\u003c/code\u003e, \u003ccode\u003eAnd\u003c/code\u003e, \u003ccode\u003eWhen\u003c/code\u003e or \u003ccode\u003eThen\u003c/code\u003e, makes things very readable. You end up with a decent approximation of BDD even though web-services by nature are \"headless\", without a UI, and not really human-friendly.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCucumber vs Karate\u003c/h4\u003e\u003ca id=\"user-content-cucumber-vs-karate\" class=\"anchor\" aria-label=\"Permalink: Cucumber vs Karate\" href=\"#cucumber-vs-karate\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eKarate was based on Cucumber-JVM until version 0.8.0 but the parser and engine were \u003ca href=\"https://github.com/karatelabs/karate/issues/444\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/444/hovercard\"\u003ere-written from scratch\u003c/a\u003e in 0.9.0 onwards. So we use the same \u003ca href=\"https://docs.cucumber.io/gherkin/\" rel=\"nofollow\"\u003eGherkin\u003c/a\u003e syntax - but the similarity ends there.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eIf you are familiar with Cucumber (JVM), you may be wondering if you need to write \u003ca href=\"https://docs.cucumber.io/gherkin/step-organization/\" rel=\"nofollow\"\u003estep-definitions\u003c/a\u003e. The answer is \u003cstrong\u003eno\u003c/strong\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eKarate's approach is that all the step-definitions you need in order to work with HTTP, JSON and XML have been already implemented. And since you can easily extend Karate \u003ca href=\"#call\"\u003eusing JavaScript\u003c/a\u003e, there is no need to compile Java code any more.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe following table summarizes some key differences between Cucumber and Karate.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e▫️\u003c/th\u003e\n\u003cth\u003eCucumber\u003c/th\u003e\n\u003cth\u003eKarate\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eStep Definitions Built-In\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eNo\u003c/strong\u003e. You need to keep implementing them as your functionality grows. \u003ca href=\"https://thepracticaldeveloper.com/2017/08/03/microservices-end-to-end-tests-with-cucumber-and-spring-boot/\" rel=\"nofollow\"\u003eThis can get very tedious\u003c/a\u003e, especially since for \u003ca href=\"https://docs.cucumber.io/cucumber/state/#dependency-injection\" rel=\"nofollow\"\u003edependency-injection\u003c/a\u003e, you are \u003ca href=\"http://angiejones.tech/rest-assured-with-cucumber-using-bdd-for-web-services-automation?refreshed=y#comment-40\" rel=\"nofollow\"\u003eon your own\u003c/a\u003e.\u003c/td\u003e\n\u003ctd\u003e✅ \u003cstrong\u003eYes\u003c/strong\u003e. No extra Java code needed.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eSingle Layer of Code To Maintain\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eNo\u003c/strong\u003e. There are 2 Layers. The \u003ca href=\"https://docs.cucumber.io/gherkin/reference/\" rel=\"nofollow\"\u003eGherkin\u003c/a\u003e spec or \u003ccode\u003e*.feature\u003c/code\u003e files make up one layer, and you will also have the corresponding Java step-definitions.\u003c/td\u003e\n\u003ctd\u003e✅ \u003cstrong\u003eYes\u003c/strong\u003e. Only 1 layer of Karate-script (based on Gherkin).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eReadable Specification\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eYes\u003c/strong\u003e. Cucumber will read like natural language \u003cem\u003eif\u003c/em\u003e you implement the step-definitions right.\u003c/td\u003e\n\u003ctd\u003e❌ \u003cstrong\u003eNo\u003c/strong\u003e. Although Karate is simple, and a \u003ca href=\"https://ayende.com/blog/2984/dsl-vs-fluent-interface-compare-contrast\" rel=\"nofollow\"\u003etrue DSL\u003c/a\u003e, it is ultimately a \u003ca href=\"https://hackernoon.com/yes-karate-is-not-true-bdd-698bf4a9be39\" rel=\"nofollow\"\u003emini-programming language\u003c/a\u003e. But it is \u003ca href=\"https://stackoverflow.com/a/47799207/143475\" rel=\"nofollow\"\u003eperfect for testing web-services\u003c/a\u003e at the level of HTTP requests and responses.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eRe-Use Feature Files\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eNo\u003c/strong\u003e. Cucumber does not support being able to call (and thus re-use) other \u003ccode\u003e*.feature\u003c/code\u003e files from a test-script.\u003c/td\u003e\n\u003ctd\u003e✅ \u003ca href=\"#calling-other-feature-files\"\u003e\u003cstrong\u003eYes\u003c/strong\u003e\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eDynamic Data-Driven Testing\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eNo\u003c/strong\u003e. Cucumber's \u003ca href=\"#the-cucumber-way\"\u003e\u003ccode\u003eScenario Outline\u003c/code\u003e\u003c/a\u003e expects the \u003ccode\u003eExamples\u003c/code\u003e to contain a fixed set of rows.\u003c/td\u003e\n\u003ctd\u003e✅ \u003cstrong\u003eYes\u003c/strong\u003e. Karate's support for calling other \u003ccode\u003e*.feature\u003c/code\u003e files allows you to use a \u003ca href=\"#data-driven-features\"\u003eJSON array as the data-source\u003c/a\u003e and you can \u003ca href=\"https://twitter.com/KarateDSL/status/1051433711814627329\" rel=\"nofollow\"\u003euse JSON\u003c/a\u003e or \u003ca href=\"#csv-files\"\u003eeven CSV\u003c/a\u003e directly in a data-driven \u003ccode\u003eScenario Outline\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eParallel Execution\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eNo\u003c/strong\u003e. There are some challenges (especially with reporting) and you can find various discussions and third-party projects on the web that attempt to close this gap\u003c/td\u003e\n\u003ctd\u003e✅ \u003ca href=\"#parallel-execution\"\u003e\u003cstrong\u003eYes\u003c/strong\u003e\u003c/a\u003e. Karate runs even \u003ccode\u003eScenario\u003c/code\u003e-s in parallel, not just \u003ccode\u003eFeature\u003c/code\u003e-s.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eRun 'Set-Up' Routines Only Once\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eNo\u003c/strong\u003e. Cucumber has a limitation where \u003ccode\u003eBackground\u003c/code\u003e steps are re-run for every \u003ccode\u003eScenario\u003c/code\u003e and worse - even for every \u003ccode\u003eExamples\u003c/code\u003e row within a \u003ccode\u003eScenario Outline\u003c/code\u003e. This has been a \u003ca href=\"https://github.com/cucumber/cucumber-jvm/issues/515\" data-hovercard-type=\"issue\" data-hovercard-url=\"/cucumber/cucumber-jvm/issues/515/hovercard\"\u003ehighly-requested open issue\u003c/a\u003e for a \u003cem\u003elong\u003c/em\u003e time.\u003c/td\u003e\n\u003ctd\u003e✅ \u003ca href=\"#hooks\"\u003e\u003cstrong\u003eYes\u003c/strong\u003e\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eEmbedded JavaScript Engine\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eNo\u003c/strong\u003e. And you have to roll your own approach to environment-specific configuration and worry about \u003ca href=\"https://docs.cucumber.io/cucumber/state/#dependency-injection\" rel=\"nofollow\"\u003edependency-injection\u003c/a\u003e.\u003c/td\u003e\n\u003ctd\u003e✅ \u003cstrong\u003eYes\u003c/strong\u003e. Easily define all environments in a \u003ca href=\"#configuration\"\u003esingle file\u003c/a\u003e and share variables across all scenarios. Full script-ability via \u003ca href=\"#calling-javascript-functions\"\u003eJS\u003c/a\u003e or \u003ca href=\"#java-interop\"\u003eJava interop\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eOne nice thing about the design of the Gherkin syntax is that script-steps are treated the same no matter whether they start with the keyword \u003ccode\u003eGiven\u003c/code\u003e, \u003ccode\u003eAnd\u003c/code\u003e, \u003ccode\u003eWhen\u003c/code\u003e or \u003ccode\u003eThen\u003c/code\u003e.  What this means is that you are free to use whatever makes sense for you.  You could even have all the steps start with \u003ccode\u003eWhen\u003c/code\u003e and Karate won't care.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIn fact Gherkin supports the \u003ca href=\"https://www.relishapp.com/cucumber/cucumber/docs/gherkin/using-star-notation-instead-of-given-when-then\" rel=\"nofollow\"\u003ecatch-all symbol '\u003ccode\u003e*\u003c/code\u003e'\u003c/a\u003e - instead of forcing you to use \u003ccode\u003eGiven\u003c/code\u003e, \u003ccode\u003eWhen\u003c/code\u003e or \u003ccode\u003eThen\u003c/code\u003e. This is perfect for those cases where it really doesn't make sense - for example the \u003ca href=\"#script-structure\"\u003e\u003ccode\u003eBackground\u003c/code\u003e\u003c/a\u003e section or when you use the \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e or \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e syntax. When eyeballing a test-script, think of the \u003ccode\u003e*\u003c/code\u003e as a 'bullet-point'.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can read more about the Given-When-Then convention at the \u003ca href=\"https://docs.cucumber.io/gherkin/reference/\" rel=\"nofollow\"\u003eCucumber reference documentation\u003c/a\u003e. Since Karate uses Gherkin, you can also employ \u003ca href=\"#data-driven-tests\"\u003edata-driven\u003c/a\u003e techniques such as expressing data-tables in test scripts. Another good thing that Karate inherits is the nice IDE support for Cucumber that \u003ca href=\"https://www.jetbrains.com/idea/help/cucumber.html\" rel=\"nofollow\"\u003eIntelliJ\u003c/a\u003e and \u003ca href=\"https://cucumber.io/cucumber-eclipse/\" rel=\"nofollow\"\u003eEclipse\u003c/a\u003e have. So you can do things like right-click and run a \u003ccode\u003e*.feature\u003c/code\u003e file (or scenario) without needing to use a JUnit runner.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor a detailed discussion on BDD and how Karate relates to Cucumber, please refer to this blog-post: \u003ca href=\"https://medium.com/@ptrthomas/yes-karate-is-not-true-bdd-698bf4a9be39\" rel=\"nofollow\"\u003eYes, Karate is not \u003cem\u003etrue\u003c/em\u003e BDD\u003c/a\u003e. It is the opinion of the author of Karate that \u003cem\u003etrue\u003c/em\u003e BDD is un-necessary over-kill for API testing, and this is explained more in \u003ca href=\"https://stackoverflow.com/a/47799207/143475\" rel=\"nofollow\"\u003ethis answer\u003c/a\u003e on \u003ca href=\"https://stackoverflow.com/questions/tagged/karate\" rel=\"nofollow\"\u003eStack Overflow\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWith the formalities out of the way, let's dive straight into the syntax.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSetting and Using Variables\u003c/h1\u003e\u003ca id=\"user-content-setting-and-using-variables\" class=\"anchor\" aria-label=\"Permalink: Setting and Using Variables\" href=\"#setting-and-using-variables\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-def\" class=\"anchor\" aria-label=\"Permalink: def\" href=\"#def\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSet a named variable\u003c/h3\u003e\u003ca id=\"user-content-set-a-named-variable\" class=\"anchor\" aria-label=\"Permalink: Set a named variable\" href=\"#set-a-named-variable\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# assigning a string value:\nGiven def myVar = 'world'\n\n# using a variable\nThen print myVar\n\n# assigning a number (you can use '*' instead of Given / When / Then)\n* def myNum = 5\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# assigning a string value:\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef myVar = \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# using a variable\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003eprint myVar\n\n\u003cspan class=\"pl-c\"\u003e# assigning a number (you can use '*' instead of Given / When / Then)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef myNum = 5\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ccode\u003edef\u003c/code\u003e will over-write any variable that was using the same name earlier. Keep in mind that the start-up \u003ca href=\"#configuration\"\u003econfiguration routine\u003c/a\u003e could have already initialized some variables before the script even started. For details of scope and visibility of variables, see \u003ca href=\"#script-structure\"\u003eScript Structure\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ccode\u003eurl\u003c/code\u003e and \u003ccode\u003erequest\u003c/code\u003e are not allowed as variable names. This is just to reduce confusion for users new to Karate who tend to do \u003ccode\u003e* def request = {}\u003c/code\u003e and expect the \u003ca href=\"#request\"\u003e\u003ccode\u003erequest\u003c/code\u003e\u003c/a\u003e body or similarly, the \u003ca href=\"#url\"\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/a\u003e to be set.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThe examples above are simple, but a variety of expression 'shapes' are supported on the right hand side of the \u003ccode\u003e=\u003c/code\u003e symbol. The section on \u003ca href=\"#karate-expressions\"\u003eKarate Expressions\u003c/a\u003e goes into the details.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eassert\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-assert\" class=\"anchor\" aria-label=\"Permalink: assert\" href=\"#assert\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eAssert if an expression evaluates to \u003ccode\u003etrue\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-assert-if-an-expression-evaluates-to-true\" class=\"anchor\" aria-label=\"Permalink: Assert if an expression evaluates to true\" href=\"#assert-if-an-expression-evaluates-to-true\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOnce defined, you can refer to a variable by name. Expressions are evaluated using the embedded JavaScript engine. The assert keyword can be used to assert that an expression returns a boolean value.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given def color = 'red '\nAnd def num = 5\nThen assert color + num == 'red 5'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef color = \u003cspan class=\"pl-s\"\u003e'red '\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003edef num = 5\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003eassert color + num == \u003cspan class=\"pl-s\"\u003e'red 5'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eEverything to the right of the \u003ccode\u003eassert\u003c/code\u003e keyword will be evaluated as a single expression.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSomething worth mentioning here is that you would hardly need to use \u003ccode\u003eassert\u003c/code\u003e in your test scripts. Instead you would typically use the \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e keyword, that is designed for performing powerful assertions against JSON and XML response payloads.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-print\" class=\"anchor\" aria-label=\"Permalink: print\" href=\"#print\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eLog to the console\u003c/h3\u003e\u003ca id=\"user-content-log-to-the-console\" class=\"anchor\" aria-label=\"Permalink: Log to the console\" href=\"#log-to-the-console\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can use \u003ccode\u003eprint\u003c/code\u003e to log variables to the console in the middle of a script. For convenience, you can have multiple expressions separated by commas, so this is the recommended pattern:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* print 'the value of a is:', a\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'the value of a is:'\u003c/span\u003e, a\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSimilar to \u003ca href=\"#assert\"\u003e\u003ccode\u003eassert\u003c/code\u003e\u003c/a\u003e, the expressions on the right-hand-side of a \u003ccode\u003eprint\u003c/code\u003e have to be valid JavaScript. JsonPath and \u003ca href=\"#karate-expressions\"\u003eKarate expressions\u003c/a\u003e are not supported.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you use commas (instead of concatenating strings using \u003ccode\u003e+\u003c/code\u003e), Karate will 'pretty-print' variables, which is what you typically want when dealing with \u003ca href=\"#native-data-types\"\u003eJSON or XML\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def myJson = { foo: 'bar', baz: [1, 2, 3] }\n* print 'the value of myJson is:', myJson\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef myJson = { foo: \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e, baz: [1, 2, 3] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'the value of myJson is:'\u003c/span\u003e, myJson\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhich results in the following output:\u003c/p\u003e\n\u003cdiv class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"20:29:11.290 [main] INFO  com.intuit.karate - [print] the value of myJson is: {\n  \u0026quot;foo\u0026quot;: \u0026quot;bar\u0026quot;,\n  \u0026quot;baz\u0026quot;: [\n    1,\n    2,\n    3\n  ]\n}\"\u003e\u003cpre class=\"notranslate\"\u003e\u003ccode\u003e20:29:11.290 [main] INFO  com.intuit.karate - [print] the value of myJson is: {\n  \"foo\": \"bar\",\n  \"baz\": [\n    1,\n    2,\n    3\n  ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eSince XML is represented internally as a JSON-like or map-like object, if you perform string concatenation when printing, you will \u003cem\u003enot\u003c/em\u003e see XML - which can be confusing at first. Use the comma-delimited form (see above) or the JS helper (see below).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThe built-in \u003ca href=\"#the-karate-object\"\u003e\u003ccode\u003ekarate\u003c/code\u003e object\u003c/a\u003e is explained in detail later, but for now, note that this is also injected into \u003ccode\u003eprint\u003c/code\u003e (and even \u003ccode\u003eassert\u003c/code\u003e) statements, and it has a helpful \u003ca href=\"#karate-pretty\"\u003e\u003ccode\u003epretty\u003c/code\u003e\u003c/a\u003e method, that takes a JSON argument and a \u003ca href=\"#karate-prettyxml\"\u003e\u003ccode\u003eprettyXml\u003c/code\u003e\u003c/a\u003e method that deals with XML. So you could have also done something like:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* print 'the value of myJson is:\\n' + karate.pretty(myJson)\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'the value of myJson is:\u003cspan class=\"pl-cce\"\u003e\\n\u003c/span\u003e'\u003c/span\u003e + karate.pretty(myJson)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlso refer to the \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e keyword on how to switch on pretty-printing of all HTTP requests and responses.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e'Native' data types\u003c/h1\u003e\u003ca id=\"user-content-native-data-types\" class=\"anchor\" aria-label=\"Permalink: 'Native' data types\" href=\"#native-data-types\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNative data types mean that you can insert them into a script without having to worry about enclosing them in strings and then having to 'escape' double-quotes all over the place. They seamlessly fit 'in-line' within your test script.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJSON\u003c/h2\u003e\u003ca id=\"user-content-json\" class=\"anchor\" aria-label=\"Permalink: JSON\" href=\"#json\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that the parser is 'lenient' so that you don't have to enclose all keys in double-quotes.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def cat = { name: 'Billie', scores: [2, 5] }\n* assert cat.scores[1] == 5\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e, scores: [2, 5] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert cat.scores[1] == 5\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eSome characters such as the hyphen \u003ccode\u003e-\u003c/code\u003e are not permitted in 'lenient' JSON keys (because they are interpreted by the JS engine as a 'minus sign'). In such cases, you \u003cem\u003ehave\u003c/em\u003e to use string quotes: \u003ccode\u003e{ 'Content-Type': 'application/json' }\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eWhen asserting for expected values in JSON or XML, always prefer using \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e instead of \u003ca href=\"#assert\"\u003e\u003ccode\u003eassert\u003c/code\u003e\u003c/a\u003e. Match failure messages are much more descriptive and useful, and you get the power of \u003ca href=\"#embedded-expressions\"\u003eembedded expressions\u003c/a\u003e and \u003ca href=\"#fuzzy-matching\"\u003efuzzy matching\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def cats = [{ name: 'Billie' }, { name: 'Bob' }]\n* match cats[1] == { name: 'Bob' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cats = [{ name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e }, { name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e }]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cats[1] == { name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate's native support for JSON means that you can assign parts of a JSON instance into another variable, which is useful when dealing with complex \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e payloads.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def first = cats[0]\n* match first == { name: 'Billie' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef first = cats[0]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch first == { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor manipulating or updating JSON (or XML) using path expressions, refer to the \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e keyword.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eXML\u003c/h2\u003e\u003ca id=\"user-content-xml\" class=\"anchor\" aria-label=\"Permalink: XML\" href=\"#xml\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given def cat = \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u0026lt;scores\u0026gt;\u0026lt;score\u0026gt;2\u0026lt;/score\u0026gt;\u0026lt;score\u0026gt;5\u0026lt;/score\u0026gt;\u0026lt;/scores\u0026gt;\u0026lt;/cat\u0026gt;\n# sadly, xpath list indexes start from 1\nThen match cat/cat/scores/score[2] == '5'\n# but karate allows you to traverse xml like json !!\nThen match cat.cat.scores.score[1] == 5\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef cat = \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eBillie\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;scores\u0026gt;\u0026lt;score\u0026gt;\u003c/span\u003e2\u003cspan class=\"pl-smi\"\u003e\u0026lt;/score\u0026gt;\u0026lt;score\u0026gt;\u003c/span\u003e5\u003cspan class=\"pl-smi\"\u003e\u0026lt;/score\u0026gt;\u0026lt;/scores\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# sadly, xpath list indexes start from 1\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat/cat/scores/score[2] == \u003cspan class=\"pl-s\"\u003e'5'\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# but karate allows you to traverse xml like json !!\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat.cat.scores.score[1] == 5\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eEmbedded Expressions\u003c/h3\u003e\u003ca id=\"user-content-embedded-expressions\" class=\"anchor\" aria-label=\"Permalink: Embedded Expressions\" href=\"#embedded-expressions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate has a very useful payload 'templating' approach. Variables can be referred to within JSON, for example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given def user = { name: 'john', age: 21 }\nAnd def lang = 'en'\nWhen def session = { name: '#(user.name)', locale: '#(lang)', sessionUser: '#(user)'  }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef user = { name: \u003cspan class=\"pl-s\"\u003e'john'\u003c/span\u003e, age: 21 }\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003edef lang = \u003cspan class=\"pl-s\"\u003e'en'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003edef session = { name: \u003cspan class=\"pl-s\"\u003e'#(user.name)'\u003c/span\u003e, locale: \u003cspan class=\"pl-s\"\u003e'#(lang)'\u003c/span\u003e, sessionUser: \u003cspan class=\"pl-s\"\u003e'#(user)'\u003c/span\u003e  }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSo the rule is - if a string value within a JSON (or XML) object declaration is enclosed between \u003ccode\u003e#(\u003c/code\u003e and \u003ccode\u003e)\u003c/code\u003e - it will be evaluated as a JavaScript expression. And any variables which are alive in the context can be used in this expression. Here's how it works for XML:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given def user = \u0026lt;user\u0026gt;\u0026lt;name\u0026gt;john\u0026lt;/name\u0026gt;\u0026lt;/user\u0026gt;\nAnd def lang = 'en'\nWhen def session = \u0026lt;session\u0026gt;\u0026lt;locale\u0026gt;#(lang)\u0026lt;/locale\u0026gt;\u0026lt;sessionUser\u0026gt;#(user)\u0026lt;/sessionUser\u0026gt;\u0026lt;/session\u0026gt;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef user = \u003cspan class=\"pl-smi\"\u003e\u0026lt;user\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003ejohn\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;/user\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003edef lang = \u003cspan class=\"pl-s\"\u003e'en'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003edef session = \u003cspan class=\"pl-smi\"\u003e\u0026lt;session\u0026gt;\u0026lt;locale\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-c\"\u003e#(lang)\u0026lt;/locale\u0026gt;\u0026lt;sessionUser\u0026gt;#(user)\u0026lt;/sessionUser\u0026gt;\u0026lt;/session\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis comes in useful in some cases - and avoids needing to use the \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e keyword or \u003ca href=\"#javascript-functions\"\u003eJavaScript functions\u003c/a\u003e to manipulate JSON. So you get the best of both worlds: the elegance of JSON to express complex nested data - while at the same time being able to dynamically plug values (that could even be other JSON or XML 'trees') into a 'template'.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that embedded expressions will be evaluated even when you \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread()\u003c/code\u003e from a JSON or XML file\u003c/a\u003e. This is super-useful for re-use and data-driven tests.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA few special built-in variables such as \u003ccode\u003e$\u003c/code\u003e (which is a \u003ca href=\"#referring-to-self\"\u003ereference to the JSON root\u003c/a\u003e) - can be mixed into JSON embedded expressions.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA \u003ca href=\"#remove-if-null\"\u003especial case\u003c/a\u003e of embedded expressions can remove a JSON key (or XML element / attribute) if the expression evaluates to \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eRules for Embedded Expressions\u003c/h4\u003e\u003ca id=\"user-content-rules-for-embedded-expressions\" class=\"anchor\" aria-label=\"Permalink: Rules for Embedded Expressions\" href=\"#rules-for-embedded-expressions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eThey work only within JSON or XML\u003c/li\u003e\n\u003cli\u003eand when on the Right Hand Side of a\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eand when you \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread()\u003c/code\u003e\u003c/a\u003e a JSON or XML file\u003c/li\u003e\n\u003cli\u003ethe expression \u003cem\u003ehas\u003c/em\u003e to start with \u003ccode\u003e#(\u003c/code\u003e and end with \u003ccode\u003e)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eBecause of the last rule above, note that string-concatenation may not work quite the way you expect:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# wrong !\n* def foo = { bar: 'hello #(name)' }\n# right !\n* def foo = { bar: '#(\u0026quot;hello \u0026quot; + name)' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# wrong !\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { bar: \u003cspan class=\"pl-s\"\u003e'hello #(name)'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# right !\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { bar: \u003cspan class=\"pl-s\"\u003e'#(\"hello \" + name)'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eObserve how you can achieve string concatenation if you really want, because any valid JavaScript expression can be stuffed within an embedded expression. You could always do this in two steps:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def temp = 'hello ' + name\n* def foo = { bar: '#(temp)' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef temp = \u003cspan class=\"pl-s\"\u003e'hello '\u003c/span\u003e + name\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { bar: \u003cspan class=\"pl-s\"\u003e'#(temp)'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAs a convenience, embedded expressions are supported on the Right Hand Side of a \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e statement even for \"quoted string\" literals:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = 'a1'\n* match foo == '#(\u0026quot;a\u0026quot; + 1)'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = \u003cspan class=\"pl-s\"\u003e'a1'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == \u003cspan class=\"pl-s\"\u003e'#(\"a\" + 1)'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd do note that in Karate 1.0 onwards, ES6 string-interpolation within \"backticks\" is supported:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* param filter = `ORDER_DATE:\u0026quot;${todaysDate}\u0026quot;`\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eparam filter = `ORDER_DATE:\u003cspan class=\"pl-s\"\u003e\"${todaysDate}\"\u003c/span\u003e`\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eEnclosed JavaScript\u003c/h3\u003e\u003ca id=\"user-content-enclosed-javascript\" class=\"anchor\" aria-label=\"Permalink: Enclosed JavaScript\" href=\"#enclosed-javascript\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAn alternative to embedded expressions (for JSON only) is to enclose the entire payload within parentheses - which tells Karate to evaluate it as pure JavaScript. This can be a lot simpler than embedded expressions in many cases, and JavaScript programmers will feel right at home.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe example below shows the difference between embedded expressions and enclosed JavaScript:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"When def user = { name: 'john', age: 21 }\nAnd def lang = 'en'\n\n* def embedded = { name: '#(user.name)', locale: '#(lang)', sessionUser: '#(user)' }\n* def enclosed = ({ name: user.name, locale: lang, sessionUser: user })\n* match embedded == enclosed\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003edef user = { name: \u003cspan class=\"pl-s\"\u003e'john'\u003c/span\u003e, age: 21 }\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003edef lang = \u003cspan class=\"pl-s\"\u003e'en'\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef embedded = { name: \u003cspan class=\"pl-s\"\u003e'#(user.name)'\u003c/span\u003e, locale: \u003cspan class=\"pl-s\"\u003e'#(lang)'\u003c/span\u003e, sessionUser: \u003cspan class=\"pl-s\"\u003e'#(user)'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef enclosed = ({ name: user.name, locale: lang, sessionUser: user })\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch embedded == enclosed\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eSo how would you choose between the two approaches to create JSON ? \u003ca href=\"#embedded-expressions\"\u003eEmbedded expressions\u003c/a\u003e are useful when you have complex JSON \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/a\u003e from files, because you can auto-replace (or even \u003ca href=\"#remove-if-null\"\u003eremove\u003c/a\u003e) data-elements with values dynamically evaluated from variables. And the JSON will still be 'well-formed', and editable in your IDE or text-editor. Embedded expressions also make more sense in \u003ca href=\"#ignore-or-validate\"\u003evalidation\u003c/a\u003e and \u003ca href=\"#schema-validation\"\u003eschema-like\u003c/a\u003e short-cut situations. It can also be argued that the \u003ccode\u003e#\u003c/code\u003e symbol is easy to spot when eyeballing your test scripts - which makes things more readable and clear.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eMulti-Line Expressions\u003c/h3\u003e\u003ca id=\"user-content-multi-line-expressions\" class=\"anchor\" aria-label=\"Permalink: Multi-Line Expressions\" href=\"#multi-line-expressions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe keywords \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#request\"\u003e\u003ccode\u003erequest\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e take multi-line input as the last argument. This is useful when you want to express a one-off lengthy snippet of text in-line, without having to split it out into a separate \u003ca href=\"#reading-files\"\u003efile\u003c/a\u003e. Note how triple-quotes (\u003ccode\u003e\"\"\"\u003c/code\u003e) are used to enclose content. Here are some examples:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# instead of:\n* def cat = \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u0026lt;scores\u0026gt;\u0026lt;score\u0026gt;2\u0026lt;/score\u0026gt;\u0026lt;score\u0026gt;5\u0026lt;/score\u0026gt;\u0026lt;/scores\u0026gt;\u0026lt;/cat\u0026gt;\n\n# this is more readable:\n* def cat = \n  \u0026quot;\u0026quot;\u0026quot;\n  \u0026lt;cat\u0026gt;\n      \u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\n      \u0026lt;scores\u0026gt;\n          \u0026lt;score\u0026gt;2\u0026lt;/score\u0026gt;\n          \u0026lt;score\u0026gt;5\u0026lt;/score\u0026gt;\n      \u0026lt;/scores\u0026gt;\n  \u0026lt;/cat\u0026gt;\n  \u0026quot;\u0026quot;\u0026quot;\n# example of a request payload in-line\nGiven request \n  \u0026quot;\u0026quot;\u0026quot; \n  \u0026lt;?xml version='1.0' encoding='UTF-8'?\u0026gt;\n  \u0026lt;S:Envelope xmlns:S=\u0026quot;http://schemas.xmlsoap.org/soap/envelope/\u0026quot;\u0026gt;\n  \u0026lt;S:Body\u0026gt;\n  \u0026lt;ns2:QueryUsageBalance xmlns:ns2=\u0026quot;http://www.mycompany.com/usage/V1\u0026quot;\u0026gt;\n      \u0026lt;ns2:UsageBalance\u0026gt;\n          \u0026lt;ns2:LicenseId\u0026gt;12341234\u0026lt;/ns2:LicenseId\u0026gt;\n      \u0026lt;/ns2:UsageBalance\u0026gt;\n  \u0026lt;/ns2:QueryUsageBalance\u0026gt;\n  \u0026lt;/S:Body\u0026gt;\n  \u0026lt;/S:Envelope\u0026gt;\n  \u0026quot;\u0026quot;\u0026quot;\n\n# example of a payload assertion in-line\nThen match response ==\n  \u0026quot;\u0026quot;\u0026quot;\n  { id: { domain: \u0026quot;DOM\u0026quot;, type: \u0026quot;entityId\u0026quot;, value: \u0026quot;#ignore\u0026quot; },\n    created: { on: \u0026quot;#ignore\u0026quot; }, \n    lastUpdated: { on: \u0026quot;#ignore\u0026quot; },\n    entityState: \u0026quot;ACTIVE\u0026quot;\n  }\n  \u0026quot;\u0026quot;\u0026quot;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# instead of:\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eBillie\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;scores\u0026gt;\u0026lt;score\u0026gt;\u003c/span\u003e2\u003cspan class=\"pl-smi\"\u003e\u0026lt;/score\u0026gt;\u0026lt;score\u0026gt;\u003c/span\u003e5\u003cspan class=\"pl-smi\"\u003e\u0026lt;/score\u0026gt;\u0026lt;/scores\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# this is more readable:\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = \n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;cat\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;scores\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          \u0026lt;score\u0026gt;2\u0026lt;/score\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          \u0026lt;score\u0026gt;5\u0026lt;/score\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;/scores\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;/cat\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# example of a request payload in-line\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003erequest \n  \u003cspan class=\"pl-s\"\u003e\"\"\" \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;?xml version='1.0' encoding='UTF-8'?\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;S:Body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;ns2:QueryUsageBalance xmlns:ns2=\"http://www.mycompany.com/usage/V1\"\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;ns2:UsageBalance\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          \u0026lt;ns2:LicenseId\u0026gt;12341234\u0026lt;/ns2:LicenseId\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;/ns2:UsageBalance\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;/ns2:QueryUsageBalance\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;/S:Body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;/S:Envelope\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# example of a payload assertion in-line\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response ==\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  { id: { domain: \"DOM\", type: \"entityId\", value: \"#ignore\" },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    created: { on: \"#ignore\" }, \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    lastUpdated: { on: \"#ignore\" },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    entityState: \"ACTIVE\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003etable\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-table\" class=\"anchor\" aria-label=\"Permalink: table\" href=\"#table\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eA simple way to create JSON Arrays\u003c/h3\u003e\u003ca id=\"user-content-a-simple-way-to-create-json-arrays\" class=\"anchor\" aria-label=\"Permalink: A simple way to create JSON Arrays\" href=\"#a-simple-way-to-create-json-arrays\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNow that we have seen how JSON is a 'native' data type that Karate understands, there is a very nice way to create JSON using the support for expressing \u003ca href=\"http://www.thinkcode.se/blog/2014/06/30/cucumber-data-tables\" rel=\"nofollow\"\u003edata-tables\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* table cats\n  | name   | age |\n  | 'Bob'  | 2   |\n  | 'Wild' | 4   |\n  | 'Nyan' | 3   |\n\n* match cats == [{name: 'Bob', age: 2}, {name: 'Wild', age: 4}, {name: 'Nyan', age: 3}]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etable cats\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e   | \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | '\u003cspan class=\"pl-s1\"\u003eBob\u003c/span\u003e'  | \u003cspan class=\"pl-s1\"\u003e2\u003c/span\u003e   |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | '\u003cspan class=\"pl-s1\"\u003eWild\u003c/span\u003e' | \u003cspan class=\"pl-s1\"\u003e4\u003c/span\u003e   |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | '\u003cspan class=\"pl-s1\"\u003eNyan\u003c/span\u003e' | \u003cspan class=\"pl-s1\"\u003e3\u003c/span\u003e   |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cats == [{name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, age: 2}, {name: \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e, age: 4}, {name: \u003cspan class=\"pl-s\"\u003e'Nyan'\u003c/span\u003e, age: 3}]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e keyword is explained later, but it should be clear right away how convenient the \u003ccode\u003etable\u003c/code\u003e keyword is. JSON can be combined with the ability to \u003ca href=\"#data-driven-features\"\u003ecall other \u003ccode\u003e*.feature\u003c/code\u003e files\u003c/a\u003e to achieve dynamic data-driven testing in Karate.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNotice that in the above example, string values within the table need to be enclosed in quotes. Otherwise they would be evaluated as expressions - which does come in useful for some dynamic data-driven situations:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def one = 'hello'\n* def two = { baz: 'world' }\n* table json\n  | foo     | bar            |\n  | one     | { baz: 1 }     |\n  | two.baz | ['baz', 'ban'] |\n* match json == [{ foo: 'hello', bar: { baz: 1 } }, { foo: 'world', bar: ['baz', 'ban'] }]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef one = \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef two = { baz: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etable json\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003efoo\u003c/span\u003e     | \u003cspan class=\"pl-s1\"\u003ebar\u003c/span\u003e            |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eone\u003c/span\u003e     | { \u003cspan class=\"pl-s1\"\u003ebaz\u003c/span\u003e: \u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e }     |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003etwo\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ebaz\u003c/span\u003e | ['\u003cspan class=\"pl-s1\"\u003ebaz\u003c/span\u003e', '\u003cspan class=\"pl-s1\"\u003eban\u003c/span\u003e'] |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == [{ foo: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e, bar: { baz: 1 } }, { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, bar: [\u003cspan class=\"pl-s\"\u003e'baz'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'ban'\u003c/span\u003e] }]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYes, you can even nest chunks of JSON in tables, and things work as you would expect.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eEmpty cells or expressions that evaluate to \u003ccode\u003enull\u003c/code\u003e will result in the key being omitted from the JSON. To force a \u003ccode\u003enull\u003c/code\u003e value, wrap it in parentheses:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def one = { baz: null }\n* table json\n  | foo     | bar    |\n  | 'hello' |        |\n  | one.baz | (null) |\n  | 'world' | null   |\n* match json == [{ foo: 'hello' }, { bar: null }, { foo: 'world' }]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef one = { baz: null }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etable json\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003efoo\u003c/span\u003e     | \u003cspan class=\"pl-s1\"\u003ebar\u003c/span\u003e    |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | '\u003cspan class=\"pl-s1\"\u003ehello\u003c/span\u003e' |        |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eone\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ebaz\u003c/span\u003e | (\u003cspan class=\"pl-s1\"\u003enull\u003c/span\u003e) |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | '\u003cspan class=\"pl-s1\"\u003eworld\u003c/span\u003e' | \u003cspan class=\"pl-s1\"\u003enull\u003c/span\u003e   |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == [{ foo: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e }, { bar: null }, { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e }]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAn alternate way to create data is using the \u003ca href=\"#set-multiple\"\u003e\u003ccode\u003eset\u003c/code\u003e multiple\u003c/a\u003e syntax. It is actually a 'transpose' of the \u003ccode\u003etable\u003c/code\u003e approach, and can be very convenient when there are a large number of keys per row or if the nesting is complex. Here is an example of what is possible:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* set search\n  | path       | 0        | 1      | 2       |\n  | name.first | 'John'   | 'Jane' |         |\n  | name.last  | 'Smith'  | 'Doe'  | 'Waldo' |\n  | age        | 20       |        |         |\n\n* match search[0] == { name: { first: 'John', last: 'Smith' }, age: 20 }\n* match search[1] == { name: { first: 'Jane', last: 'Doe' } }\n* match search[2] == { name: { last: 'Waldo' } }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset search\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003epath\u003c/span\u003e       | \u003cspan class=\"pl-s1\"\u003e0\u003c/span\u003e        | \u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e      | \u003cspan class=\"pl-s1\"\u003e2\u003c/span\u003e       |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003efirst\u003c/span\u003e | '\u003cspan class=\"pl-s1\"\u003eJohn\u003c/span\u003e'   | '\u003cspan class=\"pl-s1\"\u003eJane\u003c/span\u003e' |         |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003elast\u003c/span\u003e  | '\u003cspan class=\"pl-s1\"\u003eSmith\u003c/span\u003e'  | '\u003cspan class=\"pl-s1\"\u003eDoe\u003c/span\u003e'  | '\u003cspan class=\"pl-s1\"\u003eWaldo\u003c/span\u003e' |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e        | \u003cspan class=\"pl-s1\"\u003e20\u003c/span\u003e       |        |         |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch search[0] == { name: { first: \u003cspan class=\"pl-s\"\u003e'John'\u003c/span\u003e, last: \u003cspan class=\"pl-s\"\u003e'Smith'\u003c/span\u003e }, age: 20 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch search[1] == { name: { first: \u003cspan class=\"pl-s\"\u003e'Jane'\u003c/span\u003e, last: \u003cspan class=\"pl-s\"\u003e'Doe'\u003c/span\u003e } }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch search[2] == { name: { last: \u003cspan class=\"pl-s\"\u003e'Waldo'\u003c/span\u003e } }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003etext\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-text\" class=\"anchor\" aria-label=\"Permalink: text\" href=\"#text\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eDon't parse, treat as raw text\u003c/h3\u003e\u003ca id=\"user-content-dont-parse-treat-as-raw-text\" class=\"anchor\" aria-label=\"Permalink: Don't parse, treat as raw text\" href=\"#dont-parse-treat-as-raw-text\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNot something you would commonly use, but in some cases you need to disable Karate's default behavior of attempting to parse anything that looks like JSON (or XML) when using \u003ca href=\"#multi-line-expressions\"\u003emulti-line\u003c/a\u003e / string \u003ca href=\"#karate-expressions\"\u003eexpressions\u003c/a\u003e. This is especially relevant when manipulating \u003ca href=\"http://graphql.org\" rel=\"nofollow\"\u003eGraphQL\u003c/a\u003e queries - because although they look suspiciously like JSON, they are not, and tend to confuse Karate's internals. And as shown in the example below, having text 'in-line' is useful especially when you use the \u003ccode\u003eScenario Outline:\u003c/code\u003e and \u003ccode\u003eExamples:\u003c/code\u003e for \u003ca href=\"#data-driven-tests\"\u003edata-driven tests\u003c/a\u003e involving place-holder substitutions in strings.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Scenario Outline:\n  # note the 'text' keyword instead of 'def'\n  * text query =\n    \u0026quot;\u0026quot;\u0026quot;\n    {\n      hero(name: \u0026quot;\u0026lt;name\u0026gt;\u0026quot;) {\n        height\n        mass\n      }\n    }\n    \u0026quot;\u0026quot;\u0026quot;\n  Given path 'graphql'\n  And request { query: '#(query)' }\n  And header Accept = 'application/json'\n  When method post\n  Then status 200\n\n  Examples:\n    | name  |\n    | John  |\n    | Smith | \"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\n\u003cspan class=\"pl-c\"\u003e  # note the 'text' keyword instead of 'def'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etext query =\n    \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      hero(name: \"\u0026lt;name\u0026gt;\") {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e        height\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e        mass\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \"\"\"\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'graphql'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest { query: \u003cspan class=\"pl-s\"\u003e'#(query)'\u003c/span\u003e }\n  \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eheader Accept = \u003cspan class=\"pl-s\"\u003e'application/json'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n  \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e  |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eJohn\u003c/span\u003e  |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eSmith\u003c/span\u003e | \u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that if you did not need to inject \u003ca href=\"#data-driven-tests\"\u003e\u003ccode\u003eExamples:\u003c/code\u003e\u003c/a\u003e into 'placeholders' enclosed within \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ca href=\"#reading-files\"\u003ereading from a file\u003c/a\u003e with the extension \u003ccode\u003e*.txt\u003c/code\u003e may have been sufficient.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor placeholder-substitution, the \u003ca href=\"#replace\"\u003e\u003ccode\u003ereplace\u003c/code\u003e\u003c/a\u003e keyword can be used instead, but with the advantage that the text can be read from a file or dynamically created.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eKarate is a great fit for testing GraphQL because of how easy it is to deal with dynamic and deeply nested JSON responses. Refer to this example for more details: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/graphql/graphql.feature\"\u003e\u003ccode\u003egraphql.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ereplace\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-replace\" class=\"anchor\" aria-label=\"Permalink: replace\" href=\"#replace\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eText Placeholder Replacement\u003c/h3\u003e\u003ca id=\"user-content-text-placeholder-replacement\" class=\"anchor\" aria-label=\"Permalink: Text Placeholder Replacement\" href=\"#text-placeholder-replacement\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eModifying existing JSON and XML is \u003cstrong\u003enatively\u003c/strong\u003e supported by Karate via the \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e keyword, and \u003ccode\u003ereplace\u003c/code\u003e is primarily intended for dealing with raw strings. But when you deal with complex, nested JSON (or XML) - it may be easier in some cases to use \u003ccode\u003ereplace\u003c/code\u003e, especially when you want to substitute multiple placeholders with one value, and when you don't need array manipulation. Since \u003ccode\u003ereplace\u003c/code\u003e auto-converts the result to a string, make sure you perform \u003ca href=\"#type-conversion\"\u003etype conversion\u003c/a\u003e back to JSON (or XML) if applicable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eKarate provides an elegant 'native-like' experience for placeholder substitution within strings or text content. This is useful in any situation where you need to concatenate dynamic string fragments to form content such as GraphQL or SQL.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe placeholder format defaults to angle-brackets, for example: \u003ccode\u003e\u0026lt;replaceMe\u0026gt;\u003c/code\u003e. Here is how to replace one placeholder at a time:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def text = 'hello \u0026lt;foo\u0026gt; world'\n* replace text.foo = 'bar'\n* match text == 'hello bar world'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef text = \u003cspan class=\"pl-s\"\u003e'hello \u0026lt;foo\u0026gt; world'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ereplace text.foo = \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch text == \u003cspan class=\"pl-s\"\u003e'hello bar world'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate makes it really easy to substitute multiple placeholders in a single, readable step as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def text = 'hello \u0026lt;one\u0026gt; world \u0026lt;two\u0026gt; bye'\n\n* replace text\n  | token | value   |\n  | one   | 'cruel' |\n  | two   | 'good'  |\n\n* match text == 'hello cruel world good bye'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef text = \u003cspan class=\"pl-s\"\u003e'hello \u0026lt;one\u0026gt; world \u0026lt;two\u0026gt; bye'\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ereplace text\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003etoken\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003evalue\u003c/span\u003e   |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eone\u003c/span\u003e   | '\u003cspan class=\"pl-s1\"\u003ecruel\u003c/span\u003e' |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003etwo\u003c/span\u003e   | '\u003cspan class=\"pl-s1\"\u003egood\u003c/span\u003e'  |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch text == \u003cspan class=\"pl-s\"\u003e'hello cruel world good bye'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote how strings have to be enclosed in quotes. This is so that you can mix expressions into text replacements as shown below. This example also shows how you can use a custom placeholder format instead of the default:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def text = 'hello \u0026lt;one\u0026gt; world ${two} bye'\n* def first = 'cruel'\n* def json = { second: 'good' }\n\n* replace text\n    | token  | value       |\n    | one    | first       |\n    | ${two} | json.second |\n\n* match text == 'hello cruel world good bye'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef text = \u003cspan class=\"pl-s\"\u003e'hello \u0026lt;one\u0026gt; world ${two} bye'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef first = \u003cspan class=\"pl-s\"\u003e'cruel'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef json = { second: \u003cspan class=\"pl-s\"\u003e'good'\u003c/span\u003e }\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ereplace text\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003etoken\u003c/span\u003e  | \u003cspan class=\"pl-s1\"\u003evalue\u003c/span\u003e       |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eone\u003c/span\u003e    | \u003cspan class=\"pl-s1\"\u003efirst\u003c/span\u003e       |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | ${\u003cspan class=\"pl-s1\"\u003etwo\u003c/span\u003e} | \u003cspan class=\"pl-s1\"\u003ejson\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003esecond\u003c/span\u003e |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch text == \u003cspan class=\"pl-s\"\u003e'hello cruel world good bye'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRefer to this file for a detailed example: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/replace.feature\"\u003e\u003ccode\u003ereplace.feature\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eYAML Files\u003c/h2\u003e\u003ca id=\"user-content-yaml-files\" class=\"anchor\" aria-label=\"Permalink: YAML Files\" href=\"#yaml-files\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor those who may prefer \u003ca href=\"http://yaml.org\" rel=\"nofollow\"\u003eYAML\u003c/a\u003e as a simpler way to represent data, Karate allows you to read YAML content from a \u003ca href=\"#reading-files\"\u003efile\u003c/a\u003e - and it will be auto-converted into JSON.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# yaml from a file (the extension matters), and the data-type of 'bar' would be JSON\n* def bar = read('data.yaml')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# yaml from a file (the extension matters), and the data-type of 'bar' would be JSON\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef bar = read(\u003cspan class=\"pl-s\"\u003e'data.yaml'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eyaml\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-yaml\" class=\"anchor\" aria-label=\"Permalink: yaml\" href=\"#yaml\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA very rare need is to be able to convert a string which happens to be in YAML form into JSON, and this can be done via the \u003ccode\u003eyaml\u003c/code\u003e type cast keyword. For example - if a response data element or downloaded file is YAML and you need to use the data in subsequent steps. Also see \u003ca href=\"#type-conversion\"\u003etype conversion\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* text foo =\n  \u0026quot;\u0026quot;\u0026quot;\n  name: John\n  input:\n    id: 1\n    subType: \n      name: Smith\n      deleted: false\n  \u0026quot;\u0026quot;\u0026quot;\n# yaml to json type conversion  \n* yaml foo = foo\n* match foo ==\n  \u0026quot;\u0026quot;\u0026quot;\n  {\n    name: 'John',\n    input: { \n      id: 1,\n      subType: { name: 'Smith', deleted: false }    \n    }\n  }\n  \u0026quot;\u0026quot;\u0026quot;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etext foo =\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  name: John\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  input:\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    id: 1\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    subType: \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      name: Smith\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      deleted: false\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# yaml to json type conversion  \u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eyaml foo = foo\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo ==\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    name: 'John',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    input: { \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      id: 1,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      subType: { name: 'Smith', deleted: false }    \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCSV Files\u003c/h2\u003e\u003ca id=\"user-content-csv-files\" class=\"anchor\" aria-label=\"Permalink: CSV Files\" href=\"#csv-files\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate can read \u003ccode\u003e*.csv\u003c/code\u003e files and will auto-convert them to JSON. A header row is always expected. See the section on \u003ca href=\"#reading-files\"\u003ereading files\u003c/a\u003e - and also this example \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/outline/dynamic-csv.feature\"\u003e\u003ccode\u003edynamic-csv.feature\u003c/code\u003e\u003c/a\u003e, which shows off the convenience of \u003ca href=\"#dynamic-scenario-outline\"\u003edynamic \u003ccode\u003eScenario Outline\u003c/code\u003e-s\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIn rare cases you may want to use a csv-file as-is and \u003cem\u003enot\u003c/em\u003e auto-convert it to JSON. A good example is when you want to use a CSV file as the \u003ca href=\"#request\"\u003erequest-body\u003c/a\u003e for a file-upload. You could get by by renaming the file-extension to say \u003ccode\u003e*.txt\u003c/code\u003e but an alternative is to use the \u003ca href=\"#read-file-as-string\"\u003e\u003ccode\u003ekarate.readAsString()\u003c/code\u003e\u003c/a\u003e API.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ecsv\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-csv\" class=\"anchor\" aria-label=\"Permalink: csv\" href=\"#csv\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eJust like \u003ca href=\"#yaml\"\u003e\u003ccode\u003eyaml\u003c/code\u003e\u003c/a\u003e, you may occasionally need to \u003ca href=\"#type-conversion\"\u003econvert a string\u003c/a\u003e which happens to be in CSV form into JSON, and this can be done via the \u003ccode\u003ecsv\u003c/code\u003e keyword.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* text foo =\n    \u0026quot;\u0026quot;\u0026quot;\n    name,type\n    Billie,LOL\n    Bob,Wild\n    \u0026quot;\u0026quot;\u0026quot;\n* csv bar = foo\n* match bar == [{ name: 'Billie', type: 'LOL' }, { name: 'Bob', type: 'Wild' }]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etext foo =\n    \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    name,type\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    Billie,LOL\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    Bob,Wild\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecsv bar = foo\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch bar == [{ name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e, type: \u003cspan class=\"pl-s\"\u003e'LOL'\u003c/span\u003e }, { name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, type: \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e }]\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJavaScript Functions\u003c/h2\u003e\u003ca id=\"user-content-javascript-functions\" class=\"anchor\" aria-label=\"Permalink: JavaScript Functions\" href=\"#javascript-functions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eJavaScript Functions are also 'native'. And yes, functions can take arguments.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eStandard JavaScript syntax rules apply, but the right-hand-side should begin with the \u003ccode\u003efunction\u003c/code\u003e keyword if declared \u003cem\u003ein-line\u003c/em\u003e. When using stand-alone \u003ccode\u003e*.js\u003c/code\u003e files, you can have a comment before the \u003ccode\u003efunction\u003c/code\u003e keyword, and you can use \u003ccode\u003efn\u003c/code\u003e as the function name, so that your IDE does not complain about JavaScript syntax errors, e.g. \u003ccode\u003efunction fn(x){ return x + 1 }\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def greeter = function(title, name) { return 'hello ' + title + ' ' + name }\n* assert greeter('Mr.', 'Bob') == 'hello Mr. Bob'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef greeter = function(title, name) { return \u003cspan class=\"pl-s\"\u003e'hello '\u003c/span\u003e + title + \u003cspan class=\"pl-s\"\u003e' '\u003c/span\u003e + name }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert greeter(\u003cspan class=\"pl-s\"\u003e'Mr.'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e) == \u003cspan class=\"pl-s\"\u003e'hello Mr. Bob'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eWhen JavaScript executes in Karate, the built-in \u003ca href=\"#the-karate-object\"\u003e\u003ccode\u003ekarate\u003c/code\u003e object\u003c/a\u003e provides some commonly used utility functions. And with \u003ca href=\"#karate-expressions\"\u003eKarate expressions\u003c/a\u003e, you can \"dive into\" JavaScript without needing to define a function - and \u003ca href=\"#conditional-logic\"\u003econditional logic\u003c/a\u003e is a good example.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJava Interop\u003c/h3\u003e\u003ca id=\"user-content-java-interop\" class=\"anchor\" aria-label=\"Permalink: Java Interop\" href=\"#java-interop\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor more complex functions you are better off using the \u003ca href=\"#multi-line-expressions\"\u003emulti-line\u003c/a\u003e 'doc-string' approach. This example actually calls into existing Java code, and being able to do this opens up a whole lot of possibilities. The JavaScript interpreter will try to convert types across Java and JavaScript as smartly as possible. For e.g. JSON objects become Java \u003ccode\u003eMap\u003c/code\u003e-s, JSON arrays become Java \u003ccode\u003eList\u003c/code\u003e-s, and Java Bean properties are accessible (and update-able) using 'dot notation' e.g. '\u003ccode\u003eobject.name\u003c/code\u003e'\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def dateStringToLong =\n  \u0026quot;\u0026quot;\u0026quot;\n  function(s) {\n    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');\n    var sdf = new SimpleDateFormat(\u0026quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ\u0026quot;);\n    return sdf.parse(s).time; // '.getTime()' would also have worked instead of '.time'\n  } \n  \u0026quot;\u0026quot;\u0026quot;\n* assert dateStringToLong(\u0026quot;2016-12-24T03:39:21.081+0000\u0026quot;) == 1482550761081\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef dateStringToLong =\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  function(s) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    var sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    return sdf.parse(s).time; // '.getTime()' would also have worked instead of '.time'\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  } \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert dateStringToLong(\u003cspan class=\"pl-s\"\u003e\"2016-12-24T03:39:21.081+0000\"\u003c/span\u003e) == 1482550761081\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eMore examples of Java interop and how to invoke custom code can be found in the section on \u003ca href=\"#calling-java\"\u003eCalling Java\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ccode\u003ecall\u003c/code\u003e keyword provides an \u003ca href=\"#calling-javascript-functions\"\u003ealternate way of calling JavaScript functions\u003c/a\u003e that have only one argument. The argument can be provided after the function name, without parentheses, which makes things slightly more readable (and less cluttered) especially when the solitary argument is JSON.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def timeLong = call dateStringToLong '2016-12-24T03:39:21.081+0000'\n* assert timeLong == 1482550761081\n\n# a better example, with a JSON argument\n* def greeter = function(name){ return 'Hello ' + name.first + ' ' + name.last + '!' }\n* def greeting = call greeter { first: 'John', last: 'Smith' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef timeLong = call dateStringToLong \u003cspan class=\"pl-s\"\u003e'2016-12-24T03:39:21.081+0000'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert timeLong == 1482550761081\n\n\u003cspan class=\"pl-c\"\u003e# a better example, with a JSON argument\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef greeter = function(name){ return \u003cspan class=\"pl-s\"\u003e'Hello '\u003c/span\u003e + name.first + \u003cspan class=\"pl-s\"\u003e' '\u003c/span\u003e + name.last + \u003cspan class=\"pl-s\"\u003e'!'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef greeting = call greeter { first: \u003cspan class=\"pl-s\"\u003e'John'\u003c/span\u003e, last: \u003cspan class=\"pl-s\"\u003e'Smith'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eReading Files\u003c/h2\u003e\u003ca id=\"user-content-reading-files\" class=\"anchor\" aria-label=\"Permalink: Reading Files\" href=\"#reading-files\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate makes re-use of payload data, utility-functions and even other test-scripts as easy as possible. Teams typically define complicated JSON (or XML) payloads in a file and then re-use this in multiple scripts. Keywords such as \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#remove\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e allow you to to 'tweak' payload-data to fit the scenario under test. You can imagine how this greatly simplifies setting up tests for boundary conditions. And such re-use makes it easier to re-factor tests when needed, which is great for maintainability.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that the \u003ca href=\"#set-multiple\"\u003e\u003ccode\u003eset\u003c/code\u003e (multiple)\u003c/a\u003e keyword can build complex, nested JSON (or XML) from scratch in a data-driven manner, and you may not even need to read from files for many situations. Test data can be within the main flow itself, which makes scripts highly readable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eReading files is achieved using the built-in JavaScript function called \u003ccode\u003eread()\u003c/code\u003e. By default, the file is expected to be in the same folder (package) and side-by-side with the \u003ccode\u003e*.feature\u003c/code\u003e file. But you can prefix the name with \u003ccode\u003eclasspath:\u003c/code\u003e in which case the \u003ca href=\"#classpath\"\u003e'root' folder\u003c/a\u003e would be \u003ccode\u003esrc/test/java\u003c/code\u003e (assuming you are using the \u003ca href=\"#folder-structure\"\u003erecommended folder structure\u003c/a\u003e).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003ePrefer \u003ca href=\"#classpath\"\u003e\u003ccode\u003eclasspath:\u003c/code\u003e\u003c/a\u003e when a file is expected to be heavily re-used all across your project.  And yes, relative paths will work.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# json\n* def someJson = read('some-json.json')\n* def moreJson = read('classpath:more-json.json')\n\n# xml\n* def someXml = read('../common/my-xml.xml')\n\n# import yaml (will be converted to json)\n* def jsonFromYaml = read('some-data.yaml')\n\n# csv (will be converted to json)\n* def jsonFromCsv = read('some-data.csv')\n\n# string\n* def someString = read('classpath:messages.txt')\n\n# javascript (will be evaluated)\n* def someValue = read('some-js-code.js')\n\n# if the js file evaluates to a function, it can be re-used later using the 'call' keyword (or invoked just like normal js)\n* def someFunction = read('classpath:some-reusable-code.js')\n* def someCallResult = call someFunction\n* def sameCallResult = someFunction()\n\n# the following short-cut is also allowed\n* def someCallResult = call read('some-js-code.js')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# json\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someJson = read(\u003cspan class=\"pl-s\"\u003e'some-json.json'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef moreJson = read(\u003cspan class=\"pl-s\"\u003e'classpath:more-json.json'\u003c/span\u003e)\n\n\u003cspan class=\"pl-c\"\u003e# xml\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someXml = read(\u003cspan class=\"pl-s\"\u003e'../common/my-xml.xml'\u003c/span\u003e)\n\n\u003cspan class=\"pl-c\"\u003e# import yaml (will be converted to json)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef jsonFromYaml = read(\u003cspan class=\"pl-s\"\u003e'some-data.yaml'\u003c/span\u003e)\n\n\u003cspan class=\"pl-c\"\u003e# csv (will be converted to json)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef jsonFromCsv = read(\u003cspan class=\"pl-s\"\u003e'some-data.csv'\u003c/span\u003e)\n\n\u003cspan class=\"pl-c\"\u003e# string\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someString = read(\u003cspan class=\"pl-s\"\u003e'classpath:messages.txt'\u003c/span\u003e)\n\n\u003cspan class=\"pl-c\"\u003e# javascript (will be evaluated)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someValue = read(\u003cspan class=\"pl-s\"\u003e'some-js-code.js'\u003c/span\u003e)\n\n\u003cspan class=\"pl-c\"\u003e# if the js file evaluates to a function, it can be re-used later using the 'call' keyword (or invoked just like normal js)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someFunction = read(\u003cspan class=\"pl-s\"\u003e'classpath:some-reusable-code.js'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someCallResult = call someFunction\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef sameCallResult = someFunction()\n\n\u003cspan class=\"pl-c\"\u003e# the following short-cut is also allowed\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someCallResult = call read(\u003cspan class=\"pl-s\"\u003e'some-js-code.js'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can also \u003ca href=\"#calling-other-feature-files\"\u003ere-use other \u003ccode\u003e*.feature\u003c/code\u003e\u003c/a\u003e files from test-scripts:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# perfect for all those common authentication or 'set up' flows\n* def result = call read('classpath:some-reusable-steps.feature')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# perfect for all those common authentication or 'set up' flows\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef result = call read(\u003cspan class=\"pl-s\"\u003e'classpath:some-reusable-steps.feature'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen a \u003cem\u003ecalled\u003c/em\u003e feature depends on some side-by-side resources such as JSON or JS files, you can use the \u003ccode\u003ethis:\u003c/code\u003e prefix to ensure that relative paths work correctly - because by default Karate calculates relative paths from the \"root\" feature or the top-most \"caller\".\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def data = read('this:payload.json')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = read(\u003cspan class=\"pl-s\"\u003e'this:payload.json'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf a file does not end in \u003ccode\u003e.json\u003c/code\u003e, \u003ccode\u003e.xml\u003c/code\u003e, \u003ccode\u003e.yaml\u003c/code\u003e, \u003ccode\u003e.js\u003c/code\u003e, \u003ccode\u003e.csv\u003c/code\u003e or \u003ccode\u003e.txt\u003c/code\u003e, it is treated as a stream - which is typically what you would need for \u003ca href=\"#multipart-field\"\u003e\u003ccode\u003emultipart\u003c/code\u003e\u003c/a\u003e file uploads.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def someStream = read('some-pdf.pdf')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someStream = read(\u003cspan class=\"pl-s\"\u003e'some-pdf.pdf'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ccode\u003e.graphql\u003c/code\u003e and \u003ccode\u003e.gql\u003c/code\u003e extensions are also recognized (for GraphQL) but are handled the same way as \u003ccode\u003e.txt\u003c/code\u003e and treated as a string.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eFor JSON and XML files, Karate will evaluate any \u003ca href=\"#embedded-expressions\"\u003eembedded expressions\u003c/a\u003e on load. This enables more concise tests, and the file can be re-usable in multiple, data-driven tests.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSince it is internally implemented as a JavaScript function, you can mix calls to \u003ccode\u003eread()\u003c/code\u003e freely wherever JavaScript expressions are allowed:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def someBigString = read('first.txt') + read('second.txt')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someBigString = read(\u003cspan class=\"pl-s\"\u003e'first.txt'\u003c/span\u003e) + read(\u003cspan class=\"pl-s\"\u003e'second.txt'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eTip: you can even use JS expressions to dynamically choose a file based on some condition: \u003ccode\u003e* def someConfig = read('my-config-' + someVariable + '.json')\u003c/code\u003e. Refer to \u003ca href=\"#conditional-logic\"\u003econditional logic\u003c/a\u003e for more ideas.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eAnd a very common need would be to use a file as the \u003ca href=\"#request\"\u003e\u003ccode\u003erequest\u003c/code\u003e\u003c/a\u003e body:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given request read('some-big-payload.json')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003erequest read(\u003cspan class=\"pl-s\"\u003e'some-big-payload.json'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOr in a \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"And match response == read('expected-response-payload.json')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch response == read(\u003cspan class=\"pl-s\"\u003e'expected-response-payload.json'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe rarely used \u003ccode\u003efile:\u003c/code\u003e prefix is also supported. You could use it for 'hard-coded' absolute paths in dev mode, but is obviously not recommended for CI test-suites. A good example of where you may need this is if you programmatically write a file to the \u003ccode\u003etarget\u003c/code\u003e folder, and then you can read it like this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def payload = read('file:target/large.xml')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef payload = read(\u003cspan class=\"pl-s\"\u003e'file:target/large.xml'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003ePath Prefixes\u003c/h3\u003e\u003ca id=\"user-content-path-prefixes\" class=\"anchor\" aria-label=\"Permalink: Path Prefixes\" href=\"#path-prefixes\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eTo summarize the possible prefixes:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003ePrefix\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eclasspath:\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003erelative to the \u003ca href=\"#classpath\"\u003eclasspath\u003c/a\u003e, recommended for re-usable features\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efile:\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003edo not use this unless you know what you are doing, see above\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ethis:\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ewhen in a \u003cem\u003ecalled\u003c/em\u003e feature, ensure that files are resolved relative to the current feature file\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eTake a look at the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003eKarate Demos\u003c/a\u003e for real-life examples of how you can use files for validating HTTP responses, like this one: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/read/read-files.feature\"\u003e\u003ccode\u003eread-files.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eRead File As String\u003c/h3\u003e\u003ca id=\"user-content-read-file-as-string\" class=\"anchor\" aria-label=\"Permalink: Read File As String\" href=\"#read-file-as-string\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn some rare cases where you don't want to auto-convert JSON, XML, YAML or CSV, and just get the raw string content (without having to re-name the file to end with \u003ccode\u003e.txt\u003c/code\u003e) - you can use the \u003ca href=\"#karate-readasstring\"\u003e\u003ccode\u003ekarate.readAsString()\u003c/code\u003e\u003c/a\u003e API. Here is an example of using a CSV file as the request-body:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given path 'upload'\nAnd header Content-Type = 'text/csv'\nAnd request karate.readAsString('classpath:my.csv')\nWhen method post\nThen status 202\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'upload'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eheader Content-Type = \u003cspan class=\"pl-s\"\u003e'text/csv'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest karate.readAsString(\u003cspan class=\"pl-s\"\u003e'classpath:my.csv'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 202\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCompare Image\u003c/h2\u003e\u003ca id=\"user-content-compare-image\" class=\"anchor\" aria-label=\"Permalink: Compare Image\" href=\"#compare-image\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate provides a flexible way to compare two images to determine if they are the same or similar. This is especially useful when capturing screenshots during tests and comparing against baseline images that are known to be correct.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eA stand-alone example can be found here: \u003ca href=\"/karatelabs/karate/blob/master/examples/image-comparison\"\u003e\u003ccode\u003eexamples/image-comparison\u003c/code\u003e\u003c/a\u003e along with a \u003ca href=\"https://youtu.be/wlvmNBraP60\" rel=\"nofollow\"\u003evideo explanation\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eBelow is a simple example that will compare a \u003ccode\u003ebaseline\u003c/code\u003e image to a more recent \u003ccode\u003elatest\u003c/code\u003e image. An image comparison UI will also be embedded into the Karate HTML report with detailed information about any differences between the two images.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* compareImage { baseline: 'screenshots/login.png', latest: '/tmp/login.png' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecompareImage { baseline: \u003cspan class=\"pl-s\"\u003e'screenshots/login.png'\u003c/span\u003e, latest: \u003cspan class=\"pl-s\"\u003e'/tmp/login.png'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can also compare images using Karate \u003ca href=\"#path-prefixes\"\u003epath prefixes\u003c/a\u003e (e.g. \u003ccode\u003eclasspath:\u003c/code\u003e, \u003ccode\u003ethis:\u003c/code\u003e, \u003ccode\u003efile:\u003c/code\u003e) or byte arrays:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def latestImgBytes = karate.readAsBytes('login.png')\n* compareImage { baseline: 'classpath:screenshots/login.png', latest: '#(latestImgBytes)' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef latestImgBytes = karate.readAsBytes(\u003cspan class=\"pl-s\"\u003e'login.png'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecompareImage { baseline: \u003cspan class=\"pl-s\"\u003e'classpath:screenshots/login.png'\u003c/span\u003e, latest: \u003cspan class=\"pl-s\"\u003e'#(latestImgBytes)'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou may configure the following image comparison options using the \u003ccode\u003econfigure\u003c/code\u003e action:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* configure imageComparison = { /* image comparison options ... */ }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { /* image comparison options ... */ }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eImage comparison configuration options:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eKey\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eDefault\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eallowScaling\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eWhen \u003ccode\u003etrue\u003c/code\u003e we will scale latest images to match the dimensions of the baseline when they are not equal\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eengine\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e'resemble'\u003c/td\u003e\n\u003ctd\u003eComparison engine(s) to use. Valid options are \u003ccode\u003eresemble\u003c/code\u003e and \u003ccode\u003essim\u003c/code\u003e separated by either \u003ccode\u003e,\u003c/code\u003e or \u003ccode\u003e\u0026amp;#124\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efailureThreshold\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e0.0\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePrecentage of \u003ccode\u003elatest\u003c/code\u003e image pixels allowed to differ from \u003ccode\u003ebaseline\u003c/code\u003e before we consider the comparison as failed\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003emismatchShouldPass\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eWhen \u003ccode\u003etrue\u003c/code\u003e all image comparisons will pass (even when difference is \u0026gt;= \u003ccode\u003efailureThreshold\u003c/code\u003e). Note: failures will result in image comparison UI \u003cem\u003ealways\u003c/em\u003e being embedded in Karate HTML reports regardless of \u003ccode\u003ehideUiOnSuccess\u003c/code\u003e setting.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eonShowRebase\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring (js)\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFunction to be called when displaying image comparison rebase in Karate HTML reports (e.g. to customize rebase filename and/or output)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eonShowConfig\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring (js)\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFunction to be called when displaying image comparison configuration in Karate HTML reports (e.g. to customize configuration output)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ehideUiOnSuccess\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eWhen \u003ccode\u003etrue\u003c/code\u003e the comparison UI will \u003cem\u003eNOT\u003c/em\u003e be embedded in Karate HTML reports for all non-failed image comparisons\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eExamples:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# use only 'ssim' (structural similarity) engine\n* configure imageComparison = { engine: 'ssim' }\n\n# always use both 'resemble' and 'ssim' engines but only evaluate the lowest mismatch percentage against our `failureThreshold`\n* configure imageComparison = { engine: 'resemble,ssim' }\n\n# prefer 'resemble' and fallback to 'ssim' engine only if the resemble mismatch percentage is \u0026gt;= `failureThreshold`\n* configure imageComparison = { engine: 'resemble|ssim' }\n\n# only consider the comparison as failed when 2% or more pixels are different from the baseline\n* configure imageComparison = { failureThreshold: 2 }\n\n# consider image comparisons that fail due to too many mismatched pixels as passed (especially useful when you are first starting without any baseline images)\n* configure imageComparison = { mismatchShouldPass: true }\n\n# custom JS function called in Karate HTML image comparison UI when the user clicks the `Rebase` button\n* text onShowRebaseFn =\n\u0026quot;\u0026quot;\u0026quot;\nfunction (config, downloadLatestFn) {\n  // trigger download of latest image with custom file name\n  downloadLatestFn('custom_latest.png')\n  return 'this text will be displayed to the user when they click the rebase button'\n}\n\u0026quot;\u0026quot;\u0026quot;\n* configure imageComparison = { onShowRebase: '#(onShowRebaseFn)' }\n\n# custom JS function called in Karate HTML image comparison UI when the user clicks the `Show config` button\n* text onShowConfigFn =\n\u0026quot;\u0026quot;\u0026quot;\nfunction (customConfigJson, config) {\n  return 'this text will be displayed above the image comparison config\\n' + customConfigJson\n}\n\u0026quot;\u0026quot;\u0026quot;\n* configure imageComparison = { onShowConfig: '#(onShowConfigFn)' }\n\n# don't embed the image comparison UI when the latest image is the same / similar to the baseline (e.g. to save space and speed up report loading)\n* configure imageComparison = { hideUiOnSuccess: true }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# use only 'ssim' (structural similarity) engine\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { engine: \u003cspan class=\"pl-s\"\u003e'ssim'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# always use both 'resemble' and 'ssim' engines but only evaluate the lowest mismatch percentage against our `failureThreshold`\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { engine: \u003cspan class=\"pl-s\"\u003e'resemble,ssim'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# prefer 'resemble' and fallback to 'ssim' engine only if the resemble mismatch percentage is \u0026gt;= `failureThreshold`\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { engine: \u003cspan class=\"pl-s\"\u003e'resemble|ssim'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# only consider the comparison as failed when 2% or more pixels are different from the baseline\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { failureThreshold: 2 }\n\n\u003cspan class=\"pl-c\"\u003e# consider image comparisons that fail due to too many mismatched pixels as passed (especially useful when you are first starting without any baseline images)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { mismatchShouldPass: true }\n\n\u003cspan class=\"pl-c\"\u003e# custom JS function called in Karate HTML image comparison UI when the user clicks the `Rebase` button\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etext onShowRebaseFn =\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003efunction (config, downloadLatestFn) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  // trigger download of latest image with custom file name\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  downloadLatestFn('custom_latest.png')\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  return 'this text will be displayed to the user when they click the rebase button'\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { onShowRebase: \u003cspan class=\"pl-s\"\u003e'#(onShowRebaseFn)'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# custom JS function called in Karate HTML image comparison UI when the user clicks the `Show config` button\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etext onShowConfigFn =\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003efunction (customConfigJson, config) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  return 'this text will be displayed above the image comparison config\\n' + customConfigJson\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { onShowConfig: \u003cspan class=\"pl-s\"\u003e'#(onShowConfigFn)'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# don't embed the image comparison UI when the latest image is the same / similar to the baseline (e.g. to save space and speed up report loading)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure imageComparison = { hideUiOnSuccess: true }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eImage comparison engines can also be customized:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { /* engine options ... */ } }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecompareImage { baseline: \u003cspan class=\"pl-s\"\u003e'baseline.png'\u003c/span\u003e, latest: \u003cspan class=\"pl-s\"\u003e'latest.png'\u003c/span\u003e, options: { /* engine options ... */ } }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eImage comparison configuration options:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eKey\u003c/th\u003e\n\u003cth\u003eEngines\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eDefault\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eignoredBoxes\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eresemble, ssim\u003c/td\u003e\n\u003ctd\u003earray of object\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eArray of rectangles that should be ignored during image comparison\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eignore\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eresemble\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e'less'\u003c/td\u003e\n\u003ctd\u003eResemble ignore preset. Valid options are \u003ccode\u003enothing\u003c/code\u003e, \u003ccode\u003eless\u003c/code\u003e, \u003ccode\u003eantialiasing\u003c/code\u003e, \u003ccode\u003ecolors\u003c/code\u003e, \u003ccode\u003ealpha\u003c/code\u003e (see \u003ca href=\"https://github.com/t12y/resemble/blob/0c55a1849232b68aa4c16f1d7a949cc429a6af8e/src/main/java/io/github/t12y/resemble/Options.java#L20\"\u003epresets\u003c/a\u003e).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eignoreAreasColoredWith\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eresemble\u003c/td\u003e\n\u003ctd\u003eobject\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eResemble option to ignore a specific color\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eignoreColors\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eresemble\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eWhen \u003ccode\u003etrue\u003c/code\u003e only pixel brightness is compared\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eignoreAntialiasing\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eresemble\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eWhen \u003ccode\u003etrue\u003c/code\u003e only pixel brightness is compared for pixels determined to be antialiased\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etolerances\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eresemble\u003c/td\u003e\n\u003ctd\u003eobject\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eResemble option to override preset tolerances for color and brightness\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003essim\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003essim\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e'WEBER'\u003c/td\u003e\n\u003ctd\u003eSSIM algorithm. Valid options are \u003ccode\u003eFAST\u003c/code\u003e or \u003ccode\u003eWEBER\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ergb2grayVersion\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003essim\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003e'INTEGER'\u003c/td\u003e\n\u003ctd\u003eSSIM grayscale algorithm. Valid options are \u003ccode\u003eORIGINAL\u003c/code\u003e or \u003ccode\u003eINTEGER\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ek1\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003essim\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e0.01\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSSIM first stability constant (see \u003ca href=\"https://github.com/obartra/ssim/blob/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf\"\u003essim.pdf\u003c/a\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ek2\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003essim\u003c/td\u003e\n\u003ctd\u003enumber\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e0.03\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSSIM second stability constant (see \u003ca href=\"https://github.com/obartra/ssim/blob/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf\"\u003essim.pdf\u003c/a\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ewindowSize\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003essim\u003c/td\u003e\n\u003ctd\u003einteger\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e11\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eWindow size for the SSIM map (see \u003ca href=\"https://github.com/obartra/ssim/blob/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf\"\u003essim.pdf\u003c/a\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ebitDepth\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003essim\u003c/td\u003e\n\u003ctd\u003einteger\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e8\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe number of bits used to encode each pixel\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003emaxSize\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003essim\u003c/td\u003e\n\u003ctd\u003einteger\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e256\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe maximum size on the smallest dimension before downsampling\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eExamples:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# ignore areas of an image (e.g. to avoid constant failures due to loading animations)\n* def boxes =\n\u0026quot;\u0026quot;\u0026quot;\n[{\n  top: 483,\n  left: 1085,\n  bottom: 893,\n  right: 1496\n}]\n\u0026quot;\u0026quot;\u0026quot;\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoredBoxes: #(boxes) } }\n\n#############################\n### Resemble-only options ###\n#############################\n\n# zero-tolerance for color shifts\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignore: 'nothing' } }\n\n# ignore all purple areas\n* def purple =\n\u0026quot;\u0026quot;\u0026quot;\n{\n  r: 190,\n  g: 0,\n  b: 255\n}\n\u0026quot;\u0026quot;\u0026quot;\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreAreasColoredWith: '#(purple)' } }\n\n# compare images as grayscale\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreColors: true } }\n\n# attempt to detect and ignore antialiasing\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreAntialiasing: true } }\n\n# customize color / brightness tolerances\n* def customTolerances =\n\u0026quot;\u0026quot;\u0026quot;\n{\n  red: 4,\n  green: 4,\n  blue: 4,\n  alpha: 4,\n  minBrightness: 4,\n  maxBrightness: 250\n}\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { tolerances: '#(customTolerances)' } }\n\n#########################\n### SSIM-only options ###\n#########################\n\n# switch to `fast` SSIM algorithm\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ssim: 'FAST' } }\n\n# switch to `original` grayscale SSIM algorithm\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { rgb2grayVersion: 'ORIGINAL' } }\n\n# update SSIM stability constants\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { k1: 0, k2: 0 } }\n\n# update SSIM window size\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { windowSize: 3 } }\n\n# update SSIM bit depth\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { bitDepth: 16 } }\n\n# update SSIM max size\n* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { maxSize: 512 } }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# ignore areas of an image (e.g. to avoid constant failures due to loading animations)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef boxes =\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e[{\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  top: 483,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  left: 1085,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  bottom: 893,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  right: 1496\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecompareImage { baseline: \u003cspan class=\"pl-s\"\u003e'baseline.png'\u003c/span\u003e, latest: \u003cspan class=\"pl-s\"\u003e'latest.png'\u003c/span\u003e, options: { ignoredBoxes:\u003cspan class=\"pl-c\"\u003e #(boxes) } }\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e#############################\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e### Resemble-only options ###\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e#############################\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# zero-tolerance for color shifts\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecompareImage { baseline: \u003cspan class=\"pl-s\"\u003e'baseline.png'\u003c/span\u003e, latest: \u003cspan class=\"pl-s\"\u003e'latest.png'\u003c/span\u003e, options: { ignore: \u003cspan class=\"pl-s\"\u003e'nothing'\u003c/span\u003e } }\n\n\u003cspan class=\"pl-c\"\u003e# ignore all purple areas\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef purple =\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e{\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  r: 190,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  g: 0,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  b: 255\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecompareImage { baseline: \u003cspan class=\"pl-s\"\u003e'baseline.png'\u003c/span\u003e, latest: \u003cspan class=\"pl-s\"\u003e'latest.png'\u003c/span\u003e, options: { ignoreAreasColoredWith: \u003cspan class=\"pl-s\"\u003e'#(purple)'\u003c/span\u003e } }\n\n\u003cspan class=\"pl-c\"\u003e# compare images as grayscale\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecompareImage { baseline: \u003cspan class=\"pl-s\"\u003e'baseline.png'\u003c/span\u003e, latest: \u003cspan class=\"pl-s\"\u003e'latest.png'\u003c/span\u003e, options: { ignoreColors: true } }\n\n\u003cspan class=\"pl-c\"\u003e# attempt to detect and ignore antialiasing\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecompareImage { baseline: \u003cspan class=\"pl-s\"\u003e'baseline.png'\u003c/span\u003e, latest: \u003cspan class=\"pl-s\"\u003e'latest.png'\u003c/span\u003e, options: { ignoreAntialiasing: true } }\n\n\u003cspan class=\"pl-c\"\u003e# customize color / brightness tolerances\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef customTolerances =\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e{\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  red: 4,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  green: 4,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  blue: 4,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  alpha: 4,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  minBrightness: 4,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  maxBrightness: 250\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { tolerances: '#(customTolerances)' } }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e#########################\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e### SSIM-only options ###\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e#########################\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e# switch to `fast` SSIM algorithm\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ssim: 'FAST' } }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e# switch to `original` grayscale SSIM algorithm\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { rgb2grayVersion: 'ORIGINAL' } }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e# update SSIM stability constants\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { k1: 0, k2: 0 } }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e# update SSIM window size\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { windowSize: 3 } }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e# update SSIM bit depth\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { bitDepth: 16 } }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e# update SSIM max size\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { maxSize: 512 } }\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eType Conversion\u003c/h2\u003e\u003ca id=\"user-content-type-conversion\" class=\"anchor\" aria-label=\"Permalink: Type Conversion\" href=\"#type-conversion\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eBest practice is to stick to using only \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e unless there is a very good reason to do otherwise.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eInternally, Karate will auto-convert JSON (and even XML) to Java \u003ccode\u003eMap\u003c/code\u003e objects. And JSON arrays would become Java \u003ccode\u003eList\u003c/code\u003e-s. But you will never need to worry about this internal data-representation most of the time.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIn some rare cases, for e.g. if you acquired a string from some external source, or if you generated JSON (or XML) by concatenating text or using \u003ca href=\"#replace\"\u003e\u003ccode\u003ereplace\u003c/code\u003e\u003c/a\u003e, you may want to convert a string to JSON and vice-versa. You can even perform a conversion from XML to JSON if you want.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eOne example of when you may want to convert JSON (or XML) to a string is when you are passing a payload to custom code via \u003ca href=\"#calling-java\"\u003eJava interop\u003c/a\u003e. Do note that when passing JSON, the default \u003ccode\u003eMap\u003c/code\u003e and \u003ccode\u003eList\u003c/code\u003e representations should suffice for most needs (\u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/java/cats-java.feature\"\u003esee example\u003c/a\u003e), and using them would avoid un-necessary string-conversion.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSo you have the following type markers you can use instead of \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e (or the rarely used \u003ca href=\"#text\"\u003e\u003ccode\u003etext\u003c/code\u003e\u003c/a\u003e). The first four below are best explained in this example file: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature\"\u003e\u003ccode\u003etype-conv.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca name=\"user-content-type-string\"\u003e\u003ccode\u003estring\u003c/code\u003e\u003c/a\u003e - convert JSON or any other data-type (except XML) to a string\u003c/li\u003e\n\u003cli\u003e\u003ca name=\"user-content-type-json\"\u003e\u003ccode\u003ejson\u003c/code\u003e\u003c/a\u003e - convert XML, a map-like or list-like object, a string, or even a Java object into JSON\u003c/li\u003e\n\u003cli\u003e\u003ca name=\"user-content-type-xml\"\u003e\u003ccode\u003exml\u003c/code\u003e\u003c/a\u003e - convert JSON, a map-like object, a string, or even a Java object into XML\u003c/li\u003e\n\u003cli\u003e\u003ca name=\"user-content-type-xmlstring\"\u003e\u003ccode\u003exmlstring\u003c/code\u003e\u003c/a\u003e - specifically for converting the map-like Karate internal representation of XML into a string\u003c/li\u003e\n\u003cli\u003e\u003ca name=\"user-content-type-csv\"\u003e\u003ccode\u003ecsv\u003c/code\u003e\u003c/a\u003e - convert a CSV string into JSON, see \u003ca href=\"#csv\"\u003e\u003ccode\u003ecsv\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca name=\"user-content-type-yaml\"\u003e\u003ccode\u003eyaml\u003c/code\u003e\u003c/a\u003e - convert a YAML string into JSON, see \u003ca href=\"#yaml\"\u003e\u003ccode\u003eyaml\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca name=\"user-content-type-bytes\"\u003e\u003ccode\u003ebytes\u003c/code\u003e\u003c/a\u003e - convert to a byte-array, useful for binary payloads or comparisons, see \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/websocket/echo.feature\"\u003eexample\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca name=\"user-content-type-copy\"\u003e\u003ccode\u003ecopy\u003c/code\u003e\u003c/a\u003e - to clone a given payload variable reference (JSON, XML, Map or List), refer: \u003ca href=\"#copy\"\u003e\u003ccode\u003ecopy\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ccode\u003ecsv\u003c/code\u003e and \u003ccode\u003eyaml\u003c/code\u003e types can be initialized in-line using the \"triple quote\" or \"docstring\" multi-line approach as shown \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conversion.feature\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you want to 'pretty print' a JSON or XML value with indenting, refer to the documentation of the \u003ca href=\"#print\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e keyword.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eFloats and Integers\u003c/h3\u003e\u003ca id=\"user-content-floats-and-integers\" class=\"anchor\" aria-label=\"Permalink: Floats and Integers\" href=\"#floats-and-integers\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhile converting a number to a string is easy (just concatenate an empty string e.g. \u003ccode\u003emyInt + ''\u003c/code\u003e), in some rare cases, you may need to convert a string to a number. You can do this by multiplying by \u003ccode\u003e1\u003c/code\u003e or using the built-in JavaScript \u003ccode\u003eparseInt()\u003c/code\u003e function:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = '10'\n* string json = { bar: '#(1 * foo)' }\n* match json == '{\u0026quot;bar\u0026quot;:10.0}'\n\n* string json = { bar: '#(parseInt(foo))' }\n* match json == '{\u0026quot;bar\u0026quot;:10.0}'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = \u003cspan class=\"pl-s\"\u003e'10'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003estring json = { bar: \u003cspan class=\"pl-s\"\u003e'#(1 * foo)'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == \u003cspan class=\"pl-s\"\u003e'{\"bar\":10.0}'\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003estring json = { bar: \u003cspan class=\"pl-s\"\u003e'#(parseInt(foo))'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == \u003cspan class=\"pl-s\"\u003e'{\"bar\":10.0}'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAs per the JSON spec, all numeric values are treated as doubles, so for integers - it really doesn't matter if there is a decimal point or not. In fact it may be a good idea to slip doubles instead of integers into some of your tests ! Anyway, there are times when you may want to force integers (perhaps for cosmetic reasons) and you can easily do so using the 'double-tilde' \u003ca href=\"http://rocha.la/JavaScript-bitwise-operators-in-practice\" rel=\"nofollow\"\u003eshort-cut: '\u003ccode\u003e~~\u003c/code\u003e'\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = '10'\n* string json = { bar: '#(~~foo)' }\n* match json == '{\u0026quot;bar\u0026quot;:10}'\n\n# JS math can introduce a decimal point in some cases\n* def foo = 100\n* string json = { bar: '#(foo * 0.1)' }\n* match json == '{\u0026quot;bar\u0026quot;:10.0}'\n\n# but you can easily coerce to an integer if needed\n* string json = { bar: '#(~~(foo * 0.1))' }\n* match json == '{\u0026quot;bar\u0026quot;:10}'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = \u003cspan class=\"pl-s\"\u003e'10'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003estring json = { bar: \u003cspan class=\"pl-s\"\u003e'#(~~foo)'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == \u003cspan class=\"pl-s\"\u003e'{\"bar\":10}'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# JS math can introduce a decimal point in some cases\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = 100\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003estring json = { bar: \u003cspan class=\"pl-s\"\u003e'#(foo * 0.1)'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == \u003cspan class=\"pl-s\"\u003e'{\"bar\":10.0}'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# but you can easily coerce to an integer if needed\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003estring json = { bar: \u003cspan class=\"pl-s\"\u003e'#(~~(foo * 0.1))'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == \u003cspan class=\"pl-s\"\u003e'{\"bar\":10}'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eLarge Numbers\u003c/h3\u003e\u003ca id=\"user-content-large-numbers\" class=\"anchor\" aria-label=\"Permalink: Large Numbers\" href=\"#large-numbers\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSometimes when dealing with very large numbers, the JS engine may mangle the number into scientific notation:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def big = 123123123123\n* string json = { num: '#(big)' }\n* match json == '{\u0026quot;num\u0026quot;:1.23123123123E11}'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef big = 123123123123\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003estring json = { num: \u003cspan class=\"pl-s\"\u003e'#(big)'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == \u003cspan class=\"pl-s\"\u003e'{\"num\":1.23123123123E11}'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis can be easily solved by using \u003ccode\u003ejava.math.BigDecimal\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def big = new java.math.BigDecimal(123123123123)\n* string json = { num: '#(big)' }\n* match json == '{\u0026quot;num\u0026quot;:123123123123}'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef big = new java.math.BigDecimal(123123123123)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003estring json = { num: \u003cspan class=\"pl-s\"\u003e'#(big)'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == \u003cspan class=\"pl-s\"\u003e'{\"num\":123123123123}'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003edoc\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-doc\" class=\"anchor\" aria-label=\"Permalink: doc\" href=\"#doc\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate has a built-in HTML templating engine that can be used to insert additional custom HTML into the test-reports. Here is an \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/users-doc.feature\"\u003eexample\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* url 'https://jsonplaceholder.typicode.com/users'\n* method get\n* doc { read: 'users.html' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eurl \u003cspan class=\"pl-s\"\u003e'https://jsonplaceholder.typicode.com/users'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003emethod get\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edoc { read: \u003cspan class=\"pl-s\"\u003e'users.html'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAny Karate \u003ca href=\"#def\"\u003evariable\u003c/a\u003e will be available to the template, which is \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/users.html\"\u003e\u003ccode\u003eusers.html\u003c/code\u003e\u003c/a\u003e in this example.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-html-basic notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"\u0026lt;table class=\u0026quot;table table-striped\u0026quot;\u0026gt;\n  \u0026lt;thead\u0026gt;\n    \u0026lt;tr\u0026gt;\n      \u0026lt;th\u0026gt;ID\u0026lt;/th\u0026gt;\n      \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\n      \u0026lt;th\u0026gt;E-Mail\u0026lt;/th\u0026gt;\n    \u0026lt;/tr\u0026gt;\n  \u0026lt;/thead\u0026gt;\n  \u0026lt;tbody\u0026gt;\n    \u0026lt;tr th:each=\u0026quot;user: response\u0026quot;\u0026gt;\n      \u0026lt;td th:text=\u0026quot;user.id\u0026quot;\u0026gt;\u0026lt;/td\u0026gt;\n      \u0026lt;td th:text=\u0026quot;user.name\u0026quot;\u0026gt;\u0026lt;/td\u0026gt;\n      \u0026lt;td th:text=\u0026quot;user.email\u0026quot;\u0026gt;\u0026lt;/td\u0026gt;\n    \u0026lt;/tr\u0026gt;\n  \u0026lt;/tbody\u0026gt;\n\u0026lt;/table\u0026gt;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etable\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eclass\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etable table-striped\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ethead\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eth\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eID\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eth\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eth\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eName\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eth\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eth\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eE-Mail\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003eth\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ethead\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etbody\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etr\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eth:each\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003euser: response\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etd\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eth:text\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003euser.id\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etd\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etd\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eth:text\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003euser.name\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etd\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etd\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eth:text\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003euser.email\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etd\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etr\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etbody\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etable\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can see what the result looks like \u003ca href=\"https://twitter.com/ptrthomas/status/1335478948365443072\" rel=\"nofollow\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSince templates can be loaded using the \u003ca href=\"#classpath\"\u003e\u003ccode\u003eclasspath:\u003c/code\u003e\u003c/a\u003e prefix, you can even re-use templates across your projects via \u003ca href=\"https://stackoverflow.com/a/58339662/143475\" rel=\"nofollow\"\u003eJava JAR files\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eKarate Expressions\u003c/h1\u003e\u003ca id=\"user-content-karate-expressions\" class=\"anchor\" aria-label=\"Permalink: Karate Expressions\" href=\"#karate-expressions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eBefore we get to the HTTP keywords, it is worth doing a recap of the various 'shapes' that the right-hand-side of an assignment statement can take:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eExample\u003c/th\u003e\n\u003cth\u003eShape\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = 'bar'\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS\u003c/td\u003e\n\u003ctd\u003esimple strings, numbers or booleans\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = 'bar' + baz[0]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS\u003c/td\u003e\n\u003ctd\u003eany valid JavaScript expression, and variables can be mixed in, another example: \u003ccode\u003ebar.length + 1\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = { bar: '#(baz)' }\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON\u003c/td\u003e\n\u003ctd\u003eanything that starts with a \u003ccode\u003e{\u003c/code\u003e or a \u003ccode\u003e[\u003c/code\u003e is parsed as JSON, use \u003ca href=\"#text\"\u003e\u003ccode\u003etext\u003c/code\u003e\u003c/a\u003e instead of \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e if you need to suppress the default behavior\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = ({ bar: baz })\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#enclosed-javascript\"\u003eenclosed JavaScript\u003c/a\u003e, the result of which is exactly equivalent to the above\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = \u0026lt;foo\u0026gt;bar\u0026lt;/foo\u0026gt;\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eXML\u003c/td\u003e\n\u003ctd\u003eanything that starts with a \u003ccode\u003e\u0026lt;\u003c/code\u003e is parsed as XML, use \u003ca href=\"#text\"\u003e\u003ccode\u003etext\u003c/code\u003e\u003c/a\u003e instead of \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e if you need to suppress the default behavior\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = function(arg){ return arg + bar }\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS Fn\u003c/td\u003e\n\u003ctd\u003eanything that starts with \u003ccode\u003efunction(...){\u003c/code\u003e is parsed as a JS function.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = read('bar.json')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS\u003c/td\u003e\n\u003ctd\u003eusing the built-in \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread()\u003c/code\u003e\u003c/a\u003e function\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = $.bar[0]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJsonPath\u003c/td\u003e\n\u003ctd\u003eshort-cut JsonPath on the \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = /bar/baz\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eXPath\u003c/td\u003e\n\u003ctd\u003eshort-cut XPath on the \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = get bar $..baz[?(@.ban)]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#get\"\u003e\u003ccode\u003eget\u003c/code\u003e\u003c/a\u003e JsonPath\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"https://github.com/json-path/JsonPath#path-examples\"\u003eJsonPath\u003c/a\u003e on the variable \u003ccode\u003ebar\u003c/code\u003e, you can also use \u003ca href=\"#get-plus-index\"\u003e\u003ccode\u003eget[0]\u003c/code\u003e\u003c/a\u003e to get the first item if the JsonPath evaluates to an array - especially useful when using wildcards such as \u003ccode\u003e[*]\u003c/code\u003e or \u003ca href=\"#jsonpath-filters\"\u003efilter-criteria\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = $bar..baz[?(@.ban)]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e$var.JsonPath\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#get-short-cut\"\u003econvenience short-cut\u003c/a\u003e for the above\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = get bar count(/baz//ban)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#get\"\u003e\u003ccode\u003eget\u003c/code\u003e\u003c/a\u003e XPath\u003c/td\u003e\n\u003ctd\u003eXPath on the variable \u003ccode\u003ebar\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = karate.pretty(bar)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS\u003c/td\u003e\n\u003ctd\u003eusing the \u003ca href=\"#the-karate-object\"\u003ebuilt-in \u003ccode\u003ekarate\u003c/code\u003e object\u003c/a\u003e in JS expressions\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def Foo = Java.type('com.mycompany.Foo')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS-Java\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#java-interop\"\u003eJava Interop\u003c/a\u003e, and even package-name-spaced one-liners like \u003ccode\u003ejava.lang.System.currentTimeMillis()\u003c/code\u003e are possible\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = call bar { baz: '#(ban)' }\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eor \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e, where expressions like \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread('foo.js')\u003c/code\u003e\u003c/a\u003e are allowed as the object to be called or the argument\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def foo = bar({ baz: ban })\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS\u003c/td\u003e\n\u003ctd\u003eequivalent to the above, JavaScript function invocation\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCore Keywords\u003c/h1\u003e\u003ca id=\"user-content-core-keywords\" class=\"anchor\" aria-label=\"Permalink: Core Keywords\" href=\"#core-keywords\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThey are \u003ccode\u003eurl\u003c/code\u003e, \u003ccode\u003epath\u003c/code\u003e, \u003ccode\u003erequest\u003c/code\u003e, \u003ccode\u003emethod\u003c/code\u003e and \u003ccode\u003estatus\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThese are essential HTTP operations, they focus on setting one (un-named or 'key-less') value at a time and therefore don't need an \u003ccode\u003e=\u003c/code\u003e sign in the syntax.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-url\" class=\"anchor\" aria-label=\"Permalink: url\" href=\"#url\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given url 'https://myhost.com/v1/cats'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl \u003cspan class=\"pl-s\"\u003e'https://myhost.com/v1/cats'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWithin a \u003ccode\u003eScenario\u003c/code\u003e, a URL remains constant until you use the \u003ccode\u003eurl\u003c/code\u003e keyword again, so this is a good place to set-up the 'non-changing' parts of your REST URL-s.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA URL can take expressions, so the approach below is legal.  And yes, variables can come from global \u003ca href=\"#configuration\"\u003econfig\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given url 'https://' + e2eHostName + '/v1/api'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl \u003cspan class=\"pl-s\"\u003e'https://'\u003c/span\u003e + e2eHostName + \u003cspan class=\"pl-s\"\u003e'/v1/api'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eJavaScript enthusiasts may prefer variable interpolation using backticks:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* url `https://${e2eHostName}/v1/api`\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eurl `https://${e2eHostName}/v1/api`\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you are trying to build dynamic URLs including query-string parameters in the form: \u003ccode\u003ehttp://myhost/some/path?foo=bar\u0026amp;search=true\u003c/code\u003e - please refer to the \u003ca href=\"#param\"\u003e\u003ccode\u003eparam\u003c/code\u003e\u003c/a\u003e keyword.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003econfigure url\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-configure-url\" class=\"anchor\" aria-label=\"Permalink: configure url\" href=\"#configure-url\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen you \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e other features, the \u003ccode\u003eurl\u003c/code\u003e will be \"reset\". But if you want the \u003ccode\u003eurl\u003c/code\u003e to persist, you can do this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature:\n\nScenario:\n* configure url = 'https://httpbin.org'\n* path 'anything'\n* method get\n* call read('@called')\n\n@ignore @called\nScenario:\n* path 'anything'\n* method get\"\u003e\u003cpre\u003eFeature:\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure url = \u003cspan class=\"pl-s\"\u003e'https://httpbin.org'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'anything'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003emethod get\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecall read(\u003cspan class=\"pl-s\"\u003e'@called'\u003c/span\u003e)\n\n\u003cspan class=\"pl-k\"\u003e@ignore\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e@called\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'anything'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003emethod get\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote how in the \"called\" \u003ccode\u003eScenario\u003c/code\u003e you could omit the \u003ccode\u003eurl\u003c/code\u003e. It is easy to change the \u003ccode\u003eurl\u003c/code\u003e anytime by using the keyword. Note that you can use variables to set up the \u003ccode\u003eurl\u003c/code\u003e any time you need to.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003epath\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-path\" class=\"anchor\" aria-label=\"Permalink: path\" href=\"#path\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eREST-style path parameters.  Can be expressions that will be evaluated.  Comma delimited values are supported which can be more convenient, and takes care of URL-encoding and appending '/' between path segments as needed.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given path 'documents', documentId, 'download'\n\n# or you can do the same on multiple lines if you wish\nGiven path 'documents'\nAnd path documentId\nAnd path 'download'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'documents'\u003c/span\u003e, documentId, \u003cspan class=\"pl-s\"\u003e'download'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# or you can do the same on multiple lines if you wish\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'documents'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003epath documentId\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'download'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that the \u003ccode\u003epath\u003c/code\u003e 'resets' after any HTTP request is made but not the \u003ccode\u003eurl\u003c/code\u003e. The \u003ca href=\"#hello-world\"\u003eHello World\u003c/a\u003e is a great example of 'REST-ful' use of the \u003ccode\u003eurl\u003c/code\u003e when the test focuses on a single REST 'resource'. Look at how the \u003ccode\u003epath\u003c/code\u003e did not need to be specified for the second HTTP \u003ccode\u003eget\u003c/code\u003e call since \u003ccode\u003e/cats\u003c/code\u003e is part of the \u003ccode\u003eurl\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eImportant: If you attempt to build a URL in the form \u003ccode\u003e?myparam=value\u003c/code\u003e by using \u003ccode\u003epath\u003c/code\u003e the \u003ccode\u003e?\u003c/code\u003e will get encoded into \u003ccode\u003e%3F\u003c/code\u003e. Use either the \u003ca href=\"#param\"\u003e\u003ccode\u003eparam\u003c/code\u003e\u003c/a\u003e keyword, e.g.: \u003ccode\u003e* param myparam = 'value'\u003c/code\u003e or \u003ca href=\"#url\"\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/a\u003e: \u003ccode\u003e* url 'http://example.com/v1?myparam'\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eBecause Karate strips trailing slashes if part of a \u003ccode\u003epath\u003c/code\u003e parameter, if you want to append a forward-slash to the end of the URL in the final HTTP request - make sure that the last \u003ccode\u003epath\u003c/code\u003e is a single '/'. For example, if your path has to be \u003ccode\u003edocuments/\u003c/code\u003e (and not just \u003ccode\u003edocuments\u003c/code\u003e), use:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given path 'documents', '/'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'documents'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'/'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003erequest\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-request\" class=\"anchor\" aria-label=\"Permalink: request\" href=\"#request\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn-line JSON:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given request { name: 'Billie', type: 'LOL' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003erequest { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e, type: \u003cspan class=\"pl-s\"\u003e'LOL'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn-line XML:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"And request \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u0026lt;type\u0026gt;Ceiling\u0026lt;/type\u0026gt;\u0026lt;/cat\u0026gt;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eBillie\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;type\u0026gt;\u003c/span\u003eCeiling\u003cspan class=\"pl-smi\"\u003e\u0026lt;/type\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFrom a \u003ca href=\"#reading-files\"\u003efile\u003c/a\u003e in the same package.  Use the \u003ccode\u003eclasspath:\u003c/code\u003e prefix to load from the \u003ca href=\"#classpath\"\u003eclasspath\u003c/a\u003e instead.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given request read('my-json.json')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003erequest read(\u003cspan class=\"pl-s\"\u003e'my-json.json'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou could always use a variable:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"And request myVariable\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest myVariable\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn most cases you won't need to set the \u003ccode\u003eContent-Type\u003c/code\u003e \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e as Karate will automatically do the right thing depending on the data-type of the \u003ccode\u003erequest\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eDefining the \u003ccode\u003erequest\u003c/code\u003e is mandatory if you are using an HTTP \u003ccode\u003emethod\u003c/code\u003e that expects a body such as \u003ccode\u003epost\u003c/code\u003e. If you really need to have an empty body, you can use an empty string as shown below, and you can force the right \u003ccode\u003eContent-Type\u003c/code\u003e header by using the \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e keyword.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given request ''\nAnd header Content-Type = 'text/html'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003erequest \u003cspan class=\"pl-s\"\u003e''\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eheader Content-Type = \u003cspan class=\"pl-s\"\u003e'text/html'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSending a \u003ca href=\"#reading-files\"\u003efile\u003c/a\u003e as the entire binary request body is easy (note that \u003ca href=\"#multipart-file\"\u003e\u003ccode\u003emultipart\u003c/code\u003e\u003c/a\u003e is different):\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given path 'upload'\nAnd request read('my-image.jpg')\nWhen method put\nThen status 200\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'upload'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest read(\u003cspan class=\"pl-s\"\u003e'my-image.jpg'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod put\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003emethod\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-method\" class=\"anchor\" aria-label=\"Permalink: method\" href=\"#method\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe HTTP verb - \u003ccode\u003eget\u003c/code\u003e, \u003ccode\u003epost\u003c/code\u003e, \u003ccode\u003eput\u003c/code\u003e, \u003ccode\u003edelete\u003c/code\u003e, \u003ccode\u003epatch\u003c/code\u003e, \u003ccode\u003eoptions\u003c/code\u003e, \u003ccode\u003ehead\u003c/code\u003e, \u003ccode\u003econnect\u003c/code\u003e, \u003ccode\u003etrace\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eLower-case is fine.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"When method post\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt is worth internalizing that during test-execution, it is upon the \u003ccode\u003emethod\u003c/code\u003e keyword that the actual HTTP request is issued. Which suggests that the step should be in the \u003ccode\u003eWhen\u003c/code\u003e form, for example: \u003ccode\u003eWhen method post\u003c/code\u003e. And steps that follow should logically be in the \u003ccode\u003eThen\u003c/code\u003e form. Also make sure that you complete the set up of things like \u003ca href=\"#url\"\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#param\"\u003e\u003ccode\u003eparam\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e etc. \u003cem\u003ebefore\u003c/em\u003e you fire the \u003ccode\u003emethod\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# set headers or params (if any) BEFORE the method step\nGiven header Accept = 'application/json'\nWhen method get\n# the step that immediately follows the above would typically be:\nThen status 200\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# set headers or params (if any) BEFORE the method step\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eheader Accept = \u003cspan class=\"pl-s\"\u003e'application/json'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod get\n\u003cspan class=\"pl-c\"\u003e# the step that immediately follows the above would typically be:\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlthough rarely needed, variable references or \u003ca href=\"#karate-expressions\"\u003eexpressions\u003c/a\u003e are also supported:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def putOrPost = (someVariable == 'dev' ? 'put' : 'post')\n* method putOrPost\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef putOrPost = (someVariable == \u003cspan class=\"pl-s\"\u003e'dev'\u003c/span\u003e ? \u003cspan class=\"pl-s\"\u003e'put'\u003c/span\u003e : \u003cspan class=\"pl-s\"\u003e'post'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003emethod putOrPost\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003estatus\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-status\" class=\"anchor\" aria-label=\"Permalink: status\" href=\"#status\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is a shortcut to assert the HTTP response code.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Then status 200\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd this assertion will cause the test to fail if the HTTP response code is something else.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSee also \u003ca href=\"#responsestatus\"\u003e\u003ccode\u003eresponseStatus\u003c/code\u003e\u003c/a\u003e if you want to do some complex assertions against the HTTP status code.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eKeywords that set key-value pairs\u003c/h1\u003e\u003ca id=\"user-content-keywords-that-set-key-value-pairs\" class=\"anchor\" aria-label=\"Permalink: Keywords that set key-value pairs\" href=\"#keywords-that-set-key-value-pairs\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThey are \u003ccode\u003eparam\u003c/code\u003e, \u003ccode\u003eheader\u003c/code\u003e, \u003ccode\u003ecookie\u003c/code\u003e, \u003ccode\u003eform field\u003c/code\u003e and \u003ccode\u003emultipart field\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe syntax will include a '=' sign between the key and the value.  The key should not be within quotes.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eTo make dynamic data-driven testing easier, the following keywords also exist: \u003ca href=\"#params\"\u003e\u003ccode\u003eparams\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#headers\"\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#cookies-json\"\u003e\u003ccode\u003ecookies\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#form-fields\"\u003e\u003ccode\u003eform fields\u003c/code\u003e\u003c/a\u003e. They use JSON to build the relevant parts of the HTTP request.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eparam\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-param\" class=\"anchor\" aria-label=\"Permalink: param\" href=\"#param\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSetting query-string parameters:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given param someKey = 'hello'\nAnd param anotherKey = someVariable\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eparam someKey = \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eparam anotherKey = someVariable\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe above would result in a URL like: \u003ccode\u003ehttp://myhost/mypath?someKey=hello\u0026amp;anotherKey=foo\u003c/code\u003e. Note that the \u003ccode\u003e?\u003c/code\u003e and \u003ccode\u003e\u0026amp;\u003c/code\u003e will be automatically inserted.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eMulti-value params are also supported:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* param myParam = ['foo', 'bar']\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eparam myParam = [\u003cspan class=\"pl-s\"\u003e'foo'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor convenience, a \u003ccode\u003enull\u003c/code\u003e value will be ignored. You can also use JSON to set multiple query-parameters in one-line using \u003ca href=\"#params\"\u003e\u003ccode\u003eparams\u003c/code\u003e\u003c/a\u003e and this is especially useful for dynamic data-driven testing.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-header\" class=\"anchor\" aria-label=\"Permalink: header\" href=\"#header\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can use \u003ca href=\"#calling-javascript-functions\"\u003efunctions\u003c/a\u003e or \u003ca href=\"#karate-expressions\"\u003eexpressions\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given header Authorization = myAuthFunction()\nAnd header transaction-id = 'test-' + myIdString\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eheader Authorization = myAuthFunction()\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eheader transaction-id = \u003cspan class=\"pl-s\"\u003e'test-'\u003c/span\u003e + myIdString\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt is worth repeating that in most cases you won't need to set the \u003ccode\u003eContent-Type\u003c/code\u003e header as Karate will automatically do the right thing depending on the data-type of the \u003ca href=\"#request\"\u003e\u003ccode\u003erequest\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBecause of how easy it is to set HTTP headers, Karate does not provide any special keywords for things like\nthe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept\" rel=\"nofollow\"\u003e\u003ccode\u003eAccept\u003c/code\u003e\u003c/a\u003e header. You simply do\nsomething like this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given path 'some/path'\nAnd request { some: 'data' }\nAnd header Accept = 'application/json'\nWhen method post\nThen status 200\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'some/path'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest { some: \u003cspan class=\"pl-s\"\u003e'data'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eheader Accept = \u003cspan class=\"pl-s\"\u003e'application/json'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA common need is to send the same header(s) for \u003cem\u003eevery\u003c/em\u003e request, and \u003ca href=\"#configure-headers\"\u003e\u003ccode\u003econfigure headers\u003c/code\u003e\u003c/a\u003e (with JSON) is how you can set this up once for all subsequent requests. And if you do this within a \u003ccode\u003eBackground:\u003c/code\u003e section, it would apply to all \u003ccode\u003eScenario:\u003c/code\u003e sections within the \u003ccode\u003e*.feature\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* configure headers = { 'Content-Type': 'application/xml' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure headers = { \u003cspan class=\"pl-s\"\u003e'Content-Type'\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'application/xml'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ccode\u003eContent-Type\u003c/code\u003e had to be enclosed in quotes in the JSON above because the \"\u003ccode\u003e-\u003c/code\u003e\" (hyphen character) would cause problems otherwise. Also note that \"\u003ccode\u003e; charset=UTF-8\u003c/code\u003e\" would be appended to the \u003ccode\u003eContent-Type\u003c/code\u003e header that Karate sends by default, and in some rare cases, you may need to suppress this behavior completely. You can do so by setting the \u003ccode\u003echarset\u003c/code\u003e to null via the \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e keyword:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* configure charset = null\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure charset = null\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you need headers to be dynamically generated for each HTTP request, use a JavaScript function with \u003ca href=\"#configure-headers\"\u003e\u003ccode\u003econfigure headers\u003c/code\u003e\u003c/a\u003e instead of JSON.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eMulti-value headers (though rarely used in the wild) are also supported:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* header myHeader = ['foo', 'bar']\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eheader myHeader = [\u003cspan class=\"pl-s\"\u003e'foo'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlso look at the \u003ca href=\"#headers\"\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/a\u003e keyword which uses JSON and makes some kinds of dynamic data-driven testing easier.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ecookie\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-cookie\" class=\"anchor\" aria-label=\"Permalink: cookie\" href=\"#cookie\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSetting a cookie:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given cookie foo = 'bar'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003ecookie foo = \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou also have the option of setting multiple cookies in one-step using the \u003ca href=\"#cookies\"\u003e\u003ccode\u003ecookies\u003c/code\u003e\u003c/a\u003e keyword.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that any cookies returned in the HTTP response would be automatically set for any future requests. This mechanism works by calling \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure cookies\u003c/code\u003e\u003c/a\u003e behind the scenes and if you need to stop auto-adding cookies for future requests, just do this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* configure cookies = null\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure cookies = null\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlso refer to the built-in variable \u003ca href=\"#responsecookies\"\u003e\u003ccode\u003eresponseCookies\u003c/code\u003e\u003c/a\u003e for how you can access and perform assertions on cookie data values.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eform field\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-form-field\" class=\"anchor\" aria-label=\"Permalink: form field\" href=\"#form-field\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eHTML form fields would be URL-encoded when the HTTP request is submitted (by the \u003ca href=\"#method\"\u003e\u003ccode\u003emethod\u003c/code\u003e\u003c/a\u003e step). You would typically use these to simulate a user sign-in and then grab a security token from the \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that the \u003ccode\u003eContent-Type\u003c/code\u003e header will be automatically set to: \u003ccode\u003eapplication/x-www-form-urlencoded\u003c/code\u003e. You just need to do a normal \u003ccode\u003ePOST\u003c/code\u003e (or \u003ccode\u003eGET\u003c/code\u003e).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given path 'login'\nAnd form field username = 'john'\nAnd form field password = 'secret'\nWhen method post\nThen status 200\nAnd def authToken = response.token\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'login'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eform field username = \u003cspan class=\"pl-s\"\u003e'john'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eform field password = \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003edef authToken = response.token\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA good example of the use of \u003ccode\u003eform field\u003c/code\u003e for a typical sign-in flow is this OAuth 2 demo: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/oauth/oauth2.feature\"\u003e\u003ccode\u003eoauth2.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eMulti-values are supported the way you would expect (e.g. for simulating check-boxes and multi-selects):\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* form field selected = ['apple', 'orange']\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eform field selected = [\u003cspan class=\"pl-s\"\u003e'apple'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'orange'\u003c/span\u003e]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can also dynamically set multiple fields in one step using the \u003ca href=\"#form-fields\"\u003e\u003ccode\u003eform fields\u003c/code\u003e\u003c/a\u003e keyword.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003emultipart field\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-multipart-field\" class=\"anchor\" aria-label=\"Permalink: multipart field\" href=\"#multipart-field\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eUse this for building multipart named (form) field requests. This is typically combined with \u003ccode\u003emultipart file\u003c/code\u003e as shown below.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eMultiple fields can be set in one step using \u003ca href=\"#multipart-fields\"\u003e\u003ccode\u003emultipart fields\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003emultipart file\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-multipart-file\" class=\"anchor\" aria-label=\"Permalink: multipart file\" href=\"#multipart-file\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given multipart file myFile = { read: 'test.pdf', filename: 'upload-name.pdf', contentType: 'application/pdf' }\nAnd multipart field message = 'hello world'\nWhen method post\nThen status 200\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003emultipart file myFile = { read: \u003cspan class=\"pl-s\"\u003e'test.pdf'\u003c/span\u003e, filename: \u003cspan class=\"pl-s\"\u003e'upload-name.pdf'\u003c/span\u003e, contentType: \u003cspan class=\"pl-s\"\u003e'application/pdf'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003emultipart field message = \u003cspan class=\"pl-s\"\u003e'hello world'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt is important to note that \u003ccode\u003emyFile\u003c/code\u003e above is the \"field name\" within the \u003ccode\u003emultipart/form-data\u003c/code\u003e request payload. This roughly corresponds to a \u003ca href=\"https://curl.haxx.se/docs/manpage.html#-F\" rel=\"nofollow\"\u003e\u003ccode\u003ecURL\u003c/code\u003e\u003c/a\u003e argument of \u003ccode\u003e-F @myFile=test.pdf\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003emultipart\u003c/code\u003e file uploads can be tricky, and hard to get right. If you get stuck and ask a question on \u003ca href=\"https://stackoverflow.com/questions/tagged/karate\" rel=\"nofollow\"\u003eStack Overflow\u003c/a\u003e, make sure you provide a \u003ccode\u003ecURL\u003c/code\u003e command that works - or else it would be very difficult for anyone to troubleshoot what you could be doing wrong. Also see \u003ca href=\"https://github.com/karatelabs/karate/issues/1645#issuecomment-862502881\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/1645/hovercard\"\u003ethis thread\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eAlso note that \u003ccode\u003emultipart file\u003c/code\u003e takes a JSON argument so that you can easily set the \u003ccode\u003efilename\u003c/code\u003e and the \u003ccode\u003econtentType\u003c/code\u003e (mime-type) in one step.\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003eread\u003c/code\u003e: the name of a file, and the \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eclasspath:\u003c/code\u003e\u003c/a\u003e prefix also is allowed. mandatory unless \u003ccode\u003evalue\u003c/code\u003e is used, see below.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evalue\u003c/code\u003e: alternative to \u003ccode\u003eread\u003c/code\u003e in rare cases where something like a JSON or XML file is being uploaded and you want to create it dynamically.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efilename\u003c/code\u003e: optional, if not specified there will be no \u003ccode\u003efilename\u003c/code\u003e attribute in \u003ccode\u003eContent-Disposition\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003econtentType\u003c/code\u003e: optional, will default to \u003ccode\u003eapplication/octet-stream\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eWhen 'multipart' content is involved, the \u003ccode\u003eContent-Type\u003c/code\u003e header of the HTTP request defaults to \u003ccode\u003emultipart/form-data\u003c/code\u003e.\nYou can over-ride it by using the \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e keyword before the \u003ccode\u003emethod\u003c/code\u003e step.  Look at\n\u003ca href=\"#multipart-entity\"\u003e\u003ccode\u003emultipart entity\u003c/code\u003e\u003c/a\u003e for an example.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAlso refer to this \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003edemo example\u003c/a\u003e for a working example of multipart file uploads: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/upload/upload.feature\"\u003e\u003ccode\u003eupload.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can also dynamically set multiple files in one step using \u003ca href=\"#multipart-files\"\u003e\u003ccode\u003emultipart files\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003emultipart entity\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-multipart-entity\" class=\"anchor\" aria-label=\"Permalink: multipart entity\" href=\"#multipart-entity\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThis is technically not in the key-value form: \u003ccode\u003emultipart field name = 'foo'\u003c/code\u003e, but logically\nbelongs here in the documentation.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eUse this for multipart content items that don't have field-names.  Here below is an example that\nalso demonstrates using the \u003ca href=\"https://tools.ietf.org/html/rfc2387\" rel=\"nofollow\"\u003e\u003ccode\u003emultipart/related\u003c/code\u003e\u003c/a\u003e content-type.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given path 'v2', 'documents'\nAnd multipart entity read('foo.json')\nAnd multipart field image = read('bar.jpg')\nAnd header Content-Type = 'multipart/related'\nWhen method post \nThen status 201\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'v2'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'documents'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003emultipart entity read(\u003cspan class=\"pl-s\"\u003e'foo.json'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003emultipart field image = read(\u003cspan class=\"pl-s\"\u003e'bar.jpg'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eheader Content-Type = \u003cspan class=\"pl-s\"\u003e'multipart/related'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post \n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 201\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eMulti-Param Keywords\u003c/h1\u003e\u003ca id=\"user-content-multi-param-keywords\" class=\"anchor\" aria-label=\"Permalink: Multi-Param Keywords\" href=\"#multi-param-keywords\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eKeywords that set multiple key-value pairs in one step\u003c/h2\u003e\u003ca id=\"user-content-keywords-that-set-multiple-key-value-pairs-in-one-step\" class=\"anchor\" aria-label=\"Permalink: Keywords that set multiple key-value pairs in one step\" href=\"#keywords-that-set-multiple-key-value-pairs-in-one-step\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eparams\u003c/code\u003e, \u003ccode\u003eheaders\u003c/code\u003e, \u003ccode\u003ecookies\u003c/code\u003e, \u003ccode\u003eform fields\u003c/code\u003e, \u003ccode\u003emultipart fields\u003c/code\u003e and \u003ccode\u003emultipart files\u003c/code\u003e take a single JSON argument (which can be in-line or a variable reference), and this enables certain types of dynamic data-driven testing, especially because any JSON key with a \u003ccode\u003enull\u003c/code\u003e value will be ignored. Here is a good example in the demos: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/search/dynamic-params.feature\"\u003e\u003ccode\u003edynamic-params.feature\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eparams\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-params\" class=\"anchor\" aria-label=\"Permalink: params\" href=\"#params\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* params { searchBy: 'client', active: true, someList: [1, 2, 3] }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eparams { searchBy: \u003cspan class=\"pl-s\"\u003e'client'\u003c/span\u003e, active: true, someList: [1, 2, 3] }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee also \u003ca href=\"#param\"\u003e\u003ccode\u003eparam\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-headers\" class=\"anchor\" aria-label=\"Permalink: headers\" href=\"#headers\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def someData = { Authorization: 'sometoken', tx_id: '1234', extraTokens: ['abc', 'def'] }\n* headers someData\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef someData = { Authorization: \u003cspan class=\"pl-s\"\u003e'sometoken'\u003c/span\u003e, tx_id: \u003cspan class=\"pl-s\"\u003e'1234'\u003c/span\u003e, extraTokens: [\u003cspan class=\"pl-s\"\u003e'abc'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'def'\u003c/span\u003e] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eheaders someData\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee also \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ecookies\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-cookies\" class=\"anchor\" aria-label=\"Permalink: cookies\" href=\"#cookies\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* cookies { someKey: 'someValue', foo: 'bar' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecookies { someKey: \u003cspan class=\"pl-s\"\u003e'someValue'\u003c/span\u003e, foo: \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee also \u003ca href=\"#cookie\"\u003e\u003ccode\u003ecookie\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eform fields\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-form-fields\" class=\"anchor\" aria-label=\"Permalink: form fields\" href=\"#form-fields\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def credentials = { username: '#(user.name)', password: 'secret', projects: ['one', 'two'] }\n* form fields credentials\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef credentials = { username: \u003cspan class=\"pl-s\"\u003e'#(user.name)'\u003c/span\u003e, password: \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e, projects: [\u003cspan class=\"pl-s\"\u003e'one'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'two'\u003c/span\u003e] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eform fields credentials\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee also \u003ca href=\"#form-field\"\u003e\u003ccode\u003eform field\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003emultipart fields\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-multipart-fields\" class=\"anchor\" aria-label=\"Permalink: multipart fields\" href=\"#multipart-fields\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"And multipart fields { message: 'hello world', json: { foo: 'bar' } }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003emultipart fields { message: \u003cspan class=\"pl-s\"\u003e'hello world'\u003c/span\u003e, json: { foo: \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e } }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee also \u003ca href=\"#multipart-field\"\u003e\u003ccode\u003emultipart field\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003emultipart files\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-multipart-files\" class=\"anchor\" aria-label=\"Permalink: multipart files\" href=\"#multipart-files\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe single JSON argument needs to be in the form \u003ccode\u003e{ field1: { read: 'file1.ext' }, field2: { read: 'file2.ext' } }\u003c/code\u003e where each nested JSON is in the form expected by \u003ca href=\"#multipart-file\"\u003e\u003ccode\u003emultipart file\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def json = {}\n* set json.myFile1 = { read: 'test1.pdf', filename: 'upload-name1.pdf', contentType: 'application/pdf' }\n# if you have dynamic keys you can do this\n* def key = 'myFile2'\n* json[key] = { read: 'test2.pdf', filename: 'upload-name2.pdf', contentType: 'application/pdf' }\nAnd multipart files json\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef json = {}\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset json.myFile1 = { read: \u003cspan class=\"pl-s\"\u003e'test1.pdf'\u003c/span\u003e, filename: \u003cspan class=\"pl-s\"\u003e'upload-name1.pdf'\u003c/span\u003e, contentType: \u003cspan class=\"pl-s\"\u003e'application/pdf'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# if you have dynamic keys you can do this\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef key = \u003cspan class=\"pl-s\"\u003e'myFile2'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ejson[key] = { read: \u003cspan class=\"pl-s\"\u003e'test2.pdf'\u003c/span\u003e, filename: \u003cspan class=\"pl-s\"\u003e'upload-name2.pdf'\u003c/span\u003e, contentType: \u003cspan class=\"pl-s\"\u003e'application/pdf'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003emultipart files json\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor an example, refer: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/upload/upload-multiple-files.feature\"\u003e\u003ccode\u003eupload-multiple-files.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSOAP\u003c/h1\u003e\u003ca id=\"user-content-soap\" class=\"anchor\" aria-label=\"Permalink: SOAP\" href=\"#soap\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince a SOAP request needs special handling, this is the only case where the\n\u003ca href=\"#method\"\u003e\u003ccode\u003emethod\u003c/code\u003e\u003c/a\u003e step is not used to actually fire the request to the server.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003esoap action\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-soap-action\" class=\"anchor\" aria-label=\"Permalink: soap action\" href=\"#soap-action\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe name of the SOAP action specified is used as the 'SOAPAction' header.  Here is an example\nwhich also demonstrates how you could assert for expected values in the response XML.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given request read('soap-request.xml')\nWhen soap action 'QueryUsageBalance'\nThen status 200\nAnd match response /Envelope/Body/QueryUsageBalanceResponse/Result/Error/Code == 'DAT_USAGE_1003'\nAnd match response /Envelope/Body/QueryUsageBalanceResponse == read('expected-response.xml')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003erequest read(\u003cspan class=\"pl-s\"\u003e'soap-request.xml'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003esoap action \u003cspan class=\"pl-s\"\u003e'QueryUsageBalance'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch response /Envelope/Body/QueryUsageBalanceResponse/Result/Error/Code == \u003cspan class=\"pl-s\"\u003e'DAT_USAGE_1003'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch response /Envelope/Body/QueryUsageBalanceResponse == read(\u003cspan class=\"pl-s\"\u003e'expected-response.xml'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRefer to the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003edemos\u003c/a\u003e for an example: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/soap/soap.feature\"\u003e\u003ccode\u003esoap.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eMore examples are available that showcase various ways of parameter-izing and dynamically manipulating SOAP requests in a data-driven fashion. Karate is quite flexible, and provides multiple options for you to evolve patterns that fit your environment, as you can see here: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature\"\u003e\u003ccode\u003exml.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eretry until\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-retry-until\" class=\"anchor\" aria-label=\"Permalink: retry until\" href=\"#retry-until\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate has built-in support for re-trying an HTTP request until a certain condition has been met. The default setting for the max retry-attempts is 3 with a poll interval of 3000 milliseconds (3 seconds). If needed, this can be changed by using \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e - any time during a test, or set globally via \u003ca href=\"#configuration\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* configure retry = { count: 10, interval: 5000 }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure retry = { count: 10, interval: 5000 }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ccode\u003eretry\u003c/code\u003e keyword is designed to extend the existing \u003ca href=\"#method\"\u003e\u003ccode\u003emethod\u003c/code\u003e\u003c/a\u003e syntax (and should appear \u003cstrong\u003ebefore\u003c/strong\u003e a \u003ccode\u003emethod\u003c/code\u003e step) like so:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given url demoBaseUrl\nAnd path 'greeting'\nAnd retry until response.id \u0026gt; 3\nWhen method get\nThen status 200\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl demoBaseUrl\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'greeting'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eretry until response.id \u0026gt; 3\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod get\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAny JavaScript expression that uses any variable in scope can be placed after the \"\u003ccode\u003eretry until\u003c/code\u003e\" part. So you can refer to the \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#responsestatus\"\u003e\u003ccode\u003eresponseStatus\u003c/code\u003e\u003c/a\u003e or even \u003ca href=\"#responseheaders\"\u003e\u003ccode\u003eresponseHeaders\u003c/code\u003e\u003c/a\u003e if needed. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given url demoBaseUrl\nAnd path 'greeting'\nAnd retry until responseStatus == 200 \u0026amp;\u0026amp; response.id \u0026gt; 3\nWhen method get\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl demoBaseUrl\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'greeting'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eretry until responseStatus == 200 \u0026amp;\u0026amp; response.id \u0026gt; 3\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod get\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that it has to be a pure JavaScript expression - which means that \u003ccode\u003ematch\u003c/code\u003e syntax such as \u003ccode\u003econtains\u003c/code\u003e will \u003cem\u003enot\u003c/em\u003e work. But you can easily achieve any complex logic by \u003ca href=\"https://stackoverflow.com/a/55823180/143475\" rel=\"nofollow\"\u003eusing the JS API\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eRefer to \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/polling/polling.feature\"\u003e\u003ccode\u003epolling.feature\u003c/code\u003e\u003c/a\u003e for an example, and also see the alternative way to achieve \u003ca href=\"#polling\"\u003epolling\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/h1\u003e\u003ca id=\"user-content-configure\" class=\"anchor\" aria-label=\"Permalink: configure\" href=\"#configure\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eManaging Headers, SSL, Timeouts and HTTP Proxy\u003c/h2\u003e\u003ca id=\"user-content-managing-headers-ssl-timeouts-and-http-proxy\" class=\"anchor\" aria-label=\"Permalink: Managing Headers, SSL, Timeouts and HTTP Proxy\" href=\"#managing-headers-ssl-timeouts-and-http-proxy\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can adjust configuration settings for the HTTP client used by Karate using this keyword. The syntax is similar to \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e but instead of a named variable, you update configuration. Here are the configuration keys supported:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eKey\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eurl\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"#configure-url\"\u003e\u003ccode\u003econfigure url\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eheaders\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON / JS function\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"#configure-headers\"\u003e\u003ccode\u003econfigure headers\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ecookies\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON / JS function\u003c/td\u003e\n\u003ctd\u003eJust like \u003ccode\u003econfigure headers\u003c/code\u003e, but for cookies. You will typically never use this, as response cookies are auto-added to all future requests. If you need to clear cookies at any time, just do \u003ccode\u003econfigure cookies = null\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003elogPrettyRequest\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003ePretty print the request payload JSON or XML with indenting (default \u003ccode\u003efalse\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003elogPrettyResponse\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003ePretty print the response payload JSON or XML with indenting (default \u003ccode\u003efalse\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eprintEnabled\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003eCan be used to suppress the \u003ca href=\"#print\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e output when not in 'dev mode' by setting as \u003ccode\u003efalse\u003c/code\u003e (default \u003ccode\u003etrue\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ereport\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON / boolean\u003c/td\u003e\n\u003ctd\u003esee \u003ca href=\"#report-verbosity\"\u003ereport verbosity\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eafterScenario\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS function\u003c/td\u003e\n\u003ctd\u003eWill be called \u003ca href=\"#hooks\"\u003eafter every \u003ccode\u003eScenario\u003c/code\u003e\u003c/a\u003e (or \u003ccode\u003eExample\u003c/code\u003e within a \u003ccode\u003eScenario Outline\u003c/code\u003e), refer to this example: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/hooks/hooks.feature\"\u003e\u003ccode\u003ehooks.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eafterFeature\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJS function\u003c/td\u003e\n\u003ctd\u003eWill be called \u003ca href=\"#hooks\"\u003eafter every \u003ccode\u003eFeature\u003c/code\u003e\u003c/a\u003e, refer to this example: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/hooks/hooks.feature\"\u003e\u003ccode\u003ehooks.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003essl\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003eEnable HTTPS calls without needing to configure a trusted certificate or key-store.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003essl\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eLike above, but force the SSL algorithm to one of \u003ca href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext\" rel=\"nofollow\"\u003ethese values\u003c/a\u003e. (The above form internally defaults to \u003ccode\u003eTLS\u003c/code\u003e if simply set to \u003ccode\u003etrue\u003c/code\u003e).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003essl\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON\u003c/td\u003e\n\u003ctd\u003esee \u003ca href=\"#x509-certificate-authentication\"\u003eX509 certificate authentication\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efollowRedirects\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003eWhether the HTTP client automatically follows redirects - (default \u003ccode\u003etrue\u003c/code\u003e), refer to this \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/redirect/redirect.feature\"\u003eexample\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003econnectTimeout\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003einteger\u003c/td\u003e\n\u003ctd\u003eSet the connect timeout (milliseconds). The default is 30000 (30 seconds). Note that for \u003ccode\u003ekarate-apache\u003c/code\u003e, this sets the \u003ca href=\"https://stackoverflow.com/a/22722260/143475\" rel=\"nofollow\"\u003esocket timeout\u003c/a\u003e to the same value as well.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ereadTimeout\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003einteger\u003c/td\u003e\n\u003ctd\u003eSet the read timeout (milliseconds). The default is 30000 (30 seconds).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eproxy\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eSet the URI of the HTTP proxy to use.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eproxy\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON\u003c/td\u003e\n\u003ctd\u003eFor a proxy that requires authentication, set the \u003ccode\u003euri\u003c/code\u003e, \u003ccode\u003eusername\u003c/code\u003e and \u003ccode\u003epassword\u003c/code\u003e, see example below. Also a \u003ccode\u003enonProxyHosts\u003c/code\u003e key is supported which can take a list for e.g. \u003ccode\u003e{ uri: 'http://my.proxy.host:8080',  nonProxyHosts: ['host1', 'host2']}\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003elocalAddress\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003esee \u003ca href=\"/karatelabs/karate/blob/master/karate-gatling#configure-localaddress\"\u003e\u003ccode\u003ekarate-gatling\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003echarset\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eThe charset that will be sent in the request \u003ccode\u003eContent-Type\u003c/code\u003e which defaults to \u003ccode\u003eutf-8\u003c/code\u003e. You typically never need to change this, and you can over-ride (or disable) this per-request if needed via the \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e keyword (\u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/content-type.feature\"\u003eexample\u003c/a\u003e).\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eretry\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON\u003c/td\u003e\n\u003ctd\u003edefaults to \u003ccode\u003e{ count: 3, interval: 3000 }\u003c/code\u003e - see \u003ca href=\"#retry-until\"\u003e\u003ccode\u003eretry until\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ecallSingleCache\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON\u003c/td\u003e\n\u003ctd\u003edefaults to \u003ccode\u003e{ minutes: 0, dir: 'target' }\u003c/code\u003e - see \u003ca href=\"#configure-callsinglecache\"\u003e\u003ccode\u003econfigure callSingleCache\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003elowerCaseResponseHeaders\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003eConverts every key in the \u003ca href=\"#responseheaders\"\u003e\u003ccode\u003eresponseHeaders\u003c/code\u003e\u003c/a\u003e to lower-case which makes it easier to validate or re-use\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eabortedStepsShouldPass\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003edefaults to \u003ccode\u003efalse\u003c/code\u003e, whether steps after a \u003ca href=\"#karate-abort\"\u003e\u003ccode\u003ekarate.abort()\u003c/code\u003e\u003c/a\u003e should be marked as \u003ccode\u003ePASSED\u003c/code\u003e instead of \u003ccode\u003eSKIPPED\u003c/code\u003e - this can impact the behavior of 3rd-party reports, see \u003ca href=\"https://github.com/karatelabs/karate/issues/755\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/755/hovercard\"\u003ethis issue\u003c/a\u003e for details\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003elogModifier\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJava Object\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"#log-masking\"\u003eLog Masking\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eresponseHeaders\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON / JS function\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"/karatelabs/karate/blob/master/karate-netty#configure-responseheaders\"\u003e\u003ccode\u003ekarate-netty\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ecors\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"/karatelabs/karate/blob/master/karate-netty#configure-cors\"\u003e\u003ccode\u003ekarate-netty\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edriver\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"/karatelabs/karate/blob/master/karate-core\"\u003eUI Automation\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edriverTarget\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON / Java Object\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"/karatelabs/karate/blob/master/karate-core#configure-drivertarget\"\u003e\u003ccode\u003econfigure driverTarget\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epauseIfNotPerf\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003edefaults to \u003ccode\u003efalse\u003c/code\u003e, relevant only for performance-testing, see \u003ca href=\"#karate-pause\"\u003e\u003ccode\u003ekarate.pause()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"/karatelabs/karate/blob/master/karate-gatling#think-time\"\u003e\u003ccode\u003ekarate-gatling\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003exmlNamespaceAware\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003edefaults to \u003ccode\u003efalse\u003c/code\u003e, to handle XML namespaces in \u003ca href=\"https://github.com/karatelabs/karate/issues/1587\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/1587/hovercard\"\u003esome special circumstances\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eabortSuiteOnFailure\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003edefaults to \u003ccode\u003efalse\u003c/code\u003e, to not attempt to run any more tests upon a failure\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003entlmAuth\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eJSON\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"#ntlm-authentication\"\u003eNTLM Authentication\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ematchEachEmptyAllowed\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003edefaults to \u003ccode\u003efalse\u003c/code\u003e, \u003ca href=\"#match-each\"\u003e\u003ccode\u003ematch each\u003c/code\u003e\u003c/a\u003e by default expects the array to be non-empty, refer to \u003ca href=\"https://github.com/karatelabs/karate/issues/2364\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/2364/hovercard\"\u003ethis issue\u003c/a\u003e to understand why you may want to over-ride this.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ehttpRetryEnabled\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003edefaults to \u003ccode\u003efalse\u003c/code\u003e, retry when the http requests fails with an exception \u003ccode\u003eorg.apache.httpNoHttpResponseException\u003c/code\u003e.  For details see \u003ca href=\"https://github.com/karatelabs/karate/issues/2408\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/2408/hovercard\"\u003ethis issue\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eExamples:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# pretty print the response payload\n* configure logPrettyResponse = true\n\n# enable ssl (and no certificate is required)\n* configure ssl = true\n\n# enable ssl and force the algorithm to TLSv1.2\n* configure ssl = 'TLSv1.2'\n\n# time-out if the response is not received within 10 seconds (after the connection is established)\n* configure readTimeout = 10000\n\n# set the uri of the http proxy server to use\n* configure proxy = 'http://my.proxy.host:8080'\n\n# proxy which needs authentication\n* configure proxy = { uri: 'http://my.proxy.host:8080', username: 'john', password: 'secret' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# pretty print the response payload\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure logPrettyResponse = true\n\n\u003cspan class=\"pl-c\"\u003e# enable ssl (and no certificate is required)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure ssl = true\n\n\u003cspan class=\"pl-c\"\u003e# enable ssl and force the algorithm to TLSv1.2\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure ssl = \u003cspan class=\"pl-s\"\u003e'TLSv1.2'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# time-out if the response is not received within 10 seconds (after the connection is established)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure readTimeout = 10000\n\n\u003cspan class=\"pl-c\"\u003e# set the uri of the http proxy server to use\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure proxy = \u003cspan class=\"pl-s\"\u003e'http://my.proxy.host:8080'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# proxy which needs authentication\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure proxy = { uri: \u003cspan class=\"pl-s\"\u003e'http://my.proxy.host:8080'\u003c/span\u003e, username: \u003cspan class=\"pl-s\"\u003e'john'\u003c/span\u003e, password: \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003econfigure\u003c/code\u003e globally\u003c/h2\u003e\u003ca id=\"user-content-configure-globally\" class=\"anchor\" aria-label=\"Permalink: configure globally\" href=\"#configure-globally\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you need to set any of these \"globally\" you can easily do so using \u003ca href=\"#the-karate-object\"\u003ethe \u003ccode\u003ekarate\u003c/code\u003e object\u003c/a\u003e in \u003ca href=\"#configuration\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e - for e.g:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  karate.configure('ssl', true);\n  karate.configure('readTimeout', 5000);\"\u003e\u003cpre\u003e  \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'ssl'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etrue\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'readTimeout'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e5000\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn rare cases where you need to add nested non-JSON data to the \u003ccode\u003econfigure\u003c/code\u003e value, you have to play by the \u003ca href=\"#restrictions-on-global-variables\"\u003erules\u003c/a\u003e that apply within \u003ca href=\"#karate-configjs\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e. Here is an example of performing a \u003ca href=\"/karatelabs/karate/blob/master/karate-core#configure-driver\"\u003e\u003ccode\u003econfigure driver\u003c/code\u003e\u003c/a\u003e step in JavaScript:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  var LM = Java.type('com.mycompany.MyHttpLogModifier');\n  var driverConfig = { type:'chromedriver', start: false, webDriverUrl:'https://user:password@zalenium.net/wd/hub' };\n  driverConfig.httpConfig = karate.toMap({ logModifier: LM.INSTANCE });\n  karate.configure('driver', driverConfig);\"\u003e\u003cpre\u003e  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eLM\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-v\"\u003eJava\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003etype\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'com.mycompany.MyHttpLogModifier'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003edriverConfig\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etype\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e'chromedriver'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003estart\u003c/span\u003e: \u003cspan class=\"pl-c1\"\u003efalse\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ewebDriverUrl\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e'https://user:password@zalenium.net/wd/hub'\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-s1\"\u003edriverConfig\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003ehttpConfig\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003etoMap\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003elogModifier\u003c/span\u003e: \u003cspan class=\"pl-c1\"\u003eLM\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eINSTANCE\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'driver'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003edriverConfig\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eReport Verbosity\u003c/h3\u003e\u003ca id=\"user-content-report-verbosity\" class=\"anchor\" aria-label=\"Permalink: Report Verbosity\" href=\"#report-verbosity\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eBy default, Karate will add logs to the report output so that HTTP requests and responses appear in-line in the HTML reports. There may be cases where you want to suppress this to make the reports \"lighter\" and easier to read.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe configure key here is \u003ccode\u003ereport\u003c/code\u003e and it takes a JSON value. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* configure report = { showLog: true, showAllSteps: false }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure report = { showLog: true, showAllSteps: false }\u003c/pre\u003e\u003c/div\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003ccode\u003ereport\u003c/code\u003e\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eshowLog\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003eHTTP requests and responses (including headers) will appear in the HTML report, default \u003ccode\u003etrue\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eshowAllSteps\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003eIf \u003ccode\u003efalse\u003c/code\u003e, any step that starts with \u003ccode\u003e*\u003c/code\u003e instead of \u003ccode\u003eGiven\u003c/code\u003e, \u003ccode\u003eWhen\u003c/code\u003e, \u003ccode\u003eThen\u003c/code\u003e etc. will \u003cem\u003enot\u003c/em\u003e appear in the HTML report. The \u003ca href=\"#print\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e step is an exception. Default \u003ccode\u003etrue\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eYou can 'reset' default settings by using the following short-cut:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# reset to defaults\n* configure report = true\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# reset to defaults\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure report = true\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince you can use \u003ccode\u003econfigure\u003c/code\u003e any time within a test, you have control over which requests or steps you want to show / hide. This can be convenient if a particular call results in a huge response payload.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe following short-cut is also supported which will disable all logs:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* configure report = false\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure report = false\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003e@report=false\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-reportfalse\" class=\"anchor\" aria-label=\"Permalink: @report=false\" href=\"#reportfalse\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen you use a re-usable feature that has \u003ca href=\"/karatelabs/karate/blob/master/multiple-functions-in-one-file\"\u003ecommonly used utilities\u003c/a\u003e, you may want to hide this completely from the HTML reports. The special \u003ca href=\"#tags\"\u003etag\u003c/a\u003e \u003ccode\u003e@report=false\u003c/code\u003e can be used, and it can even be used only for a single \u003ccode\u003eScenario\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@ignore @report=false\nFeature:\n\nScenario:\n# some re-usable steps\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e@ignore\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e@report=false\u003c/span\u003e\nFeature:\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n\u003cspan class=\"pl-c\"\u003e# some re-usable steps\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eLog Masking\u003c/h3\u003e\u003ca id=\"user-content-log-masking\" class=\"anchor\" aria-label=\"Permalink: Log Masking\" href=\"#log-masking\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn cases where you want to \"mask\" values which are sensitive from a security point of view from the output files, logs and HTML reports, you can implement the \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/http/HttpLogModifier.java\"\u003e\u003ccode\u003eHttpLogModifier\u003c/code\u003e\u003c/a\u003e and tell Karate to use it via the \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e keyword. Here is an \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/DemoLogModifier.java\"\u003eexample\u003c/a\u003e of an implementation. For performance reasons, you can implement  \u003ccode\u003eenableForUri()\u003c/code\u003e so that this \"activates\" only for some URL patterns.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eInstantiating a Java class and using this in a test is easy (see \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/headers-masking.feature\"\u003eexample\u003c/a\u003e):\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# if this was in karate-config.js, it would apply \u0026quot;globally\u0026quot;\n* def LM = Java.type('demo.headers.DemoLogModifier')\n* configure logModifier = new LM()\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# if this was in karate-config.js, it would apply \"globally\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef LM = Java.type(\u003cspan class=\"pl-s\"\u003e'demo.headers.DemoLogModifier'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure logModifier = new LM()\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOr globally in \u003ca href=\"#karate-configjs\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var LM = Java.type('demo.headers.DemoLogModifier');\nkarate.configure('logModifier', new LM());\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eLM\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-v\"\u003eJava\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003etype\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'demo.headers.DemoLogModifier'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'logModifier'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-k\"\u003enew\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eLM\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince \u003ccode\u003ekarate-config.js\u003c/code\u003e is processed for every \u003ccode\u003eScenario\u003c/code\u003e, you can use a singleton instead of calling \u003ccode\u003enew\u003c/code\u003e every time. Something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var LM = Java.type('demo.headers.DemoLogModifier');\nkarate.configure('logModifier', LM.INSTANCE);\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eLM\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-v\"\u003eJava\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003etype\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'demo.headers.DemoLogModifier'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'logModifier'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eLM\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eINSTANCE\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSystem Properties for SSL and HTTP proxy\u003c/h3\u003e\u003ca id=\"user-content-system-properties-for-ssl-and-http-proxy\" class=\"anchor\" aria-label=\"Permalink: System Properties for SSL and HTTP proxy\" href=\"#system-properties-for-ssl-and-http-proxy\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor HTTPS / SSL, you can also specify a custom certificate or trust store by \u003ca href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#InstallationAndCustomization\" rel=\"nofollow\"\u003esetting Java system properties\u003c/a\u003e. And similarly - for \u003ca href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html\" rel=\"nofollow\"\u003especifying the HTTP proxy\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eX509 Certificate Authentication\u003c/h3\u003e\u003ca id=\"user-content-x509-certificate-authentication\" class=\"anchor\" aria-label=\"Permalink: X509 Certificate Authentication\" href=\"#x509-certificate-authentication\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlso referred to as \"mutual auth\" - if your API requires that clients present an X509 certificate for authentication, Karate supports this via JSON as the \u003ccode\u003econfigure ssl\u003c/code\u003e value.  The following parameters are supported:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eKey\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eRequired?\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ekeyStore\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003epath to file containing public and private keys for your client certificate.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ekeyStorePassword\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003epassword for keyStore file.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ekeyStoreType\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003eFormat of the keyStore file.  Allowed keystore types are as described in the \u003ca href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore\" rel=\"nofollow\"\u003eJava \u003ccode\u003eKeyStore\u003c/code\u003e docs\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etrustStore\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003epath to file containing the trust chain for your server certificate.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etrustStorePassword\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003epassword for trustStore file.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etrustStoreType\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003eFormat of the trustStore file.  Allowed keystore types are as described in the \u003ca href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore\" rel=\"nofollow\"\u003eJava \u003ccode\u003eKeyStore\u003c/code\u003e docs\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003etrustAll\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eboolean\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003eif all server certificates should be considered trusted. Default value is \u003ccode\u003efalse\u003c/code\u003e. If \u003ccode\u003etrue\u003c/code\u003e will allow self-signed certificates. If \u003ccode\u003efalse\u003c/code\u003e, will expect the whole chain in the \u003ccode\u003etrustStore\u003c/code\u003e or use what is available in the environment.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ealgorithm\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003eforce the SSL algorithm to one of \u003ca href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext\" rel=\"nofollow\"\u003ethese values\u003c/a\u003e. Default is \u003ccode\u003eTLS\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# enable X509 certificate authentication with PKCS12 file 'certstore.pfx' and password 'certpassword'\n* configure ssl = { keyStore: 'classpath:certstore.pfx', keyStorePassword: 'certpassword', keyStoreType: 'pkcs12' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# enable X509 certificate authentication with PKCS12 file 'certstore.pfx' and password 'certpassword'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure ssl = { keyStore: \u003cspan class=\"pl-s\"\u003e'classpath:certstore.pfx'\u003c/span\u003e, keyStorePassword: \u003cspan class=\"pl-s\"\u003e'certpassword'\u003c/span\u003e, keyStoreType: \u003cspan class=\"pl-s\"\u003e'pkcs12'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# trust all server certificates, in the feature file\n* configure ssl = { trustAll: true }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# trust all server certificates, in the feature file\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure ssl = { trustAll: true }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// trust all server certificates, global configuration in 'karate-config.js'\nkarate.configure('ssl', { trustAll: true });\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e// trust all server certificates, global configuration in 'karate-config.js'\u003c/span\u003e\n\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'ssl'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003etrustAll\u003c/span\u003e: \u003cspan class=\"pl-c1\"\u003etrue\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor end-to-end examples in the Karate demos, look at the files in \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/ssl\"\u003ethis folder\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eNTLM Authentication\u003c/h3\u003e\u003ca id=\"user-content-ntlm-authentication\" class=\"anchor\" aria-label=\"Permalink: NTLM Authentication\" href=\"#ntlm-authentication\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate provides support for NTLM authentication using the Apache NTLMEngine implementation.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eKey\u003c/th\u003e\n\u003cth\u003eType\u003c/th\u003e\n\u003cth\u003eRequired?\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eusername\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003erequired\u003c/td\u003e\n\u003ctd\u003eNTLM username\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003epassword\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003erequired\u003c/td\u003e\n\u003ctd\u003eNTLM password\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eworkstation\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003eThe workstation the authentication request is originating from\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edomain\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003estring\u003c/td\u003e\n\u003ctd\u003eoptional\u003c/td\u003e\n\u003ctd\u003eThe domain to authenticate within\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# enable NTLM authentication for the remaining scenario requests\n* configure ntlmAuth = { username: 'admin', password: 'secret', domain: 'my.domain', workstation: 'my-pc' }\n\n# enable NTLM authentication with only credentials\n* configure ntlmAuth = { username: 'admin', password: 'secret' }\n\n# disable NTLM authentication\n* configure ntlmAuth = null\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# enable NTLM authentication for the remaining scenario requests\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure ntlmAuth = { username: \u003cspan class=\"pl-s\"\u003e'admin'\u003c/span\u003e, password: \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e, domain: \u003cspan class=\"pl-s\"\u003e'my.domain'\u003c/span\u003e, workstation: \u003cspan class=\"pl-s\"\u003e'my-pc'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# enable NTLM authentication with only credentials\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure ntlmAuth = { username: \u003cspan class=\"pl-s\"\u003e'admin'\u003c/span\u003e, password: \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# disable NTLM authentication\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure ntlmAuth = null\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// enable NTLM authentication within js\nkarate.confgure('ntlmAuth', { username: 'admin', password: 'secret', domain: 'my.domain', workstation: 'my-pc' })\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e// enable NTLM authentication within js\u003c/span\u003e\n\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfgure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'ntlmAuth'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eusername\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'admin'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003epassword\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003edomain\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'my.domain'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eworkstation\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'my-pc'\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003ePayload Assertions\u003c/h1\u003e\u003ca id=\"user-content-payload-assertions\" class=\"anchor\" aria-label=\"Permalink: Payload Assertions\" href=\"#payload-assertions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003ePrepare, Mutate, Assert.\u003c/h2\u003e\u003ca id=\"user-content-prepare-mutate-assert\" class=\"anchor\" aria-label=\"Permalink: Prepare, Mutate, Assert.\" href=\"#prepare-mutate-assert\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNow it should be clear how Karate makes it easy to express JSON or XML. If you \u003ca href=\"#reading-files\"\u003eread from a file\u003c/a\u003e, the advantage is that multiple scripts can re-use the same data.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eOnce you have a \u003ca href=\"#native-data-types\"\u003eJSON or XML object\u003c/a\u003e, Karate provides multiple ways to manipulate, extract or transform data. And you can easily assert that the data is as expected by comparing it with another JSON or XML object.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-match\" class=\"anchor\" aria-label=\"Permalink: match\" href=\"#match\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003ePayload Assertions / Smart Comparison\u003c/h3\u003e\u003ca id=\"user-content-payload-assertions--smart-comparison\" class=\"anchor\" aria-label=\"Permalink: Payload Assertions / Smart Comparison\" href=\"#payload-assertions--smart-comparison\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ccode\u003ematch\u003c/code\u003e operation is smart because white-space does not matter, and the order of keys (or data elements) does not matter. Karate is even able to \u003ca href=\"#ignore-or-validate\"\u003eignore fields you choose\u003c/a\u003e - which is very useful when you want to handle server-side dynamically generated fields such as UUID-s, time-stamps, security-tokens and the like.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe match syntax involves a double-equals sign '==' to represent a comparison (and not an assignment '=').\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSince \u003ccode\u003ematch\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e go well together, they are both introduced in the examples in the section below.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-set\" class=\"anchor\" aria-label=\"Permalink: set\" href=\"#set\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eGame, \u003ccode\u003eset\u003c/code\u003e and \u003ccode\u003ematch\u003c/code\u003e - Karate !\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJS for JSON\u003c/h3\u003e\u003ca id=\"user-content-js-for-json\" class=\"anchor\" aria-label=\"Permalink: JS for JSON\" href=\"#js-for-json\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eBefore you consider the \u003ccode\u003eset\u003c/code\u003e keyword - note that for simple JSON update operations, you can use \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e - especially useful when the path you are trying to mutate is dynamic. Since the \u003ccode\u003eeval\u003c/code\u003e keyword can be omitted when operating on variables using JavaScript, this leads to very concise code:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def myJson = { a: '1' }\n* myJson.b = 2\n* match myJson == { a: '1', b: 2 }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef myJson = { a: \u003cspan class=\"pl-s\"\u003e'1'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003emyJson.b = 2\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch myJson == { a: \u003cspan class=\"pl-s\"\u003e'1'\u003c/span\u003e, b: 2 }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRefer to \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e for more / advanced examples.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eManipulating Data\u003c/h3\u003e\u003ca id=\"user-content-manipulating-data\" class=\"anchor\" aria-label=\"Permalink: Manipulating Data\" href=\"#manipulating-data\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSetting values on JSON documents is simple using the \u003ccode\u003eset\u003c/code\u003e keyword.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def myJson = { foo: 'bar' }\n* set myJson.foo = 'world'\n* match myJson == { foo: 'world' }\n\n# add new keys.  you can use pure JsonPath expressions (notice how this is different from the above)\n* set myJson $.hey = 'ho'\n* match myJson == { foo: 'world', hey: 'ho' }\n\n# and even append to json arrays (or create them automatically)\n* set myJson.zee[0] = 5\n* match myJson == { foo: 'world', hey: 'ho', zee: [5] }\n\n# omit the array index to append\n* set myJson.zee[] = 6\n* match myJson == { foo: 'world', hey: 'ho', zee: [5, 6] }\n\n# nested json ? no problem\n* set myJson.cat = { name: 'Billie' }\n* match myJson == { foo: 'world', hey: 'ho', zee: [5, 6], cat: { name: 'Billie' } }\n\n# and for match - the order of keys does not matter\n* match myJson == { cat: { name: 'Billie' }, hey: 'ho', foo: 'world', zee: [5, 6] }\n\n# you can ignore fields marked with '#ignore'\n* match myJson == { cat: '#ignore', hey: 'ho', foo: 'world', zee: [5, 6] }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef myJson = { foo: \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset myJson.foo = \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch myJson == { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# add new keys.  you can use pure JsonPath expressions (notice how this is different from the above)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset myJson $.hey = \u003cspan class=\"pl-s\"\u003e'ho'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch myJson == { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, hey: \u003cspan class=\"pl-s\"\u003e'ho'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# and even append to json arrays (or create them automatically)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset myJson.zee[0] = 5\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch myJson == { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, hey: \u003cspan class=\"pl-s\"\u003e'ho'\u003c/span\u003e, zee: [5] }\n\n\u003cspan class=\"pl-c\"\u003e# omit the array index to append\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset myJson.zee[] = 6\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch myJson == { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, hey: \u003cspan class=\"pl-s\"\u003e'ho'\u003c/span\u003e, zee: [5, 6] }\n\n\u003cspan class=\"pl-c\"\u003e# nested json ? no problem\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset myJson.cat = { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch myJson == { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, hey: \u003cspan class=\"pl-s\"\u003e'ho'\u003c/span\u003e, zee: [5, 6], cat: { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e } }\n\n\u003cspan class=\"pl-c\"\u003e# and for match - the order of keys does not matter\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch myJson == { cat: { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e }, hey: \u003cspan class=\"pl-s\"\u003e'ho'\u003c/span\u003e, foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, zee: [5, 6] }\n\n\u003cspan class=\"pl-c\"\u003e# you can ignore fields marked with '#ignore'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch myJson == { cat: \u003cspan class=\"pl-s\"\u003e'#ignore'\u003c/span\u003e, hey: \u003cspan class=\"pl-s\"\u003e'ho'\u003c/span\u003e, foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, zee: [5, 6] }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eXML and XPath works just like you'd expect.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def cat = \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\n* set cat /cat/name = 'Jean'\n* match cat / == \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Jean\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\n\n# you can even set whole fragments of xml\n* def xml = \u0026lt;foo\u0026gt;\u0026lt;bar\u0026gt;baz\u0026lt;/bar\u0026gt;\u0026lt;/foo\u0026gt;\n* set xml/foo/bar = \u0026lt;hello\u0026gt;world\u0026lt;/hello\u0026gt;\n* match xml == \u0026lt;foo\u0026gt;\u0026lt;bar\u0026gt;\u0026lt;hello\u0026gt;world\u0026lt;/hello\u0026gt;\u0026lt;/bar\u0026gt;\u0026lt;/foo\u0026gt;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eBillie\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset cat /cat/name = \u003cspan class=\"pl-s\"\u003e'Jean'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cat / == \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eJean\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# you can even set whole fragments of xml\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef xml = \u003cspan class=\"pl-smi\"\u003e\u0026lt;foo\u0026gt;\u0026lt;bar\u0026gt;\u003c/span\u003ebaz\u003cspan class=\"pl-smi\"\u003e\u0026lt;/bar\u0026gt;\u0026lt;/foo\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset xml/foo/bar = \u003cspan class=\"pl-smi\"\u003e\u0026lt;hello\u0026gt;\u003c/span\u003eworld\u003cspan class=\"pl-smi\"\u003e\u0026lt;/hello\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch xml == \u003cspan class=\"pl-smi\"\u003e\u0026lt;foo\u0026gt;\u0026lt;bar\u0026gt;\u0026lt;hello\u0026gt;\u003c/span\u003eworld\u003cspan class=\"pl-smi\"\u003e\u0026lt;/hello\u0026gt;\u0026lt;/bar\u0026gt;\u0026lt;/foo\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRefer to the section on \u003ca href=\"#xpath-functions\"\u003eXPath Functions\u003c/a\u003e for examples of advanced XPath usage.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch\u003c/code\u003e and variables\u003c/h3\u003e\u003ca id=\"user-content-match-and-variables\" class=\"anchor\" aria-label=\"Permalink: match and variables\" href=\"#match-and-variables\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn case you were wondering, variables (and even expressions) are supported on the right-hand-side. So you can compare 2 JSON (or XML) payloads if you wanted to:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = { hello: 'world', baz: 'ban' }\n* def bar = { baz: 'ban', hello: 'world' }\n* match foo == bar\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { hello: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, baz: \u003cspan class=\"pl-s\"\u003e'ban'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef bar = { baz: \u003cspan class=\"pl-s\"\u003e'ban'\u003c/span\u003e, hello: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == bar\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you are wondering about the finer details of the \u003ccode\u003ematch\u003c/code\u003e syntax, the Left-Hand-Side has to be either a\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003evariable name - e.g. \u003ccode\u003efoo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ea 'named' JsonPath or XPath expression - e.g. \u003ccode\u003efoo[0].bar\u003c/code\u003e or \u003ccode\u003efoo[*].bar\u003c/code\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003enote that this cannot be \"dynamic\" (with in-line variables) so \u003ca href=\"#get\"\u003euse an extra step\u003c/a\u003e if needed\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eany valid function or method call - e.g. \u003ccode\u003efoo.bar()\u003c/code\u003e or \u003ccode\u003efoo.bar('hello').baz\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eor anything wrapped in parentheses which will be evaluated as JavaScript - e.g. \u003ccode\u003e(foo + bar)\u003c/code\u003e or \u003ccode\u003e(42)\u003c/code\u003e - and in \u003cem\u003ethis\u003c/em\u003e case, variables can be used\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eAnd the right-hand-side can be any valid \u003ca href=\"#karate-expressions\"\u003eKarate expression\u003c/a\u003e. Refer to the section on \u003ca href=\"#jsonpath-short-cuts\"\u003eJsonPath short-cuts\u003c/a\u003e for a deeper understanding of 'named' JsonPath expressions in Karate.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch !=\u003c/code\u003e (not equals)\u003c/h3\u003e\u003ca id=\"user-content-match--not-equals\" class=\"anchor\" aria-label=\"Permalink: match != (not equals)\" href=\"#match--not-equals\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe 'not equals' operator \u003ccode\u003e!=\u003c/code\u003e works as you would expect:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def test = { foo: 'bar' }\n* match test != { foo: 'baz' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef test = { foo: \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch test != { foo: \u003cspan class=\"pl-s\"\u003e'baz'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eYou typically will \u003cem\u003enever\u003c/em\u003e need to use the \u003ccode\u003e!=\u003c/code\u003e (not-equals) operator ! Use it sparingly, and only for string, number or simple payload comparisons.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eset\u003c/code\u003e multiple\u003c/h3\u003e\u003ca id=\"user-content-set-multiple\" class=\"anchor\" aria-label=\"Permalink: set multiple\" href=\"#set-multiple\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate has an elegant way to set multiple keys (via path expressions) in one step. For convenience, non-existent keys (or array elements) will be created automatically. You can find more JSON examples here: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature\"\u003e\u003ccode\u003ejs-arrays.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def cat = { name: '' }\n\n* set cat\n  | path   | value |\n  | name   | 'Bob' |\n  | age    | 5     |\n\n* match cat == { name: 'Bob', age: 5 }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = { name: \u003cspan class=\"pl-s\"\u003e''\u003c/span\u003e }\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset cat\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003epath\u003c/span\u003e   | \u003cspan class=\"pl-s1\"\u003evalue\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e   | '\u003cspan class=\"pl-s1\"\u003eBob\u003c/span\u003e' |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e    | \u003cspan class=\"pl-s1\"\u003e5\u003c/span\u003e     |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cat == { name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, age: 5 }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOne extra convenience for JSON is that if the variable itself (which was \u003ccode\u003ecat\u003c/code\u003e in the above example) does not exist, it will be created automatically. You can even create (or modify existing) JSON arrays by using multiple columns.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* set foo\n  | path | 0     | 1     |\n  | bar  | 'baz' | 'ban' |\n\n* match foo == [{ bar: 'baz' }, { bar: 'ban' }]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset foo\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003epath\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003e0\u003c/span\u003e     | \u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e     |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003ebar\u003c/span\u003e  | '\u003cspan class=\"pl-s1\"\u003ebaz\u003c/span\u003e' | '\u003cspan class=\"pl-s1\"\u003eban\u003c/span\u003e' |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == [{ bar: \u003cspan class=\"pl-s\"\u003e'baz'\u003c/span\u003e }, { bar: \u003cspan class=\"pl-s\"\u003e'ban'\u003c/span\u003e }]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you have to set a bunch of deeply nested keys, you can move the parent path to the top, next to the \u003ccode\u003eset\u003c/code\u003e keyword and save a lot of typing ! Note that this is not supported for \"arrays\" like above, and you can have only one \u003ccode\u003evalue\u003c/code\u003e column.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* set foo.bar\n  | path   | value |\n  | one    | 1     |\n  | two[0] | 2     |\n  | two[1] | 3     |\n\n* match foo == { bar: { one: 1, two: [2, 3] } }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset foo.bar\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003epath\u003c/span\u003e   | \u003cspan class=\"pl-s1\"\u003evalue\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eone\u003c/span\u003e    | \u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e     |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003etwo\u003c/span\u003e[\u003cspan class=\"pl-s1\"\u003e0\u003c/span\u003e] | \u003cspan class=\"pl-s1\"\u003e2\u003c/span\u003e     |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003etwo\u003c/span\u003e[\u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e] | \u003cspan class=\"pl-s1\"\u003e3\u003c/span\u003e     |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { bar: { one: 1, two: [2, 3] } }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe same concept applies to XML and you can build complicated payloads from scratch in just a few, extremely readable lines. The \u003ccode\u003evalue\u003c/code\u003e column can take expressions, \u003cem\u003eeven\u003c/em\u003e XML chunks. You can find more examples here: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature\"\u003e\u003ccode\u003exml.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* set search /acc:getAccountByPhoneNumber\n  | path                        | value |\n  | acc:phone/@foo              | 'bar' |\n  | acc:phone/acc:number[1]     | 1234  |\n  | acc:phone/acc:number[2]     | 5678  |     \n  | acc:phoneNumberSearchOption | 'all' |\n\n* match search ==\n  \u0026quot;\u0026quot;\u0026quot;\n  \u0026lt;acc:getAccountByPhoneNumber\u0026gt;\n      \u0026lt;acc:phone foo=\u0026quot;bar\u0026quot;\u0026gt;\n          \u0026lt;acc:number\u0026gt;1234\u0026lt;/acc:number\u0026gt;\n          \u0026lt;acc:number\u0026gt;5678\u0026lt;/acc:number\u0026gt;\n      \u0026lt;/acc:phone\u0026gt;\n      \u0026lt;acc:phoneNumberSearchOption\u0026gt;all\u0026lt;/acc:phoneNumberSearchOption\u0026gt;        \n  \u0026lt;/acc:getAccountByPhoneNumber\u0026gt;\n  \u0026quot;\u0026quot;\u0026quot;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eset search /acc:getAccountByPhoneNumber\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003epath\u003c/span\u003e                        | \u003cspan class=\"pl-s1\"\u003evalue\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eacc\u003c/span\u003e:\u003cspan class=\"pl-s1\"\u003ephone\u003c/span\u003e/@\u003cspan class=\"pl-s1\"\u003efoo\u003c/span\u003e              | '\u003cspan class=\"pl-s1\"\u003ebar\u003c/span\u003e' |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eacc\u003c/span\u003e:\u003cspan class=\"pl-s1\"\u003ephone\u003c/span\u003e/\u003cspan class=\"pl-s1\"\u003eacc\u003c/span\u003e:\u003cspan class=\"pl-s1\"\u003enumber\u003c/span\u003e[\u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e]     | \u003cspan class=\"pl-s1\"\u003e1234\u003c/span\u003e  |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eacc\u003c/span\u003e:\u003cspan class=\"pl-s1\"\u003ephone\u003c/span\u003e/\u003cspan class=\"pl-s1\"\u003eacc\u003c/span\u003e:\u003cspan class=\"pl-s1\"\u003enumber\u003c/span\u003e[\u003cspan class=\"pl-s1\"\u003e2\u003c/span\u003e]     | \u003cspan class=\"pl-s1\"\u003e5678\u003c/span\u003e  |     \u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003eacc\u003c/span\u003e:\u003cspan class=\"pl-s1\"\u003ephoneNumberSearchOption\u003c/span\u003e | '\u003cspan class=\"pl-s1\"\u003eall\u003c/span\u003e' |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch search ==\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;acc:getAccountByPhoneNumber\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;acc:phone foo=\"bar\"\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          \u0026lt;acc:number\u0026gt;1234\u0026lt;/acc:number\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          \u0026lt;acc:number\u0026gt;5678\u0026lt;/acc:number\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;/acc:phone\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;acc:phoneNumberSearchOption\u0026gt;all\u0026lt;/acc:phoneNumberSearchOption\u0026gt;        \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;/acc:getAccountByPhoneNumber\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-remove\" class=\"anchor\" aria-label=\"Permalink: remove\" href=\"#remove\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is like the opposite of \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e if you need to remove keys or data elements from JSON or XML instances. You can even remove JSON array elements by index.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def json = { foo: 'world', hey: 'ho', zee: [1, 2, 3] }\n* remove json.hey\n* match json == { foo: 'world', zee: [1, 2, 3] }\n* remove json $.zee[1]\n* match json == { foo: 'world', zee: [1, 3] }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef json = { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, hey: \u003cspan class=\"pl-s\"\u003e'ho'\u003c/span\u003e, zee: [1, 2, 3] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eremove json.hey\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, zee: [1, 2, 3] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eremove json $.zee[1]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == { foo: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e, zee: [1, 3] }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003eremove\u003c/code\u003e works for XML elements as well:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def xml = \u0026lt;foo\u0026gt;\u0026lt;bar\u0026gt;\u0026lt;hello\u0026gt;world\u0026lt;/hello\u0026gt;\u0026lt;/bar\u0026gt;\u0026lt;/foo\u0026gt;\n* remove xml/foo/bar/hello\n* match xml == \u0026lt;foo\u0026gt;\u0026lt;bar/\u0026gt;\u0026lt;/foo\u0026gt;\n* remove xml /foo/bar\n* match xml == \u0026lt;foo/\u0026gt;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef xml = \u003cspan class=\"pl-smi\"\u003e\u0026lt;foo\u0026gt;\u0026lt;bar\u0026gt;\u0026lt;hello\u0026gt;\u003c/span\u003eworld\u003cspan class=\"pl-smi\"\u003e\u0026lt;/hello\u0026gt;\u0026lt;/bar\u0026gt;\u0026lt;/foo\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eremove xml/foo/bar/hello\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch xml == \u003cspan class=\"pl-smi\"\u003e\u0026lt;foo\u0026gt;\u0026lt;bar/\u0026gt;\u0026lt;/foo\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eremove xml /foo/bar\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch xml == \u003cspan class=\"pl-smi\"\u003e\u0026lt;foo/\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlso take a look at how a special case of \u003ca href=\"#embedded-expressions\"\u003eembedded-expressions\u003c/a\u003e can remove key-value pairs from a JSON (or XML) payload: \u003ca href=\"#remove-if-null\"\u003eRemove if Null\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSee also \u003ccode\u003edelete\u003c/code\u003e, below.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-delete\" class=\"anchor\" aria-label=\"Permalink: delete\" href=\"#delete\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor JSON, you can also use the JS \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\" rel=\"nofollow\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e operator via \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e, useful when the path you are trying to mutate is dynamic.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def key = 'a'\n* def foo = { a: 1 }\n* eval delete foo[key]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef key = \u003cspan class=\"pl-s\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { a: 1 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eeval delete foo[key]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAs a convenience, you can omit the \u003ccode\u003eeval\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* delete foo[key]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edelete foo[key]\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eFuzzy Matching\u003c/h2\u003e\u003ca id=\"user-content-fuzzy-matching\" class=\"anchor\" aria-label=\"Permalink: Fuzzy Matching\" href=\"#fuzzy-matching\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eIgnore or Validate\u003c/h3\u003e\u003ca id=\"user-content-ignore-or-validate\" class=\"anchor\" aria-label=\"Permalink: Ignore or Validate\" href=\"#ignore-or-validate\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen expressing expected results (in JSON or \u003ca href=\"#match-and-xml\"\u003eXML\u003c/a\u003e) you can mark some fields to be ignored when the match (comparison) is performed.  You can even use a regular-expression so that instead of checking for equality, Karate will just validate that the actual value conforms to the expected pattern.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis means that even when you have dynamic server-side generated values such as UUID-s and time-stamps appearing in the response, you can still assert that the full-payload matched in one step.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def cat = { name: 'Billie', type: 'LOL', id: 'a9f7a56b-8d5c-455c-9d13-808461d17b91' }\n* match cat == { name: '#ignore', type: '#regex [A-Z]{3}', id: '#uuid' }\n# this will fail\n# * match cat == { name: '#ignore', type: '#regex .{2}', id: '#uuid' }\t\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e, type: \u003cspan class=\"pl-s\"\u003e'LOL'\u003c/span\u003e, id: \u003cspan class=\"pl-s\"\u003e'a9f7a56b-8d5c-455c-9d13-808461d17b91'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cat == { name: \u003cspan class=\"pl-s\"\u003e'#ignore'\u003c/span\u003e, type: \u003cspan class=\"pl-s\"\u003e'#regex [A-Z]{3}'\u003c/span\u003e, id: \u003cspan class=\"pl-s\"\u003e'#uuid'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# this will fail\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# * match cat == { name: '#ignore', type: '#regex .{2}', id: '#uuid' }\t\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that regex escaping has to be done with a \u003cem\u003edouble\u003c/em\u003e back-slash - for e.g: \u003ccode\u003e'#regex a\\\\.dot'\u003c/code\u003e will match \u003ccode\u003e'a.dot'\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThe supported markers are the following:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMarker\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#ignore\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSkip comparison for this field even if the data element or JSON key is present\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#null\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual value to be \u003ccode\u003enull\u003c/code\u003e, and the data element or JSON key \u003cem\u003emust\u003c/em\u003e be present\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#notnull\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual value to be not-\u003ccode\u003enull\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#present\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eActual value can be any type or \u003cem\u003eeven\u003c/em\u003e \u003ccode\u003enull\u003c/code\u003e, but the key \u003cem\u003emust\u003c/em\u003e be present (only for JSON / XML, see below)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#notpresent\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects the key to be \u003cstrong\u003enot\u003c/strong\u003e present at all (only for JSON / XML, see below)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#array\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual value to be a JSON array\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#object\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual value to be a JSON object\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#boolean\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual value to be a boolean \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#number\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual value to be a number\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#string\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual value to be a string\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#uuid\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual (string) value to conform to the UUID format\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#regex STR\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects actual (string) value to match the regular-expression 'STR' (see examples above)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#? EXPR\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExpects the JavaScript expression 'EXPR' to evaluate to true, see \u003ca href=\"#self-validation-expressions\"\u003eself-validation expressions\u003c/a\u003e below\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#[NUM] EXPR\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eAdvanced array validation, see \u003ca href=\"#schema-validation\"\u003eschema validation\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e#(EXPR)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor completeness, \u003ca href=\"#embedded-expressions\"\u003eembedded expressions\u003c/a\u003e belong in this list as well\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ccode\u003e#present\u003c/code\u003e and \u003ccode\u003e#notpresent\u003c/code\u003e only make sense when you are matching within a JSON or XML context or using a JsonPath or XPath on the left-hand-side.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def json = { foo: 'bar' }\n* match json == { foo: '#present' }\n* match json.nope == '#notpresent'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef json = { foo: \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == { foo: \u003cspan class=\"pl-s\"\u003e'#present'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json.nope == \u003cspan class=\"pl-s\"\u003e'#notpresent'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe rest can also be used even in 'primitive' data matches like so:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* match foo == '#string'\n# convenient (and recommended) way to check for array length\n* match bar == '#[2]'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# convenient (and recommended) way to check for array length\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch bar == \u003cspan class=\"pl-s\"\u003e'#[2]'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eOptional Fields\u003c/h3\u003e\u003ca id=\"user-content-optional-fields\" class=\"anchor\" aria-label=\"Permalink: Optional Fields\" href=\"#optional-fields\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf two cross-hatch \u003ccode\u003e#\u003c/code\u003e symbols are used as the prefix (for example: \u003ccode\u003e##number\u003c/code\u003e), it means that the key is optional or that the value can be null.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = { bar: 'baz' }\n* match foo == { bar: '#string', ban: '##string' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { bar: \u003cspan class=\"pl-s\"\u003e'baz'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { bar: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e, ban: \u003cspan class=\"pl-s\"\u003e'##string'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eRemove If Null\u003c/h3\u003e\u003ca id=\"user-content-remove-if-null\" class=\"anchor\" aria-label=\"Permalink: Remove If Null\" href=\"#remove-if-null\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA very useful behavior when you combine the optional marker with an \u003ca href=\"#embedded-expressions\"\u003eembedded expression\u003c/a\u003e is as follows: if the embedded expression evaluates to \u003ccode\u003enull\u003c/code\u003e - the JSON key (or XML element or attribute) will be deleted from the payload (the equivalent of \u003ca href=\"#remove\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e).\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def data = { a: 'hello', b: null, c: null }\n* def json = { foo: '#(data.a)', bar: '#(data.b)', baz: '##(data.c)' }\n* match json == { foo: 'hello', bar: null }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = { a: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e, b: null, c: null }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef json = { foo: \u003cspan class=\"pl-s\"\u003e'#(data.a)'\u003c/span\u003e, bar: \u003cspan class=\"pl-s\"\u003e'#(data.b)'\u003c/span\u003e, baz: \u003cspan class=\"pl-s\"\u003e'##(data.c)'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == { foo: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e, bar: null }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you are just trying to pre-define schema snippets to use in a \u003ca href=\"#fuzzy-matching\"\u003efuzzy-match\u003c/a\u003e, you can use \u003ca href=\"#enclosed-javascript\"\u003eenclosed Javascript\u003c/a\u003e to suppress the default behavior of replacing placeholders. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def dogSchema = { id: '#string', color: '#string' }\n# here we enclose in round-brackets to preserve the optional embedded expression\n# so that it can be used later in a \u0026quot;match\u0026quot;\n* def schema = ({ id: '#string', name: '#string', dog: '##(dogSchema)' })\n\n* def response1 = { id: '123', name: 'foo' }\n* match response1 == schema\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef dogSchema = { id: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e, color: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# here we enclose in round-brackets to preserve the optional embedded expression\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# so that it can be used later in a \"match\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef schema = ({ id: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e, name: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e, dog: \u003cspan class=\"pl-s\"\u003e'##(dogSchema)'\u003c/span\u003e })\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef response1 = { id: \u003cspan class=\"pl-s\"\u003e'123'\u003c/span\u003e, name: \u003cspan class=\"pl-s\"\u003e'foo'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch response1 == schema\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd if you need to suppress placeholder substitution for \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread()\u003c/code\u003e\u003c/a\u003e, but still need a JSON snippet, you can do this. Note how we read as a string, but \u003ca href=\"#type-conversion\"\u003e\"cast\" to JSON\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* json schema = karate.readAsString('schema.json')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ejson schema = karate.readAsString(\u003cspan class=\"pl-s\"\u003e'schema.json'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you want to use the triple-quote / multi-line way of defining JSON or if you have to use XML - you can use \u003ca href=\"#text\"\u003e\u003ccode\u003etext\u003c/code\u003e\u003c/a\u003e and \"cast\" to JSON or XML as a second step -  before using in a \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* text schema =\n\u0026quot;\u0026quot;\u0026quot;\n\u0026lt;root\u0026gt;\n  \u0026lt;a\u0026gt;#string\u0026lt;/a\u0026gt;\n  \u0026lt;b\u0026gt;##(subSchema)\u0026lt;/b\u0026gt;\n\u0026lt;/root\u0026gt;\n\u0026quot;\u0026quot;\u0026quot;\n* xml schema = schema\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etext schema =\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u0026lt;root\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;a\u0026gt;#string\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;b\u0026gt;##(subSchema)\u0026lt;/b\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\u0026lt;/root\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003exml schema = schema\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003e#null\u003c/code\u003e and \u003ccode\u003e#notpresent\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-null-and-notpresent\" class=\"anchor\" aria-label=\"Permalink: #null and #notpresent\" href=\"#null-and-notpresent\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate's \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e is strict, and the case where a JSON key exists but has a \u003ccode\u003enull\u003c/code\u003e value (\u003ccode\u003e#null\u003c/code\u003e) is considered different from the case where the key is not present at all (\u003ccode\u003e#notpresent\u003c/code\u003e) in the payload.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBut note that \u003ccode\u003e##null\u003c/code\u003e can be used to represent a convention that many teams adopt, which is that keys with \u003ccode\u003enull\u003c/code\u003e values are stripped from the JSON payload. In other words, \u003ccode\u003e{ a: 1, b: null }\u003c/code\u003e is considered 'equal' to \u003ccode\u003e{ a: 1 }\u003c/code\u003e and \u003ccode\u003e{ a: 1, b: '##null' }\u003c/code\u003e will \u003ccode\u003ematch\u003c/code\u003e both cases.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThese examples (all exact matches) can make things more clear:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = { }\n* match foo == { a: '##null' }\n* match foo == { a: '##notnull' }\n* match foo == { a: '#notpresent' }\n* match foo == { a: '#ignore' }\n\n* def foo = { a: null }\n* match foo == { a: '#null' }    \n* match foo == { a: '##null' }\n* match foo == { a: '#present' }\n* match foo == { a: '#ignore' }\n\n* def foo = { a: 1 }\n* match foo == { a: '#notnull' }\n* match foo == { a: '##notnull' }\n* match foo == { a: '#present' }\n* match foo == { a: '#ignore' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'##null'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'##notnull'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#notpresent'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#ignore'\u003c/span\u003e }\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { a: null }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#null'\u003c/span\u003e }    \n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'##null'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#present'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#ignore'\u003c/span\u003e }\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { a: 1 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#notnull'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'##notnull'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#present'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#ignore'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that you can alternatively use JsonPath on the left-hand-side:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = { a: 1 }\n* match foo.a == '#present'\n* match foo.nope == '#notpresent'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { a: 1 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo.a == \u003cspan class=\"pl-s\"\u003e'#present'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo.nope == \u003cspan class=\"pl-s\"\u003e'#notpresent'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eBut of course it is preferable to match whole objects in one step as far as possible.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e'Self' Validation Expressions\u003c/h3\u003e\u003ca id=\"user-content-self-validation-expressions\" class=\"anchor\" aria-label=\"Permalink: 'Self' Validation Expressions\" href=\"#self-validation-expressions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe special 'predicate' marker \u003ccode\u003e#? EXPR\u003c/code\u003e in the table above is an interesting one.  It is best explained via examples. Any valid JavaScript expression that evaluates to a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" rel=\"nofollow\"\u003eTruthy\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" rel=\"nofollow\"\u003eFalsy\u003c/a\u003e value is expected after the \u003ccode\u003e#?\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eObserve how the value of the field being validated (or 'self') is injected into the 'underscore' expression variable: '\u003ccode\u003e_\u003c/code\u003e'\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def date = { month: 3 }\n* match date == { month: '#? _ \u0026gt; 0 \u0026amp;\u0026amp; _ \u0026lt; 13' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef date = { month: 3 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch date == { month: \u003cspan class=\"pl-s\"\u003e'#? _ \u0026gt; 0 \u0026amp;\u0026amp; _ \u0026lt; 13'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhat is even more interesting is that expressions can refer to variables:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def date = { month: 3 }\n* def min = 1\n* def max = 12\n* match date == { month: '#? _ \u0026gt;= min \u0026amp;\u0026amp; _ \u0026lt;= max' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef date = { month: 3 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef min = 1\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef max = 12\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch date == { month: \u003cspan class=\"pl-s\"\u003e'#? _ \u0026gt;= min \u0026amp;\u0026amp; _ \u0026lt;= max'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd functions work as well ! You can imagine how you could evolve a nice set of utilities that validate all your domain objects.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def date = { month: 3 }\n* def isValidMonth = function(m) { return m \u0026gt;= 1 \u0026amp;\u0026amp; m \u0026lt;= 12 }\n* match date == { month: '#? isValidMonth(_)' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef date = { month: 3 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef isValidMonth = function(m) { return m \u0026gt;= 1 \u0026amp;\u0026amp; m \u003cspan class=\"pl-smi\"\u003e\u0026lt;= 12 }\u003c/span\u003e\n\u003cspan class=\"pl-smi\"\u003e* match date == { month: '#? isValidMonth(_)' }\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eEspecially since strings can be easily coerced to numbers (and vice-versa) in Javascript, you can combine built-in validators with the self-validation 'predicate' form like this: \u003ccode\u003e'#number? _ \u0026gt; 0'\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# given this invalid input (string instead of number)\n* def date = { month: '3' }\n# this will pass\n* match date == { month: '#? _ \u0026gt; 0' }\n# but this 'combined form' will fail, which is what we want\n# * match date == { month: '#number? _ \u0026gt; 0' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# given this invalid input (string instead of number)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef date = { month: \u003cspan class=\"pl-s\"\u003e'3'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# this will pass\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch date == { month: \u003cspan class=\"pl-s\"\u003e'#? _ \u0026gt; 0'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# but this 'combined form' will fail, which is what we want\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# * match date == { month: '#number? _ \u0026gt; 0' }\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eReferring to the JSON root\u003c/h4\u003e\u003ca id=\"user-content-referring-to-the-json-root\" class=\"anchor\" aria-label=\"Permalink: Referring to the JSON root\" href=\"#referring-to-the-json-root\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can actually refer to any JsonPath on the document via \u003ccode\u003e$\u003c/code\u003e and perform cross-field or conditional validations ! This example uses \u003ca href=\"#match-contains\"\u003e\u003ccode\u003econtains\u003c/code\u003e\u003c/a\u003e and the \u003ca href=\"#self-validation-expressions\"\u003e\u003ccode\u003e#?\u003c/code\u003e\u003c/a\u003e 'predicate' syntax, and situations where this comes in useful will be apparent when we discuss \u003ca href=\"#match-each\"\u003e\u003ccode\u003ematch each\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given def temperature = { celsius: 100, fahrenheit: 212 }\nThen match temperature == { celsius: '#number', fahrenheit: '#? _ == $.celsius * 1.8 + 32' }\n# when validation logic is an 'equality' check, an embedded expression works better\nThen match temperature contains { fahrenheit: '#($.celsius * 1.8 + 32)' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef temperature = { celsius: 100, fahrenheit: 212 }\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch temperature == { celsius: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, fahrenheit: \u003cspan class=\"pl-s\"\u003e'#? _ == $.celsius * 1.8 + 32'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# when validation logic is an 'equality' check, an embedded expression works better\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch temperature contains { fahrenheit: \u003cspan class=\"pl-s\"\u003e'#($.celsius * 1.8 + 32)'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch\u003c/code\u003e text or binary\u003c/h3\u003e\u003ca id=\"user-content-match-text-or-binary\" class=\"anchor\" aria-label=\"Permalink: match text or binary\" href=\"#match-text-or-binary\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# when the response is plain-text\nThen match response == 'Health Check OK'\nAnd match response != 'Error'\n\n# when the response is binary (byte-array)\nThen match responseBytes == read('test.pdf')\n\n# incidentally, match and assert behave exactly the same way for strings\n* def hello = 'Hello World!'\n* match hello == 'Hello World!'\n* assert hello == 'Hello World!'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# when the response is plain-text\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response == \u003cspan class=\"pl-s\"\u003e'Health Check OK'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch response != \u003cspan class=\"pl-s\"\u003e'Error'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# when the response is binary (byte-array)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch responseBytes == read(\u003cspan class=\"pl-s\"\u003e'test.pdf'\u003c/span\u003e)\n\n\u003cspan class=\"pl-c\"\u003e# incidentally, match and assert behave exactly the same way for strings\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef hello = \u003cspan class=\"pl-s\"\u003e'Hello World!'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch hello == \u003cspan class=\"pl-s\"\u003e'Hello World!'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert hello == \u003cspan class=\"pl-s\"\u003e'Hello World!'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eChecking if a string is contained within another string is a very common need and \u003ca href=\"#match-contains\"\u003e\u003ccode\u003ematch\u003c/code\u003e (name) \u003ccode\u003econtains\u003c/code\u003e\u003c/a\u003e works just like you'd expect:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def hello = 'Hello World!'\n* match hello contains 'World'\n* match hello !contains 'blah'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef hello = \u003cspan class=\"pl-s\"\u003e'Hello World!'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch hello contains \u003cspan class=\"pl-s\"\u003e'World'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch hello !contains \u003cspan class=\"pl-s\"\u003e'blah'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor case-insensitive string comparisons, see how to create \u003ca href=\"#commonly-needed-utilities\"\u003ecustom utilities\u003c/a\u003e or \u003ca href=\"#karate-lowercase\"\u003e\u003ccode\u003ekarate.lowerCase()\u003c/code\u003e\u003c/a\u003e. And for dealing with binary content - see \u003ca href=\"#type-bytes\"\u003e\u003ccode\u003ebytes\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch header\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-match-header\" class=\"anchor\" aria-label=\"Permalink: match header\" href=\"#match-header\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince asserting against header values in the response is a common task - \u003ccode\u003ematch header\u003c/code\u003e has a special meaning.  It short-cuts to the pre-defined variable \u003ca href=\"#responseheaders\"\u003e\u003ccode\u003eresponseHeaders\u003c/code\u003e\u003c/a\u003e and reduces some complexity - because strictly, HTTP headers are a 'multi-valued map' or a 'map of lists' - the Java-speak equivalent being \u003ccode\u003eMap\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt;\u003c/code\u003e. And since header names are case-insensitive - it ignores the case when finding the header to match.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# so after a http request\nThen match header Content-Type == 'application/json'\n# 'contains' works as well\nThen match header Content-Type contains 'application'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# so after a http request\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch header Content-Type == \u003cspan class=\"pl-s\"\u003e'application/json'\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# 'contains' works as well\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch header Content-Type contains \u003cspan class=\"pl-s\"\u003e'application'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote the extra convenience where you don't have to enclose the LHS key in quotes.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can always directly access the variable called \u003ca href=\"#responseheaders\"\u003e\u003ccode\u003eresponseHeaders\u003c/code\u003e\u003c/a\u003e if you wanted to do more checks, but you typically won't need to.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch\u003c/code\u003e and XML\u003c/h3\u003e\u003ca id=\"user-content-match-and-xml\" class=\"anchor\" aria-label=\"Permalink: match and XML\" href=\"#match-and-xml\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAll the \u003ca href=\"#fuzzy-matching\"\u003efuzzy matching\u003c/a\u003e markers will work in XML as well. Here are some examples:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  * def xml = \u0026lt;root\u0026gt;\u0026lt;hello\u0026gt;world\u0026lt;/hello\u0026gt;\u0026lt;foo\u0026gt;bar\u0026lt;/foo\u0026gt;\u0026lt;/root\u0026gt;\n  * match xml == \u0026lt;root\u0026gt;\u0026lt;hello\u0026gt;world\u0026lt;/hello\u0026gt;\u0026lt;foo\u0026gt;#ignore\u0026lt;/foo\u0026gt;\u0026lt;/root\u0026gt;\n  * def xml = \u0026lt;root\u0026gt;\u0026lt;hello foo=\u0026quot;bar\u0026quot;\u0026gt;world\u0026lt;/hello\u0026gt;\u0026lt;/root\u0026gt;\n  * match xml == \u0026lt;root\u0026gt;\u0026lt;hello foo=\u0026quot;#ignore\u0026quot;\u0026gt;world\u0026lt;/hello\u0026gt;\u0026lt;/root\u0026gt;\"\u003e\u003cpre\u003e  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef xml = \u003cspan class=\"pl-smi\"\u003e\u0026lt;root\u0026gt;\u0026lt;hello\u0026gt;\u003c/span\u003eworld\u003cspan class=\"pl-smi\"\u003e\u0026lt;/hello\u0026gt;\u0026lt;foo\u0026gt;\u003c/span\u003ebar\u003cspan class=\"pl-smi\"\u003e\u0026lt;/foo\u0026gt;\u0026lt;/root\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch xml == \u003cspan class=\"pl-smi\"\u003e\u0026lt;root\u0026gt;\u0026lt;hello\u0026gt;\u003c/span\u003eworld\u003cspan class=\"pl-smi\"\u003e\u0026lt;/hello\u0026gt;\u0026lt;foo\u0026gt;\u003c/span\u003e\u003cspan class=\"pl-c\"\u003e#ignore\u0026lt;/foo\u0026gt;\u0026lt;/root\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef xml = \u003cspan class=\"pl-smi\"\u003e\u0026lt;root\u0026gt;\u0026lt;hello foo=\"bar\"\u0026gt;\u003c/span\u003eworld\u003cspan class=\"pl-smi\"\u003e\u0026lt;/hello\u0026gt;\u0026lt;/root\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch xml == \u003cspan class=\"pl-smi\"\u003e\u0026lt;root\u0026gt;\u0026lt;hello foo=\"#ignore\"\u0026gt;\u003c/span\u003eworld\u003cspan class=\"pl-smi\"\u003e\u0026lt;/hello\u0026gt;\u0026lt;/root\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRefer to this file for a comprehensive set of XML examples: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature\"\u003e\u003ccode\u003exml.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eMatching Sub-Sets of JSON Keys and Arrays\u003c/h2\u003e\u003ca id=\"user-content-matching-sub-sets-of-json-keys-and-arrays\" class=\"anchor\" aria-label=\"Permalink: Matching Sub-Sets of JSON Keys and Arrays\" href=\"#matching-sub-sets-of-json-keys-and-arrays\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch contains\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-match-contains\" class=\"anchor\" aria-label=\"Permalink: match contains\" href=\"#match-contains\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJSON Keys\u003c/h4\u003e\u003ca id=\"user-content-json-keys\" class=\"anchor\" aria-label=\"Permalink: JSON Keys\" href=\"#json-keys\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn some cases where the response JSON is wildly dynamic, you may want to only check for the existence of some keys. And \u003ccode\u003ematch\u003c/code\u003e (name) \u003ccode\u003econtains\u003c/code\u003e is how you can do so:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = { bar: 1, baz: 'hello', ban: 'world' }\n\n* match foo contains { bar: 1 }\n* match foo contains { baz: 'hello' }\n* match foo contains { bar:1, baz: 'hello' }\n# this will fail\n# * match foo == { bar:1, baz: 'hello' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { bar: 1, baz: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e, ban: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e }\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo contains { bar: 1 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo contains { baz: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo contains { bar:1, baz: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# this will fail\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# * match foo == { bar:1, baz: 'hello' }\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ccode\u003ematch contains\u003c/code\u003e will \u003cem\u003enot\u003c/em\u003e \"recurse\" any nested JSON chunks so use \u003ca href=\"#match-contains-deep\"\u003e\u003ccode\u003ematch contains deep\u003c/code\u003e\u003c/a\u003e instead.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAlso note that \u003ca href=\"#match-contains-any\"\u003e\u003ccode\u003ematch contains any\u003c/code\u003e\u003c/a\u003e is possible for JSON objects as well as \u003ca href=\"#json-arrays\"\u003eJSON arrays\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e(not) \u003ccode\u003e!contains\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-not-contains\" class=\"anchor\" aria-label=\"Permalink: (not) !contains\" href=\"#not-contains\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt is sometimes useful to be able to check if a key-value-pair does \u003cstrong\u003enot\u003c/strong\u003e exist. This is possible by prefixing \u003ccode\u003econtains\u003c/code\u003e with a \u003ccode\u003e!\u003c/code\u003e (with no space in between).\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = { bar: 1, baz: 'hello', ban: 'world' }\n* match foo !contains { bar: 2 }\n* match foo !contains { huh: '#notnull' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { bar: 1, baz: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e, ban: \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo !contains { bar: 2 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo !contains { huh: \u003cspan class=\"pl-s\"\u003e'#notnull'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eHere's a reminder that the \u003ca href=\"#null-and-notpresent\"\u003e\u003ccode\u003e#notpresent\u003c/code\u003e\u003c/a\u003e marker can be mixed into an equality \u003ccode\u003ematch\u003c/code\u003e (\u003ccode\u003e==\u003c/code\u003e) to assert that some keys exist and at the same time ensure that some keys do \u003cstrong\u003enot\u003c/strong\u003e exist:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = { a: 1 }\n* match foo == { a: '#number', b: '#notpresent' }\n\n# if b can be present (optional) but should always be null\n* match foo == { a: '#number', b: '##null' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { a: 1 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, b: \u003cspan class=\"pl-s\"\u003e'#notpresent'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# if b can be present (optional) but should always be null\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == { a: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, b: \u003cspan class=\"pl-s\"\u003e'##null'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ccode\u003e!\u003c/code\u003e (not) operator is especially useful for \u003ccode\u003econtains\u003c/code\u003e and JSON arrays.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = [1, 2, 3]\n* match foo !contains 4\n* match foo !contains [5, 6]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = [1, 2, 3]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo !contains 4\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo !contains [5, 6]\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJSON Arrays\u003c/h4\u003e\u003ca id=\"user-content-json-arrays\" class=\"anchor\" aria-label=\"Permalink: JSON Arrays\" href=\"#json-arrays\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is a good time to deep-dive into JsonPath, which is perfect for slicing and dicing JSON into manageable chunks. It is worth taking a few minutes to go through the documentation and examples here: \u003ca href=\"https://github.com/jayway/JsonPath#path-examples\"\u003eJsonPath Examples\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere are some example assertions performed while scraping a list of child elements out of the JSON below. Observe how you can \u003ccode\u003ematch\u003c/code\u003e the result of a JsonPath expression with your expected data.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given def cat = \n  \u0026quot;\u0026quot;\u0026quot;\n  {\n    name: 'Billie',\n    kittens: [\n      { id: 23, name: 'Bob' },\n      { id: 42, name: 'Wild' }\n    ]\n  }\n  \u0026quot;\u0026quot;\u0026quot;\n# normal 'equality' match. note the wildcard '*' in the JsonPath (returns an array)\nThen match cat.kittens[*].id == [23, 42]\n\n# when inspecting a json array, 'contains' just checks if the expected items exist\n# and the size and order of the actual array does not matter\nThen match cat.kittens[*].id contains 23\nThen match cat.kittens[*].id contains [42]\nThen match cat.kittens[*].id contains [23, 42]\nThen match cat.kittens[*].id contains [42, 23]\n\n# the .. operator is great because it matches nodes at any depth in the JSON \u0026quot;tree\u0026quot;\nThen match cat..name == ['Billie', 'Bob', 'Wild']\n\n# and yes, you can assert against nested objects within JSON arrays !\nThen match cat.kittens contains [{ id: 42, name: 'Wild' }, { id: 23, name: 'Bob' }]\n\n# ... and even ignore fields at the same time !\nThen match cat.kittens contains { id: 42, name: '#string' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef cat = \n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    name: 'Billie',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    kittens: [\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { id: 23, name: 'Bob' },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { id: 42, name: 'Wild' }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    ]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# normal 'equality' match. note the wildcard '*' in the JsonPath (returns an array)\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat.kittens[*].id == [23, 42]\n\n\u003cspan class=\"pl-c\"\u003e# when inspecting a json array, 'contains' just checks if the expected items exist\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# and the size and order of the actual array does not matter\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat.kittens[*].id contains 23\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat.kittens[*].id contains [42]\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat.kittens[*].id contains [23, 42]\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat.kittens[*].id contains [42, 23]\n\n\u003cspan class=\"pl-c\"\u003e# the .. operator is great because it matches nodes at any depth in the JSON \"tree\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat..name == [\u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e]\n\n\u003cspan class=\"pl-c\"\u003e# and yes, you can assert against nested objects within JSON arrays !\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat.kittens contains [{ id: 42, name: \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e }, { id: 23, name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e }]\n\n\u003cspan class=\"pl-c\"\u003e# ... and even ignore fields at the same time !\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch cat.kittens contains { id: 42, name: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt is worth mentioning that to do the equivalent of the last line in Java, you would typically have to traverse 2 Java Objects, one of which is within a list, and you would have to check for nulls as well.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhen you use Karate, all your data assertions can be done in pure JSON and without needing a thick forest of companion Java objects. And when you \u003ca href=\"#read\"\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/a\u003e your JSON objects from (re-usable) files, even complex response payload assertions can be accomplished in just a single line of Karate-script.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRefer to this \u003ca href=\"https://twitter.com/KarateDSL/status/873035687817117696\" rel=\"nofollow\"\u003ecase study\u003c/a\u003e for how dramatic the reduction of lines of code can be.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch contains only\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-match-contains-only\" class=\"anchor\" aria-label=\"Permalink: match contains only\" href=\"#match-contains-only\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor those cases where you need to assert that \u003cstrong\u003eall\u003c/strong\u003e array elements are present but in \u003cstrong\u003eany order\u003c/strong\u003e\nyou can do this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def data = { foo: [1, 2, 3] }\n* match data.foo contains 1\n* match data.foo contains [2]\n* match data.foo contains [3, 2]\n* match data.foo contains only [3, 2, 1]\n* match data.foo contains only [2, 3, 1]\n# this will fail\n# * match data.foo contains only [2, 3]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = { foo: [1, 2, 3] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch data.foo contains 1\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch data.foo contains [2]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch data.foo contains [3, 2]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch data.foo contains only [3, 2, 1]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch data.foo contains only [2, 3, 1]\n\u003cspan class=\"pl-c\"\u003e# this will fail\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# * match data.foo contains only [2, 3]\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch contains any\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-match-contains-any\" class=\"anchor\" aria-label=\"Permalink: match contains any\" href=\"#match-contains-any\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eTo assert that \u003cstrong\u003eany\u003c/strong\u003e of the given array elements are present.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def data = { foo: [1, 2, 3] }\n* match data.foo contains any [9, 2, 8]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = { foo: [1, 2, 3] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch data.foo contains any [9, 2, 8]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd this happens to work as expected for JSON object keys as well:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def data = { a: 1, b: 'x' }\n* match data contains any { b: 'x', c: true }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = { a: 1, b: \u003cspan class=\"pl-s\"\u003e'x'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch data contains any { b: \u003cspan class=\"pl-s\"\u003e'x'\u003c/span\u003e, c: true }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch contains deep\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-match-contains-deep\" class=\"anchor\" aria-label=\"Permalink: match contains deep\" href=\"#match-contains-deep\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis modifies the behavior of \u003ca href=\"#match-contains\"\u003e\u003ccode\u003ematch contains\u003c/code\u003e\u003c/a\u003e so that nested lists or objects are processed for a \"deep contains\" match instead of a \"deep equals\" one which is the default. This is convenient for complex nested payloads where you are sure that you only want to check for \u003cem\u003esome\u003c/em\u003e values in the various \"trees\" of data.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere is an example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Scenario: recurse nested json\n  * def original = { a: 1, b: 2, c: 3, d: { a: 1, b: 2 } }\n  * def expected = { a: 1, c: 3, d: { b: 2 } }\n  * match original contains deep expected\n\nScenario: recurse nested array\n  * def original = { a: 1, arr: [ { b: 2, c: 3 }, { b: 3, c: 4 } ] }\n  * def expected = { a: 1, arr: [ { b: 2 }, { c: 4 } ] }\n  * match original contains deep expected\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e recurse nested json\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef original = { a: 1, b: 2, c: 3, d: { a: 1, b: 2 } }\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef expected = { a: 1, c: 3, d: { b: 2 } }\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch original contains deep expected\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e recurse nested array\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef original = { a: 1, arr: [ { b: 2, c: 3 }, { b: 3, c: 4 } ] }\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef expected = { a: 1, arr: [ { b: 2 }, { c: 4 } ] }\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch original contains deep expected\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003ethe NOT operator e.g. \u003ccode\u003e!contains deep\u003c/code\u003e is not yet supported, please contribute code if you can.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch contains only deep\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-match-contains-only-deep\" class=\"anchor\" aria-label=\"Permalink: match contains only deep\" href=\"#match-contains-only-deep\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is exactly like \u003ca href=\"#match\"\u003e\u003ccode\u003ematch ==\u003c/code\u003e\u003c/a\u003e but the order of arrays does not matter. All arrays no matter the \"depth\" will be checked in this way.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def response = { foo: [ 'a', 'b' ] }\n* match response contains only deep { foo: [ 'b', 'a' ] }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef response = { foo: [ \u003cspan class=\"pl-s\"\u003e'a'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e ] }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch response contains only deep { foo: [ \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'a'\u003c/span\u003e ] }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eValidate every element in a JSON array\u003c/h2\u003e\u003ca id=\"user-content-validate-every-element-in-a-json-array\" class=\"anchor\" aria-label=\"Permalink: Validate every element in a JSON array\" href=\"#validate-every-element-in-a-json-array\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch each\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-match-each\" class=\"anchor\" aria-label=\"Permalink: match each\" href=\"#match-each\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ccode\u003ematch\u003c/code\u003e keyword can be made to iterate over all elements in a JSON array using the \u003ccode\u003eeach\u003c/code\u003e modifier. Here's how it works:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def data = { foo: [{ bar: 1, baz: 'a' }, { bar: 2, baz: 'b' }, { bar: 3, baz: 'c' }]}\n\n* match each data.foo == { bar: '#number', baz: '#string' }\n\n# and you can use 'contains' the way you'd expect\n* match each data.foo contains { bar: '#number' }\n* match each data.foo contains { bar: '#? _ != 4' }\n\n# some more examples of validation macros\n* match each data.foo contains { baz: \u0026quot;#? _ != 'z'\u0026quot; }\n* def isAbc = function(x) { return x == 'a' || x == 'b' || x == 'c' }\n* match each data.foo contains { baz: '#? isAbc(_)' }\n\n# this is also possible, see the subtle difference from the above\n* def isXabc = function(x) { return x.baz == 'a' || x.baz == 'b' || x.baz == 'c' }\n* match each data.foo == '#? isXabc(_)'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = { foo: [{ bar: 1, baz: \u003cspan class=\"pl-s\"\u003e'a'\u003c/span\u003e }, { bar: 2, baz: \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e }, { bar: 3, baz: \u003cspan class=\"pl-s\"\u003e'c'\u003c/span\u003e }]}\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch each data.foo == { bar: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, baz: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# and you can use 'contains' the way you'd expect\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch each data.foo contains { bar: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch each data.foo contains { bar: \u003cspan class=\"pl-s\"\u003e'#? _ != 4'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# some more examples of validation macros\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch each data.foo contains { baz: \u003cspan class=\"pl-s\"\u003e\"#? _ != 'z'\"\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef isAbc = function(x) { return x == \u003cspan class=\"pl-s\"\u003e'a'\u003c/span\u003e || x == \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e || x == \u003cspan class=\"pl-s\"\u003e'c'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch each data.foo contains { baz: \u003cspan class=\"pl-s\"\u003e'#? isAbc(_)'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# this is also possible, see the subtle difference from the above\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef isXabc = function(x) { return x.baz == \u003cspan class=\"pl-s\"\u003e'a'\u003c/span\u003e || x.baz == \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e || x.baz == \u003cspan class=\"pl-s\"\u003e'c'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch each data.foo == \u003cspan class=\"pl-s\"\u003e'#? isXabc(_)'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eHere is a contrived example that uses \u003ccode\u003ematch each\u003c/code\u003e, \u003ca href=\"#match-contains\"\u003e\u003ccode\u003econtains\u003c/code\u003e\u003c/a\u003e and the \u003ca href=\"#self-validation-expressions\"\u003e\u003ccode\u003e#?\u003c/code\u003e\u003c/a\u003e 'predicate' marker to validate that the value of \u003ccode\u003etotalPrice\u003c/code\u003e is always equal to the \u003ccode\u003eroomPrice\u003c/code\u003e of the first item in the \u003ccode\u003eroomInformation\u003c/code\u003e array.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Given def json =\n  \u0026quot;\u0026quot;\u0026quot;\n  {\n    \u0026quot;hotels\u0026quot;: [\n      { \u0026quot;roomInformation\u0026quot;: [{ \u0026quot;roomPrice\u0026quot;: 618.4 }], \u0026quot;totalPrice\u0026quot;: 618.4  },\n      { \u0026quot;roomInformation\u0026quot;: [{ \u0026quot;roomPrice\u0026quot;: 679.79}], \u0026quot;totalPrice\u0026quot;: 679.79 }\n    ]\n  }\n  \u0026quot;\u0026quot;\u0026quot;\nThen match each json.hotels contains { totalPrice: '#? _ == _$.roomInformation[0].roomPrice' }\n# when validation logic is an 'equality' check, an embedded expression works better\nThen match each json.hotels contains { totalPrice: '#(_$.roomInformation[0].roomPrice)' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef json =\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \"hotels\": [\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { \"roomInformation\": [{ \"roomPrice\": 618.4 }], \"totalPrice\": 618.4  },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { \"roomInformation\": [{ \"roomPrice\": 679.79}], \"totalPrice\": 679.79 }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    ]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch each json.hotels contains { totalPrice: \u003cspan class=\"pl-s\"\u003e'#? _ == _$.roomInformation[0].roomPrice'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# when validation logic is an 'equality' check, an embedded expression works better\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch each json.hotels contains { totalPrice: \u003cspan class=\"pl-s\"\u003e'#(_$.roomInformation[0].roomPrice)'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eReferring to self\u003c/h4\u003e\u003ca id=\"user-content-referring-to-self\" class=\"anchor\" aria-label=\"Permalink: Referring to self\" href=\"#referring-to-self\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhile \u003ca href=\"#referring-to-the-json-root\"\u003e\u003ccode\u003e$\u003c/code\u003e\u003c/a\u003e always refers to the \u003ca href=\"#referring-to-the-json-root\"\u003eJSON 'root'\u003c/a\u003e, note the use of \u003ccode\u003e_$\u003c/code\u003e above to represent the 'current' node of a \u003ccode\u003ematch each\u003c/code\u003e iteration. Here is a recap of symbols that can be used in JSON \u003ca href=\"#embedded-expressions\"\u003eembedded expressions\u003c/a\u003e:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSymbol\u003c/th\u003e\n\u003cth\u003eEvaluates To\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe \u003ca href=\"#referring-to-the-json-root\"\u003e'root'\u003c/a\u003e of the JSON document in scope\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e_\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe value of \u003ca href=\"#self-validation-expressions\"\u003e'self'\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e_$\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe 'parent' of 'self' or 'current' item in the list, relevant when using \u003ca href=\"#match-each\"\u003e\u003ccode\u003ematch each\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eThere is a shortcut for \u003ccode\u003ematch each\u003c/code\u003e explained in the next section that can be quite useful, especially for 'in-line' schema-like validations.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ematch each contains deep\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-match-each-contains-deep\" class=\"anchor\" aria-label=\"Permalink: match each contains deep\" href=\"#match-each-contains-deep\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ccode\u003ematch each\u003c/code\u003e can be combined with \u003ccode\u003econtains deep\u003c/code\u003e so that for each JSON object  a “deep contains” match is performed within nested lists or objects.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis is useful for testing payloads with JSON arrays whose members have a few essential keys that you wish to validate.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  Given def response = \n  \u0026quot;\u0026quot;\u0026quot;\n  [\n    {\n      \u0026quot;a\u0026quot;: 1,\n      \u0026quot;arr\u0026quot;: [\n          {\n              \u0026quot;b\u0026quot;: 2,\n              \u0026quot;c\u0026quot;: 3\n          }\n      ]\n    },\n    {\n      \u0026quot;a\u0026quot;: 1,\n      \u0026quot;arr\u0026quot;: [\n          {\n              \u0026quot;b\u0026quot;: 2,\n              \u0026quot;c\u0026quot;: 3\n          },\n          {\n              \u0026quot;b\u0026quot;: 4,\n              \u0026quot;c\u0026quot;: 5\n          }\n      ]\n    }\n  ]\n  \u0026quot;\u0026quot;\u0026quot;\n  Then match each response contains deep { a: 1, arr: [ { b: 2 } ] }\"\u003e\u003cpre\u003e  \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003edef response = \n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  [\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \"a\": 1,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \"arr\": [\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e              \"b\": 2,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e              \"c\": 3\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      ]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \"a\": 1,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \"arr\": [\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e              \"b\": 2,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e              \"c\": 3\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e              \"b\": 4,\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e              \"c\": 5\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e          }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      ]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  ]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch each response contains deep { a: 1, arr: [ { b: 2 } ] }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSchema Validation\u003c/h2\u003e\u003ca id=\"user-content-schema-validation\" class=\"anchor\" aria-label=\"Permalink: Schema Validation\" href=\"#schema-validation\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate provides a far more simpler and more powerful way than \u003ca href=\"http://json-schema.org\" rel=\"nofollow\"\u003eJSON-schema\u003c/a\u003e to validate the structure of a given payload. You can even mix domain and conditional validations and perform all assertions in a single step.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBut first, a special short-cut for array validation needs to be introduced:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo = ['bar', 'baz']\n\n# should be an array\n* match foo == '#[]'\n\n# should be an array of size 2\n* match foo == '#[2]'\n\n# should be an array of strings with size 2\n* match foo == '#[2] #string'\n\n# each array element should have a 'length' property with value 3\n* match foo == '#[]? _.length == 3'\n\n# should be an array of strings each of length 3\n* match foo == '#[] #string? _.length == 3'\n\n# should be null or an array of strings\n* match foo == '##[] #string'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = [\u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'baz'\u003c/span\u003e]\n\n\u003cspan class=\"pl-c\"\u003e# should be an array\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == \u003cspan class=\"pl-s\"\u003e'#[]'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# should be an array of size 2\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == \u003cspan class=\"pl-s\"\u003e'#[2]'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# should be an array of strings with size 2\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == \u003cspan class=\"pl-s\"\u003e'#[2] #string'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# each array element should have a 'length' property with value 3\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == \u003cspan class=\"pl-s\"\u003e'#[]? _.length == 3'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# should be an array of strings each of length 3\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == \u003cspan class=\"pl-s\"\u003e'#[] #string? _.length == 3'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# should be null or an array of strings\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == \u003cspan class=\"pl-s\"\u003e'##[] #string'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis 'in-line' short-cut for validating JSON arrays is similar to how \u003ca href=\"#match-each\"\u003e\u003ccode\u003ematch each\u003c/code\u003e\u003c/a\u003e works. So now, complex payloads (that include arrays) can easily be validated in one step by combining \u003ca href=\"#ignore-or-validate\"\u003evalidation markers\u003c/a\u003e like so:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def oddSchema = { price: '#string', status: '#? _ \u0026lt; 3', ck: '##number', name: '#regex[0-9X]' }\n* def isValidTime = read('time-validator.js')\nWhen method get\nThen match response ==\n  \u0026quot;\u0026quot;\u0026quot;\n  { \n    id: '#regex[0-9]+',\n    count: '#number',\n    odd: '#(oddSchema)',\n    data: { \n      countryId: '#number', \n      countryName: '#string', \n      leagueName: '##string', \n      status: '#number? _ \u0026gt;= 0', \n      sportName: '#string',\n      time: '#? isValidTime(_)'\n    },\n    odds: '#[] oddSchema'  \n  }\n  \u0026quot;\u0026quot;\u0026quot;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef oddSchema = { price: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e, status: \u003cspan class=\"pl-s\"\u003e'#? _ \u0026lt; 3'\u003c/span\u003e, ck: \u003cspan class=\"pl-s\"\u003e'##number'\u003c/span\u003e, name: \u003cspan class=\"pl-s\"\u003e'#regex[0-9X]'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef isValidTime = read(\u003cspan class=\"pl-s\"\u003e'time-validator.js'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod get\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response ==\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  { \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    id: '#regex[0-9]+',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    count: '#number',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    odd: '#(oddSchema)',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    data: { \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      countryId: '#number', \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      countryName: '#string', \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      leagueName: '##string', \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      status: '#number? _ \u0026gt;= 0', \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      sportName: '#string',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      time: '#? isValidTime(_)'\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    odds: '#[] oddSchema'  \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eEspecially note the re-use of the \u003ccode\u003eoddSchema\u003c/code\u003e both as an \u003ca href=\"#embedded-expressions\"\u003eembedded-expression\u003c/a\u003e and as an array validation (on the last line).\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAnd you can perform conditional / \u003ca href=\"#referring-to-the-json-root\"\u003ecross-field validations\u003c/a\u003e and even business-logic validations at the same time.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# optional (can be null) and if present should be an array of size greater than zero\n* match $.odds == '##[_ \u0026gt; 0]'\n\n# should be an array of size equal to $.count\n* match $.odds == '#[$.count]'\n\n# use a predicate function to validate each array element\n* def isValidOdd = function(o){ return o.name.length == 1 }\n* match $.odds == '#[]? isValidOdd(_)'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# optional (can be null) and if present should be an array of size greater than zero\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch $.odds == \u003cspan class=\"pl-s\"\u003e'##[_ \u0026gt; 0]'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# should be an array of size equal to $.count\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch $.odds == \u003cspan class=\"pl-s\"\u003e'#[$.count]'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# use a predicate function to validate each array element\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef isValidOdd = function(o){ return o.name.length == 1 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch $.odds == \u003cspan class=\"pl-s\"\u003e'#[]? isValidOdd(_)'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRefer to this for the complete example: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/schema-like.feature\"\u003e\u003ccode\u003eschema-like.feature\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAnd there is another example in the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003ekarate-demos\u003c/a\u003e: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/schema/schema.feature\"\u003e\u003ccode\u003eschema.feature\u003c/code\u003e\u003c/a\u003e where you can compare Karate's approach with an actual JSON-schema example. You can also find a nice visual comparison and explanation \u003ca href=\"https://twitter.com/KarateDSL/status/878984854012022784\" rel=\"nofollow\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003econtains\u003c/code\u003e short-cuts\u003c/h3\u003e\u003ca id=\"user-content-contains-short-cuts\" class=\"anchor\" aria-label=\"Permalink: contains short-cuts\" href=\"#contains-short-cuts\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eEspecially when payloads are complex (or highly dynamic), it may be more practical to use \u003ca href=\"#match-contains\"\u003e\u003ccode\u003econtains\u003c/code\u003e\u003c/a\u003e semantics. Karate has the following short-cut symbols designed to be mixed into \u003ca href=\"#embedded-expressions\"\u003e\u003ccode\u003eembedded expressions\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSymbol\u003c/th\u003e\n\u003cth\u003eMeans\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#match-contains\"\u003e\u003ccode\u003econtains\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e^^\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#match-contains-only\"\u003e\u003ccode\u003econtains only\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e^*\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#match-contains-any\"\u003e\u003ccode\u003econtains any\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e^+\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#match-contains-deep\"\u003e\u003ccode\u003econtains deep\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e!^\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#not-contains\"\u003e\u003ccode\u003enot contains\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eFor completeness, \u003ca href=\"#match\"\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#match--not-equals\"\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/a\u003e also belong in the above list.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eHere'a table of the alternative 'in-line' forms compared with the 'standard' form. Note that \u003cem\u003eall\u003c/em\u003e the short-cut forms on the right-side of the table resolve to 'equality' (\u003ccode\u003e==\u003c/code\u003e) matches, which enables them to be 'in-lined' into a \u003cem\u003efull\u003c/em\u003e (single-step) payload \u003ccode\u003ematch\u003c/code\u003e, using \u003ca href=\"#embedded-expressions\"\u003eembedded expressions\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://gist.github.com/ptrthomas/2a1e30bcb4d782279019b3d5c10b3ed1\"\u003e\u003cimg src=\"/karatelabs/karate/raw/master/karate-demo/src/test/resources/karate-json-assertions.jpg\" height=\"690px\" style=\"max-width: 100%;\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA very useful capability is to be able to check that an array \u003ccode\u003econtains\u003c/code\u003e an object that \u003ccode\u003econtains\u003c/code\u003e the provided \u003cem\u003esub-set\u003c/em\u003e of keys instead of having to specify the \u003cem\u003ecomplete\u003c/em\u003e JSON - which can get really cumbersome for large objects. This turns out to be very useful in practice, and this particular \u003ccode\u003ematch\u003c/code\u003e \u003cem\u003ejsonArray\u003c/em\u003e \u003ccode\u003econtains '#(^\u003c/code\u003e\u003cem\u003epartialObject\u003c/em\u003e\u003ccode\u003e)'\u003c/code\u003e form has no 'in-line' equivalent (see the third-from-last row above).\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThe last row in the table is a little different from the rest, and this short-cut form is the recommended way to validate the length of a JSON array. As a rule of thumb, prefer \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e over \u003ca href=\"#assert\"\u003e\u003ccode\u003eassert\u003c/code\u003e\u003c/a\u003e, because \u003ccode\u003ematch\u003c/code\u003e failure messages are more detailed and descriptive.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eIn real-life tests, these are very useful when the order of items in arrays returned from the server are not guaranteed. You can easily assert that all expected elements are present, \u003cem\u003eeven\u003c/em\u003e in nested parts of your JSON - while doing a \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e on the \u003cem\u003efull\u003c/em\u003e payload.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def cat = \n  \u0026quot;\u0026quot;\u0026quot;\n  {\n    name: 'Billie',\n    kittens: [\n      { id: 23, name: 'Bob' },\n      { id: 42, name: 'Wild' }\n    ]\n  }\n  \u0026quot;\u0026quot;\u0026quot;\n* def expected = [{ id: 42, name: 'Wild' }, { id: 23, name: 'Bob' }]\n* match cat == { name: 'Billie', kittens: '#(^^expected)' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = \n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    name: 'Billie',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    kittens: [\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { id: 23, name: 'Bob' },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { id: 42, name: 'Wild' }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    ]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef expected = [{ id: 42, name: \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e }, { id: 23, name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e }]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cat == { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e, kittens: \u003cspan class=\"pl-s\"\u003e'#(^^expected)'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThere's a lot going on in the last line above ! It validates the entire payload in one step and checks if the \u003ccode\u003ekittens\u003c/code\u003e array \u003ca href=\"#contains-short-cuts\"\u003e\u003cem\u003e\u003cstrong\u003econtains all\u003c/strong\u003e\u003c/em\u003e\u003c/a\u003e  the \u003ccode\u003eexpected\u003c/code\u003e items but in \u003cem\u003e\u003cstrong\u003eany order\u003c/strong\u003e\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eget\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-get\" class=\"anchor\" aria-label=\"Permalink: get\" href=\"#get\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eBy now, it should be clear that JsonPath can be very useful for extracting JSON 'trees' out of a given object. The \u003ccode\u003eget\u003c/code\u003e keyword allows you to save the results of a JsonPath expression for later use - which is especially useful for dynamic \u003ca href=\"#data-driven-features\"\u003edata-driven testing\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def cat = \n  \u0026quot;\u0026quot;\u0026quot;\n  {\n    name: 'Billie',\n    kittens: [\n      { id: 23, name: 'Bob' },\n      { id: 42, name: 'Wild' }\n    ]\n  }\n  \u0026quot;\u0026quot;\u0026quot;\n* def kitnums = get cat.kittens[*].id\n* match kitnums == [23, 42]\n* def kitnames = get cat $.kittens[*].name\n* match kitnames == ['Bob', 'Wild']\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = \n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    name: 'Billie',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    kittens: [\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { id: 23, name: 'Bob' },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { id: 42, name: 'Wild' }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    ]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef kitnums = get cat.kittens[*].id\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch kitnums == [23, 42]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef kitnames = get cat $.kittens[*].name\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch kitnames == [\u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e]\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eget\u003c/code\u003e short-cut\u003c/h3\u003e\u003ca id=\"user-content-get-short-cut\" class=\"anchor\" aria-label=\"Permalink: get short-cut\" href=\"#get-short-cut\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe 'short cut' \u003ccode\u003e$variableName\u003c/code\u003e form is also supported. Refer to \u003ca href=\"#jsonpath-short-cuts\"\u003eJsonPath short-cuts\u003c/a\u003e for a detailed explanation. So the above could be re-written as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def kitnums = $cat.kittens[*].id\n* match kitnums == [23, 42]\n* def kitnames = $cat.kittens[*].name\n* match kitnames == ['Bob', 'Wild']\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef kitnums = $cat.kittens[*].id\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch kitnums == [23, 42]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef kitnames = $cat.kittens[*].name\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch kitnames == [\u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt is worth repeating that the above can be condensed into 2 lines. Note that since \u003ca href=\"#match-and-variables\"\u003eonly JsonPath is expected\u003c/a\u003e on the left-hand-side of the \u003ccode\u003e==\u003c/code\u003e sign of a \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e statement, you don't need to prefix the variable reference with \u003ccode\u003e$\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* match cat.kittens[*].id == [23, 42]\n* match cat.kittens[*].name == ['Bob', 'Wild']\n\n# if you prefer using 'pure' JsonPath, you can do this\n* match cat $.kittens[*].id == [23, 42]\n* match cat $.kittens[*].name == ['Bob', 'Wild']\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cat.kittens[*].id == [23, 42]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cat.kittens[*].name == [\u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e]\n\n\u003cspan class=\"pl-c\"\u003e# if you prefer using 'pure' JsonPath, you can do this\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cat $.kittens[*].id == [23, 42]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch cat $.kittens[*].name == [\u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e]\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eget\u003c/code\u003e plus index\u003c/h3\u003e\u003ca id=\"user-content-get-plus-index\" class=\"anchor\" aria-label=\"Permalink: get plus index\" href=\"#get-plus-index\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA convenience that the \u003ccode\u003eget\u003c/code\u003e syntax supports (but not the \u003ccode\u003e$\u003c/code\u003e short-cut form) is to return a single element if the right-hand-side evaluates to a list-like result (e.g. a JSON array). This is useful because the moment you use a wildcard \u003ccode\u003e[*]\u003c/code\u003e or search filter in JsonPath (see the next section), you get an \u003cem\u003earray\u003c/em\u003e back - even though typically you would only be interested in the \u003cem\u003efirst\u003c/em\u003e item.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def actual = 23\n\n# so instead of this\n* def kitnums = get cat.kittens[*].id\n* match actual == kitnums[0]\n\n# you can do this in one line\n* match actual == get[0] cat.kittens[*].id\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef actual = 23\n\n\u003cspan class=\"pl-c\"\u003e# so instead of this\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef kitnums = get cat.kittens[*].id\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch actual == kitnums[0]\n\n\u003cspan class=\"pl-c\"\u003e# you can do this in one line\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch actual == get[0] cat.kittens[*].id\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJsonPath filters\u003c/h3\u003e\u003ca id=\"user-content-jsonpath-filters\" class=\"anchor\" aria-label=\"Permalink: JsonPath filters\" href=\"#jsonpath-filters\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eJsonPath \u003ca href=\"https://github.com/json-path/JsonPath#filter-operators\"\u003efilter expressions\u003c/a\u003e are very useful for extracting elements that meet some filter criteria out of arrays.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def cat = \n  \u0026quot;\u0026quot;\u0026quot;\n  {\n    name: 'Billie',\n    kittens: [\n      { id: 23, name: 'Bob' },\n      { id: 42, name: 'Wild' }\n    ]\n  }\n  \u0026quot;\u0026quot;\u0026quot;\n# find single kitten where id == 23\n* def bob = get[0] cat.kittens[?(@.id==23)]\n* match bob.name == 'Bob'\n\n# using the karate object if the expression is dynamic\n* def temp = karate.jsonPath(cat, \u0026quot;$.kittens[?(@.name=='\u0026quot; + bob.name + \u0026quot;')]\u0026quot;)\n* match temp[0] == bob\n\n# or alternatively\n* def temp = karate.jsonPath(cat, \u0026quot;$.kittens[?(@.name=='\u0026quot; + bob.name + \u0026quot;')]\u0026quot;)[0]\n* match temp == bob\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef cat = \n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    name: 'Billie',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    kittens: [\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { id: 23, name: 'Bob' },\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      { id: 42, name: 'Wild' }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    ]\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# find single kitten where id == 23\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef bob = get[0] cat.kittens[?(\u003cspan class=\"pl-k\"\u003e@.id==23)]\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch bob.name == \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# using the karate object if the expression is dynamic\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef temp = karate.jsonPath(cat, \u003cspan class=\"pl-s\"\u003e\"$.kittens[?(@.name=='\"\u003c/span\u003e + bob.name + \u003cspan class=\"pl-s\"\u003e\"')]\"\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch temp[0] == bob\n\n\u003cspan class=\"pl-c\"\u003e# or alternatively\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef temp = karate.jsonPath(cat, \u003cspan class=\"pl-s\"\u003e\"$.kittens[?(@.name=='\"\u003c/span\u003e + bob.name + \u003cspan class=\"pl-s\"\u003e\"')]\"\u003c/span\u003e)[0]\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch temp == bob\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou usually won't need this, but the second-last line above shows how the \u003ccode\u003ekarate\u003c/code\u003e object can be used to \u003ca href=\"#karate-jsonpath\"\u003eevaluate JsonPath\u003c/a\u003e if the filter expression depends on a variable. If you find yourself struggling to write \u003ca href=\"https://stackoverflow.com/a/52741196/143475\" rel=\"nofollow\"\u003edynamic JsonPath filters\u003c/a\u003e, look at \u003ca href=\"#karate-filter\"\u003e\u003ccode\u003ekarate.filter()\u003c/code\u003e\u003c/a\u003e as an alternative, described just below.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJSON Transforms\u003c/h2\u003e\u003ca id=\"user-content-json-transforms\" class=\"anchor\" aria-label=\"Permalink: JSON Transforms\" href=\"#json-transforms\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate supports the following \u003ca href=\"https://en.wikipedia.org/wiki/Functional_programming\" rel=\"nofollow\"\u003efunctional-style\u003c/a\u003e operations via the JS API -  \u003ca href=\"#karate-map\"\u003e\u003ccode\u003ekarate.map()\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"#karate-filter\"\u003e\u003ccode\u003ekarate.filter()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#karate-foreach\"\u003e\u003ccode\u003ekarate.forEach()\u003c/code\u003e\u003c/a\u003e. They can be very useful in some situations. A \u003ca href=\"https://stackoverflow.com/a/53120851/143475\" rel=\"nofollow\"\u003egood example\u003c/a\u003e is when you have the \u003cem\u003eexpected\u003c/em\u003e data available as ready-made JSON but it is in a different \"shape\" from the \u003cem\u003eactual\u003c/em\u003e data or HTTP \u003ccode\u003eresponse\u003c/code\u003e. There is also a \u003ca href=\"#karate-mapwithkey\"\u003e\u003ccode\u003ekarate.mapWithKey()\u003c/code\u003e\u003c/a\u003e for a common need - which is to convert an array of primitives into an array of objects, which is the form that \u003ca href=\"#data-driven-features\"\u003edata driven features\u003c/a\u003e expect.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe Graal JS engine that Karate uses supports the full ES6 spec, which means that JSON variables are first-class JS objects, and arrays can be \u003cem\u003edirectly\u003c/em\u003e looped over or manipulated using \u003ca href=\"https://stackoverflow.com/a/76091034/143475\" rel=\"nofollow\"\u003e\u003ccode\u003emap()\u003c/code\u003e, \u003ccode\u003efilter()\u003c/code\u003e and \u003ccode\u003eforEach()\u003c/code\u003e\u003c/a\u003e. And JS \"arrow functions\" are supported, which makes code much more concise.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA few more useful \"transforms\" are to select a sub-set of key-value pairs using \u003ca href=\"#karate-filterkeys\"\u003e\u003ccode\u003ekarate.filterKeys()\u003c/code\u003e\u003c/a\u003e, merging 2 or more JSON-s using \u003ca href=\"#karate-merge\"\u003e\u003ccode\u003ekarate.merge()\u003c/code\u003e\u003c/a\u003e and combining 2 or more arrays (or objects) into a single array using \u003ca href=\"#karate-append\"\u003e\u003ccode\u003ekarate.append()\u003c/code\u003e\u003c/a\u003e. And \u003ca href=\"#karate-appendto\"\u003e\u003ccode\u003ekarate.appendTo()\u003c/code\u003e\u003c/a\u003e is for updating an existing variable (the equivalent of \u003ccode\u003earray.push()\u003c/code\u003e in JavaScript), which is especially useful in the body of a \u003ccode\u003ekarate.forEach()\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can also sort arrays of arbitrary JSON using \u003ca href=\"#karate-sort\"\u003e\u003ccode\u003ekarate.sort()\u003c/code\u003e\u003c/a\u003e. Simple arrays of strings or numbers can be stripped of duplicates using \u003ca href=\"#karate-distinct\"\u003e\u003ccode\u003ekarate.distinct()\u003c/code\u003e\u003c/a\u003e. All JS \"native\" array operations can be used, such as \u003ccode\u003esomeName.reverse()\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that a single JS function is sufficient to transform a given JSON object into a completely new one, and you can use complex conditional logic if needed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Scenario: karate map operation\n    * def fun = function(x){ return x * x }\n    * def list = [1, 2, 3]\n    * def res = karate.map(list, fun)\n    * match res == [1, 4, 9]\n\nScenario: js style map operation\n    * def list = [1, 2, 3]\n    * def res = list.map(list, x =\u0026gt; x * x)\n    * match res == [1, 4, 9]\n\nScenario: convert an array into a different shape\n    * def before = [{ foo: 1 }, { foo: 2 }, { foo: 3 }]\n    * def fun = function(x){ return { bar: x.foo } }\n    * def after = karate.map(before, fun)\n    * match after == [{ bar: 1 }, { bar: 2 }, { bar: 3 }]\n\nScenario: convert array of primitives into array of objects\n    * def list = [ 'Bob', 'Wild', 'Nyan' ]\n    * def data = karate.mapWithKey(list, 'name')\n    * match data == [{ name: 'Bob' }, { name: 'Wild' }, { name: 'Nyan' }]\n\nScenario: karate filter operation\n    * def fun = function(x){ return x % 2 == 0 }\n    * def list = [1, 2, 3, 4]\n    * def res = karate.filter(list, fun)\n    * match res == [2, 4]\n\nScenario: js style filter operation\n    * def list = [1, 2, 3, 4]\n    * def res = list.filter(list, x =\u0026gt; x % 2 == 0)\n    * match res == [2, 4]    \n\nScenario: karate.forEach() works even on object key-values, not just arrays\n    * def keys = []\n    * def vals = []\n    * def idxs = []\n    * def fun = \n    \u0026quot;\u0026quot;\u0026quot;\n    function(x, y, i) { \n      karate.appendTo(keys, x); \n      karate.appendTo(vals, y); \n      karate.appendTo(idxs, i); \n    }\n    \u0026quot;\u0026quot;\u0026quot;\n    * def map = { a: 2, b: 4, c: 6 }\n    * karate.forEach(map, fun)\n    * match keys == ['a', 'b', 'c']\n    * match vals == [2, 4, 6]\n    * match idxs == [0, 1, 2]\n\nScenario: filterKeys\n    * def schema = { a: '#string', b: '#number', c: '#boolean' }\n    * def response = { a: 'x', c: true }\n    # very useful for validating a response against a schema \u0026quot;super-set\u0026quot;\n    * match response == karate.filterKeys(schema, response)\n    * match karate.filterKeys(response, 'b', 'c') == { c: true }\n    * match karate.filterKeys(response, ['a', 'b']) == { a: 'x' }\n\nScenario: merge\n    * def foo = { a: 1 }\n    * def bar = karate.merge(foo, { b: 2 })\n    * match bar == { a: 1, b: 2 }\n\nScenario: append\n    * def foo = [{ a: 1 }]\n    * def bar = karate.append(foo, { b: 2 })\n    * match bar == [{ a: 1 }, { b: 2 }]\n\nScenario: sort\n    * def foo = [{a: { b: 3 }}, {a: { b: 1 }}, {a: { b: 2 }}]\n    * def fun = function(x){ return x.a.b }\n    * def bar = karate.sort(foo, fun)\n    * match bar == [{a: { b: 1 }}, {a: { b: 2 }}, {a: { b: 3 }}]\n    * match bar.reverse() == [{a: { b: 3 }}, {a: { b: 2 }}, {a: { b: 1 }}]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e karate map operation\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef fun = function(x){ return x * x }\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef list = [1, 2, 3]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef res = karate.map(list, fun)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch res == [1, 4, 9]\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e js style map operation\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef list = [1, 2, 3]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef res = list.map(list, x =\u0026gt; x * x)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch res == [1, 4, 9]\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e convert an array into a different shape\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef before = [{ foo: 1 }, { foo: 2 }, { foo: 3 }]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef fun = function(x){ return { bar: x.foo } }\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef after = karate.map(before, fun)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch after == [{ bar: 1 }, { bar: 2 }, { bar: 3 }]\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e convert array of primitives into array of objects\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef list = [ \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Nyan'\u003c/span\u003e ]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = karate.mapWithKey(list, \u003cspan class=\"pl-s\"\u003e'name'\u003c/span\u003e)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch data == [{ name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e }, { name: \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e }, { name: \u003cspan class=\"pl-s\"\u003e'Nyan'\u003c/span\u003e }]\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e karate filter operation\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef fun = function(x){ return x % 2 == 0 }\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef list = [1, 2, 3, 4]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef res = karate.filter(list, fun)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch res == [2, 4]\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e js style filter operation\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef list = [1, 2, 3, 4]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef res = list.filter(list, x =\u0026gt; x % 2 == 0)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch res == [2, 4]    \n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e karate.forEach() works even on object key-values, not just arrays\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef keys = []\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef vals = []\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef idxs = []\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef fun = \n    \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    function(x, y, i) { \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      karate.appendTo(keys, x); \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      karate.appendTo(vals, y); \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      karate.appendTo(idxs, i); \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \"\"\"\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef map = { a: 2, b: 4, c: 6 }\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ekarate.forEach(map, fun)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch keys == [\u003cspan class=\"pl-s\"\u003e'a'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'c'\u003c/span\u003e]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch vals == [2, 4, 6]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch idxs == [0, 1, 2]\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e filterKeys\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef schema = { a: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e, b: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, c: \u003cspan class=\"pl-s\"\u003e'#boolean'\u003c/span\u003e }\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef response = { a: \u003cspan class=\"pl-s\"\u003e'x'\u003c/span\u003e, c: true }\n\u003cspan class=\"pl-c\"\u003e    # very useful for validating a response against a schema \"super-set\"\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch response == karate.filterKeys(schema, response)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch karate.filterKeys(response, \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'c'\u003c/span\u003e) == { c: true }\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch karate.filterKeys(response, [\u003cspan class=\"pl-s\"\u003e'a'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e]) == { a: \u003cspan class=\"pl-s\"\u003e'x'\u003c/span\u003e }\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e merge\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = { a: 1 }\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef bar = karate.merge(foo, { b: 2 })\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch bar == { a: 1, b: 2 }\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e append\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = [{ a: 1 }]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef bar = karate.append(foo, { b: 2 })\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch bar == [{ a: 1 }, { b: 2 }]\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e sort\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = [{a: { b: 3 }}, {a: { b: 1 }}, {a: { b: 2 }}]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef fun = function(x){ return x.a.b }\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef bar = karate.sort(foo, fun)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch bar == [{a: { b: 1 }}, {a: { b: 2 }}, {a: { b: 3 }}]\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch bar.reverse() == [{a: { b: 3 }}, {a: { b: 2 }}, {a: { b: 1 }}]\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eLoops\u003c/h3\u003e\u003ca id=\"user-content-loops\" class=\"anchor\" aria-label=\"Permalink: Loops\" href=\"#loops\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eGiven the examples above, it has to be said that a best practice with Karate is to avoid JavaScript \u003ccode\u003efor\u003c/code\u003e loops as far as possible. A common requirement is to build an array with \u003ccode\u003en\u003c/code\u003e elements or do something \u003ccode\u003en\u003c/code\u003e times where \u003ccode\u003en\u003c/code\u003e is an integer (that could even be a variable reference). This is easily achieved with the \u003ca href=\"#karate-repeat\"\u003e\u003ccode\u003ekarate.repeat()\u003c/code\u003e\u003c/a\u003e API:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def fun = function(i){ return i * 2 }\n* def foo = karate.repeat(5, fun)\n* match foo == [0, 2, 4, 6, 8]\n\n* def foo = []\n* def fun = function(i){ karate.appendTo(foo, i) }\n* karate.repeat(5, fun)\n* match foo == [0, 1, 2, 3, 4]\n\n# generate test data easily\n* def fun = function(i){ return { name: 'User ' + (i + 1) } }\n* def foo = karate.repeat(3, fun)\n* match foo == [{ name: 'User 1' }, { name: 'User 2' }, { name: 'User 3' }]\n\n# generate a range of numbers as a json array\n* def foo = karate.range(4, 9)\n* match foo == [4, 5, 6, 7, 8, 9]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef fun = function(i){ return i * 2 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = karate.repeat(5, fun)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == [0, 2, 4, 6, 8]\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = []\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef fun = function(i){ karate.appendTo(foo, i) }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ekarate.repeat(5, fun)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == [0, 1, 2, 3, 4]\n\n\u003cspan class=\"pl-c\"\u003e# generate test data easily\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef fun = function(i){ return { name: \u003cspan class=\"pl-s\"\u003e'User '\u003c/span\u003e + (i + 1) } }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = karate.repeat(3, fun)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == [{ name: \u003cspan class=\"pl-s\"\u003e'User 1'\u003c/span\u003e }, { name: \u003cspan class=\"pl-s\"\u003e'User 2'\u003c/span\u003e }, { name: \u003cspan class=\"pl-s\"\u003e'User 3'\u003c/span\u003e }]\n\n\u003cspan class=\"pl-c\"\u003e# generate a range of numbers as a json array\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = karate.range(4, 9)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo == [4, 5, 6, 7, 8, 9]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd there's also \u003ca href=\"#karate-range\"\u003e\u003ccode\u003ekarate.range()\u003c/code\u003e\u003c/a\u003e which can be useful to generate test-data.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eDon't forget that Karate's \u003ca href=\"#data-driven-tests\"\u003edata-driven testing capabilities\u003c/a\u003e can loop over arrays of JSON objects automatically.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eXPath Functions\u003c/h2\u003e\u003ca id=\"user-content-xpath-functions\" class=\"anchor\" aria-label=\"Permalink: XPath Functions\" href=\"#xpath-functions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen handling XML, you sometimes need to call \u003ca href=\"https://docs.oracle.com/javase/tutorial/jaxp/xslt/xpath.html\" rel=\"nofollow\"\u003eXPath functions\u003c/a\u003e, for example to get the count of a node-set. Any valid XPath expression is allowed on the left-hand-side of a \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e statement.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def foo =\n  \u0026quot;\u0026quot;\u0026quot;\n  \u0026lt;records\u0026gt;\n    \u0026lt;record index=\u0026quot;1\u0026quot;\u0026gt;a\u0026lt;/record\u0026gt;\n    \u0026lt;record index=\u0026quot;2\u0026quot;\u0026gt;b\u0026lt;/record\u0026gt;\n    \u0026lt;record index=\u0026quot;3\u0026quot; foo=\u0026quot;bar\u0026quot;\u0026gt;c\u0026lt;/record\u0026gt;\n  \u0026lt;/records\u0026gt;\n  \u0026quot;\u0026quot;\u0026quot;\n\n* match foo count(/records//record) == 3\n* match foo //record[@index=2] == 'b'\n* match foo //record[@foo='bar'] == 'c'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo =\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;records\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \u0026lt;record index=\"1\"\u0026gt;a\u0026lt;/record\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \u0026lt;record index=\"2\"\u0026gt;b\u0026lt;/record\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \u0026lt;record index=\"3\" foo=\"bar\"\u0026gt;c\u0026lt;/record\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;/records\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo count(/records//record) == 3\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo //record[\u003cspan class=\"pl-k\"\u003e@index=2]\u003c/span\u003e == \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch foo //record[\u003cspan class=\"pl-k\"\u003e@foo='bar']\u003c/span\u003e == \u003cspan class=\"pl-s\"\u003e'c'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eAdvanced XPath\u003c/h3\u003e\u003ca id=\"user-content-advanced-xpath\" class=\"anchor\" aria-label=\"Permalink: Advanced XPath\" href=\"#advanced-xpath\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSome XPath expressions return a list of nodes (instead of a single node). But since you can express a list of data-elements as a JSON array - even these XPath expressions can be used in \u003ccode\u003ematch\u003c/code\u003e statements.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def teachers = \n  \u0026quot;\u0026quot;\u0026quot;\n  \u0026lt;teachers\u0026gt;\n    \u0026lt;teacher department=\u0026quot;science\u0026quot;\u0026gt;\n      \u0026lt;subject\u0026gt;math\u0026lt;/subject\u0026gt;\n      \u0026lt;subject\u0026gt;physics\u0026lt;/subject\u0026gt;\n    \u0026lt;/teacher\u0026gt;\n    \u0026lt;teacher department=\u0026quot;arts\u0026quot;\u0026gt;\n      \u0026lt;subject\u0026gt;political education\u0026lt;/subject\u0026gt;\n      \u0026lt;subject\u0026gt;english\u0026lt;/subject\u0026gt;\n    \u0026lt;/teacher\u0026gt;\n  \u0026lt;/teachers\u0026gt;\n  \u0026quot;\u0026quot;\u0026quot;\n* match teachers //teacher[@department='science']/subject == ['math', 'physics']\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef teachers = \n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;teachers\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \u0026lt;teacher department=\"science\"\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;subject\u0026gt;math\u0026lt;/subject\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;subject\u0026gt;physics\u0026lt;/subject\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \u0026lt;/teacher\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \u0026lt;teacher department=\"arts\"\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;subject\u0026gt;political education\u0026lt;/subject\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e      \u0026lt;subject\u0026gt;english\u0026lt;/subject\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    \u0026lt;/teacher\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \u0026lt;/teachers\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch teachers //teacher[\u003cspan class=\"pl-k\"\u003e@department='science']/subject\u003c/span\u003e == [\u003cspan class=\"pl-s\"\u003e'math'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'physics'\u003c/span\u003e]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf your XPath is dynamic and has to be formed 'on the fly' perhaps by using some variable derived from previous steps, you can use the \u003ca href=\"#karate-xmlpath\"\u003e\u003ccode\u003ekarate.xmlPath()\u003c/code\u003e\u003c/a\u003e helper:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def xml = \u0026lt;query\u0026gt;\u0026lt;name\u0026gt;\u0026lt;foo\u0026gt;bar\u0026lt;/foo\u0026gt;\u0026lt;/name\u0026gt;\u0026lt;/query\u0026gt;\n* def elementName = 'name'\n* def name = karate.xmlPath(xml, '/query/' + elementName + '/foo')\n* match name == 'bar'\n* def queryName = karate.xmlPath(xml, '/query/' + elementName)\n* match queryName == \u0026lt;name\u0026gt;\u0026lt;foo\u0026gt;bar\u0026lt;/foo\u0026gt;\u0026lt;/name\u0026gt;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef xml = \u003cspan class=\"pl-smi\"\u003e\u0026lt;query\u0026gt;\u0026lt;name\u0026gt;\u0026lt;foo\u0026gt;\u003c/span\u003ebar\u003cspan class=\"pl-smi\"\u003e\u0026lt;/foo\u0026gt;\u0026lt;/name\u0026gt;\u0026lt;/query\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef elementName = \u003cspan class=\"pl-s\"\u003e'name'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef name = karate.xmlPath(xml, \u003cspan class=\"pl-s\"\u003e'/query/'\u003c/span\u003e + elementName + \u003cspan class=\"pl-s\"\u003e'/foo'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch name == \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef queryName = karate.xmlPath(xml, \u003cspan class=\"pl-s\"\u003e'/query/'\u003c/span\u003e + elementName)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch queryName == \u003cspan class=\"pl-smi\"\u003e\u0026lt;name\u0026gt;\u0026lt;foo\u0026gt;\u003c/span\u003ebar\u003cspan class=\"pl-smi\"\u003e\u0026lt;/foo\u0026gt;\u0026lt;/name\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can refer to this file (which is part of the Karate test-suite) for more XML examples: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml-and-xpath.feature\"\u003e\u003ccode\u003exml-and-xpath.feature\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSpecial Variables\u003c/h1\u003e\u003ca id=\"user-content-special-variables\" class=\"anchor\" aria-label=\"Permalink: Special Variables\" href=\"#special-variables\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThese are 'built-in' variables, there are only a few and all of them give you access to the HTTP response.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-response\" class=\"anchor\" aria-label=\"Permalink: response\" href=\"#response\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAfter every HTTP call this variable is set with the response body, and is available until the next HTTP request over-writes it. You can easily assign the whole \u003ccode\u003eresponse\u003c/code\u003e (or just parts of it using Json-Path or XPath) to a variable, and use it in later steps.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe response is automatically available as a JSON, XML or String object depending on what the response contents are.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAs a short-cut, when running JsonPath expressions - \u003ccode\u003e$\u003c/code\u003e represents the \u003ccode\u003eresponse\u003c/code\u003e.  This has the advantage that you can use pure \u003ca href=\"https://github.com/jayway/JsonPath#path-examples\"\u003eJsonPath\u003c/a\u003e and be more concise.  For example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# the three lines below are equivalent\nThen match response $ == { name: 'Billie' }\nThen match response == { name: 'Billie' }\nThen match $ == { name: 'Billie' }\n\n# the three lines below are equivalent\nThen match response.name == 'Billie'\nThen match response $.name == 'Billie'\nThen match $.name == 'Billie'\n\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# the three lines below are equivalent\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response $ == { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response == { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch $ == { name: \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# the three lines below are equivalent\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response.name == \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response $.name == \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch $.name == \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd similarly for XML and XPath, '/' represents the \u003ccode\u003eresponse\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# the four lines below are equivalent\nThen match response / == \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\nThen match response/ == \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\nThen match response == \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\nThen match / == \u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;Billie\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt; \n\n# the three lines below are equivalent\nThen match response /cat/name == 'Billie'\nThen match response/cat/name == 'Billie'\nThen match /cat/name == 'Billie'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# the four lines below are equivalent\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response / == \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eBillie\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response/ == \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eBillie\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response == \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eBillie\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch / == \u003cspan class=\"pl-smi\"\u003e\u0026lt;cat\u0026gt;\u0026lt;name\u0026gt;\u003c/span\u003eBillie\u003cspan class=\"pl-smi\"\u003e\u0026lt;/name\u0026gt;\u0026lt;/cat\u0026gt;\u003c/span\u003e \n\n\u003cspan class=\"pl-c\"\u003e# the three lines below are equivalent\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response /cat/name == \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch response/cat/name == \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch /cat/name == \u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJsonPath short-cuts\u003c/h4\u003e\u003ca id=\"user-content-jsonpath-short-cuts\" class=\"anchor\" aria-label=\"Permalink: JsonPath short-cuts\" href=\"#jsonpath-short-cuts\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ca href=\"#get-short-cut\"\u003e\u003ccode\u003e$varName\u003c/code\u003e form\u003c/a\u003e is used on the right-hand-side of \u003ca href=\"#karate-expressions\"\u003eKarate expressions\u003c/a\u003e and is \u003cem\u003eslightly\u003c/em\u003e different from pure \u003ca href=\"https://github.com/json-path/JsonPath#path-examples\"\u003eJsonPath expressions\u003c/a\u003e which always begin with \u003ccode\u003e$.\u003c/code\u003e or \u003ccode\u003e$[\u003c/code\u003e. Here is a summary of what the different 'shapes' mean in Karate:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eShape\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$.bar\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePure JsonPath equivalent of \u003ccode\u003e$response.bar\u003c/code\u003e where \u003ccode\u003eresponse\u003c/code\u003e is a JSON object\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$[0]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePure JsonPath equivalent of \u003ccode\u003e$response[0]\u003c/code\u003e where \u003ccode\u003eresponse\u003c/code\u003e is a JSON array\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$foo.bar\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eEvaluates the JsonPath \u003ccode\u003e$.bar\u003c/code\u003e on the variable \u003ccode\u003efoo\u003c/code\u003e which is a JSON object or map-like\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e$foo[0]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eEvaluates the JsonPath \u003ccode\u003e$[0]\u003c/code\u003e on the variable \u003ccode\u003efoo\u003c/code\u003e which is a JSON array or list-like\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThere is no need to prefix variable names with \u003ccode\u003e$\u003c/code\u003e on the left-hand-side of \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e statements because it is implied. You \u003cem\u003ecan\u003c/em\u003e if you want to, but since \u003ca href=\"#match-and-variables\"\u003e\u003cem\u003eonly\u003c/em\u003e JsonPath (on variables)\u003c/a\u003e is allowed here, Karate ignores the \u003ccode\u003e$\u003c/code\u003e and looks only at the variable name. None of the examples in the documentation use the \u003ccode\u003e$varName\u003c/code\u003e form on the LHS, and this is the recommended best-practice.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eresponseBytes\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-responsebytes\" class=\"anchor\" aria-label=\"Permalink: responseBytes\" href=\"#responsebytes\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis will always hold the contents of the response as a byte-array. This is rarely used, unless you are expecting binary content returned by the server. The \u003ccode\u003ematch\u003c/code\u003e keyword will \u003ca href=\"#match-text-or-binary\"\u003ework as you expect\u003c/a\u003e. Here is an example: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/mock/binary.feature\"\u003e\u003ccode\u003ebinary.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eresponseCookies\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-responsecookies\" class=\"anchor\" aria-label=\"Permalink: responseCookies\" href=\"#responsecookies\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ccode\u003eresponseCookies\u003c/code\u003e variable is set upon any HTTP response and is a map-like (or JSON-like) object. It can be easily inspected or used in expressions.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* assert responseCookies['my.key'].value == 'someValue'\n\n# karate's unified data handling means that even 'match' works\n* match responseCookies contains { time: '#notnull' }\n\n# ... which means that checking if a cookie does NOT exist is a piece of cake\n* match responseCookies !contains { blah: '#notnull' }\n\n# save a response cookie for later use\n* def time = responseCookies.time.value\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert responseCookies[\u003cspan class=\"pl-s\"\u003e'my.key'\u003c/span\u003e].value == \u003cspan class=\"pl-s\"\u003e'someValue'\u003c/span\u003e\n\n\u003cspan class=\"pl-c\"\u003e# karate's unified data handling means that even 'match' works\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch responseCookies contains { time: \u003cspan class=\"pl-s\"\u003e'#notnull'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# ... which means that checking if a cookie does NOT exist is a piece of cake\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch responseCookies !contains { blah: \u003cspan class=\"pl-s\"\u003e'#notnull'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# save a response cookie for later use\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef time = responseCookies.time.value\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAs a convenience, cookies from the previous response are collected and passed as-is as part of the next HTTP request. This is what is normally expected and simulates a web-browser - which makes it easy to script things like HTML-form based authentication into test-flows. Refer to the documentation for \u003ca href=\"#cookie\"\u003e\u003ccode\u003ecookie\u003c/code\u003e\u003c/a\u003e for details and how you can disable this if need be.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eEach item within \u003ccode\u003eresponseCookies\u003c/code\u003e is itself a 'map-like' object. Typically you would examine the \u003ccode\u003evalue\u003c/code\u003e property as in the example above, but \u003ccode\u003edomain\u003c/code\u003e and \u003ccode\u003epath\u003c/code\u003e are also available.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eresponseHeaders\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-responseheaders\" class=\"anchor\" aria-label=\"Permalink: responseHeaders\" href=\"#responseheaders\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSee also \u003ca href=\"#match-header\"\u003e\u003ccode\u003ematch header\u003c/code\u003e\u003c/a\u003e which is what you would normally need.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBut if you need to use values in the response headers - they will be in a variable named \u003ccode\u003eresponseHeaders\u003c/code\u003e. Note that it is a 'map of lists' so you will need to do things like this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def contentType = responseHeaders['Content-Type'][0]\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef contentType = responseHeaders[\u003cspan class=\"pl-s\"\u003e'Content-Type'\u003c/span\u003e][0]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd just as in the \u003ca href=\"#responsecookies\"\u003e\u003ccode\u003eresponseCookies\u003c/code\u003e\u003c/a\u003e example above, you can use \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e to run complex validations on the \u003ccode\u003eresponseHeaders\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFinally, using \u003ca href=\"#karate-response\"\u003e\u003ccode\u003ekarate.response.header(name)\u003c/code\u003e\u003c/a\u003e can be simpler to just get a header value string by name, and it will ignore-case for the name passed as the argument:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* match karate.response.header('content-type') == 'application/json'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch karate.response.header(\u003cspan class=\"pl-s\"\u003e'content-type'\u003c/span\u003e) == \u003cspan class=\"pl-s\"\u003e'application/json'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eresponseStatus\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-responsestatus\" class=\"anchor\" aria-label=\"Permalink: responseStatus\" href=\"#responsestatus\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou would normally only need to use the \u003ca href=\"#status\"\u003e\u003ccode\u003estatus\u003c/code\u003e\u003c/a\u003e keyword.  But if you really need to use the HTTP response code in an expression or save it for later, you can get it as an integer:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def uploadStatusCode = responseStatus\n\n# check if the response status is either of two values\nThen assert responseStatus == 200 || responseStatus == 204\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef uploadStatusCode = responseStatus\n\n\u003cspan class=\"pl-c\"\u003e# check if the response status is either of two values\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003eassert responseStatus == 200 || responseStatus == 204\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e can give you some extra readable options:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* match [200, 201, 204] contains responseStatus\n\n# this may be sufficient to check a range of values\n* assert responseStatus \u0026gt;= 200\n* assert responseStatus \u0026lt; 300\n\n# but using karate.range() you can even do this !\n* match karate.range(200, 299) contains responseStatus\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch [200, 201, 204] contains responseStatus\n\n\u003cspan class=\"pl-c\"\u003e# this may be sufficient to check a range of values\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert responseStatus \u0026gt;= 200\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert responseStatus \u003cspan class=\"pl-smi\"\u003e\u0026lt; 300\u003c/span\u003e\n\u003cspan class=\"pl-smi\"\u003e\u003c/span\u003e\n\u003cspan class=\"pl-smi\"\u003e# but using karate.range() you can even do this !\u003c/span\u003e\n\u003cspan class=\"pl-smi\"\u003e* match karate.range(200, 299) contains responseStatus\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eresponseTime\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-responsetime\" class=\"anchor\" aria-label=\"Permalink: responseTime\" href=\"#responsetime\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe response time (in milliseconds) for the current \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e would be available in a variable called \u003ccode\u003eresponseTime\u003c/code\u003e. You can use this to assert that it was returned within the expected time like so:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"When method post\nThen status 201\nAnd assert responseTime \u0026lt; 1000\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 201\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eassert responseTime \u003cspan class=\"pl-smi\"\u003e\u0026lt; 1000\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eresponseType\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-responsetype\" class=\"anchor\" aria-label=\"Permalink: responseType\" href=\"#responsetype\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate will attempt to parse the raw HTTP response body as JSON or XML and make it available as the \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e value. If parsing fails, Karate will log a warning and the value of \u003ccode\u003eresponse\u003c/code\u003e will then be a plain string. You can still perform string comparisons such as a \u003ca href=\"#match-text-or-binary\"\u003e\u003ccode\u003ematch contains\u003c/code\u003e\u003c/a\u003e and look for error messages etc. In rare cases, you may want to check what the \"type\" of the \u003ccode\u003eresponse\u003c/code\u003e is and it can be one of 3 different values: \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003exml\u003c/code\u003e and \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSo if you really wanted to assert that the HTTP response body is well-formed JSON or XML you can do this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"When method post\nThen status 201\nAnd match responseType == 'json'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n\u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 201\n\u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch responseType == \u003cspan class=\"pl-s\"\u003e'json'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003erequestTimeStamp\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-requesttimestamp\" class=\"anchor\" aria-label=\"Permalink: requestTimeStamp\" href=\"#requesttimestamp\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eVery rarely used - but you can get the Java system-time (for the current \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e) at the point when the HTTP request was initiated (the value of \u003ccode\u003eSystem.currentTimeMillis()\u003c/code\u003e) which can be used for detailed logging or custom framework / stats calculations.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eHTTP Header Manipulation\u003c/h1\u003e\u003ca id=\"user-content-http-header-manipulation\" class=\"anchor\" aria-label=\"Permalink: HTTP Header Manipulation\" href=\"#http-header-manipulation\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003econfigure headers\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-configure-headers\" class=\"anchor\" aria-label=\"Permalink: configure headers\" href=\"#configure-headers\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eCustom header manipulation for every HTTP request is something that Karate makes very easy and pluggable. For every HTTP request made from Karate, the internal flow is as follows:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003edid we \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e the value of \u003ccode\u003eheaders\u003c/code\u003e ?\u003c/li\u003e\n\u003cli\u003eif so, is the configured value a JavaScript function ?\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eif so, a \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e is made to that function.\u003c/li\u003e\n\u003cli\u003edid the function invocation return a map-like (or JSON) object ?\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eall the key-value pairs are added to the HTTP headers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eor is the configured value a JSON object ?\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eall the key-value pairs are added to the HTTP headers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eThis makes setting up of complex authentication schemes for your test-flows really easy. It typically ends up being a one-liner that appears in the \u003ccode\u003eBackground\u003c/code\u003e section at the start of your test-scripts.  You can re-use the function you create across your whole project.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere is an example JavaScript function that uses some variables in the context (which have been possibly set as the result of a sign-in) to build the \u003ccode\u003eAuthorization\u003c/code\u003e header. Note how even \u003ca href=\"#calling-java\"\u003ecalls to Java code\u003c/a\u003e can be made if needed.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eIn the example below, note the use of the \u003ca href=\"#karate-get\"\u003e\u003ccode\u003ekarate.get()\u003c/code\u003e\u003c/a\u003e helper for getting the value of a dynamic variable (which was \u003cem\u003enot set\u003c/em\u003e at the time this JS \u003ccode\u003efunction\u003c/code\u003e was \u003cem\u003edeclared\u003c/em\u003e). This is preferred because it takes care of situations such as if the value is \u003ccode\u003eundefined\u003c/code\u003e in JavaScript. In rare cases you may need to \u003cem\u003eset\u003c/em\u003e a variable from this routine, and a good example is to make the generated UUID \"visible\" to the currently executing script or feature. You can easily do this via \u003ca href=\"#karate-set\"\u003e\u003ccode\u003ekarate.set('someVarName', value)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function fn() {\n  var uuid = '' + java.util.UUID.randomUUID(); // convert to string\n  var out = { // so now the txid_header would be a unique uuid for each request\n    txid_header: uuid,\n    ip_header: '123.45.67.89', // hard coded here, but also can be as dynamic as you want   \n  };\n  var authString = '';\n  var authToken = karate.get('authToken'); // use the 'karate' helper to do a 'safe' get of a 'dynamic' variable\n  if (authToken) { // and if 'authToken' is not null ... \n    authString = ',auth_type=MyAuthScheme'\n        + ',auth_key=' + authToken.key\n        + ',auth_user=' + authToken.userId\n        + ',auth_project=' + authToken.projectId;\n  }\n  // the 'appId' variable here is expected to have been set via karate-config.js (bootstrap init) and will never change\n  out['Authorization'] = 'My_Auth app_id=' + appId + authString;\n  return out;\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003efn\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003euuid\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e''\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ejava\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eutil\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eUUID\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003erandomUUID\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e \u003cspan class=\"pl-c\"\u003e// convert to string\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eout\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c\"\u003e// so now the txid_header would be a unique uuid for each request\u003c/span\u003e\n    \u003cspan class=\"pl-c1\"\u003etxid_header\u003c/span\u003e: \u003cspan class=\"pl-s1\"\u003euuid\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"pl-c1\"\u003eip_header\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'123.45.67.89'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c\"\u003e// hard coded here, but also can be as dynamic as you want   \u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eauthString\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e''\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eauthToken\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003eget\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'authToken'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e \u003cspan class=\"pl-c\"\u003e// use the 'karate' helper to do a 'safe' get of a 'dynamic' variable\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s1\"\u003eauthToken\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c\"\u003e// and if 'authToken' is not null ... \u003c/span\u003e\n    \u003cspan class=\"pl-s1\"\u003eauthString\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e',auth_type=MyAuthScheme'\u003c/span\u003e\n        \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e',auth_key='\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eauthToken\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003ekey\u003c/span\u003e\n        \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e',auth_user='\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eauthToken\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003euserId\u003c/span\u003e\n        \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e',auth_project='\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eauthToken\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eprojectId\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"pl-c\"\u003e// the 'appId' variable here is expected to have been set via karate-config.js (bootstrap init) and will never change\u003c/span\u003e\n  \u003cspan class=\"pl-s1\"\u003eout\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e[\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'Authorization'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e]\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'My_Auth app_id='\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eappId\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eauthString\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eout\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAssuming the above code is in a file called \u003ccode\u003emy-headers.js\u003c/code\u003e, the next section on \u003ca href=\"#calling-other-feature-files\"\u003ecalling other feature files\u003c/a\u003e shows how it looks like in action at the beginning of a test script.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNotice how once the \u003ccode\u003eauthToken\u003c/code\u003e variable is initialized, it is used by the above function to generate headers for every HTTP call made as part of the test flow.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf a few steps in your flow need to temporarily change (or completely bypass) the currently-set header-manipulation scheme, just update \u003ccode\u003econfigure headers\u003c/code\u003e to a new value (or set it to \u003ccode\u003enull\u003c/code\u003e) in the middle of a script. Then use the \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e keyword to do a custom 'over-ride' if needed.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003ekarate-demo\u003c/a\u003e has an example showing various ways to \u003ccode\u003econfigure\u003c/code\u003e or set headers: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/headers.feature\"\u003e\u003ccode\u003eheaders.feature\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eThe \u003ccode\u003ekarate\u003c/code\u003e object\u003c/h1\u003e\u003ca id=\"user-content-the-karate-object\" class=\"anchor\" aria-label=\"Permalink: The karate object\" href=\"#the-karate-object\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA JavaScript function or \u003ca href=\"#karate-expressions\"\u003eKarate expression\u003c/a\u003e at runtime has access to a utility object in a variable named: \u003ccode\u003ekarate\u003c/code\u003e.  This provides the following methods:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eOperation\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-abort\"\u003e\u003ccode\u003ekarate.abort()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eyou can prematurely exit a \u003ccode\u003eScenario\u003c/code\u003e by combining this with \u003ca href=\"#conditional-logic\"\u003econditional logic\u003c/a\u003e like so: \u003ccode\u003e* if (condition) karate.abort()\u003c/code\u003e - please use \u003ca href=\"https://martinfowler.com/articles/nonDeterminism.html\" rel=\"nofollow\"\u003esparingly\u003c/a\u003e ! and also see \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure abortedStepsShouldPass\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-append\"\u003e\u003ccode\u003ekarate.append(... items)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003euseful to create lists out of items (which can be lists as well), see \u003ca href=\"#json-transforms\"\u003eJSON transforms\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-appendto\"\u003e\u003ccode\u003ekarate.appendTo(name, ... items)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003euseful to append to a list-like variable (that has to exist) in scope, see \u003ca href=\"#json-transforms\"\u003eJSON transforms\u003c/a\u003e - the first argument can be a reference to an array-like variable or even the name (string) of an existing variable which is list-like\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-compareimage\"\u003e\u003ccode\u003ekarate.compareImage(baseline, latest, [options])\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ecompare two images the same way that \u003ca href=\"#compare-image\"\u003e\u003ccode\u003ecompareImage\u003c/code\u003e\u003c/a\u003e works (with an optional \u003ccode\u003eoptions\u003c/code\u003e argument), returns an object with the following keys: \u003ccode\u003ebaseline\u003c/code\u003e, \u003ccode\u003elatest\u003c/code\u003e, \u003ccode\u003emismatchPercentage\u003c/code\u003e, \u003ccode\u003eengine\u003c/code\u003e, \u003ccode\u003efailureThreshold\u003c/code\u003e and optionally: \u003ccode\u003eerror\u003c/code\u003e, \u003ccode\u003eisBaselineMissing\u003c/code\u003e, \u003ccode\u003eisScaleMismatch\u003c/code\u003e, \u003ccode\u003eisMismatch\u003c/code\u003e, \u003ccode\u003eresembleMismatchPercentage\u003c/code\u003e, \u003ccode\u003essimMismatchPercentage\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-call\"\u003e\u003ccode\u003ekarate.call(fileName, [arg])\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003einvoke a \u003ca href=\"#calling-other-feature-files\"\u003e\u003ccode\u003e*.feature\u003c/code\u003e file\u003c/a\u003e or a \u003ca href=\"#calling-javascript-functions\"\u003eJavaScript function\u003c/a\u003e the same way that \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e works (with an optional solitary argument), see \u003ca href=\"#call-vs-read\"\u003e\u003ccode\u003ecall()\u003c/code\u003e vs \u003ccode\u003eread()\u003c/code\u003e\u003c/a\u003e for details\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-callsingle\"\u003e\u003ccode\u003ekarate.callSingle(fileName, [arg])\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003elike the above, but guaranteed to run \u003cstrong\u003eonly once\u003c/strong\u003e even across multiple features - see \u003ca href=\"#karatecallsingle\"\u003e\u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-configure\"\u003e\u003ccode\u003ekarate.configure(key, value)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003edoes the same thing as the \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e keyword, and a very useful example is to do \u003ccode\u003ekarate.configure('connectTimeout', 5000);\u003c/code\u003e in \u003ca href=\"#configuration\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e - which has the 'global' effect of not wasting time if a connection cannot be established within 5 seconds\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-distinct\"\u003e\u003ccode\u003ekarate.distinct(list)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns only unique items out of an array of strings or numbers\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-doc\"\u003e\u003ccode\u003ekarate.doc(arg)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ejust like \u003ca href=\"#karate-render\"\u003e\u003ccode\u003ekarate.render()\u003c/code\u003e\u003c/a\u003e but will insert the HTML into the report\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-embed\"\u003e\u003ccode\u003ekarate.embed(object, mimeType)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eembeds the object (can be raw bytes or an image) into the JSON report output, see this \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/embed/embed.feature\"\u003eexample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-env\"\u003e\u003ccode\u003ekarate.env\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003egets the value (read-only) of the environment property 'karate.env', and this is typically used for bootstrapping \u003ca href=\"#configuration\"\u003econfiguration\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-eval\"\u003e\u003ccode\u003ekarate.eval(expression)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003efor really advanced needs, you can programmatically generate a snippet of JavaScript which can be evaluated at run-time, you can find an example \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature\"\u003ehere\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-exec\"\u003e\u003ccode\u003ekarate.exec(command)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003econvenient way to execute an OS specific command and return the console output e.g. \u003ccode\u003ekarate.exec('some.exe -h')\u003c/code\u003e (or \u003ccode\u003ekarate.exec(['some.exe', '-h'])\u003c/code\u003e) useful for calling non-Java code (that can even return data) or for starting user-interfaces to be automated, this command will block until the process terminates, also see \u003ca href=\"#karate-fork\"\u003e\u003ccode\u003ekarate.fork()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-extract\"\u003e\u003ccode\u003ekarate.extract(text, regex, group)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003euseful to \"scrape\" text out of non-JSON or non-XML text sources such as HTML, \u003ccode\u003egroup\u003c/code\u003e follows the Java \u003ca href=\"https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html\" rel=\"nofollow\"\u003eregex rules\u003c/a\u003e, see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/extract.feature\"\u003ethis example\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-extractall\"\u003e\u003ccode\u003ekarate.extractAll(text, regex, group)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003elike the above, but returns a list of text-matches\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-fail\"\u003e\u003ccode\u003ekarate.fail(message)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eif you want to conditionally stop a test with a descriptive error message, e.g. \u003ccode\u003e* if (condition) karate.fail('we expected something else')\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-feature\"\u003e\u003ccode\u003ekarate.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eget metadata about the currently executing feature within a test\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-filter\"\u003e\u003ccode\u003ekarate.filter(list, predicate)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003efunctional-style 'filter' operation useful to filter list-like objects (e.g. JSON arrays), see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature\"\u003eexample\u003c/a\u003e, the second argument has to be a JS function (item, [index]) that returns a \u003ccode\u003eboolean\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-filterkeys\"\u003e\u003ccode\u003ekarate.filterKeys(map, keys)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eextracts a sub-set of key-value pairs from the first argument, the second argument can be a list (or varargs) of keys - or even another JSON where only the keys would be used for extraction, \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature\"\u003eexample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ekarate.forEach(list, function)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003efunctional-style 'loop' operation useful to traverse list-like (or even map-like) objects (e.g. JSON / arrays), see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature\"\u003eexample\u003c/a\u003e, the second argument has to be a JS function (item, [index]) for lists and (key, [value], [index]) for JSON / maps\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-fork\"\u003e\u003ccode\u003ekarate.fork(map)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eexecutes an OS command, but forks a process in parallel and will not block the test like \u003ca href=\"#karate-exec\"\u003e\u003ccode\u003ekarate.exec()\u003c/code\u003e\u003c/a\u003e e.g. \u003ccode\u003ekarate.fork({ args: ['some.exe', '-h'] })\u003c/code\u003e or \u003ccode\u003ekarate.fork(['some.exe', '-h'])\u003c/code\u003e - you can use a composite string as \u003ccode\u003eline\u003c/code\u003e (or the solitary argument e.g. \u003ccode\u003ekarate.fork('some.exe -h')\u003c/code\u003e) instead of \u003ccode\u003eargs\u003c/code\u003e, and an optional \u003ccode\u003eworkingDir\u003c/code\u003e string property and \u003ccode\u003eenv\u003c/code\u003e JSON / map is also supported - this returns a \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/shell/Command.java\"\u003e\u003ccode\u003eCommand\u003c/code\u003e\u003c/a\u003e object which has operations such as \u003ccode\u003ewaitSync()\u003c/code\u003e and \u003ccode\u003eclose()\u003c/code\u003e if you need more control, more details \u003ca href=\"https://stackoverflow.com/a/62911366/143475\" rel=\"nofollow\"\u003ehere\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-fromstring\"\u003e\u003ccode\u003ekarate.fromString(string)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003efor advanced conditional logic for e.g. when a string coming from an external process is dynamic - and whether it is JSON or XML is not known in advance, see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature\"\u003eexample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-get\"\u003e\u003ccode\u003ekarate.get(name, [default])\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eget the value of a variable by name (or JsonPath expression), if not found - this returns \u003ccode\u003enull\u003c/code\u003e which is easier to handle in JavaScript (than \u003ccode\u003eundefined\u003c/code\u003e), and an optional (literal / constant) second argument can be used to return a \"default\" value, very useful to set variables in called features that have not been pre-defined\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-http\"\u003e\u003ccode\u003ekarate.http(url)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns a convenience \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/Http.java\"\u003e\u003ccode\u003eHttp\u003c/code\u003e\u003c/a\u003e request builder class, only recommended for \u003ca href=\"https://github.com/karatelabs/karate/tree/develop/examples/ui-test#webdriver-tips\"\u003eadvanced use\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-jsonpath\"\u003e\u003ccode\u003ekarate.jsonPath(json, expression)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ebrings the power of \u003ca href=\"https://github.com/json-path/JsonPath\"\u003eJsonPath\u003c/a\u003e into JavaScript, and you can find an example \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature\"\u003ehere\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-keysof\"\u003e\u003ccode\u003ekarate.keysOf(object)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns only the keys of a map-like object\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-log\"\u003e\u003ccode\u003ekarate.log(... args)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003elog to the same logger (and log file) being used by the parent process, logging can be suppressed with \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure printEnabled\u003c/code\u003e\u003c/a\u003e set to \u003ccode\u003efalse\u003c/code\u003e, and just like \u003ca href=\"#print\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e - use comma-separated values to \"pretty print\" JSON or XML\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-logger-debug\"\u003e\u003ccode\u003ekarate.logger.debug(... args)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eaccess to the Karate logger directly and log in debug. Might be desirable instead of \u003ccode\u003ekarate.log\u003c/code\u003e or \u003ccode\u003eprint\u003c/code\u003e when looking to reduce the logs in console in your CI/CD pipeline but still retain the information for reports. See \u003ca href=\"#logging\"\u003eLogging\u003c/a\u003e for additional details.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-lowercase\"\u003e\u003ccode\u003ekarate.lowerCase(object)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003euseful to brute-force all keys and values in a JSON or XML payload to lower-case, useful in some cases, see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/lower-case.feature\"\u003eexample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-map\"\u003e\u003ccode\u003ekarate.map(list, function)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003efunctional-style 'map' operation useful to transform list-like objects (e.g. JSON arrays), see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature\"\u003eexample\u003c/a\u003e, the second argument has to be a JS function (item, [index])\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-mapwithkey\"\u003e\u003ccode\u003ekarate.mapWithKey(list, string)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003econvenient for the common case of transforming an array of primitives into an array of objects, see \u003ca href=\"#json-transforms\"\u003eJSON transforms\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-match\"\u003e\u003ccode\u003ekarate.match(actual, expected)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ebrings the power of the \u003cem\u003efuzzy\u003c/em\u003e \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e syntax into Karate-JS, returns a JSON in the form \u003ccode\u003e{ pass: '#boolean', message: '#string' }\u003c/code\u003e and you can find an example \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature\"\u003ehere\u003c/a\u003e - you can even place a \u003cem\u003efull\u003c/em\u003e match expression like this: \u003ccode\u003ekarate.match(\"each foo contains { a: '#number' }\")\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-merge\"\u003e\u003ccode\u003ekarate.merge(... maps)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003euseful to merge the key-values of two (or more) JSON (or map-like) objects, see \u003ca href=\"#json-transforms\"\u003eJSON transforms\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-os\"\u003e\u003ccode\u003ekarate.os\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns the operating system details as JSON, for e.g. \u003ccode\u003e{ type: 'macosx', name: 'Mac OS X' }\u003c/code\u003e - useful for writing conditional logic, the possible \u003ccode\u003etype\u003c/code\u003e-s being: \u003ccode\u003emacosx\u003c/code\u003e, \u003ccode\u003ewindows\u003c/code\u003e, \u003ccode\u003elinux\u003c/code\u003e and \u003ccode\u003eunknown\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-pause\"\u003e\u003ccode\u003ekarate.pause(number)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003esleep time in milliseconds, relevant only for \u003ca href=\"/karatelabs/karate/blob/master/karate-gatling#think-time\"\u003eperformance-testing\u003c/a\u003e - and will be a no-op otherwise unless \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure pauseIfNotPerf\u003c/code\u003e\u003c/a\u003e is \u003ccode\u003etrue\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-pretty\"\u003e\u003ccode\u003ekarate.pretty(value)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturn a 'pretty-printed', nicely indented string representation of the JSON value, also see: \u003ca href=\"#print\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-prettyxml\"\u003e\u003ccode\u003ekarate.prettyXml(value)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturn a 'pretty-printed', nicely indented string representation of the XML value, also see: \u003ca href=\"#print\"\u003e\u003ccode\u003eprint\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-prevrequest\"\u003e\u003ccode\u003ekarate.prevRequest\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003efor advanced users, you can inspect the \u003cem\u003eactual\u003c/em\u003e HTTP request after it happens, useful if you are writing a framework over Karate, refer to this example: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/request/request.feature\"\u003e\u003ccode\u003erequest.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-properties\"\u003e\u003ccode\u003ekarate.properties[key]\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eget the value of any Java system-property by name, useful for \u003ca href=\"#dynamic-port-numbers\"\u003eadvanced custom configuration\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-range\"\u003e\u003ccode\u003ekarate.range(start, end, [interval])\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns a JSON array of integers (inclusive), the optional third argument must be a positive integer and defaults to 1, and if start \u0026lt; end the order of values is reversed\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-read\"\u003e\u003ccode\u003ekarate.read(filename)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ethe same \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread()\u003c/code\u003e\u003c/a\u003e function - which is pre-defined even within JS blocks, so there is no need to ever do \u003ccode\u003ekarate.read()\u003c/code\u003e, and just \u003ccode\u003eread()\u003c/code\u003e is sufficient\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-readasbytes\"\u003e\u003ccode\u003ekarate.readAsBytes(filename)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003erarely used, like \u003ca href=\"#karate-readasstring\"\u003e\u003ccode\u003ekarate.readAsString\u003c/code\u003e\u003c/a\u003e - but returns a byte array\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-readasstream\"\u003e\u003ccode\u003ekarate.readAsStream(filename)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003erarely used, like \u003ca href=\"#karate-readasstring\"\u003e\u003ccode\u003ekarate.readAsString\u003c/code\u003e\u003c/a\u003e - but returns a Java \u003ccode\u003eInputStream\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-readasstring\"\u003e\u003ccode\u003ekarate.readAsString(filename)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#read-file-as-string\"\u003erarely used\u003c/a\u003e, behaves exactly like \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/a\u003e - but does \u003cem\u003enot\u003c/em\u003e auto convert to JSON or XML\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-remove\"\u003e\u003ccode\u003ekarate.remove(name, path)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003every rarely used - when needing to perform conditional removal of JSON keys or XML nodes. Behaves the same way as the \u003ca href=\"#remove\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e keyword.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-render\"\u003e\u003ccode\u003ekarate.render(arg)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003erenders an HTML template, the \u003ccode\u003earg\u003c/code\u003e can be a string (prefixable path to the HTML) or a JSON that takes either a \u003ccode\u003epath\u003c/code\u003e or \u003ccode\u003ehtml\u003c/code\u003e property, see \u003ca href=\"#doc\"\u003e\u003ccode\u003edoc\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-repeat\"\u003e\u003ccode\u003ekarate.repeat(count, function)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003euseful for building an array with \u003ccode\u003ecount\u003c/code\u003e items or doing something \u003ccode\u003ecount\u003c/code\u003e times, see \u003ca href=\"#loops\"\u003eloops\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-response\"\u003e\u003ccode\u003ekarate.response\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns the last HTTP response as a JS object that enables advanced use-cases such as getting a header ignoring case: \u003ccode\u003ekarate.response.header('some-header')\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-request\"\u003e\u003ccode\u003ekarate.request\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns the last HTTP request as a JS object that enables advanced use-cases such as getting a header ignoring case: \u003ccode\u003ekarate.request.header('some-header')\u003c/code\u003e, which works \u003ca href=\"https://github.com/karatelabs/karate/tree/master/karate-netty#requestheaders\"\u003eeven in mocks\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-scenario\"\u003e\u003ccode\u003ekarate.scenario\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eget metadata about the currently executing \u003ccode\u003eScenario\u003c/code\u003e (or \u003ccode\u003eOutline\u003c/code\u003e - \u003ccode\u003eExample\u003c/code\u003e) within a test\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-set\"\u003e\u003ccode\u003ekarate.set(name, value)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003esets the value of a variable (immediately), which may be needed in case any other routines (such as the \u003ca href=\"#configure-headers\"\u003econfigured headers\u003c/a\u003e) depend on that variable\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-setall\"\u003e\u003ccode\u003ekarate.set(object)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ewhere the single argument is expected to be a \u003ccode\u003eMap\u003c/code\u003e or JSON-like, and will perform the above \u003ccode\u003ekarate.set()\u003c/code\u003e operation for all key-value pairs in one-shot\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-setpath\"\u003e\u003ccode\u003ekarate.set(name, path, value)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eonly needed when you need to conditionally build payload elements, especially XML. This is best explained via \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature#L211\"\u003ean example\u003c/a\u003e, and it behaves the same way as the \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e keyword. Also see \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-setxml\"\u003e\u003ccode\u003ekarate.setXml(name, xmlString)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003erarely used, refer to the example above\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-setup\"\u003e\u003ccode\u003ekarate.setup([name])\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ecall a \u003ccode\u003eScenario\u003c/code\u003e tagged with the built-in \u003ca href=\"#setup\"\u003e\u003ccode\u003e@setup\u003c/code\u003e\u003c/a\u003e annotation\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-setuponce\"\u003e\u003ccode\u003ekarate.setupOnce([name])\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003elike \u003ca href=\"#karate-setup\"\u003e\u003ccode\u003ekarate.setup()\u003c/code\u003e\u003c/a\u003e above, but cache the result so that the \"setup\" runs only once\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-signal\"\u003e\u003ccode\u003ekarate.signal(result)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003etrigger an event that \u003ca href=\"#karate-listen\"\u003e\u003ccode\u003ekarate.listen(timeout)\u003c/code\u003e\u003c/a\u003e is waiting for, and pass the data, see \u003ca href=\"#async\"\u003easync\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-sizeof\"\u003e\u003ccode\u003ekarate.sizeOf(object)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns the size of the map-like or list-like object\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-sort\"\u003e\u003ccode\u003ekarate.sort(list, function)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003esorts the list using the provided custom function called for each item in the list (and the optional second argument is the item index) e.g. \u003ccode\u003ekarate.sort(myList, x =\u0026gt; x.val)\u003c/code\u003e, and the second / function argument is not needed if the list is of plain strings or numbers\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-start\"\u003e\u003ccode\u003ekarate.start()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eonly for starting a mock from \u003ca href=\"/karatelabs/karate/blob/master/karate-netty#within-a-karate-test\"\u003ewithin a test / feature file see mocks\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-stop\"\u003e\u003ccode\u003ekarate.stop(port)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ewill pause the test execution until a socket connection (even HTTP \u003ccode\u003eGET\u003c/code\u003e) is made to the port logged to the console, useful for troubleshooting UI tests without using a \u003ca href=\"https://twitter.com/KarateDSL/status/1167533484560142336\" rel=\"nofollow\"\u003ede-bugger\u003c/a\u003e, of course - \u003cem\u003eNEVER\u003c/em\u003e forget to remove this after use !\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-target\"\u003e\u003ccode\u003ekarate.target(object)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ecurrently for web-ui automation only, see \u003ca href=\"/karatelabs/karate/blob/master/karate-core#target-lifecycle\"\u003etarget lifecycle\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-tags\"\u003e\u003ccode\u003ekarate.tags\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003efor advanced users - scripts can introspect the tags that apply to the current scope, refer to this example: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/tags.feature\"\u003e\u003ccode\u003etags.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-tagvalues\"\u003e\u003ccode\u003ekarate.tagValues\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003efor even more advanced users - Karate natively supports tags in a \u003ccode\u003e@name=val1,val2\u003c/code\u003e format, and there is an inheritance mechanism where \u003ccode\u003eScenario\u003c/code\u003e level tags can over-ride \u003ccode\u003eFeature\u003c/code\u003e level tags, refer to this example: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/tags.feature\"\u003e\u003ccode\u003etags.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-toabsolutepath\"\u003e\u003ccode\u003ekarate.toAbsolutePath(relativePath)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ewhen you want to get the absolute OS path to the argument which could even have a prefix such as \u003ccode\u003eclasspath:\u003c/code\u003e, e.g. \u003ccode\u003ekarate.toAbsolutePath('some.json')\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-tobean\"\u003e\u003ccode\u003ekarate.toBean(json, className)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003econverts a JSON string or map-like object into a Java object, given the Java class name as the second argument, refer to this \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature\"\u003efile\u003c/a\u003e for an example\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-tocsv\"\u003e\u003ccode\u003ekarate.toCsv(list)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003econverts a JSON array (of objects) or a list-like object into a CSV string, writing this to a file is your responsibility or you could use \u003ca href=\"#karate-write\"\u003e\u003ccode\u003ekarate.write()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-tojava\"\u003e\u003ccode\u003ekarate.toJava(function)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003erarely used, when you need to pass a JS function to custom Java code, typically for \u003ca href=\"#async\"\u003eAsync\u003c/a\u003e, and another edge case is to convert a JSON array or object to a Java \u003ccode\u003eList\u003c/code\u003e or \u003ccode\u003eMap\u003c/code\u003e, see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/to-bean.feature\"\u003eexample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-tojavafile\"\u003e\u003ccode\u003ekarate.toJavaFile(path)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ein case you need a \u003ccode\u003ejava.io.File\u003c/code\u003e instance to pass to Java interop, takes the \u003ca href=\"#reading-files\"\u003eKarate prefixes\u003c/a\u003e such as \u003ccode\u003eclasspath:\u003c/code\u003e for convenience\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-tojson\"\u003e\u003ccode\u003ekarate.toJson(object)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003econverts a Java object into JSON, and \u003ccode\u003ekarate.toJson(object, true)\u003c/code\u003e will strip all keys that have \u003ccode\u003enull\u003c/code\u003e values from the resulting JSON, convenient for unit-testing Java code, see \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/unit/cat.feature\"\u003eexample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-typeof\"\u003e\u003ccode\u003ekarate.typeOf(any)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003efor advanced conditional logic when object types are dynamic and not known in advance, see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature\"\u003eexample\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-urldecode\"\u003e\u003ccode\u003ekarate.urlDecode(string)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eURL decode\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-urlencode\"\u003e\u003ccode\u003ekarate.urlEncode(string)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eURL encode\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-valuesof\"\u003e\u003ccode\u003ekarate.valuesOf(object)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ereturns only the values of a map-like object (or itself if a list-like object)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-waitforhttp\"\u003e\u003ccode\u003ekarate.waitForHttp(url)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ewill wait until the URL is ready to accept HTTP connections\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-waitforport\"\u003e\u003ccode\u003ekarate.waitForPort(host, port)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003ewill wait until the host:port is ready to accept socket connections\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-websocket\"\u003e\u003ccode\u003ekarate.webSocket(url, handler)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003esee \u003ca href=\"#websocket\"\u003ewebsocket\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-write\"\u003e\u003ccode\u003ekarate.write(object, path)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003enormally not recommended, please \u003ca href=\"https://stackoverflow.com/a/54593057/143475\" rel=\"nofollow\"\u003eread this first\u003c/a\u003e\u003c/em\u003e - writes the bytes of \u003ccode\u003eobject\u003c/code\u003e to a path which will \u003cem\u003ealways\u003c/em\u003e be relative to the \"build\" directory (typically \u003ccode\u003etarget\u003c/code\u003e), see this example: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/embed/embed-pdf.js\"\u003e\u003ccode\u003eembed-pdf.js\u003c/code\u003e\u003c/a\u003e - and this method returns a \u003ccode\u003ejava.io.File\u003c/code\u003e reference to the file created / written to\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca name=\"user-content-karate-xmlpath\"\u003e\u003ccode\u003ekarate.xmlPath(xml, expression)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eJust like \u003ca href=\"#karate-jsonpath\"\u003e\u003ccode\u003ekarate.jsonPath()\u003c/code\u003e\u003c/a\u003e - but for XML, and allows you to use dynamic XPath if needed, see \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature\"\u003eexample\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCode Reuse / Common Routines\u003c/h1\u003e\u003ca id=\"user-content-code-reuse--common-routines\" class=\"anchor\" aria-label=\"Permalink: Code Reuse / Common Routines\" href=\"#code-reuse--common-routines\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-call\" class=\"anchor\" aria-label=\"Permalink: call\" href=\"#call\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn any complex testing endeavor, you would find yourself needing 'common' code that needs to be re-used across multiple test scripts. A typical need would be to perform a 'sign in', or create a fresh user as a pre-requisite for the scenarios being tested.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThere are two types of code that can be \u003ccode\u003ecall\u003c/code\u003e-ed. \u003ccode\u003e*.feature\u003c/code\u003e files and \u003ca href=\"#calling-javascript-functions\"\u003eJavaScript functions\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCalling other \u003ccode\u003e*.feature\u003c/code\u003e files\u003c/h2\u003e\u003ca id=\"user-content-calling-other-feature-files\" class=\"anchor\" aria-label=\"Permalink: Calling other *.feature files\" href=\"#calling-other-feature-files\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen you have a sequence of HTTP calls that need to be repeated for multiple test scripts, Karate allows you to treat a \u003ccode\u003e*.feature\u003c/code\u003e file as a re-usable unit. You can also pass parameters into the \u003ccode\u003e*.feature\u003c/code\u003e file being called, and extract variables out of the invocation result.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere is an example of using the \u003ccode\u003ecall\u003c/code\u003e keyword to invoke another feature file, loaded using the \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/a\u003e function:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eIf you find this hard to understand at first, try looking at this \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/callfeature/call-feature.feature\"\u003eset of examples\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature: which makes a 'call' to another re-usable feature\n\nBackground:\n  * configure headers = read('classpath:my-headers.js')\n  * def signIn = call read('classpath:my-signin.feature') { username: 'john', password: 'secret' }\n  * def authToken = signIn.authToken\n\nScenario: some scenario\n  # main test steps\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eFeature\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e which makes a 'call' to another re-usable feature\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eBackground\u003c/span\u003e:\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003econfigure headers = read(\u003cspan class=\"pl-s\"\u003e'classpath:my-headers.js'\u003c/span\u003e)\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef signIn = call read(\u003cspan class=\"pl-s\"\u003e'classpath:my-signin.feature'\u003c/span\u003e) { username: \u003cspan class=\"pl-s\"\u003e'john'\u003c/span\u003e, password: \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e }\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef authToken = signIn.authToken\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e some scenario\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e  # main test steps\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e can be used to \u003cem\u003eassign\u003c/em\u003e a \u003cstrong\u003efeature\u003c/strong\u003e to a variable. For example look at how \"\u003ccode\u003ecreator\u003c/code\u003e\" has been defined in the \u003ccode\u003eBackground\u003c/code\u003e in \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/calldynamic/call-dynamic-json.feature\"\u003ethis example\u003c/a\u003e, and used later in a \u003ccode\u003ecall\u003c/code\u003e statement. This is very close to how \"custom keywords\" work in other frameworks. See this other example for more ideas: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/dsl/dsl.feature\"\u003e\u003ccode\u003edsl.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThe contents of \u003ccode\u003emy-signin.feature\u003c/code\u003e are shown below. A few points to note:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eKarate creates a new 'context' for the feature file being invoked but passes along all variables and configuration. This means that all your \u003ca href=\"#configuration\"\u003econfig variables\u003c/a\u003e and \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e settings\u003c/a\u003e would be available to use, for example \u003ccode\u003eloginUrlBase\u003c/code\u003e in the example below.\u003c/li\u003e\n\u003cli\u003eWhen you use \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e in the 'called' feature, it will \u003cstrong\u003enot\u003c/strong\u003e over-write variables in the 'calling' feature (unless you explicitly choose to use \u003ca href=\"#shared-scope\"\u003eshared scope\u003c/a\u003e). But note that JSON, XML, Map-like or List-like variables are 'passed by reference' which means that 'called' feature steps can \u003cem\u003eupdate\u003c/em\u003e or 'mutate' them using the \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e keyword. Use the \u003ca href=\"#copy\"\u003e\u003ccode\u003ecopy\u003c/code\u003e\u003c/a\u003e keyword to 'clone' a JSON or XML payload if needed, and refer to this example for more details: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/copy.feature\"\u003e\u003ccode\u003ecopy.feature\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eYou can add (or over-ride) variables by passing a call 'argument' as shown above. Only one JSON argument is allowed, but this does not limit you in any way as you can use any complex JSON structure. You can even initialize the JSON in a separate step and pass it by name, especially if it is complex. Observe how using JSON for parameter-passing makes things super-readable. In the 'called' feature, the argument can also be accessed using the built-in variable: \u003ca href=\"#built-in-variables-for-call\"\u003e\u003ccode\u003e__arg\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAll\u003c/strong\u003e variables that were defined (using \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e) in the 'called' script would be returned as 'keys' within a JSON-like object. Note that this includes \u003ca href=\"#special-variables\"\u003e'built-in' variables\u003c/a\u003e, which means that things like the last value of \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e would also be present. In the example above you can see that the JSON 'envelope' returned - is assigned to the variable named \u003ccode\u003esignIn\u003c/code\u003e. And then getting hold of any data that was generated by the 'called' script is as simple as accessing it by name, for example \u003ccode\u003esignIn.authToken\u003c/code\u003e as shown above. This design has the following advantages:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e'called' Karate scripts don't need to use any special keywords to 'return' data and can behave like 'normal' Karate tests in 'stand-alone' mode if needed\u003c/li\u003e\n\u003cli\u003ethe data 'return' mechanism is 'safe', there is no danger of the 'called' script over-writing any variables in the 'calling' (or parent) script (unless you use \u003ca href=\"#shared-scope\"\u003eshared scope\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003ethe need to explicitly 'unpack' variables by name from the returned 'envelope' keeps things readable and maintainable in the 'caller' script\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that only \u003ca href=\"#def\"\u003evariables\u003c/a\u003e and \u003ca href=\"#configure\"\u003econfiguration settings\u003c/a\u003e will be passed. You can't do things such as \u003ccode\u003e* url 'http://foo.bar'\u003c/code\u003e and expect the URL to be set in the \"called\" feature. Use a variable in the \"called\" feature instead, for e.g. \u003ccode\u003e* url myUrl\u003c/code\u003e or take a look at \u003ca href=\"#configure-url\"\u003e\u003ccode\u003econfigure url\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature: here are the contents of 'my-signin.feature'\n\nScenario:\n  Given url loginUrlBase\n  And request { userId: '#(username)', userPass: '#(password)' }\n  When method post\n  Then status 200\n  And def authToken = response\n\n  # second HTTP call, to get a list of 'projects'\n  Given path 'users', authToken.userId, 'projects'\n  When method get\n  Then status 200\n  # logic to 'choose' first project\n  And set authToken.projectId = response.projects[0].projectId;\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eFeature\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e here are the contents of 'my-signin.feature\u003c/span\u003e'\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n  \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl loginUrlBase\n  \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest { userId: \u003cspan class=\"pl-s\"\u003e'#(username)'\u003c/span\u003e, userPass: \u003cspan class=\"pl-s\"\u003e'#(password)'\u003c/span\u003e }\n  \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n  \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n  \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003edef authToken = response\n\n\u003cspan class=\"pl-c\"\u003e  # second HTTP call, to get a list of 'projects'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'users'\u003c/span\u003e, authToken.userId, \u003cspan class=\"pl-s\"\u003e'projects'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod get\n  \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n\u003cspan class=\"pl-c\"\u003e  # logic to 'choose' first project\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003eset authToken.projectId = response.projects[0].projectId;\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe above example actually makes two HTTP requests - the first is a standard 'sign-in' POST and then (for illustrative purposes) another HTTP call (a GET) is made for retrieving a list of projects for the signed-in user, and the first one is 'selected' and added to the returned 'auth token' JSON object.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSo you get the picture, any kind of complicated 'sign-in' flow can be scripted and re-used.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eIf the second HTTP call above expects headers to be set by \u003ccode\u003emy-headers.js\u003c/code\u003e - which in turn depends on the \u003ccode\u003eauthToken\u003c/code\u003e variable being updated, you will need to duplicate the line \u003ccode\u003e* configure headers = read('classpath:my-headers.js')\u003c/code\u003e from the 'caller' feature here as well. The above example does \u003cstrong\u003enot\u003c/strong\u003e use \u003ca href=\"#shared-scope\"\u003eshared scope\u003c/a\u003e, which means that the variables in the 'calling' (parent) feature are \u003cem\u003enot\u003c/em\u003e shared by the 'called' \u003ccode\u003emy-signin.feature\u003c/code\u003e. The above example can be made more simpler with the use of \u003ccode\u003ecall\u003c/code\u003e (or \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e) \u003cem\u003ewithout\u003c/em\u003e a \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e-assignment to a variable, and is the \u003ca href=\"#shared-scope\"\u003erecommended pattern\u003c/a\u003e for implementing re-usable authentication setup flows.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eDo look at the documentation and example for \u003ca href=\"#configure-headers\"\u003e\u003ccode\u003econfigure headers\u003c/code\u003e\u003c/a\u003e also as it goes hand-in-hand with \u003ccode\u003ecall\u003c/code\u003e. In the above example, the end-result of the \u003ccode\u003ecall\u003c/code\u003e to \u003ccode\u003emy-signin.feature\u003c/code\u003e resulted in the \u003ccode\u003eauthToken\u003c/code\u003e variable being initialized. Take a look at how the \u003ca href=\"#configure-headers\"\u003e\u003ccode\u003econfigure headers\u003c/code\u003e\u003c/a\u003e example uses the \u003ccode\u003eauthToken\u003c/code\u003e variable.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCall Tag Selector\u003c/h3\u003e\u003ca id=\"user-content-call-tag-selector\" class=\"anchor\" aria-label=\"Permalink: Call Tag Selector\" href=\"#call-tag-selector\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can \"select\" a single \u003ccode\u003eScenario\u003c/code\u003e (or \u003ccode\u003eScenario\u003c/code\u003e-s or \u003ccode\u003eScenario Outline\u003c/code\u003e-s or even specific \u003ccode\u003eExamples\u003c/code\u003e rows) by appending a \"tag selector\" at the end of the feature-file you are calling. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"call read('classpath:my-signin.feature@name=someScenarioName')\"\u003e\u003cpre\u003ecall read(\u003cspan class=\"pl-s\"\u003e'classpath:my-signin.feature@name=someScenarioName'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhile the tag does not need to be in the \u003ccode\u003e@key=value\u003c/code\u003e form, it is recommended for readability when you start getting into the business of giving meaningful names to your \u003ccode\u003eScenario\u003c/code\u003e-s.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis \"tag selection\" capability is designed for you to be able to \"compose\" flows out of existing test-suites when using the \u003ca href=\"/karatelabs/karate/blob/master/karate-gatling\"\u003eKarate Gatling integration\u003c/a\u003e. Normally we recommend that you keep your \"re-usable\" features lightweight - by limiting them to just one \u003ccode\u003eScenario\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCall Same Feature\u003c/h4\u003e\u003ca id=\"user-content-call-same-feature\" class=\"anchor\" aria-label=\"Permalink: Call Same Feature\" href=\"#call-same-feature\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAs a convenience, you can call a tag directly, which is a short-cut to call another \u003ccode\u003eScenario\u003c/code\u003e within the same feature file. Note that you would typically want to use the \u003ca href=\"#special-tags\"\u003e\u003ccode\u003e@ignore\u003c/code\u003e\u003c/a\u003e tag for such cases.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Scenario: one\n* call read('@two')\n\n@ignore @two\nScenario: two\n* print 'called'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e one\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecall read(\u003cspan class=\"pl-s\"\u003e'@two'\u003c/span\u003e)\n\n\u003cspan class=\"pl-k\"\u003e@ignore\u003c/span\u003e \u003cspan class=\"pl-k\"\u003e@two\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e two\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'called'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eData-Driven Features\u003c/h3\u003e\u003ca id=\"user-content-data-driven-features\" class=\"anchor\" aria-label=\"Permalink: Data-Driven Features\" href=\"#data-driven-features\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf the argument passed to the \u003ca href=\"#calling-other-feature-files\"\u003ecall of a \u003ccode\u003e*.feature\u003c/code\u003e file\u003c/a\u003e is a JSON array, something interesting happens. The feature is invoked for each item in the array. Each array element is expected to be a JSON object, and for each object - the behavior will be as described above.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBut this time, the return value from the \u003ccode\u003ecall\u003c/code\u003e step will be a JSON array of the same size as the input array. And each element of the returned array will be the 'envelope' of variables that resulted from each iteration where the \u003ccode\u003e*.feature\u003c/code\u003e got invoked.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere is an example that combines the \u003ca href=\"#table\"\u003e\u003ccode\u003etable\u003c/code\u003e\u003c/a\u003e keyword with calling a \u003ccode\u003e*.feature\u003c/code\u003e. Observe how the \u003ca href=\"#get\"\u003e\u003ccode\u003eget\u003c/code\u003e\u003c/a\u003e \u003ca href=\"#get-short-cut\"\u003eshortcut\u003c/a\u003e is used to 'distill' the result array of variable 'envelopes' into an array consisting only of \u003ca href=\"#response\"\u003e\u003ccode\u003eresponse\u003c/code\u003e\u003c/a\u003e payloads.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* table kittens \n  | name   | age |\n  | 'Bob'  |   2 |\n  | 'Wild' |   1 |\n  | 'Nyan' |   3 |\n\n* def result = call read('cat-create.feature') kittens\n* def created = $result[*].response\n* match each created == { id: '#number', name: '#string', age: '#number' }\n* match created[*].name contains only ['Bob', 'Wild', 'Nyan']\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003etable kittens \n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e   | \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | '\u003cspan class=\"pl-s1\"\u003eBob\u003c/span\u003e'  |   \u003cspan class=\"pl-s1\"\u003e2\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | '\u003cspan class=\"pl-s1\"\u003eWild\u003c/span\u003e' |   \u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | '\u003cspan class=\"pl-s1\"\u003eNyan\u003c/span\u003e' |   \u003cspan class=\"pl-s1\"\u003e3\u003c/span\u003e |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef result = call read(\u003cspan class=\"pl-s\"\u003e'cat-create.feature'\u003c/span\u003e) kittens\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef created = $result[*].response\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch each created == { id: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, name: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e, age: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch created[*].name contains only [\u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Wild'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'Nyan'\u003c/span\u003e]\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd here is how \u003ccode\u003ecat-create.feature\u003c/code\u003e could look like:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@ignore\nFeature:\n\nScenario:\n  Given url someUrlFromConfig\n  And path 'cats'\n  And request { name: '#(name)', age: '#(age)' }\n  When method post\n  Then status 200\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e@ignore\u003c/span\u003e\nFeature:\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n  \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl someUrlFromConfig\n  \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'cats'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest { name: \u003cspan class=\"pl-s\"\u003e'#(name)'\u003c/span\u003e, age: \u003cspan class=\"pl-s\"\u003e'#(age)'\u003c/span\u003e }\n  \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n  \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you replace the \u003ccode\u003etable\u003c/code\u003e with perhaps a JavaScript function call that gets some JSON data from some data-source, you can imagine how you could go about dynamic data-driven testing.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAlthough it is just a few lines of code, take time to study the above example carefully. It is a great example of how to effectively use the unique combination of syntax and JsonPath that Karate provides.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAlso look at the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003edemo examples\u003c/a\u003e, especially \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/search/dynamic-params.feature\"\u003e\u003ccode\u003edynamic-params.feature\u003c/code\u003e\u003c/a\u003e - to compare the above approach with how the Gherkin \u003ca href=\"#the-cucumber-way\"\u003e\u003ccode\u003eScenario Outline:\u003c/code\u003e\u003c/a\u003e can be alternatively used for data-driven tests.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eBuilt-in variables for \u003ccode\u003ecall\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-built-in-variables-for-call\" class=\"anchor\" aria-label=\"Permalink: Built-in variables for call\" href=\"#built-in-variables-for-call\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAlthough all properties in the passed JSON-like argument are 'unpacked' into the current scope as separate 'named' variables, it sometimes makes sense to access the whole argument and this can be done via \u003ccode\u003e__arg\u003c/code\u003e. And if being called in a loop, a built-in variable called \u003ccode\u003e__loop\u003c/code\u003e will also be available that will hold the value of the current loop index. So you can do things like this: \u003ccode\u003e* def name = name + __loop\u003c/code\u003e - or you can use the loop index value for looking up other values that may be in scope - in a data-driven style.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eVariable\u003c/th\u003e\n\u003cth\u003eRefers To\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e__arg\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ethe single \u003ccode\u003ecall\u003c/code\u003e (or \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e) argument, will be \u003ccode\u003enull\u003c/code\u003e if there was none\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e__loop\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ethe current iteration index (starts from 0) if being called in a loop, will be \u003ccode\u003e-1\u003c/code\u003e if not\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eRefer to this \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003edemo feature\u003c/a\u003e for an example: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/calltable/kitten-create.feature\"\u003e\u003ccode\u003ekitten-create.feature\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eDefault Values\u003c/h3\u003e\u003ca id=\"user-content-default-values\" class=\"anchor\" aria-label=\"Permalink: Default Values\" href=\"#default-values\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSome users need \"callable\" features that are re-usable even when variables have not been defined by the calling feature. Normally an undefined variable results in nasty JavaScript errors. But there is an elegant way you can specify a default value using the \u003ca href=\"#karate-get\"\u003e\u003ccode\u003ekarate.get()\u003c/code\u003e\u003c/a\u003e API:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# if foo is not defined, it will default to 42\n* def foo = karate.get('foo', 42)\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# if foo is not defined, it will default to 42\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef foo = karate.get(\u003cspan class=\"pl-s\"\u003e'foo'\u003c/span\u003e, 42)\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eA word of caution: we recommend that you should not over-use Karate's capability of being able to re-use features. Re-use can sometimes result in negative benefits - especially when applied to test-automation. Prefer readability over re-use. See this for an \u003ca href=\"https://stackoverflow.com/a/54126724/143475\" rel=\"nofollow\"\u003eexample\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ecopy\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-copy\" class=\"anchor\" aria-label=\"Permalink: copy\" href=\"#copy\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor a \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e (or \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e) - payload / data structures (JSON, XML, Map-like or List-like) variables are 'passed by reference' which means that steps within the 'called' feature can update or 'mutate' them, for e.g. using the \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e keyword. This is actually the intent most of the time and is convenient. If you want to pass a 'clone' to a 'called' feature, you can do so using the rarely used \u003ccode\u003ecopy\u003c/code\u003e keyword that works very similar to \u003ca href=\"#type-conversion\"\u003etype conversion\u003c/a\u003e. This is best explained in this example: \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/copy.feature\"\u003e\u003ccode\u003ecopy.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCalling JavaScript Functions\u003c/h2\u003e\u003ca id=\"user-content-calling-javascript-functions\" class=\"anchor\" aria-label=\"Permalink: Calling JavaScript Functions\" href=\"#calling-javascript-functions\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eExamples of \u003ca href=\"#javascript-functions\"\u003edefining and using JavaScript functions\u003c/a\u003e appear in earlier sections of this document. Being able to define and re-use JavaScript functions is a powerful capability of Karate. For example, you can:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003ecall re-usable functions that take complex data as an argument and return complex data that can be stored in a variable\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#calling-java\"\u003ecall and interoperate with Java code\u003c/a\u003e if needed\u003c/li\u003e\n\u003cli\u003eshare and re-use test \u003ca href=\"#commonly-needed-utilities\"\u003eutilities\u003c/a\u003e or 'helper' functionality across your organization\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eFor an advanced example of how you can build and re-use a common set of JS functions, refer to \u003ca href=\"https://stackoverflow.com/a/49384760/143475\" rel=\"nofollow\"\u003ethis answer on Stack Overflow\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eIn real-life scripts, you would typically also use this capability of Karate to \u003ca href=\"#configure-headers\"\u003e\u003ccode\u003econfigure headers\u003c/code\u003e\u003c/a\u003e where the specified JavaScript function uses the variables that result from a \u003ca href=\"#calling-other-feature-files\"\u003esign in\u003c/a\u003e to manipulate headers for all subsequent HTTP requests. And it is worth mentioning that the Karate \u003ca href=\"#configuration\"\u003econfiguration 'bootstrap'\u003c/a\u003e routine is itself a JavaScript function.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eAlso refer to the \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e keyword for a simpler way to execute arbitrary JavaScript that can be useful in some situations.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJS function argument rules for \u003ccode\u003ecall\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-js-function-argument-rules-for-call\" class=\"anchor\" aria-label=\"Permalink: JS function argument rules for call\" href=\"#js-function-argument-rules-for-call\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen using \u003ccode\u003ecall\u003c/code\u003e (or \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e), only one argument is allowed. But this does not limit you in any way, because similar to how you can \u003ca href=\"#calling-other-feature-files\"\u003ecall \u003ccode\u003e*.feature files\u003c/code\u003e\u003c/a\u003e, you can pass a whole JSON object as the argument. In the case of the \u003ccode\u003ecall\u003c/code\u003e of a JavaScript function, you can also pass a JSON array or a primitive (string, number, boolean) as the solitary argument, and the function implementation is expected to handle whatever is passed.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eInstead of using \u003ccode\u003ecall\u003c/code\u003e (or \u003ccode\u003ecallonce\u003c/code\u003e) you are always free to call JavaScript functions 'normally' and then you can use more than one argument.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def adder = function(a, b){ return a + b }\n* assert adder(1, 2) == 3\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef adder = function(a, b){ return a + b }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert adder(1, 2) == 3\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eReturn types\u003c/h3\u003e\u003ca id=\"user-content-return-types\" class=\"anchor\" aria-label=\"Permalink: Return types\" href=\"#return-types\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNaturally, only one value can be returned.  But again, you can return a JSON object. There are two things that can happen to the returned value.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eEither - it can be assigned to a variable like so.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def returnValue = call myFunction\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef returnValue = call myFunction\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOr - if a \u003ccode\u003ecall\u003c/code\u003e is made without an assignment, and if the function returns a map-like object, it will add each key-value pair returned as a new variable into the execution context.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# while this looks innocent ...\n# ... behind the scenes, it could be creating (or over-writing) a bunch of variables !\n* call someFunction\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# while this looks innocent ...\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# ... behind the scenes, it could be creating (or over-writing) a bunch of variables !\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecall someFunction\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhile this sounds dangerous and should be used with care (and limits readability), the reason this feature exists is to quickly set (or over-write) a bunch of config variables when needed. In fact, this is the mechanism used when \u003ca href=\"#configuration\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e is processed on start-up.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eShared Scope\u003c/h4\u003e\u003ca id=\"user-content-shared-scope\" class=\"anchor\" aria-label=\"Permalink: Shared Scope\" href=\"#shared-scope\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis behavior where all key-value pairs in the returned map-like object get automatically added as variables - applies to the \u003ca href=\"#calling-other-feature-files\"\u003ecalling of \u003ccode\u003e*.feature\u003c/code\u003e files\u003c/a\u003e as well. In other words, when \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e or \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e is used without a \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e, the 'called' script not only shares all variables (and \u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure\u003c/code\u003e\u003c/a\u003e settings) but can update the shared execution context. This is very useful to boil-down those 'common' steps that you may have to perform at the start of multiple test-scripts - into one-liners. But use wisely, because called scripts will now over-write variables that may have been already defined.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def config = { user: 'john', password: 'secret' }\n# this next line may perform many steps and result in multiple variables set for the rest of the script\n* call read('classpath:common-setup.feature') config\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef config = { user: \u003cspan class=\"pl-s\"\u003e'john'\u003c/span\u003e, password: \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e }\n\u003cspan class=\"pl-c\"\u003e# this next line may perform many steps and result in multiple variables set for the rest of the script\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecall read(\u003cspan class=\"pl-s\"\u003e'classpath:common-setup.feature'\u003c/span\u003e) config\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can use \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e instead of \u003ccode\u003ecall\u003c/code\u003e within the \u003ca href=\"#script-structure\"\u003e\u003ccode\u003eBackground\u003c/code\u003e\u003c/a\u003e in case you have multiple \u003ccode\u003eScenario\u003c/code\u003e sections or \u003ca href=\"#data-driven-tests\"\u003e\u003ccode\u003eExamples\u003c/code\u003e\u003c/a\u003e. Note the 'inline' use of the \u003ca href=\"#reading-files\"\u003eread\u003c/a\u003e function as a short-cut above. This applies to JS functions as well:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* call read('my-function.js')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecall read(\u003cspan class=\"pl-s\"\u003e'my-function.js'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThese heavily commented \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003edemo examples\u003c/a\u003e can help you understand 'shared scope' better, and are designed to get you started with creating re-usable 'sign-in' or authentication flows:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eScope\u003c/th\u003e\n\u003cth\u003eCaller Feature\u003c/th\u003e\n\u003cth\u003eCalled Feature\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eIsolated\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/call-isolated-headers.feature\"\u003e\u003ccode\u003ecall-isolated-headers.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/common-multiple.feature\"\u003e\u003ccode\u003ecommon-multiple.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eShared\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/call-updates-config.feature\"\u003e\u003ccode\u003ecall-updates-config.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/common.feature\"\u003e\u003ccode\u003ecommon.feature\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eOnce you get comfortable with Karate, you can consider moving your authentication flow into a 'global' one-time flow using \u003ca href=\"#karate-callsingle\"\u003e\u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/a\u003e, think of it as '\u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e on steroids'.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ecall\u003c/code\u003e vs \u003ccode\u003eread()\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-call-vs-read\" class=\"anchor\" aria-label=\"Permalink: call vs read()\" href=\"#call-vs-read\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince this is a frequently asked question, the different ways of being able to re-use code (or data) are summarized below.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eCode\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def login = read('login.feature')\u003c/code\u003e\u003cbr\u003e\u003ccode\u003e* call login\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#shared-scope\"\u003eShared Scope\u003c/a\u003e, and the \u003cbr\u003e\u003ccode\u003elogin\u003c/code\u003e variable can be re-used\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* call read('login.feature')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eshort-cut for the above \u003cbr\u003ewithout needing a variable\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def credentials = read('credentials.json')\u003c/code\u003e\u003cbr\u003e\u003ccode\u003e* def login = read('login.feature')\u003c/code\u003e\u003cbr\u003e\u003ccode\u003e* call login credentials\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNote how using \u003ca href=\"#reading-files\"\u003e\u003ccode\u003eread()\u003c/code\u003e\u003c/a\u003e \u003cbr\u003efor a JSON file returns \u003cem\u003edata\u003c/em\u003e - \u003cbr\u003enot \"callable\" code, and here it is \u003cbr\u003eused as the \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e argument\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* call read('login.feature') read('credentials.json')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eYou \u003cem\u003ecan\u003c/em\u003e do this in theory, \u003cbr\u003ebut it is not as readable as the above\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* karate.call('login.feature')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eThe \u003ca href=\"#karate-call\"\u003eJS API\u003c/a\u003e allows you to do this, \u003cbr\u003ebut this will \u003cem\u003enot\u003c/em\u003e be \u003ca href=\"#shared-scope\"\u003eShared Scope\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def result = call read('login.feature')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e result assigned to a variable \u003cbr\u003eand \u003cem\u003enot\u003c/em\u003e \u003ca href=\"#shared-scope\"\u003eShared Scope\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def result = karate.call('login.feature')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eexactly equivalent to the above !\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* if (cond) karate.call(true, 'login.feature')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eif you need \u003ca href=\"#conditional-logic\"\u003econditional logic\u003c/a\u003e \u003cbr\u003e\u003cem\u003eand\u003c/em\u003e \u003ca href=\"#shared-scope\"\u003eShared Scope\u003c/a\u003e, add a \u003cbr\u003eboolean \u003ccode\u003etrue\u003c/code\u003e first argument\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def credentials = read('credentials.json')\u003c/code\u003e\u003cbr\u003e\u003ccode\u003e* def result = call read('login.feature') credentials\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003elike the above, \u003cbr\u003ebut with a \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e argument\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def credentials = read('credentials.json')\u003c/code\u003e\u003cbr\u003e\u003ccode\u003e* def result = karate.call('login.feature', credentials)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003elike the above, but in \u003ca href=\"#karate-call\"\u003eJS API\u003c/a\u003e form, \u003cbr\u003ethe advantage of the above form is \u003cbr\u003ethat using an in-line argument is less \u003cbr\u003e\"cluttered\" (see next row)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* def login = read('login.feature')\u003c/code\u003e\u003cbr\u003e\u003ccode\u003e* def result = call login { user: 'john', password: 'secret' }\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eusing the \u003ccode\u003ecall\u003c/code\u003e keyword makes \u003cbr\u003epassing an in-line JSON argument \u003cbr\u003emore \"readable\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* call read 'credentials.json'\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSince \"\u003ccode\u003eread\u003c/code\u003e\" happens to be a \u003cbr\u003e\u003ca href=\"#calling-javascript-functions\"\u003e\u003cem\u003efunction\u003c/em\u003e\u003c/a\u003e (that takes a single \u003cbr\u003estring argument), this has the effect \u003cbr\u003eof loading \u003cem\u003eall\u003c/em\u003e keys in the JSON file\u003cbr\u003einto \u003ca href=\"#shared-scope\"\u003eShared Scope\u003c/a\u003e as \u003ca href=\"#def\"\u003evariables\u003c/a\u003e ! \u003cbr\u003eThis \u003cem\u003ecan\u003c/em\u003e be \u003ca href=\"/karatelabs/karate/blob/master/karate-core#locator-lookup\"\u003esometimes handy\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* call read ('credentials.json')\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eA common mistake. First, there \u003cbr\u003eis no meaning in \u003ccode\u003ecall\u003c/code\u003e for JSON. \u003cbr\u003eSecond, the space after the \"\u003ccode\u003eread\u003c/code\u003e\" \u003cbr\u003emakes this equal to the above.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e* karate.set(read('credentials.json'))\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor completeness - this has \u003cem\u003eexactly\u003c/em\u003e the \u003ca href=\"#karate-setall\"\u003esame effect\u003c/a\u003e as the above two rows !\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCalling Java\u003c/h3\u003e\u003ca id=\"user-content-calling-java\" class=\"anchor\" aria-label=\"Permalink: Calling Java\" href=\"#calling-java\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThere are examples of calling JVM classes in the section on \u003ca href=\"#java-interop\"\u003eJava Interop\u003c/a\u003e and in the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003efile-upload demo\u003c/a\u003e. Also look at the section on \u003ca href=\"#commonly-needed-utilities\"\u003ecommonly needed utilities\u003c/a\u003e for more ideas.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eCalling any Java code is that easy.  Given this custom, user-defined Java class:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"package com.mycompany;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class JavaDemo {    \n    \n    public Map\u0026lt;String, Object\u0026gt; doWork(String fromJs) {\n        Map\u0026lt;String, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;();\n        map.put(\u0026quot;someKey\u0026quot;, \u0026quot;hello \u0026quot; + fromJs);\n        return map;\n    }\n\n    public static String doWorkStatic(String fromJs) {\n        return \u0026quot;hello \u0026quot; + fromJs;\n    }   \n\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003epackage\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ecom\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003emycompany\u003c/span\u003e;\n\n\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ejava\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eutil\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eHashMap\u003c/span\u003e;\n\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ejava\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eutil\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eMap\u003c/span\u003e;\n\n\u003cspan class=\"pl-k\"\u003epublic\u003c/span\u003e \u003cspan class=\"pl-k\"\u003eclass\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eJavaDemo\u003c/span\u003e {    \n    \n    \u003cspan class=\"pl-k\"\u003epublic\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eMap\u003c/span\u003e\u0026lt;\u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e, \u003cspan class=\"pl-smi\"\u003eObject\u003c/span\u003e\u0026gt; \u003cspan class=\"pl-en\"\u003edoWork\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003efromJs\u003c/span\u003e) {\n        \u003cspan class=\"pl-smi\"\u003eMap\u003c/span\u003e\u0026lt;\u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e, \u003cspan class=\"pl-smi\"\u003eObject\u003c/span\u003e\u0026gt; \u003cspan class=\"pl-s1\"\u003emap\u003c/span\u003e = \u003cspan class=\"pl-k\"\u003enew\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eHashMap\u003c/span\u003e\u0026lt;\u0026gt;();\n        \u003cspan class=\"pl-s1\"\u003emap\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003eput\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"someKey\"\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e\"hello \"\u003c/span\u003e + \u003cspan class=\"pl-s1\"\u003efromJs\u003c/span\u003e);\n        \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003emap\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"pl-k\"\u003epublic\u003c/span\u003e \u003cspan class=\"pl-k\"\u003estatic\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e \u003cspan class=\"pl-en\"\u003edoWorkStatic\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003efromJs\u003c/span\u003e) {\n        \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\"hello \"\u003c/span\u003e + \u003cspan class=\"pl-s1\"\u003efromJs\u003c/span\u003e;\n    }   \n\n}\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is how it can be called from a test-script via \u003ca href=\"#javascript-functions\"\u003eJavaScript\u003c/a\u003e, and yes, even static methods can be invoked:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def doWork =\n  \u0026quot;\u0026quot;\u0026quot;\n  function(arg) {\n    var JavaDemo = Java.type('com.mycompany.JavaDemo');\n    var jd = new JavaDemo();\n    return jd.doWork(arg);  \n  }\n  \u0026quot;\u0026quot;\u0026quot;\n# in this case the solitary 'call' argument is of type string\n* def result = call doWork 'world'\n* match result == { someKey: 'hello world' }\n\n# using a static method - observe how java interop is truly seamless !\n* def JavaDemo = Java.type('com.mycompany.JavaDemo')\n* def result = JavaDemo.doWorkStatic('world')\n* assert result == 'hello world'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef doWork =\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  function(arg) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    var JavaDemo = Java.type('com.mycompany.JavaDemo');\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    var jd = new JavaDemo();\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    return jd.doWork(arg);  \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# in this case the solitary 'call' argument is of type string\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef result = call doWork \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch result == { someKey: \u003cspan class=\"pl-s\"\u003e'hello world'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e# using a static method - observe how java interop is truly seamless !\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef JavaDemo = Java.type(\u003cspan class=\"pl-s\"\u003e'com.mycompany.JavaDemo'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef result = JavaDemo.doWorkStatic(\u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert result == \u003cspan class=\"pl-s\"\u003e'hello world'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that JSON gets auto-converted to \u003ccode\u003eMap\u003c/code\u003e (or \u003ccode\u003eList\u003c/code\u003e) when making the cross-over to Java. Refer to the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/java/cats-java.feature\"\u003e\u003ccode\u003ecats-java.feature\u003c/code\u003e\u003c/a\u003e demo for an example.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eAn additional-level of auto-conversion happens when objects cross the boundary between JS and Java. In the rare case that you need to mutate a \u003ccode\u003eMap\u003c/code\u003e or \u003ccode\u003eList\u003c/code\u003e returned from Java but while still within a JS block, use \u003ca href=\"#karate-tojson\"\u003e\u003ccode\u003ekarate.toJson()\u003c/code\u003e\u003c/a\u003e to convert.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eAnother example is \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/dogs/dogs.feature\"\u003e\u003ccode\u003edogs.feature\u003c/code\u003e\u003c/a\u003e -  which actually makes JDBC (database) calls, and since the data returned from the Java code is JSON, the last section of the test is able to use \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e \u003cem\u003every\u003c/em\u003e effectively for data assertions.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA great example of how you can extend Karate, even bypass the HTTP client but still use Karate's test-automation effectively, is this \u003ca href=\"https://grpc.io\" rel=\"nofollow\"\u003egRPC\u003c/a\u003e example by \u003ca href=\"https://github.com/thinkerou\"\u003e@thinkerou\u003c/a\u003e: \u003ca href=\"https://github.com/thinkerou/karate-grpc\"\u003e\u003ccode\u003ekarate-grpc\u003c/code\u003e\u003c/a\u003e. And you can even handle asynchronous flows such as \u003ca href=\"#async\"\u003elistening to message-queues\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eHTTP Basic Authentication Example\u003c/h4\u003e\u003ca id=\"user-content-http-basic-authentication-example\" class=\"anchor\" aria-label=\"Permalink: HTTP Basic Authentication Example\" href=\"#http-basic-authentication-example\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis should make it clear why Karate does not provide 'out of the box' support for any particular HTTP authentication scheme. Things are designed so that you can plug-in what you need, without needing to compile Java code. You get to choose how to manage your environment-specific configuration values such as user-names and passwords.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFirst the JavaScript file, \u003ccode\u003ebasic-auth.js\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function fn(creds) {\n  var temp = creds.username + ':' + creds.password;\n  var Base64 = Java.type('java.util.Base64');\n  var encoded = Base64.getEncoder().encodeToString(temp.toString().getBytes());\n  return 'Basic ' + encoded;\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003efunction\u003c/span\u003e \u003cspan class=\"pl-en\"\u003efn\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s1\"\u003ecreds\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003etemp\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ecreds\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eusername\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e':'\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ecreds\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003epassword\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-v\"\u003eBase64\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-v\"\u003eJava\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003etype\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'java.util.Base64'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eencoded\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-v\"\u003eBase64\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003egetEncoder\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003eencodeToString\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s1\"\u003etemp\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003etoString\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003egetBytes\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'Basic '\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e+\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eencoded\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd here's how it works in a test-script using the \u003ca href=\"#header\"\u003e\u003ccode\u003eheader\u003c/code\u003e\u003c/a\u003e keyword.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* header Authorization = call read('basic-auth.js') { username: 'john', password: 'secret' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eheader Authorization = call read(\u003cspan class=\"pl-s\"\u003e'basic-auth.js'\u003c/span\u003e) { username: \u003cspan class=\"pl-s\"\u003e'john'\u003c/span\u003e, password: \u003cspan class=\"pl-s\"\u003e'secret'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can set this up for all subsequent requests or dynamically generate headers for each HTTP request if you \u003ca href=\"#configure-headers\"\u003e\u003ccode\u003econfigure headers\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-callonce\" class=\"anchor\" aria-label=\"Permalink: callonce\" href=\"#callonce\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eCucumber has a limitation where \u003ca href=\"#script-structure\"\u003e\u003ccode\u003eBackground\u003c/code\u003e\u003c/a\u003e steps are re-run for every \u003ccode\u003eScenario\u003c/code\u003e. And if you have a \u003ccode\u003eScenario Outline\u003c/code\u003e, this happens for \u003cem\u003eevery\u003c/em\u003e row in the \u003ccode\u003eExamples\u003c/code\u003e. This is a problem especially for expensive, time-consuming HTTP calls, and this has been an \u003ca href=\"https://github.com/cucumber/cucumber-jvm/issues/515\" data-hovercard-type=\"issue\" data-hovercard-url=\"/cucumber/cucumber-jvm/issues/515/hovercard\"\u003eopen issue for a long time\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eKarate's \u003ccode\u003ecallonce\u003c/code\u003e keyword behaves exactly like \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e but is guaranteed to execute only once. The results of the first call are cached, and any future calls will simply return the cached result instead of executing the JavaScript function (or feature) again and again.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis does require you to move 'set-up' into a separate \u003ccode\u003e*.feature\u003c/code\u003e (or JavaScript) file. But this totally makes sense for things not part of the 'main' test flow and which typically need to be re-usable anyway.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSo when you use the combination of \u003ccode\u003ecallonce\u003c/code\u003e in a \u003ccode\u003eBackground\u003c/code\u003e, you can indeed get the same effect as using a \u003ca href=\"https://junit.org/junit5/docs/5.0.0/api/org/junit/jupiter/api/BeforeAll.html\" rel=\"nofollow\"\u003e\u003ccode\u003e@BeforeAll\u003c/code\u003e\u003c/a\u003e annotation, and you can find examples in the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003ekarate-demo\u003c/a\u003e, such as this one: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/callonce/call-once.feature\"\u003e\u003ccode\u003ecallonce.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA \u003ccode\u003ecallonce\u003c/code\u003e is ideally used for only \"pure\" JSON. You may face issues if you attempt to mix in JS functions or Java code. See \u003ca href=\"#karatecallsingle\"\u003e\u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/h2\u003e\u003ca id=\"user-content-eval\" class=\"anchor\" aria-label=\"Permalink: eval\" href=\"#eval\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThis is for evaluating arbitrary JavaScript and you are advised to use this only as a last resort ! Conditional logic is not recommended especially within test scripts because \u003ca href=\"https://martinfowler.com/articles/nonDeterminism.html\" rel=\"nofollow\"\u003etests should be deterministic\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eThere are a few situations where this comes in handy:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eyou \u003cem\u003ereally\u003c/em\u003e don't need to assign a result to a variable\u003c/li\u003e\n\u003cli\u003estatements in the \u003ccode\u003eif\u003c/code\u003e form (also see \u003ca href=\"#conditional-logic\"\u003econditional logic\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e'one-off' logic (or \u003ca href=\"#java-interop\"\u003eJava interop\u003c/a\u003e) where you don't need the 'ceremony' of a \u003ca href=\"#calling-javascript-functions\"\u003ere-usable function\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eJavaScript / JSON-style mutation of existing \u003ca href=\"#def\"\u003evariables\u003c/a\u003e as a dynamic alternative to \u003ca href=\"#set\"\u003e\u003ccode\u003eset\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#remove\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e - by using \u003ca href=\"#karate-setpath\"\u003e\u003ccode\u003ekarate.set()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#karate-remove\"\u003e\u003ccode\u003ekarate.remove()\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# just perform an action, we don't care about saving the result\n* eval myJavaScriptFunction()\n\n# do something only if a condition is true\n* eval if (zone == 'zone1') karate.set('temp', 'after')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# just perform an action, we don't care about saving the result\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eeval myJavaScriptFunction()\n\n\u003cspan class=\"pl-c\"\u003e# do something only if a condition is true\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eeval if (zone == \u003cspan class=\"pl-s\"\u003e'zone1'\u003c/span\u003e) karate.set(\u003cspan class=\"pl-s\"\u003e'temp'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'after'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAs a convenience, you can omit the \u003ccode\u003eeval\u003c/code\u003e keyword and so you can shorten the above to:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* myJavaScriptFunction()\n* if (zone == 'zone1') karate.set('temp', 'after')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003emyJavaScriptFunction()\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eif (zone == \u003cspan class=\"pl-s\"\u003e'zone1'\u003c/span\u003e) karate.set(\u003cspan class=\"pl-s\"\u003e'temp'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'after'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is \u003cstrong\u003every\u003c/strong\u003e convenient especially if you are calling a method on a variable that has been \u003ca href=\"#def\"\u003edefined\u003c/a\u003e such as the \u003ca href=\"#the-karate-object\"\u003e\u003ccode\u003ekarate\u003c/code\u003e\u003c/a\u003e object, and for general-purpose scripting needs such as \u003ca href=\"/karatelabs/karate/blob/master/karate-core\"\u003eUI automation\u003c/a\u003e. Note how \u003ccode\u003ekarate.set()\u003c/code\u003e and \u003ccode\u003ekarate.remove()\u003c/code\u003e below are used directly as a script \"statement\".\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# you can use multiple lines of JavaScript if needed\n* eval\n  \u0026quot;\u0026quot;\u0026quot;\n  var foo = function(v){ return v * v };\n  var nums = [0, 1, 2, 3, 4];\n  var squares = [];\n  for (var n in nums) {\n    squares.push(foo(n));\n  }\n  karate.set('temp', squares);\n  \u0026quot;\u0026quot;\u0026quot;\n* match temp == [0, 1, 4, 9, 16]\n\n* def json = { a: 1 }\n* def key = 'b'\n# use dynamic path expressions to mutate json\n* json[key] = 2\n* match json == { a: 1, b: 2 }\n* karate.remove('json', key)\n* match json == { a: 1 }\n* karate.set('json', '$.c[]', { d: 'e' })\n* match json == { a: 1, c: [{ d: 'e' }] }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e# you can use multiple lines of JavaScript if needed\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eeval\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  var foo = function(v){ return v * v };\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  var nums = [0, 1, 2, 3, 4];\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  var squares = [];\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  for (var n in nums) {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    squares.push(foo(n));\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  }\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  karate.set('temp', squares);\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch temp == [0, 1, 4, 9, 16]\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef json = { a: 1 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef key = \u003cspan class=\"pl-s\"\u003e'b'\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# use dynamic path expressions to mutate json\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ejson[key] = 2\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == { a: 1, b: 2 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ekarate.remove(\u003cspan class=\"pl-s\"\u003e'json'\u003c/span\u003e, key)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == { a: 1 }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ekarate.set(\u003cspan class=\"pl-s\"\u003e'json'\u003c/span\u003e, \u003cspan class=\"pl-s\"\u003e'$.c[]'\u003c/span\u003e, { d: \u003cspan class=\"pl-s\"\u003e'e'\u003c/span\u003e })\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch json == { a: 1, c: [{ d: \u003cspan class=\"pl-s\"\u003e'e'\u003c/span\u003e }] }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch1 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eAdvanced / Tricks\u003c/h1\u003e\u003ca id=\"user-content-advanced--tricks\" class=\"anchor\" aria-label=\"Permalink: Advanced / Tricks\" href=\"#advanced--tricks\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003ePolling\u003c/h2\u003e\u003ca id=\"user-content-polling\" class=\"anchor\" aria-label=\"Permalink: Polling\" href=\"#polling\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe built-in \u003ca href=\"#retry-until\"\u003e\u003ccode\u003eretry until\u003c/code\u003e\u003c/a\u003e syntax should suffice for most needs, but if you have some specific needs, this demo example (using JavaScript) should get you up and running: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/polling/polling.feature\"\u003e\u003ccode\u003epolling.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eConditional Logic\u003c/h2\u003e\u003ca id=\"user-content-conditional-logic\" class=\"anchor\" aria-label=\"Permalink: Conditional Logic\" href=\"#conditional-logic\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe keywords \u003ca href=\"#given-when-then\"\u003e\u003ccode\u003eGiven\u003c/code\u003e \u003ccode\u003eWhen\u003c/code\u003e \u003ccode\u003eThen\u003c/code\u003e\u003c/a\u003e are only for decoration and should not be thought of as similar to an \u003ccode\u003eif - then - else\u003c/code\u003e statement. And as a testing framework, Karate \u003ca href=\"https://martinfowler.com/articles/nonDeterminism.html\" rel=\"nofollow\"\u003ediscourages tests\u003c/a\u003e that give different results on every run.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThat said, if you really need to implement 'conditional' checks, this can be one pattern:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def filename = zone == 'zone1' ? 'test1.feature' : 'test2.feature'\n* def result = call read(filename)\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef filename = zone == \u003cspan class=\"pl-s\"\u003e'zone1'\u003c/span\u003e ? \u003cspan class=\"pl-s\"\u003e'test1.feature'\u003c/span\u003e : \u003cspan class=\"pl-s\"\u003e'test2.feature'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef result = call read(filename)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd this is another, using \u003ca href=\"#karate-call\"\u003e\u003ccode\u003ekarate.call()\u003c/code\u003e\u003c/a\u003e. Here we want to \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e a file only if a condition is satisfied:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def result = responseStatus == 404 ? {} : karate.call('delete-user.feature')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef result = responseStatus == 404 ? {} : karate.call(\u003cspan class=\"pl-s\"\u003e'delete-user.feature'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOr if we don't care about the result, we can \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e an \u003ccode\u003eif\u003c/code\u003e statement:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* if (responseStatus == 200) karate.call('delete-user.feature')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eif (responseStatus == 200) karate.call(\u003cspan class=\"pl-s\"\u003e'delete-user.feature'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd this may give you more ideas. You can always use a \u003ca href=\"#javascript-functions\"\u003eJavaScript function\u003c/a\u003e or \u003ca href=\"#calling-java\"\u003ecall Java\u003c/a\u003e for more complex logic.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def expected = zone == 'zone1' ? { foo: '#string' } : { bar: '#number' }\n* match response == expected\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef expected = zone == \u003cspan class=\"pl-s\"\u003e'zone1'\u003c/span\u003e ? { foo: \u003cspan class=\"pl-s\"\u003e'#string'\u003c/span\u003e } : { bar: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch response == expected\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJSON Lookup\u003c/h3\u003e\u003ca id=\"user-content-json-lookup\" class=\"anchor\" aria-label=\"Permalink: JSON Lookup\" href=\"#json-lookup\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can always use a JavaScript \u003ca href=\"https://www.w3schools.com/js/js_switch.asp\" rel=\"nofollow\"\u003e\u003ccode\u003eswitch case\u003c/code\u003e\u003c/a\u003e within an \u003ca href=\"#eval\"\u003e\u003ccode\u003eeval\u003c/code\u003e\u003c/a\u003e or \u003ca href=\"#javascript-functions\"\u003efunction\u003c/a\u003e block. But one pattern that you should be aware of is that JSON is actually a great data-structure for looking up data.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def data =\n\u0026quot;\u0026quot;\u0026quot;\n{\n   foo: 'hello',\n   bar: 'world'  \n}\n\u0026quot;\u0026quot;\u0026quot;\n# in real-life key can be dynamic\n* def key = 'bar'\n# and used to lookup data\n* match (data[key]) == 'world'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data =\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e{\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e   foo: 'hello',\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e   bar: 'world'  \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e}\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# in real-life key can be dynamic\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef key = \u003cspan class=\"pl-s\"\u003e'bar'\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e# and used to lookup data\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch (data[key]) == \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can find more details \u003ca href=\"https://stackoverflow.com/a/59162760/143475\" rel=\"nofollow\"\u003ehere\u003c/a\u003e. Also note how you can wrap the LHS of the \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e in parentheses in the rare cases where the parser expects JsonPath by default.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eAbort and Fail\u003c/h3\u003e\u003ca id=\"user-content-abort-and-fail\" class=\"anchor\" aria-label=\"Permalink: Abort and Fail\" href=\"#abort-and-fail\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn some rare cases you need to exit a \u003ccode\u003eScenario\u003c/code\u003e based on some condition. You can use \u003ca href=\"#karate-abort\"\u003e\u003ccode\u003ekarate.abort()\u003c/code\u003e\u003c/a\u003e like so:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* if (responseStatus == 404) karate.abort()\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eif (responseStatus == 404) karate.abort()\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eUsing \u003ccode\u003ekarate.abort()\u003c/code\u003e will \u003cem\u003enot\u003c/em\u003e fail the test. Conditionally making a test fail is easy with \u003ca href=\"#karate-fail\"\u003e\u003ccode\u003ekarate.fail()\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* if (condition) karate.fail('a custom message')\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eif (condition) karate.fail(\u003cspan class=\"pl-s\"\u003e'a custom message'\u003c/span\u003e)\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eBut normally a \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e statement is preferred unless you want a really descriptive error message.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAlso refer to \u003ca href=\"#polling\"\u003epolling\u003c/a\u003e for more ideas.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eCommonly Needed Utilities\u003c/h2\u003e\u003ca id=\"user-content-commonly-needed-utilities\" class=\"anchor\" aria-label=\"Permalink: Commonly Needed Utilities\" href=\"#commonly-needed-utilities\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince it is so easy to dive into \u003ca href=\"#calling-java\"\u003eJava-interop\u003c/a\u003e, Karate does not include any random-number functions, uuid generator or date / time utilities out of the box. You simply roll your own.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere is an example of how to get the current date, and formatted the way you want:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def getDate =\n  \u0026quot;\u0026quot;\u0026quot;\n  function() {\n    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');\n    var sdf = new SimpleDateFormat('yyyy/MM/dd');\n    var date = new java.util.Date();\n    return sdf.format(date);\n  } \n  \u0026quot;\u0026quot;\u0026quot;\n\n* def temp = getDate()\n* print temp\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef getDate =\n  \u003cspan class=\"pl-s\"\u003e\"\"\"\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  function() {\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    var sdf = new SimpleDateFormat('yyyy/MM/dd');\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    var date = new java.util.Date();\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e    return sdf.format(date);\u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  } \u003c/span\u003e\n\u003cspan class=\"pl-s\"\u003e  \"\"\"\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef temp = getDate()\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint temp\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd the above will result in something like this being logged: \u003ccode\u003e[print] 2017/10/16\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere below are a few more common examples:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eUtility\u003c/th\u003e\n\u003cth\u003eRecipe\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSystem Time (as a string)\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efunction(){ return java.lang.System.currentTimeMillis() + '' }\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eUUID\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efunction(){ return java.util.UUID.randomUUID() + '' }\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRandom Number (\u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003emax-1\u003c/code\u003e)\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efunction(max){ return Math.floor(Math.random() * max) }\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCase Insensitive Comparison\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efunction(a, b){ return a.equalsIgnoreCase(b) }\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSleep or Wait for \u003ccode\u003epause\u003c/code\u003e milliseconds\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003efunction(pause){ java.lang.Thread.sleep(pause) }\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp dir=\"auto\"\u003eThe first three are good enough for random string generation for most situations. Note that if you need to do a lot of case-insensitive string checks, \u003ca href=\"#karate-lowercase\"\u003e\u003ccode\u003ekarate.lowerCase()\u003c/code\u003e\u003c/a\u003e is what you are looking for.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eMultiple Functions in One File\u003c/h3\u003e\u003ca id=\"user-content-multiple-functions-in-one-file\" class=\"anchor\" aria-label=\"Permalink: Multiple Functions in One File\" href=\"#multiple-functions-in-one-file\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you find yourself needing a complex helper or utility function, we strongly recommend that you \u003ca href=\"#calling-java\"\u003euse Java\u003c/a\u003e because it is much easier to maintain and even debug if needed. And if you need multiple functions, you can easily organize them into a single Java class with multiple static methods.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThat said, if you want to stick to JavaScript, but find yourself accumulating a lot of helper functions that you need to use in multiple feature files, the following pattern is recommended.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can organize multiple \"common\" utilities into a single re-usable feature file as follows e.g. \u003ccode\u003ecommon.feature\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@ignore\nFeature:\n\nScenario:\n  * def hello = function(){ return 'hello' }\n  * def world = function(){ return 'world' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e@ignore\u003c/span\u003e\nFeature:\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef hello = function(){ return \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e }\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef world = function(){ return \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd then you have two options. The first option using \u003ca href=\"#shared-scope\"\u003eshared scope\u003c/a\u003e should be fine for most projects, but if you want to \"name space\" your functions, use \"isolated scope\":\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Scenario: function re-use, global / shared scope\n    * call read('common.feature')\n    * assert hello() == 'hello'\n    * assert world() == 'world'\n\nScenario: function re-use, isolated / name-spaced scope\n    * def utils = call read('common.feature')\n    * assert utils.hello() == 'hello'\n    * assert utils.world() == 'world'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e function re-use, global / shared scope\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ecall read(\u003cspan class=\"pl-s\"\u003e'common.feature'\u003c/span\u003e)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert hello() == \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert world() == \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e function re-use, isolated / name-spaced scope\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef utils = call read(\u003cspan class=\"pl-s\"\u003e'common.feature'\u003c/span\u003e)\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert utils.hello() == \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eassert utils.world() == \u003cspan class=\"pl-s\"\u003e'world'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can even move commonly used routines into \u003ca href=\"#restrictions-on-global-variables\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e which means that they become \"global\". But we recommend that you do this only if you are sure that these routines are needed in almost \u003cem\u003eall\u003c/em\u003e \u003ccode\u003e*.feature\u003c/code\u003e files. Bloating your configuration can lead to loss of performance, and maintainability may suffer.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eAsync\u003c/h2\u003e\u003ca id=\"user-content-async\" class=\"anchor\" aria-label=\"Permalink: Async\" href=\"#async\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe JS API has a \u003ca href=\"#karate-signal\"\u003e\u003ccode\u003ekarate.signal(result)\u003c/code\u003e\u003c/a\u003e method that is useful for involving asynchronous flows into a test.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003elisten\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-listen\" class=\"anchor\" aria-label=\"Permalink: listen\" href=\"#listen\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou use the \u003ccode\u003elisten\u003c/code\u003e keyword (with a timeout) to wait until that event occurs. The \u003ccode\u003elistenResult\u003c/code\u003e magic variable will hold the value passed to the call to \u003ccode\u003ekarate.signal()\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis is best \u003ca href=\"https://github.com/karatelabs/karate/tree/master/karate-netty#consumer-provider-example\"\u003eexplained\u003c/a\u003e in this \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/mock/contract/payment-service.feature\"\u003eexample\u003c/a\u003e that involves listening to an ActiveMQ / JMS queue.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote how \u003ca href=\"#javascript-functions\"\u003eJS functions\u003c/a\u003e defined at run-time can be mixed with custom \u003ca href=\"#java-interop\"\u003eJava code\u003c/a\u003e to get things done. You need to use \u003ca href=\"#karate-tojava\"\u003e\u003ccode\u003ekarate.toJava()\u003c/code\u003e\u003c/a\u003e to \"wrap\" JS functions passed to custom Java code.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Background:\n* def QueueConsumer = Java.type('mock.contract.QueueConsumer')\n* def queue = new QueueConsumer(queueName)\n* def handler = function(msg){ karate.signal(msg) }\n* queue.listen(karate.toJava(handler))\n* url paymentServiceUrl + '/payments'\n\nScenario: create, get, update, list and delete payments\n    Given request { amount: 5.67, description: 'test one' }\n    When method post\n    Then status 200\n    And match response == { id: '#number', amount: 5.67, description: 'test one' }\n    And def id = response.id\n    * listen 5000\n    * json shipment = listenResult\n    * print '### received:', shipment\n    * match shipment == { paymentId: '#(id)', status: 'shipped' }\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eBackground\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef QueueConsumer = Java.type(\u003cspan class=\"pl-s\"\u003e'mock.contract.QueueConsumer'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef queue = new QueueConsumer(queueName)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef handler = function(msg){ karate.signal(msg) }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003equeue.listen(karate.toJava(handler))\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eurl paymentServiceUrl + \u003cspan class=\"pl-s\"\u003e'/payments'\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e create, get, update, list and delete payments\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003erequest { amount: 5.67, description: \u003cspan class=\"pl-s\"\u003e'test one'\u003c/span\u003e }\n    \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n    \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch response == { id: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, amount: 5.67, description: \u003cspan class=\"pl-s\"\u003e'test one'\u003c/span\u003e }\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003edef id = response.id\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003elisten 5000\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ejson shipment = listenResult\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'### received:'\u003c/span\u003e, shipment\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch shipment == { paymentId: \u003cspan class=\"pl-s\"\u003e'#(id)'\u003c/span\u003e, status: \u003cspan class=\"pl-s\"\u003e'shipped'\u003c/span\u003e }\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eWebSocket\u003c/h2\u003e\u003ca id=\"user-content-websocket\" class=\"anchor\" aria-label=\"Permalink: WebSocket\" href=\"#websocket\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate also has built-in support for \u003ca href=\"http://www.websocket.org\" rel=\"nofollow\"\u003ewebsocket\u003c/a\u003e that is based on the \u003ca href=\"#async\"\u003easync\u003c/a\u003e capability and the \u003ca href=\"#listen\"\u003e\u003ccode\u003elisten\u003c/code\u003e\u003c/a\u003e keyword. The following method signatures are available on the \u003ca href=\"#the-karate-object\"\u003e\u003ccode\u003ekarate\u003c/code\u003e JS object\u003c/a\u003e to obtain a websocket client:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003ekarate.webSocket(url)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekarate.webSocket(url, handler)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ekarate.webSocket(url, handler, options)\u003c/code\u003e - where \u003ccode\u003eoptions\u003c/code\u003e is an optional JSON (or map-like) object that takes the following optional keys:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003esubProtocol\u003c/code\u003e - in case the server expects it\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eheaders\u003c/code\u003e - another JSON of key-value pairs\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emaxPayloadSize\u003c/code\u003e - this defaults to 4194304 (bytes, around 4 MB)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eThese will init a websocket client for the given \u003ccode\u003eurl\u003c/code\u003e and optional \u003ccode\u003esubProtocol\u003c/code\u003e. You can call \u003ccode\u003esend()\u003c/code\u003e on the returned object to send a message.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf a \u003ccode\u003ehandler\u003c/code\u003e \u003ca href=\"#javascript-functions\"\u003efunction\u003c/a\u003e (returning a boolean) is provided - it will be used to complete the \u003ca href=\"#listen\"\u003e\u003ccode\u003elisten\u003c/code\u003e\u003c/a\u003e \"wait\" if \u003ccode\u003etrue\u003c/code\u003e is returned. A handler function is needed only if you have to ignore some incoming traffic and stop the \"wait\" when a certain payload arrives. If you don't pass a \u003ccode\u003ehandler\u003c/code\u003e (or it is \u003ccode\u003enull\u003c/code\u003e), the first message is returned.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ccode\u003ekarate.signal()\u003c/code\u003e (described as part of the \u003ca href=\"#listen\"\u003e\u003ccode\u003elisten\u003c/code\u003e\u003c/a\u003e keyword) will be called internally and the \u003ccode\u003elistenResult\u003c/code\u003e will be the payload contents of the \"selected\" message.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere is an example, where the same websocket connection is used to send as well as receive a message.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def handler = function(msg){ return msg.startsWith('hello') }\n* def socket = karate.webSocket(demoBaseUrl + '/websocket', handler)\n* socket.send('Billie')\n* listen 5000\n* match listenResult == 'hello Billie !'\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef handler = function(msg){ return msg.startsWith(\u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e) }\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef socket = karate.webSocket(demoBaseUrl + \u003cspan class=\"pl-s\"\u003e'/websocket'\u003c/span\u003e, handler)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003esocket.send(\u003cspan class=\"pl-s\"\u003e'Billie'\u003c/span\u003e)\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003elisten 5000\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch listenResult == \u003cspan class=\"pl-s\"\u003e'hello Billie !'\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor handling binary messages, the same \u003ccode\u003ekarate.webSocket()\u003c/code\u003e method signatures exist for \u003ccode\u003ekarate.webSocketBinary()\u003c/code\u003e. Refer to these examples for more: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/websocket/echo.feature\"\u003e\u003ccode\u003eecho.feature\u003c/code\u003e\u003c/a\u003e | \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/websocket/websocket.feature\"\u003e\u003ccode\u003ewebsocket.feature\u003c/code\u003e\u003c/a\u003e. Note that any websocket instances created will be auto-closed at the end of the \u003ccode\u003eScenario\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJava Function References\u003c/h3\u003e\u003ca id=\"user-content-java-function-references\" class=\"anchor\" aria-label=\"Permalink: Java Function References\" href=\"#java-function-references\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eJavaScript functions have some limitations when combined with multi-threaded Java code. So it is recommended that you directly use a Java \u003ccode\u003eFunction\u003c/code\u003e when possible instead of using the \u003ccode\u003ekarate.toJava()\u003c/code\u003e \"wrapper\" as shown above.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eOne pattern you can adopt is to create a \"factory\" method that returns a Java function - where you can easily delegate to the logic you want. For example, see the \u003ccode\u003esayHelloFactory()\u003c/code\u003e method below:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"public class Hello {\n\n    public static String sayHello(String message) {\n        return \u0026quot;hello \u0026quot; + message;\n    }\n\n    public static Function\u0026lt;String, String\u0026gt; sayHelloFactory() {\n        return s -\u0026gt; sayHello(s);\n    }\n\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003epublic\u003c/span\u003e \u003cspan class=\"pl-k\"\u003eclass\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eHello\u003c/span\u003e {\n\n    \u003cspan class=\"pl-k\"\u003epublic\u003c/span\u003e \u003cspan class=\"pl-k\"\u003estatic\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e \u003cspan class=\"pl-en\"\u003esayHello\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003emessage\u003c/span\u003e) {\n        \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e\"hello \"\u003c/span\u003e + \u003cspan class=\"pl-s1\"\u003emessage\u003c/span\u003e;\n    }\n\n    \u003cspan class=\"pl-k\"\u003epublic\u003c/span\u003e \u003cspan class=\"pl-k\"\u003estatic\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003eFunction\u003c/span\u003e\u0026lt;\u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e, \u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e\u0026gt; \u003cspan class=\"pl-en\"\u003esayHelloFactory\u003c/span\u003e() {\n        \u003cspan class=\"pl-k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003es\u003c/span\u003e -\u0026gt; \u003cspan class=\"pl-en\"\u003esayHello\u003c/span\u003e(\u003cspan class=\"pl-s1\"\u003es\u003c/span\u003e);\n    }\n\n}\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd now, to get a reference to that \"function\" you can do this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"* def sayHello = Java.type('com.myco.Hello').sayHelloFactory()\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef sayHello = Java.type(\u003cspan class=\"pl-s\"\u003e'com.myco.Hello'\u003c/span\u003e).sayHelloFactory()\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis can be convenient when using \u003ca href=\"#shared-scope\"\u003eshared scope\u003c/a\u003e because you can just call \u003ccode\u003esayHello('myname')\u003c/code\u003e where needed.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eTags\u003c/h2\u003e\u003ca id=\"user-content-tags\" class=\"anchor\" aria-label=\"Permalink: Tags\" href=\"#tags\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eGherkin has a great way to sprinkle meta-data into test-scripts - which gives you some interesting options when running tests in bulk.  The most common use-case would be to partition your tests into 'smoke', 'regression' and the like - which enables being able to selectively execute a sub-set of tests.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe documentation on how to run tests via the \u003ca href=\"#test-suites\"\u003ecommand line\u003c/a\u003e has an example of how to use tags to decide which tests to \u003cem\u003enot\u003c/em\u003e run (or ignore). Also see \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/tags/first.feature\"\u003e\u003ccode\u003efirst.feature\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/tags/second.feature\"\u003e\u003ccode\u003esecond.feature\u003c/code\u003e\u003c/a\u003e in the \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003edemos\u003c/a\u003e. If you find yourself juggling multiple tags with logical \u003ccode\u003eAND\u003c/code\u003e and \u003ccode\u003eOR\u003c/code\u003e complexity, refer to this \u003ca href=\"https://stackoverflow.com/a/50693388/143475\" rel=\"nofollow\"\u003eStack Overflow answer\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eFor advanced users, Karate supports being able to query for tags within a test, and even tags in a \u003ccode\u003e@name=value\u003c/code\u003e form. Refer to \u003ca href=\"#karate-tags\"\u003e\u003ccode\u003ekarate.tags\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"#karate-tagvalues\"\u003e\u003ccode\u003ekarate.tagValues\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eSpecial Tags\u003c/h3\u003e\u003ca id=\"user-content-special-tags\" class=\"anchor\" aria-label=\"Permalink: Special Tags\" href=\"#special-tags\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor completeness, the \"built-in\" tags are the following:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eTag\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@ignore\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eAny \u003ccode\u003eScenario\u003c/code\u003e with (or that has inherited) this tag will be skipped at run-time. This does not apply to anything that is \"called\" though\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@parallel\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"#parallelfalse\"\u003e\u003ccode\u003e@parallel=false\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@report\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"#reportfalse\"\u003e\u003ccode\u003e@report=false\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@setup\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"#setup\"\u003e\u003ccode\u003e@setup\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@env\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSee below\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e@envnot\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSee below\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eEnvironment Tags\u003c/h3\u003e\u003ca id=\"user-content-environment-tags\" class=\"anchor\" aria-label=\"Permalink: Environment Tags\" href=\"#environment-tags\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThere are two special tags that allow you to \"select\" or \"un-select\" a \u003ccode\u003eScenario\u003c/code\u003e depending on the value of \u003ca href=\"#switching-the-environment\"\u003e\u003ccode\u003ekarate.env\u003c/code\u003e\u003c/a\u003e. This can be really convenient, for example to \u003cem\u003enever\u003c/em\u003e run some tests in a certain \"production like\" or sensitive environment.\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ccode\u003e@env=foo,bar\u003c/code\u003e - will run only when the value of \u003ccode\u003ekarate.env\u003c/code\u003e is not-null \u003cem\u003eand\u003c/em\u003e equal to \u003ccode\u003efoo\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e \u003ccode\u003ebar\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e@envnot=foo\u003c/code\u003e - will run when the value of \u003ccode\u003ekarate.env\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e or anything \u003cem\u003eother than\u003c/em\u003e \u003ccode\u003efoo\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eHere is an example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@env=dev  \nScenario: runs only when karate.env is 'dev'\n* print 'karate.env is:', karate.env\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e@env=dev\u003c/span\u003e  \n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e runs only when karate.env is 'dev'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'karate.env is:'\u003c/span\u003e, karate.env\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eSince multiple values are supported, you can also do this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"@envnot=perf,prod  \nScenario: never runs in perf or prod\n* print 'karate.env is:', karate.env\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003e@envnot=perf,prod\u003c/span\u003e  \n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e never runs in perf or prod\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'karate.env is:'\u003c/span\u003e, karate.env\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eTags And Examples\u003c/h3\u003e\u003ca id=\"user-content-tags-and-examples\" class=\"anchor\" aria-label=\"Permalink: Tags And Examples\" href=\"#tags-and-examples\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eA little-known capability of the Gherkin syntax is to be able to tag even specific rows in a bunch of examples ! You have to repeat the \u003ccode\u003eExamples\u003c/code\u003e section for each tag. The example below combines this with the advanced features described above.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Scenario Outline: examples partitioned by tag\n* def vals = karate.tagValues\n* match vals.region[0] == expected\n\n  @region=US\n  Examples:\n    | expected |\n    | US       |\n\n  @region=GB\n  Examples:\n    | expected |\n    | GB       |\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e examples partitioned by tag\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef vals = karate.tagValues\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch vals.region[0] == expected\n\n  \u003cspan class=\"pl-k\"\u003e@region=US\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eexpected\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eUS\u003c/span\u003e       |\u003c/span\u003e\n\n  \u003cspan class=\"pl-k\"\u003e@region=GB\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eexpected\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eGB\u003c/span\u003e       |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNote that if you tag \u003ccode\u003eExamples\u003c/code\u003e like this, and if a tag selector is used when running a given \u003ccode\u003eFeature\u003c/code\u003e - only the \u003ccode\u003eExamples\u003c/code\u003e that match the tag selector will be executed. There is no concept of a \"default\" where for e.g. if there is no matching tag - that the \u003ccode\u003eExamples\u003c/code\u003e without a tag will be executed. But note that you can use the negative form of a tag selector: \u003ccode\u003e~@region=GB\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eDynamic Port Numbers\u003c/h2\u003e\u003ca id=\"user-content-dynamic-port-numbers\" class=\"anchor\" aria-label=\"Permalink: Dynamic Port Numbers\" href=\"#dynamic-port-numbers\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn situations where you start an (embedded) application server as part of the test set-up phase, a typical challenge is that the HTTP port may be determined at run-time. So how can you get this value injected into the Karate configuration ?\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIt so happens that the \u003ca href=\"#the-karate-object\"\u003e\u003ccode\u003ekarate\u003c/code\u003e\u003c/a\u003e object has a field called \u003ccode\u003eproperties\u003c/code\u003e which can read a Java system-property by name like this: \u003ca href=\"#karate-properties\"\u003e\u003ccode\u003ekarate.properties['myName']\u003c/code\u003e\u003c/a\u003e. Since the \u003ccode\u003ekarate\u003c/code\u003e object is injected within \u003ca href=\"#configuration\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e on start-up, it is a simple and effective way for other processes within the same JVM to pass configuration values to Karate at run-time. Refer to the 'demo' \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/karate-config.js\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e for an example and how the \u003ccode\u003edemo.server.port\u003c/code\u003e system-property is set-up in the test runner: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/TestBase.java\"\u003e\u003ccode\u003eTestBase.java\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJava API\u003c/h2\u003e\u003ca id=\"user-content-java-api\" class=\"anchor\" aria-label=\"Permalink: Java API\" href=\"#java-api\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate has a \u003ca href=\"https://twitter.com/KarateDSL/status/1353969718730788865\" rel=\"nofollow\"\u003eset of Java API-s\u003c/a\u003e that expose the HTTP, JSON, data-assertion and UI automation capabilities. The primary classes are described below.\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/Http.java\"\u003e\u003ccode\u003eHttp\u003c/code\u003e\u003c/a\u003e - build and execute any HTTP request and retrieve responses\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/Json.java\"\u003e\u003ccode\u003eJson\u003c/code\u003e\u003c/a\u003e - build and manipulate JSON data using JsonPath expressions, convert to and from Java \u003ccode\u003eMap\u003c/code\u003e-s and \u003ccode\u003eList\u003c/code\u003e-s, parse strings into JSON and convert Java objects into JSON\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/Match.java\"\u003e\u003ccode\u003eMatch\u003c/code\u003e\u003c/a\u003e - exposes all of Karate's \u003ca href=\"#match\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e capabilities, and this works for Java \u003ccode\u003eMap\u003c/code\u003e and \u003ccode\u003eList\u003c/code\u003e objects\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/driver/Driver.java\"\u003e\u003ccode\u003eDriver\u003c/code\u003e\u003c/a\u003e - perform \u003ca href=\"https://github.com/karatelabs/karate/tree/master/karate-core\"\u003eweb-browser automation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eDo note that if you choose the Java API, you will naturally lose some of the test-automation framework benefits such as HTML reports, parallel execution and \u003ca href=\"#the-karate-object\"\u003eJavaScript\u003c/a\u003e / \u003ca href=\"#configuration\"\u003econfiguration\u003c/a\u003e. You may have to rely on unit-testing frameworks or integrate additional dependencies.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003ejbang\u003c/h3\u003e\u003ca id=\"user-content-jbang\" class=\"anchor\" aria-label=\"Permalink: jbang\" href=\"#jbang\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ca href=\"https://www.jbang.dev\" rel=\"nofollow\"\u003ejbang\u003c/a\u003e is a great way for you to install and execute scripts that use Karate's Java API on any machine with minimal setup. Note that jbang itself is \u003ca href=\"https://www.jbang.dev/documentation/guide/latest/installation.html\" rel=\"nofollow\"\u003esuper-easy to install\u003c/a\u003e and there is even a \"\u003ca href=\"https://www.jbang.dev/documentation/guide/latest/installation.html#zero-install\" rel=\"nofollow\"\u003eZero Install\u003c/a\u003e\" option.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere below is an example jbang script that uses the Karate \u003ca href=\"#java-api\"\u003eJava API\u003c/a\u003e to do some useful work. Name the file as \u003ccode\u003ejavadsl.java\u003c/code\u003e and run using the command: \u003ccode\u003ejbang javadsl.java\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eplease replace \u003ccode\u003eRELEASE\u003c/code\u003e with the exact version of Karate you intend to use if applicable\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"///usr/bin/env jbang \u0026quot;$0\u0026quot; \u0026quot;$@\u0026quot; ; exit $?\n//DEPS com.intuit.karate:karate-core:RELEASE:all\n\nimport com.intuit.karate.*;\nimport java.util.List;\n\npublic class javadsl {\n\n    public static void main(String[] args) {\n        List users = Http.to(\u0026quot;https://jsonplaceholder.typicode.com/users\u0026quot;)\n                .get().json().asList();\n        Match.that(users.get(0)).contains(\u0026quot;{ name: 'Leanne Graham' }\u0026quot;);\n        String city = Json.of(users).get(\u0026quot;$[0].address.city\u0026quot;);\n        Match.that(\u0026quot;Gwenborough\u0026quot;).isEqualTo(city);\n        System.out.println(\u0026quot;\\n*** second user: \u0026quot; + Json.of(users.get(1)).toString());\n    }\n\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-c\"\u003e///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\u003c/span\u003e\n\u003cspan class=\"pl-c\"\u003e//DEPS com.intuit.karate:karate-core:RELEASE:all\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ecom\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eintuit\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.*;\n\u003cspan class=\"pl-k\"\u003eimport\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ejava\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eutil\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eList\u003c/span\u003e;\n\n\u003cspan class=\"pl-k\"\u003epublic\u003c/span\u003e \u003cspan class=\"pl-k\"\u003eclass\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003ejavadsl\u003c/span\u003e {\n\n    \u003cspan class=\"pl-k\"\u003epublic\u003c/span\u003e \u003cspan class=\"pl-k\"\u003estatic\u003c/span\u003e \u003cspan class=\"pl-smi\"\u003evoid\u003c/span\u003e \u003cspan class=\"pl-en\"\u003emain\u003c/span\u003e(\u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e[] \u003cspan class=\"pl-s1\"\u003eargs\u003c/span\u003e) {\n        \u003cspan class=\"pl-smi\"\u003eList\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eusers\u003c/span\u003e = \u003cspan class=\"pl-smi\"\u003eHttp\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003eto\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"https://jsonplaceholder.typicode.com/users\"\u003c/span\u003e)\n                .\u003cspan class=\"pl-en\"\u003eget\u003c/span\u003e().\u003cspan class=\"pl-en\"\u003ejson\u003c/span\u003e().\u003cspan class=\"pl-en\"\u003easList\u003c/span\u003e();\n        \u003cspan class=\"pl-smi\"\u003eMatch\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003ethat\u003c/span\u003e(\u003cspan class=\"pl-s1\"\u003eusers\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003eget\u003c/span\u003e(\u003cspan class=\"pl-c1\"\u003e0\u003c/span\u003e)).\u003cspan class=\"pl-en\"\u003econtains\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"{ name: 'Leanne Graham' }\"\u003c/span\u003e);\n        \u003cspan class=\"pl-smi\"\u003eString\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ecity\u003c/span\u003e = \u003cspan class=\"pl-smi\"\u003eJson\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003eof\u003c/span\u003e(\u003cspan class=\"pl-s1\"\u003eusers\u003c/span\u003e).\u003cspan class=\"pl-en\"\u003eget\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"$[0].address.city\"\u003c/span\u003e);\n        \u003cspan class=\"pl-smi\"\u003eMatch\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003ethat\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"Gwenborough\"\u003c/span\u003e).\u003cspan class=\"pl-en\"\u003eisEqualTo\u003c/span\u003e(\u003cspan class=\"pl-s1\"\u003ecity\u003c/span\u003e);\n        \u003cspan class=\"pl-smi\"\u003eSystem\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003eout\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003eprintln\u003c/span\u003e(\u003cspan class=\"pl-s\"\u003e\"\u003cspan class=\"pl-cce\"\u003e\\n\u003c/span\u003e*** second user: \"\u003c/span\u003e + \u003cspan class=\"pl-smi\"\u003eJson\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003eof\u003c/span\u003e(\u003cspan class=\"pl-s1\"\u003eusers\u003c/span\u003e.\u003cspan class=\"pl-en\"\u003eget\u003c/span\u003e(\u003cspan class=\"pl-c1\"\u003e1\u003c/span\u003e)).\u003cspan class=\"pl-en\"\u003etoString\u003c/span\u003e());\n    }\n\n}\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eRead the documentation of the \u003ca href=\"/karatelabs/karate/blob/master/karate-netty#jbang\"\u003estand-alone JAR\u003c/a\u003e for more - such as how you can even install custom command-line applications using jbang !\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eInvoking feature files using the Java API\u003c/h3\u003e\u003ca id=\"user-content-invoking-feature-files-using-the-java-api\" class=\"anchor\" aria-label=\"Permalink: Invoking feature files using the Java API\" href=\"#invoking-feature-files-using-the-java-api\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt is also possible to invoke a feature file via a Java API which can be useful in some test-automation situations.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA common use case is to mix API-calls into a larger test-suite, for example a Selenium or WebDriver UI test. So you can use Karate to set-up data via API calls, then run the UI test-automation, and finally again use Karate to assert that the system-state is as expected. Note that you can even include calls to a database from Karate using \u003ca href=\"#calling-java\"\u003eJava interop\u003c/a\u003e. And \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/dogs/dogs.feature\"\u003ethis example\u003c/a\u003e may make it clear why using Karate itself to drive even your UI-tests may be a good idea.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe static method \u003ccode\u003ecom.intuit.karate.Runner.runFeature()\u003c/code\u003e is best explained in this demo unit-test: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/java/JavaApiTest.java\"\u003e\u003ccode\u003eJavaApiTest.java\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou can optionally pass in variable values or over-ride config via a \u003ccode\u003eHashMap\u003c/code\u003e or leave the second-last argument as \u003ccode\u003enull\u003c/code\u003e. The variable state after feature execution would be returned as a \u003ccode\u003eMap\u0026lt;String, Object\u0026gt;\u003c/code\u003e. The last \u003ccode\u003eboolean\u003c/code\u003e argument is whether the \u003ca href=\"#configuration\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e should be processed or not. Refer to the documentation on \u003ca href=\"#type-conversion\"\u003etype-conversion\u003c/a\u003e to make sure you can 'unpack' data returned from Karate correctly, especially when dealing with XML.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eHooks\u003c/h2\u003e\u003ca id=\"user-content-hooks\" class=\"anchor\" aria-label=\"Permalink: Hooks\" href=\"#hooks\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIf you are looking for \u003ca href=\"http://toolsqa.com/cucumber/cucumber-hooks/\" rel=\"nofollow\"\u003eCucumber 'hooks'\u003c/a\u003e Karate does not support them, mainly because they depend on Java code, which goes against the Karate Way™.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eInstead, Karate gives you all you need as part of the syntax. Here is a summary:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eTo Run Some Code\u003c/th\u003e\n\u003cth\u003eHow\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eBefore \u003cem\u003eeverything\u003c/em\u003e (or 'globally' once)\u003c/td\u003e\n\u003ctd\u003eSee \u003ca href=\"#karatecallsingle\"\u003e\u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eBefore every \u003ccode\u003eScenario\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eUse the \u003ca href=\"#script-structure\"\u003e\u003ccode\u003eBackground\u003c/code\u003e\u003c/a\u003e. Note that \u003ca href=\"#karate-configjs\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e is processed before \u003cem\u003eevery\u003c/em\u003e \u003ccode\u003eScenario\u003c/code\u003e - so you can choose to put \"global\" config here, for example using \u003ca href=\"#karate-configure\"\u003e\u003ccode\u003ekarate.configure()\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOnce (or at the start of) every \u003ccode\u003eFeature\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eUse a \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e in the \u003ca href=\"#script-structure\"\u003e\u003ccode\u003eBackground\u003c/code\u003e\u003c/a\u003e. The advantage is that you can set up variables (using \u003ca href=\"#def\"\u003e\u003ccode\u003edef\u003c/code\u003e\u003c/a\u003e if needed) which can be used in all \u003ccode\u003eScenario\u003c/code\u003e-s within that \u003ccode\u003eFeature\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAfter every \u003ccode\u003eScenario\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure afterScenario\u003c/code\u003e\u003c/a\u003e (see \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/hooks/hooks.feature\"\u003eexample\u003c/a\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAt the end of the \u003ccode\u003eFeature\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ca href=\"#configure\"\u003e\u003ccode\u003econfigure afterFeature\u003c/code\u003e\u003c/a\u003e (see \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/hooks/hooks.feature\"\u003eexample\u003c/a\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eNote that for the \u003ccode\u003eafterFeature\u003c/code\u003e hook to work, you should be using the \u003ca href=\"#parallel-execution\"\u003e\u003ccode\u003eRunner\u003c/code\u003e API\u003c/a\u003e and not the JUnit runner.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/h3\u003e\u003ca id=\"user-content-karatecallsingle\" class=\"anchor\" aria-label=\"Permalink: karate.callSingle()\" href=\"#karatecallsingle\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eOnly recommended for advanced users, but this guarantees a routine is run only once, \u003cem\u003eeven\u003c/em\u003e when \u003ca href=\"#parallel-execution\"\u003erunning tests in parallel\u003c/a\u003e. You can use \u003ca href=\"#karate-callsingle\"\u003e\u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/a\u003e in \u003ca href=\"#karate-configjs\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e like this:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var result = karate.callSingle('classpath:some/package/my.feature');\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eresult\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003ecallSingle\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'classpath:some/package/my.feature'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIt can take a second JSON argument following the same rules as \u003ca href=\"#call\"\u003e\u003ccode\u003ecall\u003c/code\u003e\u003c/a\u003e. Once you get a result, you typically use it to set global variables.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRefer to this example:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/karate-config.js\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/headers-single.feature\"\u003e\u003ccode\u003eheaders-single.feature\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eYou \u003cem\u003ecan\u003c/em\u003e use \u003ccode\u003ekarate.callSingle()\u003c/code\u003e directly in a \u003ccode\u003e*.feature\u003c/code\u003e file, but it logically fits better in the global \"bootstrap\". Ideally it should return \"pure JSON\" and note that you always get a \"deep clone\" of the cached result object.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIMPORTANT: There are some restrictions when using \u003ca href=\"#callonce\"\u003e\u003ccode\u003ecallonce\u003c/code\u003e\u003c/a\u003e or \u003ccode\u003ekarate.callSingle()\u003c/code\u003e especially within \u003ca href=\"#karate-configjs\"\u003e\u003ccode\u003ekarate-config.js\u003c/code\u003e\u003c/a\u003e. Ideally you should return only \u003cem\u003epure\u003c/em\u003e JSON data (or a primitive string, number etc.). Keep in mind that the reason this exists is to \"cache\" data, and \u003cem\u003enot\u003c/em\u003e behavior. So if you return complex objects such as a custom Java instance or a JS function that depends on complex objects, this \u003ca href=\"https://github.com/karatelabs/karate/issues/1558\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/1558/hovercard\"\u003e\u003cem\u003emay\u003c/em\u003e cause issues when you run in parallel\u003c/a\u003e. If you really need to re-use a Java function, see \u003ca href=\"#java-function-references\"\u003eJava Function References\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eMultiple calls using \u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-multiple-calls-using-karatecallsingle\" class=\"anchor\" aria-label=\"Permalink: Multiple calls using karate.callSingle()\" href=\"#multiple-calls-using-karatecallsingle\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe first argument to \u003ccode\u003ekarate.callSingle()\u003c/code\u003e is used as the \"cache key\". So if you tried to re-use the same feature but with multiple arguments, things will not work as you expect. But you can suffix a \u003ccode\u003e?name\u003c/code\u003e to the feature to de-dupe it, like so:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var adminResponse = karate.callSingle('classpath:get-token.feature?admin', {'username': 'admin', 'password': 'password123' });\nvar userResponse = karate.callSingle('classpath:get-token.feature?user', {'username': 'user', 'password': 'password456' });\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eadminResponse\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003ecallSingle\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'classpath:get-token.feature?admin'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'username'\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'admin'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'password'\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'password123'\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003evar\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003euserResponse\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e=\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003ecallSingle\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'classpath:get-token.feature?user'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'username'\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'user'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'password'\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'password456'\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eNow \u003ccode\u003eadminResponse\u003c/code\u003e and \u003ccode\u003euserResponse\u003c/code\u003e will be different, even though the same feature file is being used for a \u003ccode\u003ecallSingle()\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003econfigure callSingleCache\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-configure-callsinglecache\" class=\"anchor\" aria-label=\"Permalink: configure callSingleCache\" href=\"#configure-callsinglecache\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eWhen re-running tests in development mode and when your test suite depends on say an \u003ccode\u003eAuthorization\u003c/code\u003e header set by \u003ca href=\"#karatecallsingle\"\u003e\u003ccode\u003ekarate.callSingle()\u003c/code\u003e\u003c/a\u003e, you can cache the results locally to a file, which is very convenient when your \"auth token\" is valid for a period of a few minutes - which typically is the case. This means that as long as the token \"on file\" is valid, you can save time by not having to make the one or two HTTP calls needed to \"sign-in\" or create \"throw-away\" users in your SSO store.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSo in \"dev mode\" you can easily set this behavior like this. Just ensure that this is \"configured\" \u003cem\u003ebefore\u003c/em\u003e you use \u003ccode\u003ekarate.callSingle()\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"if (karate.env == 'local') {\n  karate.configure('callSingleCache', { minutes: 15 });\n}\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eif\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-c1\"\u003eenv\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003e==\u003c/span\u003e \u003cspan class=\"pl-s\"\u003e'local'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'callSingleCache'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eminutes\u003c/span\u003e: \u003cspan class=\"pl-c1\"\u003e15\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eBy default Karate will use \u003ccode\u003etarget\u003c/code\u003e (or \u003ccode\u003ebuild\u003c/code\u003e) as the \"cache\" folder, which you can over-ride by adding a \u003ccode\u003edir\u003c/code\u003e key:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  karate.configure('callSingleCache', { minutes: 15, dir: 'some/other/folder' });\"\u003e\u003cpre\u003e  \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e.\u003c/span\u003e\u003cspan class=\"pl-en\"\u003econfigure\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e(\u003c/span\u003e\u003cspan class=\"pl-s\"\u003e'callSingleCache'\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e{\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003eminutes\u003c/span\u003e: \u003cspan class=\"pl-c1\"\u003e15\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e,\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003edir\u003c/span\u003e: \u003cspan class=\"pl-s\"\u003e'some/other/folder'\u003c/span\u003e \u003cspan class=\"pl-kos\"\u003e}\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e)\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eThis caching behavior will work only if the result of \u003ccode\u003ekarate.callSingle()\u003c/code\u003e is a JSON-like object, and any JS functions or Java objects mixed in will be lost.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eData Driven Tests\u003c/h2\u003e\u003ca id=\"user-content-data-driven-tests\" class=\"anchor\" aria-label=\"Permalink: Data Driven Tests\" href=\"#data-driven-tests\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eThe Cucumber Way\u003c/h3\u003e\u003ca id=\"user-content-the-cucumber-way\" class=\"anchor\" aria-label=\"Permalink: The Cucumber Way\" href=\"#the-cucumber-way\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eCucumber has a concept of \u003ca href=\"https://docs.cucumber.io/gherkin/reference/#scenario-outline\" rel=\"nofollow\"\u003eScenario Outlines\u003c/a\u003e where you can re-use a set of data-driven steps and assertions, and the data can be declared in a very user-friendly fashion. Observe the usage of \u003ccode\u003eScenario Outline:\u003c/code\u003e instead of \u003ccode\u003eScenario:\u003c/code\u003e, and the new \u003ccode\u003eExamples:\u003c/code\u003e section.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eYou should take a minute to compare this with the \u003ca href=\"https://github.com/basdijkstra/rest-assured-workshop/blob/d9734da98bfcd8087055bdcd78545581dd23cb77/src/test/java/answers/RestAssuredAnswers2Test.java\"\u003eexact same example implemented in REST-assured and TestNG\u003c/a\u003e. Note that this example only does a \"string equals\" check on \u003cem\u003eparts\u003c/em\u003e of the JSON, but with Karate you are always encouraged to match the \u003cem\u003eentire\u003c/em\u003e payload in one step.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature: karate answers 2\n\nBackground:\n  * url 'http://localhost:8080'\n\nScenario Outline: given circuit name, validate country\n  Given path 'api/f1/circuits/\u0026lt;name\u0026gt;.json'\n  When method get\n  Then match $.MRData.CircuitTable.Circuits[0].Location.country == '\u0026lt;country\u0026gt;'\n\n  Examples:\n    | name   | country  |\n    | monza  | Italy    |\n    | spa    | Belgium  |\n    | sepang | Malaysia |\n\nScenario Outline: given race number, validate number of pitstops for Max Verstappen in 2015\n  Given path 'api/f1/2015/\u0026lt;race\u0026gt;/drivers/max_verstappen/pitstops.json'\n  When method get\n  Then assert response.MRData.RaceTable.Races[0].PitStops.length == \u0026lt;stops\u0026gt;\n\n  Examples:\n    | race | stops |\n    | 1    | 1     |\n    | 2    | 3     |\n    | 3    | 2     |\n    | 4    | 2     |\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eFeature\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e karate answers 2\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eBackground\u003c/span\u003e:\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eurl \u003cspan class=\"pl-s\"\u003e'http://localhost:8080'\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e given circuit name, validate country\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'api/f1/circuits/\u0026lt;name\u0026gt;.json'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod get\n  \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003ematch $.MRData.CircuitTable.Circuits[0].Location.country == \u003cspan class=\"pl-s\"\u003e'\u0026lt;country\u0026gt;'\u003c/span\u003e\n\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e   | \u003cspan class=\"pl-s1\"\u003ecountry\u003c/span\u003e  |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003emonza\u003c/span\u003e  | \u003cspan class=\"pl-s1\"\u003eItaly\u003c/span\u003e    |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003espa\u003c/span\u003e    | \u003cspan class=\"pl-s1\"\u003eBelgium\u003c/span\u003e  |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003esepang\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003eMalaysia\u003c/span\u003e |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e given race number, validate number of pitstops for Max Verstappen in 2015\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'api/f1/2015/\u0026lt;race\u0026gt;/drivers/max_verstappen/pitstops.json'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod get\n  \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003eassert response.MRData.RaceTable.Races[0].PitStops.length == \u003cspan class=\"pl-smi\"\u003e\u0026lt;stops\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003erace\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003estops\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e    | \u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e     |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003e2\u003c/span\u003e    | \u003cspan class=\"pl-s1\"\u003e3\u003c/span\u003e     |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003e3\u003c/span\u003e    | \u003cspan class=\"pl-s1\"\u003e2\u003c/span\u003e     |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003e4\u003c/span\u003e    | \u003cspan class=\"pl-s1\"\u003e2\u003c/span\u003e     |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThis is great for testing boundary conditions against a single end-point, with the added bonus that your test becomes even more readable. This approach can certainly enable product-owners or domain-experts who are not programmer-folk, to review, and even collaborate on test-scenarios and scripts.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eScenario Outline Enhancements\u003c/h3\u003e\u003ca id=\"user-content-scenario-outline-enhancements\" class=\"anchor\" aria-label=\"Permalink: Scenario Outline Enhancements\" href=\"#scenario-outline-enhancements\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eKarate has enhanced the Cucumber \u003ccode\u003eScenario Outline\u003c/code\u003e as follows:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e\u003cstrong\u003eType Hints\u003c/strong\u003e: if the \u003ccode\u003eExamples\u003c/code\u003e column header has a \u003ccode\u003e!\u003c/code\u003e appended, each value will be evaluated as a JavaScript data-type (number, boolean, or \u003cem\u003eeven\u003c/em\u003e in-line JSON) - else it defaults to string.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMagic Variables\u003c/strong\u003e: \u003ccode\u003e__row\u003c/code\u003e gives you the entire row as a JSON object, and \u003ccode\u003e__num\u003c/code\u003e gives you the row index (the first row is \u003ccode\u003e0\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAuto Variables\u003c/strong\u003e: in addition to \u003ccode\u003e__row\u003c/code\u003e, each column key-value will be available as a separate \u003ca href=\"#def\"\u003evariable\u003c/a\u003e, which greatly simplifies JSON manipulation - especially when you want to re-use JSON \u003ca href=\"#reading-files\"\u003efiles\u003c/a\u003e containing \u003ca href=\"#embedded-expressions\"\u003eembedded expressions\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eAny empty cells will result in a \u003ccode\u003enull\u003c/code\u003e value for that column-key, and this can be useful to \u003ca href=\"#remove-if-null\"\u003eremove nodes\u003c/a\u003e from JSON or XML documents\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003eThese are best explained with \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/outline.feature\"\u003eexamples\u003c/a\u003e. You can choose between the string-placeholder style \u003ccode\u003e\u0026lt;foo\u0026gt;\u003c/code\u003e or \u003cem\u003edirectly\u003c/em\u003e refer to the \u003ca href=\"#def\"\u003evariable\u003c/a\u003e \u003ccode\u003efoo\u003c/code\u003e (or even the \u003cem\u003ewhole row\u003c/em\u003e JSON as \u003ccode\u003e__row\u003c/code\u003e) in JSON-friendly \u003ca href=\"#karate-expressions\"\u003eexpressions\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that even the scenario name can accept placeholders - which is very useful in reports.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Scenario Outline: name is \u0026lt;name\u0026gt; and age is \u0026lt;age\u0026gt;\n  * def temp = '\u0026lt;name\u0026gt;'\n  * match temp == name\n  * match temp == __row.name\n  * def expected = __num == 0 ? 'name is Bob and age is 5' : 'name is Nyan and age is 6'\n  * match expected == karate.scenario.name\n\n  Examples:\n    | name | age |\n    | Bob  | 5   |\n    | Nyan | 6   |\n\nScenario Outline: magic variables with type hints\n  * def expected = [{ name: 'Bob', age: 5 }, { name: 'Nyan', age: 6 }]\n  * match __row == expected[__num]\n\n  Examples:\n    | name | age! |\n    | Bob  | 5    |\n    | Nyan | 6    |\n\nScenario Outline: embedded expressions and type hints\n  * match __row == { name: '#(name)', alive: '#boolean' }\n\n  Examples:\n    | name | alive! |\n    | Bob  | false  |\n    | Nyan | true   |\n\nScenario Outline: inline json\n  * match __row == { first: 'hello', second: { a: 1 } }\n  * match first == 'hello'\n  * match second == { a: 1 }\n\n  Examples:\n    | first  | second!  |\n    | hello  | { a: 1 } |\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e name is \u0026lt;name\u0026gt; and age is \u0026lt;age\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef temp = \u003cspan class=\"pl-s\"\u003e'\u0026lt;name\u0026gt;'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch temp == name\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch temp == __row.name\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef expected = __num == 0 ? \u003cspan class=\"pl-s\"\u003e'name is Bob and age is 5'\u003c/span\u003e : \u003cspan class=\"pl-s\"\u003e'name is Nyan and age is 6'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch expected == karate.scenario.name\n\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eBob\u003c/span\u003e  | \u003cspan class=\"pl-s1\"\u003e5\u003c/span\u003e   |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eNyan\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003e6\u003c/span\u003e   |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e magic variables with type hints\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef expected = [{ name: \u003cspan class=\"pl-s\"\u003e'Bob'\u003c/span\u003e, age: 5 }, { name: \u003cspan class=\"pl-s\"\u003e'Nyan'\u003c/span\u003e, age: 6 }]\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch __row == expected[__num]\n\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e! |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eBob\u003c/span\u003e  | \u003cspan class=\"pl-s1\"\u003e5\u003c/span\u003e    |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eNyan\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003e6\u003c/span\u003e    |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e embedded expressions and type hints\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch __row == { name: \u003cspan class=\"pl-s\"\u003e'#(name)'\u003c/span\u003e, alive: \u003cspan class=\"pl-s\"\u003e'#boolean'\u003c/span\u003e }\n\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003ealive\u003c/span\u003e! |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eBob\u003c/span\u003e  | \u003cspan class=\"pl-s1\"\u003efalse\u003c/span\u003e  |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eNyan\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003etrue\u003c/span\u003e   |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e inline json\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch __row == { first: \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e, second: { a: 1 } }\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch first == \u003cspan class=\"pl-s\"\u003e'hello'\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch second == { a: 1 }\n\n  \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003efirst\u003c/span\u003e  | \u003cspan class=\"pl-s1\"\u003esecond\u003c/span\u003e!  |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003ehello\u003c/span\u003e  | { \u003cspan class=\"pl-s1\"\u003ea\u003c/span\u003e: \u003cspan class=\"pl-s1\"\u003e1\u003c/span\u003e } |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFor another example, see: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/outline/examples.feature\"\u003e\u003ccode\u003eexamples.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you're looking for more complex ways of dynamically naming your scenarios you can use JS string interpolation by including placeholders in your scenario name.\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Scenario Outline: name is ${name.first} ${name.last} and age is ${age}\n  * match name.first == \u0026quot;#? _ == 'Bob' || _ == 'Nyan'\u0026quot;\n  * match name.last == \u0026quot;#? _ == 'Dylan' || _ == 'Cat'\u0026quot;\n  * match title == karate.scenario.name\n\nExamples:\n  | name!                               | age | title                           |\n  | { \u0026quot;first\u0026quot;: \u0026quot;Bob\u0026quot;, \u0026quot;last\u0026quot;: \u0026quot;Dylan\u0026quot; } | 10  | name is Bob Dylan and age is 10 |\n  | { \u0026quot;first\u0026quot;: \u0026quot;Nyan\u0026quot;, \u0026quot;last\u0026quot;: \u0026quot;Cat\u0026quot; }  | 5   | name is Nyan Cat and age is 5   |\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e name is ${name.first} ${name.last} and age is ${age}\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch name.first == \u003cspan class=\"pl-s\"\u003e\"#? _ == 'Bob' || _ == 'Nyan'\"\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch name.last == \u003cspan class=\"pl-s\"\u003e\"#? _ == 'Dylan' || _ == 'Cat'\"\u003c/span\u003e\n  \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003ematch title == karate.scenario.name\n\n\u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e  | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e!                               | \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e | \u003cspan class=\"pl-s1\"\u003etitle\u003c/span\u003e                           |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | { \"\u003cspan class=\"pl-s1\"\u003efirst\u003c/span\u003e\": \"\u003cspan class=\"pl-s1\"\u003eBob\u003c/span\u003e\", \"\u003cspan class=\"pl-s1\"\u003elast\u003c/span\u003e\": \"\u003cspan class=\"pl-s1\"\u003eDylan\u003c/span\u003e\" } | \u003cspan class=\"pl-s1\"\u003e10\u003c/span\u003e  | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eis\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eBob\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eDylan\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eand\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eis\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003e10\u003c/span\u003e |\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e  | { \"\u003cspan class=\"pl-s1\"\u003efirst\u003c/span\u003e\": \"\u003cspan class=\"pl-s1\"\u003eNyan\u003c/span\u003e\", \"\u003cspan class=\"pl-s1\"\u003elast\u003c/span\u003e\": \"\u003cspan class=\"pl-s1\"\u003eCat\u003c/span\u003e\" }  | \u003cspan class=\"pl-s1\"\u003e5\u003c/span\u003e   | \u003cspan class=\"pl-s1\"\u003ename\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eis\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eNyan\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eCat\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eand\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eage\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003eis\u003c/span\u003e \u003cspan class=\"pl-s1\"\u003e5\u003c/span\u003e   |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eString interpolation will support variables in scope and / or the \u003ccode\u003eExamples\u003c/code\u003e (including functions defined globally, but not functions defined in the background). Even Java interop and access to the \u003ca href=\"#the-karate-object\"\u003e\u003ccode\u003ekarate\u003c/code\u003e JS API\u003c/a\u003e would work.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor some more examples check \u003ca href=\"/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/parser/test-outline-name-js.feature\"\u003e\u003ccode\u003etest-outline-name-js.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eThe Karate Way\u003c/h3\u003e\u003ca id=\"user-content-the-karate-way\" class=\"anchor\" aria-label=\"Permalink: The Karate Way\" href=\"#the-karate-way\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe limitation of the Cucumber \u003ccode\u003eScenario Outline:\u003c/code\u003e (seen above) is that the number of rows in the \u003ccode\u003eExamples:\u003c/code\u003e is fixed. But take a look at how Karate can \u003ca href=\"#data-driven-features\"\u003eloop over a \u003ccode\u003e*.feature\u003c/code\u003e file\u003c/a\u003e for each object in a JSON array - which gives you dynamic data-driven testing, if you need it. For advanced examples, refer to some of the scenarios within this \u003ca href=\"/karatelabs/karate/blob/master/karate-demo\"\u003edemo\u003c/a\u003e: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/search/dynamic-params.feature#L70\"\u003e\u003ccode\u003edynamic-params.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAlso see the option below, where you can data-drive an \u003ccode\u003eExamples:\u003c/code\u003e table using JSON.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eDynamic Scenario Outline\u003c/h3\u003e\u003ca id=\"user-content-dynamic-scenario-outline\" class=\"anchor\" aria-label=\"Permalink: Dynamic Scenario Outline\" href=\"#dynamic-scenario-outline\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can feed an \u003ccode\u003eExamples\u003c/code\u003e table from a custom data-source, which is great for those situations where the table-content is dynamically resolved at run-time. This capability is triggered when the table consists of a single \"cell\", i.e. there is exactly one row and one column in the table.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJSON Array Data Source\u003c/h4\u003e\u003ca id=\"user-content-json-array-data-source\" class=\"anchor\" aria-label=\"Permalink: JSON Array Data Source\" href=\"#json-array-data-source\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe \"scenario expression\" result is expected to be an array of JSON objects. Here is an example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature: scenario outline using a JSON array as the data-source\n\nScenario Outline: cat name: ${name}\n    Given url demoBaseUrl\n    And path 'cats'\n    And request { name: '#(name)' }\n    When method post\n    Then status 200\n    And match response == { id: '#number', name: '#(name)' }\n\n    # the single cell can be any valid karate expression\n    Examples:\n    | read('../callarray/kittens.json') |\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eFeature\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e scenario outline using a JSON array as the data-source\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e cat name: ${name}\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl demoBaseUrl\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'cats'\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest { name: \u003cspan class=\"pl-s\"\u003e'#(name)'\u003c/span\u003e }\n    \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n    \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch response == { id: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, name: \u003cspan class=\"pl-s\"\u003e'#(name)'\u003c/span\u003e }\n\n\u003cspan class=\"pl-c\"\u003e    # the single cell can be any valid karate expression\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003eread\u003c/span\u003e('../\u003cspan class=\"pl-s1\"\u003ecallarray\u003c/span\u003e/\u003cspan class=\"pl-s1\"\u003ekittens\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003ejson\u003c/span\u003e') |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eYou can see the structure of the data here: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/callarray/kittens.json\"\u003e\u003ccode\u003ekittens.json\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAny \u003ca href=\"#karate-expressions\"\u003eKarate expression\u003c/a\u003e can be used in the \"cell expression\", and you can even use \u003ca href=\"#calling-java\"\u003eJava-interop\u003c/a\u003e to use external data-sources such as a database.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that Karate has built-in support for \u003ca href=\"#csv-files\"\u003eCSV files\u003c/a\u003e and here is an example: \u003ca href=\"/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/outline/dynamic-csv.feature\"\u003e\u003ccode\u003edynamic-csv.feature\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003e\u003ccode\u003e@setup\u003c/code\u003e\u003c/h4\u003e\u003ca id=\"user-content-setup\" class=\"anchor\" aria-label=\"Permalink: @setup\" href=\"#setup\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eIn cases where the data-source needs multiple steps, for e.g. if an API needs to be called to get a JSON array, you can call a separate \u003ccode\u003eScenario\u003c/code\u003e to \"set up\" this data. The \u003ccode\u003e@setup\u003c/code\u003e tag is built-in for this purpose and any \u003ccode\u003eScenario\u003c/code\u003e tagged with this will behave like \u003ca href=\"#special-tags\"\u003e\u003ccode\u003e@ignore\u003c/code\u003e\u003c/a\u003e. So the only way to call this \u003ccode\u003eScenario\u003c/code\u003e is by using the \u003ccode\u003ekarate.setup()\u003c/code\u003e JS API.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere is the above example re-written to do so:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature: scenario outline using a JSON array as the data-source\n\n@setup\nScenario:\n* def kittens = read('../callarray/kittens.json')\n\nScenario Outline: cat name: ${name}\n    Given url demoBaseUrl\n    And path 'cats'\n    And request { name: '#(name)' }\n    When method post\n    Then status 200\n    And match response == { id: '#number', name: '#(name)' }\n\n    Examples:\n    | karate.setup().kittens |\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eFeature\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e scenario outline using a JSON array as the data-source\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e@setup\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef kittens = read(\u003cspan class=\"pl-s\"\u003e'../callarray/kittens.json'\u003c/span\u003e)\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e cat name: ${name}\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl demoBaseUrl\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'cats'\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest { name: \u003cspan class=\"pl-s\"\u003e'#(name)'\u003c/span\u003e }\n    \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n    \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch response == { id: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, name: \u003cspan class=\"pl-s\"\u003e'#(name)'\u003c/span\u003e }\n\n    \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003esetup\u003c/span\u003e().\u003cspan class=\"pl-s1\"\u003ekittens\u003c/span\u003e |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThe result of \u003ccode\u003ekarate.setup()\u003c/code\u003e will be a JSON of all the variables created within the \u003ccode\u003eScenario\u003c/code\u003e tagged with \u003ccode\u003e@setup\u003c/code\u003e. Note how we \"unpack\" the \u003ccode\u003ekittens\u003c/code\u003e and use it to \"data drive\" the \u003ccode\u003eScenario Outline\u003c/code\u003e. You can get really creative and use \u003ca href=\"https://github.com/karatelabs/karate/issues/1905#issuecomment-1207342290\" data-hovercard-type=\"issue\" data-hovercard-url=\"/karatelabs/karate/issues/1905/hovercard\"\u003eJS functions to filter data\u003c/a\u003e for different needs.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eNote that \u003ccode\u003e@setup\u003c/code\u003e is designed specifically to create data for a \u003ca href=\"#dynamic-scenario-outline\"\u003edynamic \u003ccode\u003eScenario Outline\u003c/code\u003e\u003c/a\u003e and it is the first thing to execute within a \u003ccode\u003eFeature\u003c/code\u003e. In other words, it \u003cem\u003ecannot\u003c/em\u003e depend on the \u003ccode\u003eBackground\u003c/code\u003e. The \u003ccode\u003eBackground\u003c/code\u003e will be used for each \u003ccode\u003eScenario\u003c/code\u003e that is spawned from a \u003ccode\u003eScenario Outline\u003c/code\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThough not really recommended, you can have multiple \u003ccode\u003eScenario\u003c/code\u003e-s within a \u003ccode\u003eFeature\u003c/code\u003e tagged with \u003ccode\u003e@setup\u003c/code\u003e. But in that case you should de-dupe them using a name:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature:\n\n@setup=myname\nScenario:\n* def data = [{ a: 1 }, { a: 2}]\n\nScenario Outline:\n* print __row\n\nExamples:\n| karate.setup('myname').data |\"\u003e\u003cpre\u003eFeature:\n\n\u003cspan class=\"pl-k\"\u003e@setup=myname\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = [{ a: 1 }, { a: 2}]\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint __row\n\n\u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e| \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003esetup\u003c/span\u003e('\u003cspan class=\"pl-s1\"\u003emyname\u003c/span\u003e').\u003cspan class=\"pl-s1\"\u003edata\u003c/span\u003e |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAnd since it is common to run a \u003ccode\u003e@setup\u003c/code\u003e \u003ccode\u003eScenario\u003c/code\u003e only once per-feature you can call \u003ccode\u003ekarate.setupOnce()\u003c/code\u003e. In the feature below, the \u003ccode\u003e* print 'in setup'\u003c/code\u003e step will run only once. Also note how the \u003ccode\u003eBackground\u003c/code\u003e will run 4 times (twice per \u003ccode\u003eScenario\u003c/code\u003e).\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature:\n\nBackground:\n* print 'in background', __num\n\n@setup\nScenario:\n* print 'in setup'\n* def data = [{a:1}, {a:2}]\n\nScenario Outline: first\n* print __row\n\nExamples:\n| karate.setupOnce().data |\n\nScenario Outline: second\n* print __row\n\nExamples:\n| karate.setupOnce().data |\"\u003e\u003cpre\u003eFeature:\n\n\u003cspan class=\"pl-k\"\u003eBackground\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'in background'\u003c/span\u003e, __num\n\n\u003cspan class=\"pl-k\"\u003e@setup\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint \u003cspan class=\"pl-s\"\u003e'in setup'\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef data = [{a:1}, {a:2}]\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e first\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint __row\n\n\u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e| \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003esetupOnce\u003c/span\u003e().\u003cspan class=\"pl-s1\"\u003edata\u003c/span\u003e |\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e second\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003e* \u003c/span\u003eprint __row\n\n\u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e| \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003esetupOnce\u003c/span\u003e().\u003cspan class=\"pl-s1\"\u003edata\u003c/span\u003e |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"markdown-heading\" dir=\"auto\"\u003e\u003ch4 tabindex=\"-1\" class=\"heading-element\" dir=\"auto\"\u003eJSON Function Data Source\u003c/h4\u003e\u003ca id=\"user-content-json-function-data-source\" class=\"anchor\" aria-label=\"Permalink: JSON Function Data Source\" href=\"#json-function-data-source\"\u003e\u003csvg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"\u003e\u003cpath d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAn advanced option is where the \"scenario expression\" returns a JavaScript \"generator\" function. This is a very powerful way to generate test-data without having to load a large number of data rows into memory. The function has to return a JSON object. To signal the end of the data, just return \u003ccode\u003enull\u003c/code\u003e. The function argument is the row-index, so you can easily determine \u003cem\u003ewhen\u003c/em\u003e to stop the generation of data. Here is an example:\u003c/p\u003e\n\u003cdiv class=\"highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Feature: scenario outline using a dynamic generator function\n\n@setup\nScenario:\n    * def generator = function(i){ if (i == 20) return null; return { name: 'cat' + i, age: i } }\n\nScenario Outline: cat name: ${name}\n    Given url demoBaseUrl\n    And path 'cats'\n    And request { name: '#(name)', age: '#(age)' }\n    When method post\n    Then status 200\n    And match response == { id: '#number', name: '#(name)' }\n\n    Examples:\n    | karate.setup().generator |\"\u003e\u003cpre\u003e\u003cspan class=\"pl-k\"\u003eFeature\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e scenario outline using a dynamic generator function\u003c/span\u003e\n\n\u003cspan class=\"pl-k\"\u003e@setup\u003c/span\u003e\n\u003cspan class=\"pl-k\"\u003eScenario\u003c/span\u003e:\n    \u003cspan class=\"pl-k\"\u003e* \u003c/span\u003edef generator = function(i){ if (i == 20) return null; return { name: \u003cspan class=\"pl-s\"\u003e'cat'\u003c/span\u003e + i, age: i } }\n\n\u003cspan class=\"pl-k\"\u003eScenario Outline\u003c/span\u003e:\u003cspan class=\"pl-s\"\u003e cat name: ${name}\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003eGiven \u003c/span\u003eurl demoBaseUrl\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003epath \u003cspan class=\"pl-s\"\u003e'cats'\u003c/span\u003e\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003erequest { name: \u003cspan class=\"pl-s\"\u003e'#(name)'\u003c/span\u003e, age: \u003cspan class=\"pl-s\"\u003e'#(age)'\u003c/span\u003e }\n    \u003cspan class=\"pl-k\"\u003eWhen \u003c/span\u003emethod post\n    \u003cspan class=\"pl-k\"\u003eThen \u003c/span\u003estatus 200\n    \u003cspan class=\"pl-k\"\u003eAnd \u003c/span\u003ematch response == { id: \u003cspan class=\"pl-s\"\u003e'#number'\u003c/span\u003e, name: \u003cspan class=\"pl-s\"\u003e'#(name)'\u003c/span\u003e }\n\n    \u003cspan class=\"pl-k\"\u003eExamples\u003c/span\u003e:\n\u003cspan class=\"pl-k\"\u003e    | \u003cspan class=\"pl-s1\"\u003ekarate\u003c/span\u003e.\u003cspan class=\"pl-s1\"\u003esetup\u003c/span\u003e().\u003cspan class=\"pl-s1\"\u003egenerator\u003c/span\u003e |\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/article\u003e","loaded":true,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":[{"level":3,"text":"⏩  Get Started","anchor":"------------get-started------","htmlText":"⏩  Get Started"},{"level":3,"text":"💡  Examples","anchor":"------------examples------","htmlText":"💡  Examples"},{"level":3,"text":"📺  Kick Start Videos","anchor":"------------kick-start-videos------","htmlText":"📺  Kick Start Videos"},{"level":1,"text":"Karate","anchor":"karate","htmlText":"Karate"},{"level":2,"text":"Test Automation Made Simple.","anchor":"test-automation-made-simple","htmlText":"Test Automation Made Simple."},{"level":2,"text":"Hello World","anchor":"hello-world","htmlText":"Hello World"},{"level":3,"text":"For API Testing","anchor":"for-api-testing","htmlText":"For API Testing"},{"level":1,"text":"Index","anchor":"index","htmlText":"Index"},{"level":1,"text":"Features","anchor":"features","htmlText":"Features"},{"level":2,"text":"Real World Examples","anchor":"real-world-examples","htmlText":"Real World Examples"},{"level":2,"text":"Comparison with REST-assured","anchor":"comparison-with-rest-assured","htmlText":"Comparison with REST-assured"},{"level":2,"text":"References","anchor":"references","htmlText":"References"},{"level":1,"text":"Getting Started","anchor":"getting-started","htmlText":"Getting Started"},{"level":2,"text":"Maven","anchor":"maven","htmlText":"Maven"},{"level":2,"text":"Gradle","anchor":"gradle","htmlText":"Gradle"},{"level":3,"text":"Karate Core \"Fat JAR\"","anchor":"karate-core-fat-jar","htmlText":"Karate Core \"Fat JAR\""},{"level":3,"text":"Quickstart","anchor":"quickstart","htmlText":"Quickstart"},{"level":2,"text":"IDE Support","anchor":"ide-support","htmlText":"IDE Support"},{"level":2,"text":"Folder Structure","anchor":"folder-structure","htmlText":"Folder Structure"},{"level":3,"text":"Spring Boot Example","anchor":"spring-boot-example","htmlText":"Spring Boot Example"},{"level":2,"text":"Naming Conventions","anchor":"naming-conventions","htmlText":"Naming Conventions"},{"level":2,"text":"JUnit 5","anchor":"junit-5","htmlText":"JUnit 5"},{"level":3,"text":"JUnit HTML report","anchor":"junit-html-report","htmlText":"JUnit HTML report"},{"level":3,"text":"Dry Run","anchor":"dry-run","htmlText":"Dry Run"},{"level":2,"text":"Command Line","anchor":"command-line","htmlText":"Command Line"},{"level":3,"text":"Command Line - Maven","anchor":"command-line---maven","htmlText":"Command Line - Maven"},{"level":3,"text":"karate.options","anchor":"karateoptions","htmlText":"karate.options"},{"level":3,"text":"Command Line - Gradle","anchor":"command-line---gradle","htmlText":"Command Line - Gradle"},{"level":3,"text":"Test Suites","anchor":"test-suites","htmlText":"Test Suites"},{"level":2,"text":"Parallel Execution","anchor":"parallel-execution","htmlText":"Parallel Execution"},{"level":3,"text":"JUnit 5 Parallel Execution","anchor":"junit-5-parallel-execution","htmlText":"JUnit 5 Parallel Execution"},{"level":3,"text":"Parallel Stats","anchor":"parallel-stats","htmlText":"Parallel Stats"},{"level":3,"text":"@parallel=false","anchor":"parallelfalse","htmlText":"@parallel=false"},{"level":2,"text":"Test Reports","anchor":"test-reports","htmlText":"Test Reports"},{"level":2,"text":"Logging","anchor":"logging","htmlText":"Logging"},{"level":1,"text":"Configuration","anchor":"configuration","htmlText":"Configuration"},{"level":2,"text":"Classpath","anchor":"classpath","htmlText":"Classpath"},{"level":2,"text":"karate-config.js","anchor":"karate-configjs","htmlText":"karate-config.js"},{"level":2,"text":"Switching the Environment","anchor":"switching-the-environment","htmlText":"Switching the Environment"},{"level":2,"text":"Environment Specific Config","anchor":"environment-specific-config","htmlText":"Environment Specific Config"},{"level":3,"text":"karate-base.js","anchor":"karate-basejs","htmlText":"karate-base.js"},{"level":1,"text":"Syntax Guide","anchor":"syntax-guide","htmlText":"Syntax Guide"},{"level":2,"text":"Script Structure","anchor":"script-structure","htmlText":"Script Structure"},{"level":3,"text":"Given-When-Then","anchor":"given-when-then","htmlText":"Given-When-Then"},{"level":4,"text":"Cucumber vs Karate","anchor":"cucumber-vs-karate","htmlText":"Cucumber vs Karate"},{"level":1,"text":"Setting and Using Variables","anchor":"setting-and-using-variables","htmlText":"Setting and Using Variables"},{"level":2,"text":"def","anchor":"def","htmlText":"def"},{"level":3,"text":"Set a named variable","anchor":"set-a-named-variable","htmlText":"Set a named variable"},{"level":2,"text":"assert","anchor":"assert","htmlText":"assert"},{"level":3,"text":"Assert if an expression evaluates to true","anchor":"assert-if-an-expression-evaluates-to-true","htmlText":"Assert if an expression evaluates to true"},{"level":2,"text":"print","anchor":"print","htmlText":"print"},{"level":3,"text":"Log to the console","anchor":"log-to-the-console","htmlText":"Log to the console"},{"level":1,"text":"'Native' data types","anchor":"native-data-types","htmlText":"'Native' data types"},{"level":2,"text":"JSON","anchor":"json","htmlText":"JSON"},{"level":2,"text":"XML","anchor":"xml","htmlText":"XML"},{"level":3,"text":"Embedded Expressions","anchor":"embedded-expressions","htmlText":"Embedded Expressions"},{"level":4,"text":"Rules for Embedded Expressions","anchor":"rules-for-embedded-expressions","htmlText":"Rules for Embedded Expressions"},{"level":3,"text":"Enclosed JavaScript","anchor":"enclosed-javascript","htmlText":"Enclosed JavaScript"},{"level":3,"text":"Multi-Line Expressions","anchor":"multi-line-expressions","htmlText":"Multi-Line Expressions"},{"level":2,"text":"table","anchor":"table","htmlText":"table"},{"level":3,"text":"A simple way to create JSON Arrays","anchor":"a-simple-way-to-create-json-arrays","htmlText":"A simple way to create JSON Arrays"},{"level":2,"text":"text","anchor":"text","htmlText":"text"},{"level":3,"text":"Don't parse, treat as raw text","anchor":"dont-parse-treat-as-raw-text","htmlText":"Don't parse, treat as raw text"},{"level":2,"text":"replace","anchor":"replace","htmlText":"replace"},{"level":3,"text":"Text Placeholder Replacement","anchor":"text-placeholder-replacement","htmlText":"Text Placeholder Replacement"},{"level":2,"text":"YAML Files","anchor":"yaml-files","htmlText":"YAML Files"},{"level":3,"text":"yaml","anchor":"yaml","htmlText":"yaml"},{"level":2,"text":"CSV Files","anchor":"csv-files","htmlText":"CSV Files"},{"level":3,"text":"csv","anchor":"csv","htmlText":"csv"},{"level":2,"text":"JavaScript Functions","anchor":"javascript-functions","htmlText":"JavaScript Functions"},{"level":3,"text":"Java Interop","anchor":"java-interop","htmlText":"Java Interop"},{"level":2,"text":"Reading Files","anchor":"reading-files","htmlText":"Reading Files"},{"level":3,"text":"Path Prefixes","anchor":"path-prefixes","htmlText":"Path Prefixes"},{"level":3,"text":"Read File As String","anchor":"read-file-as-string","htmlText":"Read File As String"},{"level":2,"text":"Compare Image","anchor":"compare-image","htmlText":"Compare Image"},{"level":2,"text":"Type Conversion","anchor":"type-conversion","htmlText":"Type Conversion"},{"level":3,"text":"Floats and Integers","anchor":"floats-and-integers","htmlText":"Floats and Integers"},{"level":3,"text":"Large Numbers","anchor":"large-numbers","htmlText":"Large Numbers"},{"level":2,"text":"doc","anchor":"doc","htmlText":"doc"},{"level":1,"text":"Karate Expressions","anchor":"karate-expressions","htmlText":"Karate Expressions"},{"level":1,"text":"Core Keywords","anchor":"core-keywords","htmlText":"Core Keywords"},{"level":2,"text":"url","anchor":"url","htmlText":"url"},{"level":3,"text":"configure url","anchor":"configure-url","htmlText":"configure url"},{"level":2,"text":"path","anchor":"path","htmlText":"path"},{"level":2,"text":"request","anchor":"request","htmlText":"request"},{"level":2,"text":"method","anchor":"method","htmlText":"method"},{"level":2,"text":"status","anchor":"status","htmlText":"status"},{"level":1,"text":"Keywords that set key-value pairs","anchor":"keywords-that-set-key-value-pairs","htmlText":"Keywords that set key-value pairs"},{"level":2,"text":"param","anchor":"param","htmlText":"param"},{"level":2,"text":"header","anchor":"header","htmlText":"header"},{"level":2,"text":"cookie","anchor":"cookie","htmlText":"cookie"},{"level":2,"text":"form field","anchor":"form-field","htmlText":"form field"},{"level":2,"text":"multipart field","anchor":"multipart-field","htmlText":"multipart field"},{"level":2,"text":"multipart file","anchor":"multipart-file","htmlText":"multipart file"},{"level":2,"text":"multipart entity","anchor":"multipart-entity","htmlText":"multipart entity"},{"level":1,"text":"Multi-Param Keywords","anchor":"multi-param-keywords","htmlText":"Multi-Param Keywords"},{"level":2,"text":"Keywords that set multiple key-value pairs in one step","anchor":"keywords-that-set-multiple-key-value-pairs-in-one-step","htmlText":"Keywords that set multiple key-value pairs in one step"},{"level":2,"text":"params","anchor":"params","htmlText":"params"},{"level":2,"text":"headers","anchor":"headers","htmlText":"headers"},{"level":2,"text":"cookies","anchor":"cookies","htmlText":"cookies"},{"level":2,"text":"form fields","anchor":"form-fields","htmlText":"form fields"},{"level":2,"text":"multipart fields","anchor":"multipart-fields","htmlText":"multipart fields"},{"level":2,"text":"multipart files","anchor":"multipart-files","htmlText":"multipart files"},{"level":1,"text":"SOAP","anchor":"soap","htmlText":"SOAP"},{"level":2,"text":"soap action","anchor":"soap-action","htmlText":"soap action"},{"level":2,"text":"retry until","anchor":"retry-until","htmlText":"retry until"},{"level":1,"text":"configure","anchor":"configure","htmlText":"configure"},{"level":2,"text":"Managing Headers, SSL, Timeouts and HTTP Proxy","anchor":"managing-headers-ssl-timeouts-and-http-proxy","htmlText":"Managing Headers, SSL, Timeouts and HTTP Proxy"},{"level":2,"text":"configure globally","anchor":"configure-globally","htmlText":"configure globally"},{"level":3,"text":"Report Verbosity","anchor":"report-verbosity","htmlText":"Report Verbosity"},{"level":4,"text":"@report=false","anchor":"reportfalse","htmlText":"@report=false"},{"level":3,"text":"Log Masking","anchor":"log-masking","htmlText":"Log Masking"},{"level":3,"text":"System Properties for SSL and HTTP proxy","anchor":"system-properties-for-ssl-and-http-proxy","htmlText":"System Properties for SSL and HTTP proxy"},{"level":3,"text":"X509 Certificate Authentication","anchor":"x509-certificate-authentication","htmlText":"X509 Certificate Authentication"},{"level":3,"text":"NTLM Authentication","anchor":"ntlm-authentication","htmlText":"NTLM Authentication"},{"level":1,"text":"Payload Assertions","anchor":"payload-assertions","htmlText":"Payload Assertions"},{"level":2,"text":"Prepare, Mutate, Assert.","anchor":"prepare-mutate-assert","htmlText":"Prepare, Mutate, Assert."},{"level":2,"text":"match","anchor":"match","htmlText":"match"},{"level":3,"text":"Payload Assertions / Smart Comparison","anchor":"payload-assertions--smart-comparison","htmlText":"Payload Assertions / Smart Comparison"},{"level":2,"text":"set","anchor":"set","htmlText":"set"},{"level":3,"text":"JS for JSON","anchor":"js-for-json","htmlText":"JS for JSON"},{"level":3,"text":"Manipulating Data","anchor":"manipulating-data","htmlText":"Manipulating Data"},{"level":3,"text":"match and variables","anchor":"match-and-variables","htmlText":"match and variables"},{"level":3,"text":"match != (not equals)","anchor":"match--not-equals","htmlText":"match != (not equals)"},{"level":3,"text":"set multiple","anchor":"set-multiple","htmlText":"set multiple"},{"level":2,"text":"remove","anchor":"remove","htmlText":"remove"},{"level":3,"text":"delete","anchor":"delete","htmlText":"delete"},{"level":2,"text":"Fuzzy Matching","anchor":"fuzzy-matching","htmlText":"Fuzzy Matching"},{"level":3,"text":"Ignore or Validate","anchor":"ignore-or-validate","htmlText":"Ignore or Validate"},{"level":3,"text":"Optional Fields","anchor":"optional-fields","htmlText":"Optional Fields"},{"level":3,"text":"Remove If Null","anchor":"remove-if-null","htmlText":"Remove If Null"},{"level":3,"text":"#null and #notpresent","anchor":"null-and-notpresent","htmlText":"#null and #notpresent"},{"level":3,"text":"'Self' Validation Expressions","anchor":"self-validation-expressions","htmlText":"'Self' Validation Expressions"},{"level":4,"text":"Referring to the JSON root","anchor":"referring-to-the-json-root","htmlText":"Referring to the JSON root"},{"level":3,"text":"match text or binary","anchor":"match-text-or-binary","htmlText":"match text or binary"},{"level":3,"text":"match header","anchor":"match-header","htmlText":"match header"},{"level":3,"text":"match and XML","anchor":"match-and-xml","htmlText":"match and XML"},{"level":2,"text":"Matching Sub-Sets of JSON Keys and Arrays","anchor":"matching-sub-sets-of-json-keys-and-arrays","htmlText":"Matching Sub-Sets of JSON Keys and Arrays"},{"level":3,"text":"match contains","anchor":"match-contains","htmlText":"match contains"},{"level":4,"text":"JSON Keys","anchor":"json-keys","htmlText":"JSON Keys"},{"level":3,"text":"(not) !contains","anchor":"not-contains","htmlText":"(not) !contains"},{"level":4,"text":"JSON Arrays","anchor":"json-arrays","htmlText":"JSON Arrays"},{"level":4,"text":"match contains only","anchor":"match-contains-only","htmlText":"match contains only"},{"level":4,"text":"match contains any","anchor":"match-contains-any","htmlText":"match contains any"},{"level":4,"text":"match contains deep","anchor":"match-contains-deep","htmlText":"match contains deep"},{"level":4,"text":"match contains only deep","anchor":"match-contains-only-deep","htmlText":"match contains only deep"},{"level":2,"text":"Validate every element in a JSON array","anchor":"validate-every-element-in-a-json-array","htmlText":"Validate every element in a JSON array"},{"level":3,"text":"match each","anchor":"match-each","htmlText":"match each"},{"level":4,"text":"Referring to self","anchor":"referring-to-self","htmlText":"Referring to self"},{"level":4,"text":"match each contains deep","anchor":"match-each-contains-deep","htmlText":"match each contains deep"},{"level":2,"text":"Schema Validation","anchor":"schema-validation","htmlText":"Schema Validation"},{"level":3,"text":"contains short-cuts","anchor":"contains-short-cuts","htmlText":"contains short-cuts"},{"level":2,"text":"get","anchor":"get","htmlText":"get"},{"level":3,"text":"get short-cut","anchor":"get-short-cut","htmlText":"get short-cut"},{"level":3,"text":"get plus index","anchor":"get-plus-index","htmlText":"get plus index"},{"level":3,"text":"JsonPath filters","anchor":"jsonpath-filters","htmlText":"JsonPath filters"},{"level":2,"text":"JSON Transforms","anchor":"json-transforms","htmlText":"JSON Transforms"},{"level":3,"text":"Loops","anchor":"loops","htmlText":"Loops"},{"level":2,"text":"XPath Functions","anchor":"xpath-functions","htmlText":"XPath Functions"},{"level":3,"text":"Advanced XPath","anchor":"advanced-xpath","htmlText":"Advanced XPath"},{"level":1,"text":"Special Variables","anchor":"special-variables","htmlText":"Special Variables"},{"level":2,"text":"response","anchor":"response","htmlText":"response"},{"level":4,"text":"JsonPath short-cuts","anchor":"jsonpath-short-cuts","htmlText":"JsonPath short-cuts"},{"level":2,"text":"responseBytes","anchor":"responsebytes","htmlText":"responseBytes"},{"level":2,"text":"responseCookies","anchor":"responsecookies","htmlText":"responseCookies"},{"level":2,"text":"responseHeaders","anchor":"responseheaders","htmlText":"responseHeaders"},{"level":2,"text":"responseStatus","anchor":"responsestatus","htmlText":"responseStatus"},{"level":2,"text":"responseTime","anchor":"responsetime","htmlText":"responseTime"},{"level":2,"text":"responseType","anchor":"responsetype","htmlText":"responseType"},{"level":2,"text":"requestTimeStamp","anchor":"requesttimestamp","htmlText":"requestTimeStamp"},{"level":1,"text":"HTTP Header Manipulation","anchor":"http-header-manipulation","htmlText":"HTTP Header Manipulation"},{"level":2,"text":"configure headers","anchor":"configure-headers","htmlText":"configure headers"},{"level":1,"text":"The karate object","anchor":"the-karate-object","htmlText":"The karate object"},{"level":1,"text":"Code Reuse / Common Routines","anchor":"code-reuse--common-routines","htmlText":"Code Reuse / Common Routines"},{"level":2,"text":"call","anchor":"call","htmlText":"call"},{"level":2,"text":"Calling other *.feature files","anchor":"calling-other-feature-files","htmlText":"Calling other *.feature files"},{"level":3,"text":"Call Tag Selector","anchor":"call-tag-selector","htmlText":"Call Tag Selector"},{"level":4,"text":"Call Same Feature","anchor":"call-same-feature","htmlText":"Call Same Feature"},{"level":3,"text":"Data-Driven Features","anchor":"data-driven-features","htmlText":"Data-Driven Features"},{"level":3,"text":"Built-in variables for call","anchor":"built-in-variables-for-call","htmlText":"Built-in variables for call"},{"level":3,"text":"Default Values","anchor":"default-values","htmlText":"Default Values"},{"level":3,"text":"copy","anchor":"copy","htmlText":"copy"},{"level":2,"text":"Calling JavaScript Functions","anchor":"calling-javascript-functions","htmlText":"Calling JavaScript Functions"},{"level":3,"text":"JS function argument rules for call","anchor":"js-function-argument-rules-for-call","htmlText":"JS function argument rules for call"},{"level":3,"text":"Return types","anchor":"return-types","htmlText":"Return types"},{"level":4,"text":"Shared Scope","anchor":"shared-scope","htmlText":"Shared Scope"},{"level":4,"text":"call vs read()","anchor":"call-vs-read","htmlText":"call vs read()"},{"level":3,"text":"Calling Java","anchor":"calling-java","htmlText":"Calling Java"},{"level":4,"text":"HTTP Basic Authentication Example","anchor":"http-basic-authentication-example","htmlText":"HTTP Basic Authentication Example"},{"level":2,"text":"callonce","anchor":"callonce","htmlText":"callonce"},{"level":2,"text":"eval","anchor":"eval","htmlText":"eval"},{"level":1,"text":"Advanced / Tricks","anchor":"advanced--tricks","htmlText":"Advanced / Tricks"},{"level":2,"text":"Polling","anchor":"polling","htmlText":"Polling"},{"level":2,"text":"Conditional Logic","anchor":"conditional-logic","htmlText":"Conditional Logic"},{"level":3,"text":"JSON Lookup","anchor":"json-lookup","htmlText":"JSON Lookup"},{"level":3,"text":"Abort and Fail","anchor":"abort-and-fail","htmlText":"Abort and Fail"},{"level":2,"text":"Commonly Needed Utilities","anchor":"commonly-needed-utilities","htmlText":"Commonly Needed Utilities"},{"level":3,"text":"Multiple Functions in One File","anchor":"multiple-functions-in-one-file","htmlText":"Multiple Functions in One File"},{"level":2,"text":"Async","anchor":"async","htmlText":"Async"},{"level":3,"text":"listen","anchor":"listen","htmlText":"listen"},{"level":2,"text":"WebSocket","anchor":"websocket","htmlText":"WebSocket"},{"level":3,"text":"Java Function References","anchor":"java-function-references","htmlText":"Java Function References"},{"level":2,"text":"Tags","anchor":"tags","htmlText":"Tags"},{"level":3,"text":"Special Tags","anchor":"special-tags","htmlText":"Special Tags"},{"level":3,"text":"Environment Tags","anchor":"environment-tags","htmlText":"Environment Tags"},{"level":3,"text":"Tags And Examples","anchor":"tags-and-examples","htmlText":"Tags And Examples"},{"level":2,"text":"Dynamic Port Numbers","anchor":"dynamic-port-numbers","htmlText":"Dynamic Port Numbers"},{"level":2,"text":"Java API","anchor":"java-api","htmlText":"Java API"},{"level":3,"text":"jbang","anchor":"jbang","htmlText":"jbang"},{"level":3,"text":"Invoking feature files using the Java API","anchor":"invoking-feature-files-using-the-java-api","htmlText":"Invoking feature files using the Java API"},{"level":2,"text":"Hooks","anchor":"hooks","htmlText":"Hooks"},{"level":3,"text":"karate.callSingle()","anchor":"karatecallsingle","htmlText":"karate.callSingle()"},{"level":4,"text":"Multiple calls using karate.callSingle()","anchor":"multiple-calls-using-karatecallsingle","htmlText":"Multiple calls using karate.callSingle()"},{"level":4,"text":"configure callSingleCache","anchor":"configure-callsinglecache","htmlText":"configure callSingleCache"},{"level":2,"text":"Data Driven Tests","anchor":"data-driven-tests","htmlText":"Data Driven Tests"},{"level":3,"text":"The Cucumber Way","anchor":"the-cucumber-way","htmlText":"The Cucumber Way"},{"level":3,"text":"Scenario Outline Enhancements","anchor":"scenario-outline-enhancements","htmlText":"Scenario Outline Enhancements"},{"level":3,"text":"The Karate Way","anchor":"the-karate-way","htmlText":"The Karate Way"},{"level":3,"text":"Dynamic Scenario Outline","anchor":"dynamic-scenario-outline","htmlText":"Dynamic Scenario Outline"},{"level":4,"text":"JSON Array Data Source","anchor":"json-array-data-source","htmlText":"JSON Array Data Source"},{"level":4,"text":"@setup","anchor":"setup","htmlText":"@setup"},{"level":4,"text":"JSON Function Data Source","anchor":"json-function-data-source","htmlText":"JSON Function Data Source"}],"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fkaratelabs%2Fkarate"}},{"displayName":"CODE_OF_CONDUCT.md","repoName":"karate","refName":"master","path":".github/CODE_OF_CONDUCT.md","preferredFileType":"code_of_conduct","tabName":"Code of conduct","richText":null,"loaded":false,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fkaratelabs%2Fkarate"}},{"displayName":"LICENSE","repoName":"karate","refName":"master","path":"LICENSE","preferredFileType":"license","tabName":"MIT","richText":null,"loaded":false,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fkaratelabs%2Fkarate"}},{"displayName":"SECURITY.md","repoName":"karate","refName":"master","path":"SECURITY.md","preferredFileType":"security","tabName":"Security","richText":null,"loaded":false,"timedOut":false,"errorMessage":null,"headerInfo":{"toc":null,"siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fkaratelabs%2Fkarate"}}],"overviewFilesProcessingTime":0}},"appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-1583894afd38.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-3a63a487027b.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"react_blob_overlay":false,"copilot_conversational_ux_embedding_update":false,"copilot_smell_icebreaker_ux":true,"copilot_workspace":false}}}}</script>
  <div data-target="react-partial.reactRoot"><style data-styled="true" data-styled-version="5.3.6">.cgQnMS{font-weight:600;font-size:32px;margin:0;}/*!sc*/
data-styled.g1[id="Heading__StyledHeading-sc-1c1dgg0-0"]{content:"cgQnMS,"}/*!sc*/
.izjvBm{margin-top:16px;margin-bottom:16px;}/*!sc*/
.rPQgy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}/*!sc*/
.eUMEDg{margin-bottom:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;row-gap:16px;}/*!sc*/
.eLcVee{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;padding-bottom:16px;padding-top:8px;}/*!sc*/
.hsfLlq{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;gap:8px;}/*!sc*/
@media screen and (max-width:320px){.hsfLlq{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}}/*!sc*/
.gpKoUz{position:relative;}/*!sc*/
@media screen and (max-width:380px){.gpKoUz .ref-selector-button-text-container{max-width:80px;}}/*!sc*/
@media screen and (max-width:320px){.gpKoUz{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}.gpKoUz .overview-ref-selector{width:100%;}.gpKoUz .overview-ref-selector > span{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;}.gpKoUz .overview-ref-selector > span > span[data-component="text"]{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}}/*!sc*/
.kkrdEu{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}/*!sc*/
.bKgizp{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;}/*!sc*/
.iPGYsi{margin-right:4px;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.caeYDk{font-size:14px;min-width:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}/*!sc*/
.trpoQ{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;pointer-events:none;}/*!sc*/
.laYubZ{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
@media screen and (max-width:1079px){.laYubZ{display:none;}}/*!sc*/
.swnaL{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
@media screen and (min-width:1080px){.swnaL{display:none;}}/*!sc*/
@media screen and (max-width:543px){.swnaL{display:none;}}/*!sc*/
.bWpuBf{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding-left:8px;gap:8px;}/*!sc*/
.grHjNb{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;gap:8px;}/*!sc*/
@media screen and (max-width:543px){.grHjNb{display:none;}}/*!sc*/
.dXTsqj{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
@media screen and (max-width:1011px){.dXTsqj{display:none;}}/*!sc*/
.dCOrmu{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
@media screen and (min-width:1012px){.dCOrmu{display:none;}}/*!sc*/
@media screen and (max-width:544px){.bVvbgP{display:none;}}/*!sc*/
.bNDvfp{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
@media screen and (min-width:544px){.bNDvfp{display:none;}}/*!sc*/
.yfPnm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;gap:16px;}/*!sc*/
.cAQuiW{width:100%;border-collapse:separate;border-spacing:0;border:1px solid;border-color:var(--borderColor-default,var(--color-border-default,#d0d7de));border-radius:6px;table-layout:fixed;overflow:unset;}/*!sc*/
.iiUlLN{height:0px;line-height:0px;}/*!sc*/
.iiUlLN tr{height:0px;font-size:0px;}/*!sc*/
.jmggSN{padding:16px;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));font-size:12px;text-align:left;height:40px;}/*!sc*/
.jmggSN th{padding-left:16px;background-color:var(--bgColor-muted,var(--color-canvas-subtle,#f6f8fa));}/*!sc*/
.kvYunM{width:100%;border-top-left-radius:6px;}/*!sc*/
@media screen and (min-width:544px){.kvYunM{display:none;}}/*!sc*/
.hrLuxA{width:40%;border-top-left-radius:6px;}/*!sc*/
@media screen and (max-width:543px){.hrLuxA{display:none;}}/*!sc*/
.cuEKae{text-align:right;padding-right:16px;width:136px;border-top-right-radius:6px;}/*!sc*/
.jEbBOT{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));font-size:12px;height:40px;}/*!sc*/
.brJRqk{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;gap:8px;min-width:273px;padding:8px;}/*!sc*/
@media screen and (min-width:544px){.brJRqk{-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}}/*!sc*/
.epsqEd{text-align:center;vertical-align:center;height:40px;border-top:1px solid;border-color:var(--borderColor-default,var(--color-border-default,#d0d7de));}/*!sc*/
.ldpruc{border-top:1px solid var(--borderColor-default,var(--color-border-default));cursor:pointer;}/*!sc*/
.ehcSsh{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;gap:16px;}/*!sc*/
.iGmlUb{border:1px solid;border-color:var(--borderColor-default,var(--color-border-default,#d0d7de));border-radius:6px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}/*!sc*/
@media screen and (max-width:543px){.iGmlUb{margin-left:-16px;margin-right:-16px;max-width:calc(100% + 32px);}}/*!sc*/
@media screen and (min-width:544px){.iGmlUb{max-width:100%;}}/*!sc*/
.iRQGXA{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;border-bottom:1px solid;border-bottom-color:var(--borderColor-default,var(--color-border-default,#d0d7de));-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding-right:8px;position:-webkit-sticky;position:sticky;top:0;background-color:var(--bgColor-default,var(--color-canvas-default,#ffffff));z-index:1;border-top-left-radius:6px;border-top-right-radius:6px;}/*!sc*/
.dvTdPK{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding-left:8px;padding-right:8px;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;border-bottom:none;border-bottom-color:var(--borderColor-muted,var(--color-border-muted,hsla(210,18%,87%,1)));align:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;min-height:48px;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;max-width:100%;}/*!sc*/
.gwuIGu{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}/*!sc*/
.kOxwQs{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;margin-right:8px;}/*!sc*/
.kOgeFj{font-weight:600;}/*!sc*/
.bJMeLZ{padding:32px;overflow:auto;}/*!sc*/
data-styled.g2[id="Box-sc-g0xbh4-0"]{content:"izjvBm,rPQgy,eUMEDg,eLcVee,hsfLlq,gpKoUz,kkrdEu,bKgizp,iPGYsi,caeYDk,trpoQ,laYubZ,swnaL,bWpuBf,grHjNb,dXTsqj,dCOrmu,bVvbgP,bNDvfp,yfPnm,cAQuiW,iiUlLN,jmggSN,kvYunM,hrLuxA,cuEKae,jEbBOT,brJRqk,epsqEd,ldpruc,ehcSsh,iGmlUb,iRQGXA,dvTdPK,gwuIGu,kOxwQs,kOgeFj,bJMeLZ,"}/*!sc*/
.bOMzPg{min-width:0;}/*!sc*/
data-styled.g4[id="Text-sc-17v1xeu-0"]{content:"bOMzPg,gPDEWA,"}/*!sc*/
.fruYDV{border-radius:6px;border:1px solid;border-color:var(--button-default-borderColor-rest,var(--button-default-borderColor-rest,var(--color-btn-border,rgba(31,35,40,0.15))));font-family:inherit;font-weight:500;font-size:14px;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:32px;padding:0 12px;gap:8px;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;-webkit-transition:80ms cubic-bezier(0.65,0,0.35,1);transition:80ms cubic-bezier(0.65,0,0.35,1);-webkit-transition-property:color,fill,background-color,border-color;transition-property:color,fill,background-color,border-color;color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));background-color:var(--button-default-bgColor-rest,var(--color-btn-bg,#f6f8fa));box-shadow:var(--button-default-shadow-resting,var(--color-btn-shadow,0 1px 0 rgba(31,35,40,0.04))),var(--button-default-shadow-inset,var(--color-btn-inset-shadow,inset 0 1px 0 rgba(255,255,255,0.25)));}/*!sc*/
.fruYDV:focus:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.fruYDV:focus:not(:disabled):not(:focus-visible){outline:solid 1px transparent;}/*!sc*/
.fruYDV:focus-visible:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.fruYDV[href]{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}/*!sc*/
.fruYDV[href]:hover{-webkit-text-decoration:none;text-decoration:none;}/*!sc*/
.fruYDV:hover{-webkit-transition-duration:80ms;transition-duration:80ms;}/*!sc*/
.fruYDV:active{-webkit-transition:none;transition:none;}/*!sc*/
.fruYDV[data-inactive]{cursor:auto;}/*!sc*/
.fruYDV:disabled{cursor:not-allowed;box-shadow:none;color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));border-color:var(--button-default-borderColor-disabled,var(--button-default-borderColor-rest,var(--color-btn-border,rgba(31,35,40,0.15))));background-color:var(--button-default-bgColor-disabled,var(--control-bgColor-disabled,var(--color-input-disabled-bg,rgba(175,184,193,0.2))));}/*!sc*/
.fruYDV:disabled [data-component=ButtonCounter]{color:inherit;}/*!sc*/
@media (forced-colors:active){.fruYDV:focus{outline:solid 1px transparent;}}/*!sc*/
.fruYDV [data-component=ButtonCounter]{font-size:12px;background-color:var(--buttonCounter-default-bgColor-rest,var(--color-btn-counter-bg,rgba(31,35,40,0.08)));}/*!sc*/
.fruYDV[data-component=IconButton]{display:inline-grid;padding:unset;place-content:center;width:32px;min-width:unset;}/*!sc*/
.fruYDV[data-size="small"]{padding:0 8px;height:28px;gap:4px;font-size:12px;}/*!sc*/
.fruYDV[data-size="small"] [data-component="text"]{line-height:calc(20 / 12);}/*!sc*/
.fruYDV[data-size="small"] [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.fruYDV[data-size="small"] [data-component="buttonContent"] > :not(:last-child){margin-right:4px;}/*!sc*/
.fruYDV[data-size="small"][data-component=IconButton]{width:28px;padding:unset;}/*!sc*/
.fruYDV[data-size="large"]{padding:0 16px;height:40px;gap:8px;}/*!sc*/
.fruYDV[data-size="large"] [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.fruYDV[data-size="large"][data-component=IconButton]{width:40px;padding:unset;}/*!sc*/
.fruYDV[data-block="block"]{width:100%;}/*!sc*/
.fruYDV[data-inactive]:not([disabled]){background-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));border-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));color:var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));}/*!sc*/
.fruYDV[data-inactive]:not([disabled]):focus-visible{box-shadow:none;}/*!sc*/
.fruYDV [data-component="leadingVisual"]{grid-area:leadingVisual;}/*!sc*/
.fruYDV [data-component="text"]{grid-area:text;line-height:calc(20/14);white-space:nowrap;}/*!sc*/
.fruYDV [data-component="trailingVisual"]{grid-area:trailingVisual;}/*!sc*/
.fruYDV [data-component="trailingAction"]{margin-right:-4px;}/*!sc*/
.fruYDV [data-component="buttonContent"]{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:grid;grid-template-areas:"leadingVisual text trailingVisual";grid-template-columns:min-content minmax(0,auto) min-content;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;}/*!sc*/
.fruYDV [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.fruYDV:hover:not([disabled]):not([data-inactive]){background-color:var(--button-default-bgColor-hover,var(--color-btn-hover-bg,#f3f4f6));border-color:var(--button-default-borderColor-hover,var(--button-default-borderColor-hover,var(--color-btn-hover-border,rgba(31,35,40,0.15))));}/*!sc*/
.fruYDV:active:not([disabled]):not([data-inactive]){background-color:var(--button-default-bgColor-active,var(--color-btn-active-bg,hsla(220,14%,93%,1)));border-color:var(--button-default-borderColor-active,var(--button-default-borderColor-active,var(--color-btn-active-border,rgba(31,35,40,0.15))));}/*!sc*/
.fruYDV[aria-expanded=true]{background-color:var(--button-default-bgColor-active,var(--color-btn-active-bg,hsla(220,14%,93%,1)));border-color:var(--button-default-borderColor-active,var(--button-default-borderColor-active,var(--color-btn-active-border,rgba(31,35,40,0.15))));}/*!sc*/
.fruYDV [data-component="leadingVisual"],.fruYDV [data-component="trailingVisual"],.fruYDV [data-component="trailingAction"]{color:var(--button-color,var(--fgColor-muted,var(--color-fg-muted,#656d76)));}/*!sc*/
.fruYDV[data-component="IconButton"][data-no-visuals]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.fruYDV{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;min-width:0;}/*!sc*/
.fruYDV svg{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.fruYDV > span{width:inherit;}/*!sc*/
.cuOWTR{border-radius:6px;border:1px solid;border-color:transparent;font-family:inherit;font-weight:500;font-size:14px;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:32px;padding:0 12px;gap:8px;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;-webkit-transition:80ms cubic-bezier(0.65,0,0.35,1);transition:80ms cubic-bezier(0.65,0,0.35,1);-webkit-transition-property:color,fill,background-color,border-color;transition-property:color,fill,background-color,border-color;color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));background-color:transparent;box-shadow:none;}/*!sc*/
.cuOWTR:focus:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.cuOWTR:focus:not(:disabled):not(:focus-visible){outline:solid 1px transparent;}/*!sc*/
.cuOWTR:focus-visible:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.cuOWTR[href]{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}/*!sc*/
.cuOWTR[href]:hover{-webkit-text-decoration:none;text-decoration:none;}/*!sc*/
.cuOWTR:hover{-webkit-transition-duration:80ms;transition-duration:80ms;}/*!sc*/
.cuOWTR:active{-webkit-transition:none;transition:none;}/*!sc*/
.cuOWTR[data-inactive]{cursor:auto;}/*!sc*/
.cuOWTR:disabled{cursor:not-allowed;box-shadow:none;color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));}/*!sc*/
.cuOWTR:disabled [data-component=ButtonCounter],.cuOWTR:disabled [data-component="leadingVisual"],.cuOWTR:disabled [data-component="trailingAction"]{color:inherit;}/*!sc*/
@media (forced-colors:active){.cuOWTR:focus{outline:solid 1px transparent;}}/*!sc*/
.cuOWTR [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.cuOWTR[data-component=IconButton]{display:inline-grid;padding:unset;place-content:center;width:32px;min-width:unset;}/*!sc*/
.cuOWTR[data-size="small"]{padding:0 8px;height:28px;gap:4px;font-size:12px;}/*!sc*/
.cuOWTR[data-size="small"] [data-component="text"]{line-height:calc(20 / 12);}/*!sc*/
.cuOWTR[data-size="small"] [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.cuOWTR[data-size="small"] [data-component="buttonContent"] > :not(:last-child){margin-right:4px;}/*!sc*/
.cuOWTR[data-size="small"][data-component=IconButton]{width:28px;padding:unset;}/*!sc*/
.cuOWTR[data-size="large"]{padding:0 16px;height:40px;gap:8px;}/*!sc*/
.cuOWTR[data-size="large"] [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.cuOWTR[data-size="large"][data-component=IconButton]{width:40px;padding:unset;}/*!sc*/
.cuOWTR[data-block="block"]{width:100%;}/*!sc*/
.cuOWTR[data-inactive]:not([disabled]){background-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));border-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));color:var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));}/*!sc*/
.cuOWTR[data-inactive]:not([disabled]):focus-visible{box-shadow:none;}/*!sc*/
.cuOWTR [data-component="leadingVisual"]{grid-area:leadingVisual;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.cuOWTR [data-component="text"]{grid-area:text;line-height:calc(20/14);white-space:nowrap;}/*!sc*/
.cuOWTR [data-component="trailingVisual"]{grid-area:trailingVisual;}/*!sc*/
.cuOWTR [data-component="trailingAction"]{margin-right:-4px;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.cuOWTR [data-component="buttonContent"]{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:grid;grid-template-areas:"leadingVisual text trailingVisual";grid-template-columns:min-content minmax(0,auto) min-content;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;}/*!sc*/
.cuOWTR [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.cuOWTR:hover:not([disabled]){background-color:var(--control-transparent-bgColor-hover,var(--color-action-list-item-default-hover-bg,rgba(208,215,222,0.32)));}/*!sc*/
.cuOWTR:active:not([disabled]){background-color:var(--control-transparent-bgColor-active,var(--color-action-list-item-default-active-bg,rgba(208,215,222,0.48)));}/*!sc*/
.cuOWTR[aria-expanded=true]{background-color:var(--control-transparent-bgColor-selected,var(--color-action-list-item-default-selected-bg,rgba(208,215,222,0.24)));}/*!sc*/
.cuOWTR[data-component="IconButton"][data-no-visuals]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.cuOWTR[data-no-visuals]{color:var(--fgColor-accent,var(--color-accent-fg,#0969da));}/*!sc*/
.cuOWTR:has([data-component="ButtonCounter"]){color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));}/*!sc*/
.cuOWTR:disabled[data-no-visuals]{color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));}/*!sc*/
.cuOWTR:disabled[data-no-visuals] [data-component=ButtonCounter]{color:inherit;}/*!sc*/
.cuOWTR{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));padding-left:4px;padding-right:4px;}/*!sc*/
.cuOWTR span[data-component="leadingVisual"]{margin-right:4px !important;}/*!sc*/
.tDSzd{border-radius:6px;border:1px solid;border-color:transparent;font-family:inherit;font-weight:500;font-size:14px;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:32px;padding:0 12px;gap:8px;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;-webkit-transition:80ms cubic-bezier(0.65,0,0.35,1);transition:80ms cubic-bezier(0.65,0,0.35,1);-webkit-transition-property:color,fill,background-color,border-color;transition-property:color,fill,background-color,border-color;color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));background-color:transparent;box-shadow:none;}/*!sc*/
.tDSzd:focus:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.tDSzd:focus:not(:disabled):not(:focus-visible){outline:solid 1px transparent;}/*!sc*/
.tDSzd:focus-visible:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.tDSzd[href]{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}/*!sc*/
.tDSzd[href]:hover{-webkit-text-decoration:none;text-decoration:none;}/*!sc*/
.tDSzd:hover{-webkit-transition-duration:80ms;transition-duration:80ms;}/*!sc*/
.tDSzd:active{-webkit-transition:none;transition:none;}/*!sc*/
.tDSzd[data-inactive]{cursor:auto;}/*!sc*/
.tDSzd:disabled{cursor:not-allowed;box-shadow:none;color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));}/*!sc*/
.tDSzd:disabled [data-component=ButtonCounter],.tDSzd:disabled [data-component="leadingVisual"],.tDSzd:disabled [data-component="trailingAction"]{color:inherit;}/*!sc*/
@media (forced-colors:active){.tDSzd:focus{outline:solid 1px transparent;}}/*!sc*/
.tDSzd [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.tDSzd[data-component=IconButton]{display:inline-grid;padding:unset;place-content:center;width:32px;min-width:unset;}/*!sc*/
.tDSzd[data-size="small"]{padding:0 8px;height:28px;gap:4px;font-size:12px;}/*!sc*/
.tDSzd[data-size="small"] [data-component="text"]{line-height:calc(20 / 12);}/*!sc*/
.tDSzd[data-size="small"] [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.tDSzd[data-size="small"] [data-component="buttonContent"] > :not(:last-child){margin-right:4px;}/*!sc*/
.tDSzd[data-size="small"][data-component=IconButton]{width:28px;padding:unset;}/*!sc*/
.tDSzd[data-size="large"]{padding:0 16px;height:40px;gap:8px;}/*!sc*/
.tDSzd[data-size="large"] [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.tDSzd[data-size="large"][data-component=IconButton]{width:40px;padding:unset;}/*!sc*/
.tDSzd[data-block="block"]{width:100%;}/*!sc*/
.tDSzd[data-inactive]:not([disabled]){background-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));border-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));color:var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));}/*!sc*/
.tDSzd[data-inactive]:not([disabled]):focus-visible{box-shadow:none;}/*!sc*/
.tDSzd [data-component="leadingVisual"]{grid-area:leadingVisual;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.tDSzd [data-component="text"]{grid-area:text;line-height:calc(20/14);white-space:nowrap;}/*!sc*/
.tDSzd [data-component="trailingVisual"]{grid-area:trailingVisual;}/*!sc*/
.tDSzd [data-component="trailingAction"]{margin-right:-4px;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.tDSzd [data-component="buttonContent"]{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:grid;grid-template-areas:"leadingVisual text trailingVisual";grid-template-columns:min-content minmax(0,auto) min-content;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;}/*!sc*/
.tDSzd [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.tDSzd:hover:not([disabled]){background-color:var(--control-transparent-bgColor-hover,var(--color-action-list-item-default-hover-bg,rgba(208,215,222,0.32)));}/*!sc*/
.tDSzd:active:not([disabled]){background-color:var(--control-transparent-bgColor-active,var(--color-action-list-item-default-active-bg,rgba(208,215,222,0.48)));}/*!sc*/
.tDSzd[aria-expanded=true]{background-color:var(--control-transparent-bgColor-selected,var(--color-action-list-item-default-selected-bg,rgba(208,215,222,0.24)));}/*!sc*/
.tDSzd[data-component="IconButton"][data-no-visuals]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.tDSzd[data-no-visuals]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.tDSzd:has([data-component="ButtonCounter"]){color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));}/*!sc*/
.tDSzd:disabled[data-no-visuals]{color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));}/*!sc*/
.tDSzd:disabled[data-no-visuals] [data-component=ButtonCounter]{color:inherit;}/*!sc*/
.pyyxt{border-radius:6px;border:1px solid;border-color:var(--button-default-borderColor-rest,var(--button-default-borderColor-rest,var(--color-btn-border,rgba(31,35,40,0.15))));font-family:inherit;font-weight:500;font-size:14px;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:32px;padding:0 12px;gap:8px;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;-webkit-transition:80ms cubic-bezier(0.65,0,0.35,1);transition:80ms cubic-bezier(0.65,0,0.35,1);-webkit-transition-property:color,fill,background-color,border-color;transition-property:color,fill,background-color,border-color;color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));background-color:var(--button-default-bgColor-rest,var(--color-btn-bg,#f6f8fa));box-shadow:var(--button-default-shadow-resting,var(--color-btn-shadow,0 1px 0 rgba(31,35,40,0.04))),var(--button-default-shadow-inset,var(--color-btn-inset-shadow,inset 0 1px 0 rgba(255,255,255,0.25)));}/*!sc*/
.pyyxt:focus:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.pyyxt:focus:not(:disabled):not(:focus-visible){outline:solid 1px transparent;}/*!sc*/
.pyyxt:focus-visible:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.pyyxt[href]{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}/*!sc*/
.pyyxt[href]:hover{-webkit-text-decoration:none;text-decoration:none;}/*!sc*/
.pyyxt:hover{-webkit-transition-duration:80ms;transition-duration:80ms;}/*!sc*/
.pyyxt:active{-webkit-transition:none;transition:none;}/*!sc*/
.pyyxt[data-inactive]{cursor:auto;}/*!sc*/
.pyyxt:disabled{cursor:not-allowed;box-shadow:none;color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));border-color:var(--button-default-borderColor-disabled,var(--button-default-borderColor-rest,var(--color-btn-border,rgba(31,35,40,0.15))));background-color:var(--button-default-bgColor-disabled,var(--control-bgColor-disabled,var(--color-input-disabled-bg,rgba(175,184,193,0.2))));}/*!sc*/
.pyyxt:disabled [data-component=ButtonCounter]{color:inherit;}/*!sc*/
@media (forced-colors:active){.pyyxt:focus{outline:solid 1px transparent;}}/*!sc*/
.pyyxt [data-component=ButtonCounter]{font-size:12px;background-color:var(--buttonCounter-default-bgColor-rest,var(--color-btn-counter-bg,rgba(31,35,40,0.08)));}/*!sc*/
.pyyxt[data-component=IconButton]{display:inline-grid;padding:unset;place-content:center;width:32px;min-width:unset;}/*!sc*/
.pyyxt[data-size="small"]{padding:0 8px;height:28px;gap:4px;font-size:12px;}/*!sc*/
.pyyxt[data-size="small"] [data-component="text"]{line-height:calc(20 / 12);}/*!sc*/
.pyyxt[data-size="small"] [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.pyyxt[data-size="small"] [data-component="buttonContent"] > :not(:last-child){margin-right:4px;}/*!sc*/
.pyyxt[data-size="small"][data-component=IconButton]{width:28px;padding:unset;}/*!sc*/
.pyyxt[data-size="large"]{padding:0 16px;height:40px;gap:8px;}/*!sc*/
.pyyxt[data-size="large"] [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.pyyxt[data-size="large"][data-component=IconButton]{width:40px;padding:unset;}/*!sc*/
.pyyxt[data-block="block"]{width:100%;}/*!sc*/
.pyyxt[data-inactive]:not([disabled]){background-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));border-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));color:var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));}/*!sc*/
.pyyxt[data-inactive]:not([disabled]):focus-visible{box-shadow:none;}/*!sc*/
.pyyxt [data-component="leadingVisual"]{grid-area:leadingVisual;}/*!sc*/
.pyyxt [data-component="text"]{grid-area:text;line-height:calc(20/14);white-space:nowrap;}/*!sc*/
.pyyxt [data-component="trailingVisual"]{grid-area:trailingVisual;}/*!sc*/
.pyyxt [data-component="trailingAction"]{margin-right:-4px;}/*!sc*/
.pyyxt [data-component="buttonContent"]{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:grid;grid-template-areas:"leadingVisual text trailingVisual";grid-template-columns:min-content minmax(0,auto) min-content;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;}/*!sc*/
.pyyxt [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.pyyxt:hover:not([disabled]):not([data-inactive]){background-color:var(--button-default-bgColor-hover,var(--color-btn-hover-bg,#f3f4f6));border-color:var(--button-default-borderColor-hover,var(--button-default-borderColor-hover,var(--color-btn-hover-border,rgba(31,35,40,0.15))));}/*!sc*/
.pyyxt:active:not([disabled]):not([data-inactive]){background-color:var(--button-default-bgColor-active,var(--color-btn-active-bg,hsla(220,14%,93%,1)));border-color:var(--button-default-borderColor-active,var(--button-default-borderColor-active,var(--color-btn-active-border,rgba(31,35,40,0.15))));}/*!sc*/
.pyyxt[aria-expanded=true]{background-color:var(--button-default-bgColor-active,var(--color-btn-active-bg,hsla(220,14%,93%,1)));border-color:var(--button-default-borderColor-active,var(--button-default-borderColor-active,var(--color-btn-active-border,rgba(31,35,40,0.15))));}/*!sc*/
.pyyxt [data-component="leadingVisual"],.pyyxt [data-component="trailingVisual"],.pyyxt [data-component="trailingAction"]{color:var(--button-color,var(--fgColor-muted,var(--color-fg-muted,#656d76)));}/*!sc*/
.pyyxt[data-component="IconButton"][data-no-visuals]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.gYvpXq{border-radius:6px;border:1px solid;border-color:var(--button-primary-borderColor-rest,var(--color-btn-primary-border,rgba(31,35,40,0.15)));font-family:inherit;font-weight:500;font-size:14px;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:32px;padding:0 12px;gap:8px;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;-webkit-transition:80ms cubic-bezier(0.65,0,0.35,1);transition:80ms cubic-bezier(0.65,0,0.35,1);-webkit-transition-property:color,fill,background-color,border-color;transition-property:color,fill,background-color,border-color;color:var(--button-primary-fgColor-rest,var(--color-btn-primary-text,#ffffff));background-color:var(--button-primary-bgColor-rest,var(--color-btn-primary-bg,#1f883d));box-shadow:var(--shadow-resting-small,var(--color-btn-primary-shadow,0 1px 0 rgba(31,35,40,0.1)));}/*!sc*/
.gYvpXq:focus:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.gYvpXq:focus:not(:disabled):not(:focus-visible){outline:solid 1px transparent;}/*!sc*/
.gYvpXq:focus-visible:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.gYvpXq[href]{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}/*!sc*/
.gYvpXq[href]:hover{-webkit-text-decoration:none;text-decoration:none;}/*!sc*/
.gYvpXq:hover{-webkit-transition-duration:80ms;transition-duration:80ms;}/*!sc*/
.gYvpXq:active{-webkit-transition:none;transition:none;}/*!sc*/
.gYvpXq[data-inactive]{cursor:auto;}/*!sc*/
.gYvpXq:disabled{cursor:not-allowed;box-shadow:none;color:var(--button-primary-fgColor-disabled,var(--color-btn-primary-disabled-text,rgba(255,255,255,0.8)));background-color:var(--button-primary-bgColor-disabled,var(--color-btn-primary-disabled-bg,#94d3a2));border-color:var(--button-primary-borderColor-disabled,var(--color-btn-primary-disabled-border,rgba(31,35,40,0.15)));}/*!sc*/
.gYvpXq:disabled [data-component=ButtonCounter]{color:inherit;}/*!sc*/
@media (forced-colors:active){.gYvpXq:focus{outline:solid 1px transparent;}}/*!sc*/
.gYvpXq [data-component=ButtonCounter]{font-size:12px;background-color:var(--buttonCounter-primary-bgColor-rest,var(--color-btn-primary-counter-bg,rgba(0,45,17,0.2)));color:var(--button-primary-fgColor-rest,var(--color-btn-primary-text,#ffffff));}/*!sc*/
.gYvpXq[data-component=IconButton]{display:inline-grid;padding:unset;place-content:center;width:32px;min-width:unset;}/*!sc*/
.gYvpXq[data-size="small"]{padding:0 8px;height:28px;gap:4px;font-size:12px;}/*!sc*/
.gYvpXq[data-size="small"] [data-component="text"]{line-height:calc(20 / 12);}/*!sc*/
.gYvpXq[data-size="small"] [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.gYvpXq[data-size="small"] [data-component="buttonContent"] > :not(:last-child){margin-right:4px;}/*!sc*/
.gYvpXq[data-size="small"][data-component=IconButton]{width:28px;padding:unset;}/*!sc*/
.gYvpXq[data-size="large"]{padding:0 16px;height:40px;gap:8px;}/*!sc*/
.gYvpXq[data-size="large"] [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.gYvpXq[data-size="large"][data-component=IconButton]{width:40px;padding:unset;}/*!sc*/
.gYvpXq[data-block="block"]{width:100%;}/*!sc*/
.gYvpXq[data-inactive]:not([disabled]){background-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));border-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));color:var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));}/*!sc*/
.gYvpXq[data-inactive]:not([disabled]):focus-visible{box-shadow:none;}/*!sc*/
.gYvpXq [data-component="leadingVisual"]{grid-area:leadingVisual;}/*!sc*/
.gYvpXq [data-component="text"]{grid-area:text;line-height:calc(20/14);white-space:nowrap;}/*!sc*/
.gYvpXq [data-component="trailingVisual"]{grid-area:trailingVisual;}/*!sc*/
.gYvpXq [data-component="trailingAction"]{margin-right:-4px;}/*!sc*/
.gYvpXq [data-component="buttonContent"]{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:grid;grid-template-areas:"leadingVisual text trailingVisual";grid-template-columns:min-content minmax(0,auto) min-content;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;}/*!sc*/
.gYvpXq [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.gYvpXq:hover:not([disabled]):not([data-inactive]){color:btn.primary.hoverText;background-color:var(--button-primary-bgColor-hover,var(--color-btn-primary-hover-bg,#1a7f37));}/*!sc*/
.gYvpXq:focus:not([disabled]){box-shadow:inset 0 0 0 3px;}/*!sc*/
.gYvpXq:focus-visible:not([disabled]){box-shadow:inset 0 0 0 3px;}/*!sc*/
.gYvpXq:active:not([disabled]):not([data-inactive]){background-color:var(--button-primary-bgColor-active,var(--color-btn-primary-selected-bg,hsla(137,66%,28%,1)));box-shadow:var(--button-primary-shadow-selected,var(--color-btn-primary-selected-shadow,inset 0 1px 0 rgba(0,45,17,0.2)));}/*!sc*/
.gYvpXq[aria-expanded=true]{background-color:var(--button-primary-bgColor-active,var(--color-btn-primary-selected-bg,hsla(137,66%,28%,1)));box-shadow:var(--button-primary-shadow-selected,var(--color-btn-primary-selected-shadow,inset 0 1px 0 rgba(0,45,17,0.2)));}/*!sc*/
.gYvpXq svg{color:fg.primary;}/*!sc*/
.dOnKJi{border-radius:6px;border:1px solid;border-color:transparent;font-family:inherit;font-weight:500;font-size:14px;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:32px;padding:0 12px;gap:8px;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;-webkit-transition:80ms cubic-bezier(0.65,0,0.35,1);transition:80ms cubic-bezier(0.65,0,0.35,1);-webkit-transition-property:color,fill,background-color,border-color;transition-property:color,fill,background-color,border-color;color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));background-color:transparent;box-shadow:none;}/*!sc*/
.dOnKJi:focus:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.dOnKJi:focus:not(:disabled):not(:focus-visible){outline:solid 1px transparent;}/*!sc*/
.dOnKJi:focus-visible:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.dOnKJi[href]{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}/*!sc*/
.dOnKJi[href]:hover{-webkit-text-decoration:none;text-decoration:none;}/*!sc*/
.dOnKJi:hover{-webkit-transition-duration:80ms;transition-duration:80ms;}/*!sc*/
.dOnKJi:active{-webkit-transition:none;transition:none;}/*!sc*/
.dOnKJi[data-inactive]{cursor:auto;}/*!sc*/
.dOnKJi:disabled{cursor:not-allowed;box-shadow:none;color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));}/*!sc*/
.dOnKJi:disabled [data-component=ButtonCounter],.dOnKJi:disabled [data-component="leadingVisual"],.dOnKJi:disabled [data-component="trailingAction"]{color:inherit;}/*!sc*/
@media (forced-colors:active){.dOnKJi:focus{outline:solid 1px transparent;}}/*!sc*/
.dOnKJi [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.dOnKJi[data-component=IconButton]{display:inline-grid;padding:unset;place-content:center;width:32px;min-width:unset;}/*!sc*/
.dOnKJi[data-size="small"]{padding:0 8px;height:28px;gap:4px;font-size:12px;}/*!sc*/
.dOnKJi[data-size="small"] [data-component="text"]{line-height:calc(20 / 12);}/*!sc*/
.dOnKJi[data-size="small"] [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.dOnKJi[data-size="small"] [data-component="buttonContent"] > :not(:last-child){margin-right:4px;}/*!sc*/
.dOnKJi[data-size="small"][data-component=IconButton]{width:28px;padding:unset;}/*!sc*/
.dOnKJi[data-size="large"]{padding:0 16px;height:40px;gap:8px;}/*!sc*/
.dOnKJi[data-size="large"] [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.dOnKJi[data-size="large"][data-component=IconButton]{width:40px;padding:unset;}/*!sc*/
.dOnKJi[data-block="block"]{width:100%;}/*!sc*/
.dOnKJi[data-inactive]:not([disabled]){background-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));border-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));color:var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));}/*!sc*/
.dOnKJi[data-inactive]:not([disabled]):focus-visible{box-shadow:none;}/*!sc*/
.dOnKJi [data-component="leadingVisual"]{grid-area:leadingVisual;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.dOnKJi [data-component="text"]{grid-area:text;line-height:calc(20/14);white-space:nowrap;}/*!sc*/
.dOnKJi [data-component="trailingVisual"]{grid-area:trailingVisual;}/*!sc*/
.dOnKJi [data-component="trailingAction"]{margin-right:-4px;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.dOnKJi [data-component="buttonContent"]{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:grid;grid-template-areas:"leadingVisual text trailingVisual";grid-template-columns:min-content minmax(0,auto) min-content;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;}/*!sc*/
.dOnKJi [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.dOnKJi:hover:not([disabled]){background-color:var(--control-transparent-bgColor-hover,var(--color-action-list-item-default-hover-bg,rgba(208,215,222,0.32)));}/*!sc*/
.dOnKJi:active:not([disabled]){background-color:var(--control-transparent-bgColor-active,var(--color-action-list-item-default-active-bg,rgba(208,215,222,0.48)));}/*!sc*/
.dOnKJi[aria-expanded=true]{background-color:var(--control-transparent-bgColor-selected,var(--color-action-list-item-default-selected-bg,rgba(208,215,222,0.24)));}/*!sc*/
.dOnKJi[data-component="IconButton"][data-no-visuals]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.dOnKJi[data-no-visuals]{color:var(--fgColor-accent,var(--color-accent-fg,#0969da));}/*!sc*/
.dOnKJi:has([data-component="ButtonCounter"]){color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));}/*!sc*/
.dOnKJi:disabled[data-no-visuals]{color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));}/*!sc*/
.dOnKJi:disabled[data-no-visuals] [data-component=ButtonCounter]{color:inherit;}/*!sc*/
.jPraEl{border-radius:6px;border:1px solid;border-color:transparent;font-family:inherit;font-weight:500;font-size:14px;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-text-decoration:none;text-decoration:none;text-align:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;height:32px;padding:0 12px;gap:8px;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;-webkit-transition:80ms cubic-bezier(0.65,0,0.35,1);transition:80ms cubic-bezier(0.65,0,0.35,1);-webkit-transition-property:color,fill,background-color,border-color;transition-property:color,fill,background-color,border-color;color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));background-color:transparent;box-shadow:none;}/*!sc*/
.jPraEl:focus:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.jPraEl:focus:not(:disabled):not(:focus-visible){outline:solid 1px transparent;}/*!sc*/
.jPraEl:focus-visible:not(:disabled){box-shadow:none;outline:2px solid var(--fgColor-accent,var(--color-accent-fg,#0969da));outline-offset:-2px;}/*!sc*/
.jPraEl[href]{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;}/*!sc*/
.jPraEl[href]:hover{-webkit-text-decoration:none;text-decoration:none;}/*!sc*/
.jPraEl:hover{-webkit-transition-duration:80ms;transition-duration:80ms;}/*!sc*/
.jPraEl:active{-webkit-transition:none;transition:none;}/*!sc*/
.jPraEl[data-inactive]{cursor:auto;}/*!sc*/
.jPraEl:disabled{cursor:not-allowed;box-shadow:none;color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));}/*!sc*/
.jPraEl:disabled [data-component=ButtonCounter],.jPraEl:disabled [data-component="leadingVisual"],.jPraEl:disabled [data-component="trailingAction"]{color:inherit;}/*!sc*/
@media (forced-colors:active){.jPraEl:focus{outline:solid 1px transparent;}}/*!sc*/
.jPraEl [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.jPraEl[data-component=IconButton]{display:inline-grid;padding:unset;place-content:center;width:32px;min-width:unset;}/*!sc*/
.jPraEl[data-size="small"]{padding:0 8px;height:28px;gap:4px;font-size:12px;}/*!sc*/
.jPraEl[data-size="small"] [data-component="text"]{line-height:calc(20 / 12);}/*!sc*/
.jPraEl[data-size="small"] [data-component=ButtonCounter]{font-size:12px;}/*!sc*/
.jPraEl[data-size="small"] [data-component="buttonContent"] > :not(:last-child){margin-right:4px;}/*!sc*/
.jPraEl[data-size="small"][data-component=IconButton]{width:28px;padding:unset;}/*!sc*/
.jPraEl[data-size="large"]{padding:0 16px;height:40px;gap:8px;}/*!sc*/
.jPraEl[data-size="large"] [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.jPraEl[data-size="large"][data-component=IconButton]{width:40px;padding:unset;}/*!sc*/
.jPraEl[data-block="block"]{width:100%;}/*!sc*/
.jPraEl[data-inactive]:not([disabled]){background-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));border-color:var(--button-inactive-bgColor,var(--button-inactive-bgColor-rest,var(--color-btn-inactive-bg,#eaeef2)));color:var(--button-inactive-fgColor,var(--button-inactive-fgColor-rest,var(--color-btn-inactive-text,#57606a)));}/*!sc*/
.jPraEl[data-inactive]:not([disabled]):focus-visible{box-shadow:none;}/*!sc*/
.jPraEl [data-component="leadingVisual"]{grid-area:leadingVisual;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.jPraEl [data-component="text"]{grid-area:text;line-height:calc(20/14);white-space:nowrap;}/*!sc*/
.jPraEl [data-component="trailingVisual"]{grid-area:trailingVisual;}/*!sc*/
.jPraEl [data-component="trailingAction"]{margin-right:-4px;color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.jPraEl [data-component="buttonContent"]{-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:grid;grid-template-areas:"leadingVisual text trailingVisual";grid-template-columns:min-content minmax(0,auto) min-content;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;}/*!sc*/
.jPraEl [data-component="buttonContent"] > :not(:last-child){margin-right:8px;}/*!sc*/
.jPraEl:hover:not([disabled]){background-color:var(--control-transparent-bgColor-hover,var(--color-action-list-item-default-hover-bg,rgba(208,215,222,0.32)));}/*!sc*/
.jPraEl:active:not([disabled]){background-color:var(--control-transparent-bgColor-active,var(--color-action-list-item-default-active-bg,rgba(208,215,222,0.48)));}/*!sc*/
.jPraEl[aria-expanded=true]{background-color:var(--control-transparent-bgColor-selected,var(--color-action-list-item-default-selected-bg,rgba(208,215,222,0.24)));}/*!sc*/
.jPraEl[data-component="IconButton"][data-no-visuals]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
.jPraEl[data-no-visuals]{color:var(--fgColor-accent,var(--color-accent-fg,#0969da));}/*!sc*/
.jPraEl:has([data-component="ButtonCounter"]){color:var(--button-default-fgColor-rest,var(--color-btn-text,#24292f));}/*!sc*/
.jPraEl:disabled[data-no-visuals]{color:var(--fgColor-disabled,var(--color-primer-fg-disabled,#8c959f));}/*!sc*/
.jPraEl:disabled[data-no-visuals] [data-component=ButtonCounter]{color:inherit;}/*!sc*/
.jPraEl{color:var(--fgColor-muted,var(--color-fg-subtle,#6e7781));padding-left:8px;padding-right:8px;}/*!sc*/
data-styled.g6[id="types__StyledButton-sc-ws60qy-0"]{content:"fruYDV,cuOWTR,tDSzd,pyyxt,gYvpXq,dOnKJi,jPraEl,"}/*!sc*/
.rTZSs{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;-webkit-clip:rect(0,0,0,0);clip:rect(0,0,0,0);white-space:nowrap;border-width:0;}/*!sc*/
data-styled.g7[id="_VisuallyHidden__VisuallyHidden-sc-11jhm7a-0"]{content:"rTZSs,"}/*!sc*/
.dheQRw{color:var(--fgColor-accent,var(--color-accent-fg,#0969da));-webkit-text-decoration:none;text-decoration:none;}/*!sc*/
[data-a11y-link-underlines='true'] .Link__StyledLink-sc-14289xe-0[data-inline='true']{-webkit-text-decoration:underline;text-decoration:underline;}/*!sc*/
.dheQRw:hover{-webkit-text-decoration:underline;text-decoration:underline;}/*!sc*/
.dheQRw:is(button){display:inline-block;padding:0;font-size:inherit;white-space:nowrap;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:transparent;border:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;}/*!sc*/
.vLMkZ{color:var(--fgColor-accent,var(--color-accent-fg,#0969da));-webkit-text-decoration:none;text-decoration:none;position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;color:var(--fgColor-default,var(--color-fg-default,#1F2328));text-align:center;-webkit-text-decoration:none;text-decoration:none;line-height:calc(20/14);border-radius:6px;font-size:14px;padding-left:8px;padding-right:8px;padding-top:calc((2rem - 1.25rem) / 2);padding-bottom:calc((2rem - 1.25rem) / 2);}/*!sc*/
[data-a11y-link-underlines='true'] .Link__StyledLink-sc-14289xe-0[data-inline='true']{-webkit-text-decoration:underline;text-decoration:underline;}/*!sc*/
.vLMkZ:hover{-webkit-text-decoration:underline;text-decoration:underline;}/*!sc*/
.vLMkZ:is(button){display:inline-block;padding:0;font-size:inherit;white-space:nowrap;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:transparent;border:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;}/*!sc*/
.vLMkZ span[data-component="icon"]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
@media (hover:hover){.vLMkZ:hover{background-color:var(--bgColor-neutral-muted,var(--color-neutral-muted,rgba(175,184,193,0.2)));-webkit-transition:background .12s ease-out;transition:background .12s ease-out;-webkit-text-decoration:none;text-decoration:none;}}/*!sc*/
.vLMkZ:focus{outline:2px solid transparent;}/*!sc*/
.vLMkZ:focus{box-shadow:inset 0 0 0 2px var(--fgColor-accent,var(--color-accent-fg,#0969da));}/*!sc*/
.vLMkZ:focus:not(:focus-visible){box-shadow:none;}/*!sc*/
.vLMkZ:focus-visible{outline:2px solid transparent;box-shadow:inset 0 0 0 2px var(--fgColor-accent,var(--color-accent-fg,#0969da));}/*!sc*/
.vLMkZ span[data-content]::before{content:attr(data-content);display:block;height:0;font-weight:600;visibility:hidden;white-space:nowrap;}/*!sc*/
.vLMkZ::after{position:absolute;right:50%;bottom:calc(50% - 25px);width:100%;height:2px;content:"";background-color:var(--underlineNav-borderColor-active,var(--color-primer-border-active,#fd8c73));border-radius:0;-webkit-transform:translate(50%,-50%);-ms-transform:translate(50%,-50%);transform:translate(50%,-50%);}/*!sc*/
@media (forced-colors:active){.vLMkZ::after{background-color:LinkText;}}/*!sc*/
.bhqztV{color:var(--fgColor-accent,var(--color-accent-fg,#0969da));-webkit-text-decoration:none;text-decoration:none;position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;color:var(--fgColor-default,var(--color-fg-default,#1F2328));text-align:center;-webkit-text-decoration:none;text-decoration:none;line-height:calc(20/14);border-radius:6px;font-size:14px;padding-left:8px;padding-right:8px;padding-top:calc((2rem - 1.25rem) / 2);padding-bottom:calc((2rem - 1.25rem) / 2);}/*!sc*/
[data-a11y-link-underlines='true'] .Link__StyledLink-sc-14289xe-0[data-inline='true']{-webkit-text-decoration:underline;text-decoration:underline;}/*!sc*/
.bhqztV:hover{-webkit-text-decoration:underline;text-decoration:underline;}/*!sc*/
.bhqztV:is(button){display:inline-block;padding:0;font-size:inherit;white-space:nowrap;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:transparent;border:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;}/*!sc*/
.bhqztV span[data-component="icon"]{color:var(--fgColor-muted,var(--color-fg-muted,#656d76));}/*!sc*/
@media (hover:hover){.bhqztV:hover{background-color:var(--bgColor-neutral-muted,var(--color-neutral-muted,rgba(175,184,193,0.2)));-webkit-transition:background .12s ease-out;transition:background .12s ease-out;-webkit-text-decoration:none;text-decoration:none;}}/*!sc*/
.bhqztV:focus{outline:2px solid transparent;}/*!sc*/
.bhqztV:focus{box-shadow:inset 0 0 0 2px var(--fgColor-accent,var(--color-accent-fg,#0969da));}/*!sc*/
.bhqztV:focus:not(:focus-visible){box-shadow:none;}/*!sc*/
.bhqztV:focus-visible{outline:2px solid transparent;box-shadow:inset 0 0 0 2px var(--fgColor-accent,var(--color-accent-fg,#0969da));}/*!sc*/
.bhqztV span[data-content]::before{content:attr(data-content);display:block;height:0;font-weight:600;visibility:hidden;white-space:nowrap;}/*!sc*/
.bhqztV::after{position:absolute;right:50%;bottom:calc(50% - 25px);width:100%;height:2px;content:"";background-color:transparent;border-radius:0;-webkit-transform:translate(50%,-50%);-ms-transform:translate(50%,-50%);transform:translate(50%,-50%);}/*!sc*/
@media (forced-colors:active){.bhqztV::after{background-color:transparent;}}/*!sc*/
data-styled.g10[id="Link__StyledLink-sc-14289xe-0"]{content:"dheQRw,vLMkZ,bhqztV,"}/*!sc*/
.gNgnVl{position:relative;display:inline-block;}/*!sc*/
.gNgnVl::after{position:absolute;z-index:1000000;display:none;padding:0.5em 0.75em;font:normal normal 11px/1.5 -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";-webkit-font-smoothing:subpixel-antialiased;color:var(--fgColor-onEmphasis,var(--color-fg-on-emphasis,#ffffff));text-align:center;-webkit-text-decoration:none;text-decoration:none;text-shadow:none;text-transform:none;-webkit-letter-spacing:normal;-moz-letter-spacing:normal;-ms-letter-spacing:normal;letter-spacing:normal;word-wrap:break-word;white-space:pre;pointer-events:none;content:attr(aria-label);background:var(--bgColor-emphasis,var(--color-neutral-emphasis-plus,#24292f));border-radius:6px;opacity:0;}/*!sc*/
@-webkit-keyframes tooltip-appear{from{opacity:0;}to{opacity:1;}}/*!sc*/
@keyframes tooltip-appear{from{opacity:0;}to{opacity:1;}}/*!sc*/
.gNgnVl:hover::after,.gNgnVl:active::after,.gNgnVl:focus::after,.gNgnVl:focus-within::after{display:inline-block;-webkit-text-decoration:none;text-decoration:none;-webkit-animation-name:tooltip-appear;animation-name:tooltip-appear;-webkit-animation-duration:0.1s;animation-duration:0.1s;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in;-webkit-animation-delay:0s;animation-delay:0s;}/*!sc*/
.gNgnVl.tooltipped-no-delay:hover::after,.gNgnVl.tooltipped-no-delay:active::after,.gNgnVl.tooltipped-no-delay:focus::after,.gNgnVl.tooltipped-no-delay:focus-within::after{-webkit-animation-delay:0s;animation-delay:0s;}/*!sc*/
.gNgnVl.tooltipped-multiline:hover::after,.gNgnVl.tooltipped-multiline:active::after,.gNgnVl.tooltipped-multiline:focus::after,.gNgnVl.tooltipped-multiline:focus-within::after{display:table-cell;}/*!sc*/
.gNgnVl.tooltipped-s::after,.gNgnVl.tooltipped-se::after,.gNgnVl.tooltipped-sw::after{top:100%;right:50%;margin-top:6px;}/*!sc*/
.gNgnVl.tooltipped-se::after{right:auto;left:50%;margin-left:-16px;}/*!sc*/
.gNgnVl.tooltipped-sw::after{margin-right:-16px;}/*!sc*/
.gNgnVl.tooltipped-n::after,.gNgnVl.tooltipped-ne::after,.gNgnVl.tooltipped-nw::after{right:50%;bottom:100%;margin-bottom:6px;}/*!sc*/
.gNgnVl.tooltipped-ne::after{right:auto;left:50%;margin-left:-16px;}/*!sc*/
.gNgnVl.tooltipped-nw::after{margin-right:-16px;}/*!sc*/
.gNgnVl.tooltipped-s::after,.gNgnVl.tooltipped-n::after{-webkit-transform:translateX(50%);-ms-transform:translateX(50%);transform:translateX(50%);}/*!sc*/
.gNgnVl.tooltipped-w::after{right:100%;bottom:50%;margin-right:6px;-webkit-transform:translateY(50%);-ms-transform:translateY(50%);transform:translateY(50%);}/*!sc*/
.gNgnVl.tooltipped-e::after{bottom:50%;left:100%;margin-left:6px;-webkit-transform:translateY(50%);-ms-transform:translateY(50%);transform:translateY(50%);}/*!sc*/
.gNgnVl.tooltipped-multiline::after{width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:250px;word-wrap:break-word;white-space:pre-line;border-collapse:separate;}/*!sc*/
.gNgnVl.tooltipped-multiline.tooltipped-s::after,.gNgnVl.tooltipped-multiline.tooltipped-n::after{right:auto;left:50%;-webkit-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);}/*!sc*/
.gNgnVl.tooltipped-multiline.tooltipped-w::after,.gNgnVl.tooltipped-multiline.tooltipped-e::after{right:100%;}/*!sc*/
.gNgnVl.tooltipped-align-right-2::after{right:0;margin-right:0;}/*!sc*/
.gNgnVl.tooltipped-align-left-2::after{left:0;margin-left:0;}/*!sc*/
data-styled.g12[id="Tooltip__TooltipBase-sc-17tf59c-0"]{content:"gNgnVl,"}/*!sc*/
.dliONX{display:inline-block;overflow:hidden;text-overflow:ellipsis;vertical-align:top;white-space:nowrap;max-width:125px;}/*!sc*/
data-styled.g14[id="Truncate__StyledTruncate-sc-23o1d2-0"]{content:"dliONX,"}/*!sc*/
.bPgibo{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;list-style:none;white-space:nowrap;padding-top:0;padding-bottom:0;padding-left:0;padding-right:0;margin:0;margin-bottom:-1px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;gap:8px;position:relative;}/*!sc*/
data-styled.g42[id="UnderlineNav__NavigationList-sc-1jfr31k-0"]{content:"bPgibo,"}/*!sc*/
</style> <!-- --> <!-- --> <div class="Box-sc-g0xbh4-0 izjvBm"><div class="Box-sc-g0xbh4-0 rPQgy"><div class="Box-sc-g0xbh4-0 eUMEDg"></div></div><div class="Box-sc-g0xbh4-0 eLcVee"><div class="Box-sc-g0xbh4-0 hsfLlq"><div class="Box-sc-g0xbh4-0 gpKoUz"><button type="button" id="branch-picker-repos-header-ref-selector" aria-haspopup="true" aria-expanded="false" tabindex="0" aria-label="master branch" data-testid="anchor-button" class="types__StyledButton-sc-ws60qy-0 fruYDV overview-ref-selector width-full"><span data-component="buttonContent" class="Box-sc-g0xbh4-0 kkrdEu"><span data-component="text"><div class="Box-sc-g0xbh4-0 bKgizp"><div class="Box-sc-g0xbh4-0 iPGYsi"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-git-branch" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M9.5 3.25a2.25 2.25 0 1 1 3 2.122V6A2.5 2.5 0 0 1 10 8.5H6a1 1 0 0 0-1 1v1.128a2.251 2.251 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.5 0v1.836A2.493 2.493 0 0 1 6 7h4a1 1 0 0 0 1-1v-.628A2.25 2.25 0 0 1 9.5 3.25Zm-6 0a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Zm8.25-.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5ZM4.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"></path></svg></div><div class="Box-sc-g0xbh4-0 caeYDk ref-selector-button-text-container"><span class="Text-sc-17v1xeu-0 bOMzPg"> <!-- -->master</span></div></div></span><span data-component="trailingVisual" class="Box-sc-g0xbh4-0 trpoQ"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-triangle-down" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="m4.427 7.427 3.396 3.396a.25.25 0 0 0 .354 0l3.396-3.396A.25.25 0 0 0 11.396 7H4.604a.25.25 0 0 0-.177.427Z"></path></svg></span></span></button><button hidden="" data-hotkey-scope="read-only-cursor-text-area"></button></div><div class="Box-sc-g0xbh4-0 laYubZ"><a style="--button-color:fg.muted" type="button" href="/karatelabs/karate/branches" class="types__StyledButton-sc-ws60qy-0 cuOWTR"><span data-component="buttonContent" class="Box-sc-g0xbh4-0 kkrdEu"><span data-component="leadingVisual" class="Box-sc-g0xbh4-0 trpoQ"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-git-branch" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M9.5 3.25a2.25 2.25 0 1 1 3 2.122V6A2.5 2.5 0 0 1 10 8.5H6a1 1 0 0 0-1 1v1.128a2.251 2.251 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.5 0v1.836A2.493 2.493 0 0 1 6 7h4a1 1 0 0 0 1-1v-.628A2.25 2.25 0 0 1 9.5 3.25Zm-6 0a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Zm8.25-.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5ZM4.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"></path></svg></span><span data-component="text">Branches</span></span></a><a style="--button-color:fg.muted" type="button" href="/karatelabs/karate/tags" class="types__StyledButton-sc-ws60qy-0 cuOWTR"><span data-component="buttonContent" class="Box-sc-g0xbh4-0 kkrdEu"><span data-component="leadingVisual" class="Box-sc-g0xbh4-0 trpoQ"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-tag" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1 7.775V2.75C1 1.784 1.784 1 2.75 1h5.025c.464 0 .91.184 1.238.513l6.25 6.25a1.75 1.75 0 0 1 0 2.474l-5.026 5.026a1.75 1.75 0 0 1-2.474 0l-6.25-6.25A1.752 1.752 0 0 1 1 7.775Zm1.5 0c0 .066.026.13.073.177l6.25 6.25a.25.25 0 0 0 .354 0l5.025-5.025a.25.25 0 0 0 0-.354l-6.25-6.25a.25.25 0 0 0-.177-.073H2.75a.25.25 0 0 0-.25.25ZM6 5a1 1 0 1 1 0 2 1 1 0 0 1 0-2Z"></path></svg></span><span data-component="text">Tags</span></span></a></div><div class="Box-sc-g0xbh4-0 swnaL"><a style="--button-color:fg.muted" type="button" aria-label="Go to Branches page" href="/karatelabs/karate/branches" data-no-visuals="true" class="types__StyledButton-sc-ws60qy-0 tDSzd"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-git-branch" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M9.5 3.25a2.25 2.25 0 1 1 3 2.122V6A2.5 2.5 0 0 1 10 8.5H6a1 1 0 0 0-1 1v1.128a2.251 2.251 0 1 1-1.5 0V5.372a2.25 2.25 0 1 1 1.5 0v1.836A2.493 2.493 0 0 1 6 7h4a1 1 0 0 0 1-1v-.628A2.25 2.25 0 0 1 9.5 3.25Zm-6 0a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Zm8.25-.75a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5ZM4.25 12a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Z"></path></svg></a><a style="--button-color:fg.muted" type="button" aria-label="Go to Tags page" href="/karatelabs/karate/tags" data-no-visuals="true" class="types__StyledButton-sc-ws60qy-0 tDSzd"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-tag" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1 7.775V2.75C1 1.784 1.784 1 2.75 1h5.025c.464 0 .91.184 1.238.513l6.25 6.25a1.75 1.75 0 0 1 0 2.474l-5.026 5.026a1.75 1.75 0 0 1-2.474 0l-6.25-6.25A1.752 1.752 0 0 1 1 7.775Zm1.5 0c0 .066.026.13.073.177l6.25 6.25a.25.25 0 0 0 .354 0l5.025-5.025a.25.25 0 0 0 0-.354l-6.25-6.25a.25.25 0 0 0-.177-.073H2.75a.25.25 0 0 0-.25.25ZM6 5a1 1 0 1 1 0 2 1 1 0 0 1 0-2Z"></path></svg></a></div></div><div class="Box-sc-g0xbh4-0 bWpuBf"><div class="Box-sc-g0xbh4-0 grHjNb"><div class="Box-sc-g0xbh4-0 dXTsqj"><!--$!--><template></template><!--/$--></div><div class="Box-sc-g0xbh4-0 dCOrmu"><button type="button" data-no-visuals="true" class="types__StyledButton-sc-ws60qy-0 pyyxt"><span data-component="buttonContent" class="Box-sc-g0xbh4-0 kkrdEu"><span data-component="text">Go to file</span></span></button></div><div class="react-directory-add-file-icon"></div><div class="react-directory-remove-file-icon"></div></div><button type="button" id=":R55ab:" aria-haspopup="true" aria-expanded="false" tabindex="0" class="types__StyledButton-sc-ws60qy-0 gYvpXq"><span data-component="buttonContent" class="Box-sc-g0xbh4-0 kkrdEu"><span data-component="leadingVisual" class="Box-sc-g0xbh4-0 trpoQ"><div class="Box-sc-g0xbh4-0 bVvbgP"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-code" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path></svg></div></span><span data-component="text">Code</span></span><span data-component="trailingAction" class="Box-sc-g0xbh4-0 trpoQ"><svg aria-hidden="true" focusable="false" class="octicon octicon-triangle-down" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="m4.427 7.427 3.396 3.396a.25.25 0 0 0 .354 0l3.396-3.396A.25.25 0 0 0 11.396 7H4.604a.25.25 0 0 0-.177.427Z"></path></svg></span></button><div class="Box-sc-g0xbh4-0 bNDvfp"><button data-component="IconButton" type="button" aria-label="Open more actions menu" id=":R75ab:" aria-haspopup="true" aria-expanded="false" tabindex="0" data-no-visuals="true" class="types__StyledButton-sc-ws60qy-0 pyyxt"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-kebab-horizontal" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path></svg></button></div></div></div><div class="Box-sc-g0xbh4-0 yfPnm"><div data-hpc="true" class="Box-sc-g0xbh4-0"><button hidden="" data-testid="focus-next-element-button" data-hotkey="j"></button><button hidden="" data-testid="focus-previous-element-button" data-hotkey="k"></button><h2 class="Heading__StyledHeading-sc-1c1dgg0-0 cgQnMS sr-only" data-testid="screen-reader-heading" id="folders-and-files">Folders and files</h2><table aria-labelledby="folders-and-files" class="Box-sc-g0xbh4-0 cAQuiW"><thead class="Box-sc-g0xbh4-0 iiUlLN"><tr class="Box-sc-g0xbh4-0 jmggSN"><th colSpan="2" class="Box-sc-g0xbh4-0 kvYunM"><span class="Text-sc-17v1xeu-0 gPDEWA text-bold">Name</span></th><th colSpan="1" class="Box-sc-g0xbh4-0 hrLuxA"><span class="Text-sc-17v1xeu-0 gPDEWA text-bold">Name</span></th><th class="hide-sm"><div title="Last commit message" class="Truncate__StyledTruncate-sc-23o1d2-0 dliONX width-fit"><span class="Text-sc-17v1xeu-0 gPDEWA text-bold">Last commit message</span></div></th><th colSpan="1" class="Box-sc-g0xbh4-0 cuEKae"><div title="Last commit date" class="Truncate__StyledTruncate-sc-23o1d2-0 dliONX width-fit"><span class="Text-sc-17v1xeu-0 gPDEWA text-bold">Last commit date</span></div></th></tr></thead><tbody><tr class="Box-sc-g0xbh4-0 jEbBOT"><td colSpan="3" class="bgColor-muted p-1 rounded-top-2"><div class="Box-sc-g0xbh4-0 brJRqk"><h2 class="Heading__StyledHeading-sc-1c1dgg0-0 cgQnMS sr-only" data-testid="screen-reader-heading">Latest commit</h2><div style="width:120px" class="Skeleton Skeleton--text" data-testid="loading"> </div><div class="d-flex flex-shrink-0 gap-2"><div data-testid="latest-commit-details" class="d-none d-sm-flex flex-items-center"></div><div class="d-flex gap-2"><h2 class="Heading__StyledHeading-sc-1c1dgg0-0 cgQnMS sr-only" data-testid="screen-reader-heading">History</h2><a aria-label="Commit history" class="types__StyledButton-sc-ws60qy-0 dOnKJi d-none d-lg-flex LinkButton-module__code-view-link-button--xvCGA flex-items-center fgColor-default" href="/karatelabs/karate/commits/master/" data-size="small"><span data-component="buttonContent" class="Box-sc-g0xbh4-0 kkrdEu"><span data-component="leadingVisual" class="Box-sc-g0xbh4-0 trpoQ"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-history" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="m.427 1.927 1.215 1.215a8.002 8.002 0 1 1-1.6 5.685.75.75 0 1 1 1.493-.154 6.5 6.5 0 1 0 1.18-4.458l1.358 1.358A.25.25 0 0 1 3.896 6H.25A.25.25 0 0 1 0 5.75V2.104a.25.25 0 0 1 .427-.177ZM7.75 4a.75.75 0 0 1 .75.75v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5A.75.75 0 0 1 7.75 4Z"></path></svg></span><span data-component="text"><span class="Text-sc-17v1xeu-0 gPDEWA fgColor-default">4,401 Commits</span></span></span></a><div class="d-sm-none"></div><div class="d-flex d-lg-none"><span role="tooltip" aria-label="4,401 Commits" id="history-icon-button-tooltip" class="Tooltip__TooltipBase-sc-17tf59c-0 gNgnVl tooltipped-n"><a aria-label="Commit history" aria-describedby="history-icon-button-tooltip" class="types__StyledButton-sc-ws60qy-0 dOnKJi LinkButton-module__code-view-link-button--xvCGA flex-items-center fgColor-default" href="/karatelabs/karate/commits/master/" data-size="small"><span data-component="buttonContent" class="Box-sc-g0xbh4-0 kkrdEu"><span data-component="leadingVisual" class="Box-sc-g0xbh4-0 trpoQ"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-history" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="m.427 1.927 1.215 1.215a8.002 8.002 0 1 1-1.6 5.685.75.75 0 1 1 1.493-.154 6.5 6.5 0 1 0 1.18-4.458l1.358 1.358A.25.25 0 0 1 3.896 6H.25A.25.25 0 0 1 0 5.75V2.104a.25.25 0 0 1 .427-.177ZM7.75 4a.75.75 0 0 1 .75.75v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5A.75.75 0 0 1 7.75 4Z"></path></svg></span></span></a></span></div></div></div></div></td></tr><tr class="react-directory-row undefined" id="folder-row-0"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title=".github" aria-label=".github, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/.github">.github</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title=".github" aria-label=".github, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/.github">.github</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-1"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="_includes" aria-label="_includes, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/_includes">_includes</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="_includes" aria-label="_includes, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/_includes">_includes</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-2"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="examples" aria-label="examples, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/examples">examples</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="examples" aria-label="examples, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/examples">examples</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-3"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-archetype" aria-label="karate-archetype, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-archetype">karate-archetype</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-archetype" aria-label="karate-archetype, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-archetype">karate-archetype</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-4"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-core" aria-label="karate-core, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-core">karate-core</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-core" aria-label="karate-core, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-core">karate-core</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-5"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-demo" aria-label="karate-demo, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-demo">karate-demo</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-demo" aria-label="karate-demo, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-demo">karate-demo</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-6"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-docker" aria-label="karate-docker, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-docker">karate-docker</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-docker" aria-label="karate-docker, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-docker">karate-docker</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-7"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-e2e-tests" aria-label="karate-e2e-tests, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-e2e-tests">karate-e2e-tests</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-e2e-tests" aria-label="karate-e2e-tests, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-e2e-tests">karate-e2e-tests</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-8"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-gatling" aria-label="karate-gatling, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-gatling">karate-gatling</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-gatling" aria-label="karate-gatling, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-gatling">karate-gatling</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row undefined" id="folder-row-9"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-junit5" aria-label="karate-junit5, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-junit5">karate-junit5</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-junit5" aria-label="karate-junit5, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-junit5">karate-junit5</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-10"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-netty" aria-label="karate-netty, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-netty">karate-netty</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-netty" aria-label="karate-netty, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-netty">karate-netty</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-11"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-robot" aria-label="karate-robot, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-robot">karate-robot</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="icon-directory" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M1.75 1A1.75 1.75 0 0 0 0 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0 0 16 13.25v-8.5A1.75 1.75 0 0 0 14.25 3H7.5a.25.25 0 0 1-.2-.1l-.9-1.2C6.07 1.26 5.55 1 5 1H1.75Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="karate-robot" aria-label="karate-robot, (Directory)" class="Link--primary" href="/karatelabs/karate/tree/master/karate-robot">karate-robot</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-12"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title=".gitignore" aria-label=".gitignore, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/.gitignore">.gitignore</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title=".gitignore" aria-label=".gitignore, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/.gitignore">.gitignore</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-13"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="LICENSE" aria-label="LICENSE, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/LICENSE">LICENSE</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="LICENSE" aria-label="LICENSE, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/LICENSE">LICENSE</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-14"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="README.md" aria-label="README.md, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/README.md">README.md</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="README.md" aria-label="README.md, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/README.md">README.md</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-15"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="SECURITY.md" aria-label="SECURITY.md, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/SECURITY.md">SECURITY.md</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="SECURITY.md" aria-label="SECURITY.md, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/SECURITY.md">SECURITY.md</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-16"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="_config.yml" aria-label="_config.yml, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/_config.yml">_config.yml</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="_config.yml" aria-label="_config.yml, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/_config.yml">_config.yml</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-17"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="build-docker.sh" aria-label="build-docker.sh, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/build-docker.sh">build-docker.sh</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="build-docker.sh" aria-label="build-docker.sh, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/build-docker.sh">build-docker.sh</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-18"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="jbang-catalog.json" aria-label="jbang-catalog.json, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/jbang-catalog.json">jbang-catalog.json</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="jbang-catalog.json" aria-label="jbang-catalog.json, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/jbang-catalog.json">jbang-catalog.json</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="react-directory-row truncate-for-mobile" id="folder-row-19"><td class="react-directory-row-name-cell-small-screen" colSpan="2"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="pom.xml" aria-label="pom.xml, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/pom.xml">pom.xml</a></div></div></div></div></td><td class="react-directory-row-name-cell-large-screen" colSpan="1"><div class="react-directory-filename-column"><svg aria-hidden="true" focusable="false" role="img" class="color-fg-muted" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M2 1.75C2 .784 2.784 0 3.75 0h6.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v9.586A1.75 1.75 0 0 1 13.25 16h-9.5A1.75 1.75 0 0 1 2 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h9.5a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 9 4.25V1.5Zm6.75.062V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path></svg><div class="overflow-hidden"><div class="react-directory-filename-cell"><div class="react-directory-truncate"><a title="pom.xml" aria-label="pom.xml, (File)" class="Link--primary" href="/karatelabs/karate/blob/master/pom.xml">pom.xml</a></div></div></div></div></td><td class="react-directory-row-commit-cell"><div class="Skeleton Skeleton--text"> </div></td><td><div class="Skeleton Skeleton--text"> </div></td></tr><tr class="Box-sc-g0xbh4-0 epsqEd show-for-mobile" data-testid="view-all-files-row"><td colSpan="3" class="Box-sc-g0xbh4-0 ldpruc"><div><button class="Link__StyledLink-sc-14289xe-0 dheQRw">View all files</button></div></td></tr></tbody></table></div><div class="Box-sc-g0xbh4-0 ehcSsh"><div class="Box-sc-g0xbh4-0 iGmlUb"><div class="Box-sc-g0xbh4-0 iRQGXA"><h2 class="_VisuallyHidden__VisuallyHidden-sc-11jhm7a-0 rTZSs">Repository files navigation</h2><nav aria-label="Repository files" class="Box-sc-g0xbh4-0 dvTdPK"><ul role="list" class="UnderlineNav__NavigationList-sc-1jfr31k-0 bPgibo"><li class="Box-sc-g0xbh4-0 gwuIGu"><a href="#" aria-current="page" class="Link__StyledLink-sc-14289xe-0 vLMkZ"><span data-component="icon" class="Box-sc-g0xbh4-0 kOxwQs"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-book" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M0 1.75A.75.75 0 0 1 .75 1h4.253c1.227 0 2.317.59 3 1.501A3.743 3.743 0 0 1 11.006 1h4.245a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-4.507a2.25 2.25 0 0 0-1.591.659l-.622.621a.75.75 0 0 1-1.06 0l-.622-.621A2.25 2.25 0 0 0 5.258 13H.75a.75.75 0 0 1-.75-.75Zm7.251 10.324.004-5.073-.002-2.253A2.25 2.25 0 0 0 5.003 2.5H1.5v9h3.757a3.75 3.75 0 0 1 1.994.574ZM8.755 4.75l-.004 7.322a3.752 3.752 0 0 1 1.992-.572H14.5v-9h-3.495a2.25 2.25 0 0 0-2.25 2.25Z"></path></svg></span><span data-component="text" data-content="README" class="Box-sc-g0xbh4-0 kOgeFj">README</span></a></li><li class="Box-sc-g0xbh4-0 gwuIGu"><a href="#" class="Link__StyledLink-sc-14289xe-0 bhqztV"><span data-component="icon" class="Box-sc-g0xbh4-0 kOxwQs"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-code-of-conduct" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M8.048 2.241c.964-.709 2.079-1.238 3.325-1.241a4.616 4.616 0 0 1 3.282 1.355c.41.408.757.86.996 1.428.238.568.348 1.206.347 1.968 0 2.193-1.505 4.254-3.081 5.862-1.496 1.526-3.213 2.796-4.249 3.563l-.22.163a.749.749 0 0 1-.895 0l-.221-.163c-1.036-.767-2.753-2.037-4.249-3.563C1.51 10.008.007 7.952.002 5.762a4.614 4.614 0 0 1 1.353-3.407C3.123.585 6.223.537 8.048 2.24Zm-1.153.983c-1.25-1.033-3.321-.967-4.48.191a3.115 3.115 0 0 0-.913 2.335c0 1.556 1.109 3.24 2.652 4.813C5.463 11.898 6.96 13.032 8 13.805c.353-.262.758-.565 1.191-.905l-1.326-1.223a.75.75 0 0 1 1.018-1.102l1.48 1.366c.328-.281.659-.577.984-.887L9.99 9.802a.75.75 0 1 1 1.019-1.103l1.384 1.28c.295-.329.566-.661.81-.995L12.92 8.7l-1.167-1.168c-.674-.671-1.78-.664-2.474.03-.268.269-.538.537-.802.797-.893.882-2.319.843-3.185-.032-.346-.35-.693-.697-1.043-1.047a.75.75 0 0 1-.04-1.016c.162-.191.336-.401.52-.623.62-.748 1.356-1.637 2.166-2.417Zm7.112 4.442c.313-.65.491-1.293.491-1.916v-.001c0-.614-.088-1.045-.23-1.385-.143-.339-.357-.633-.673-.949a3.111 3.111 0 0 0-2.218-.915c-1.092.003-2.165.627-3.226 1.602-.823.755-1.554 1.637-2.228 2.45l-.127.154.562.566a.755.755 0 0 0 1.066.02l.794-.79c1.258-1.258 3.312-1.31 4.594-.032.396.394.792.791 1.173 1.173Z"></path></svg></span><span data-component="text" data-content="Code of conduct" class="Box-sc-g0xbh4-0">Code of conduct</span></a></li><li class="Box-sc-g0xbh4-0 gwuIGu"><a href="#" class="Link__StyledLink-sc-14289xe-0 bhqztV"><span data-component="icon" class="Box-sc-g0xbh4-0 kOxwQs"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-law" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M8.75.75V2h.985c.304 0 .603.08.867.231l1.29.736c.038.022.08.033.124.033h2.234a.75.75 0 0 1 0 1.5h-.427l2.111 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.006.005-.01.01-.045.04c-.21.176-.441.327-.686.45C14.556 10.78 13.88 11 13 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L12.178 4.5h-.162c-.305 0-.604-.079-.868-.231l-1.29-.736a.245.245 0 0 0-.124-.033H8.75V13h2.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1 0-1.5h2.5V3.5h-.984a.245.245 0 0 0-.124.033l-1.289.737c-.265.15-.564.23-.869.23h-.162l2.112 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.016.015-.045.04c-.21.176-.441.327-.686.45C4.556 10.78 3.88 11 3 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L2.178 4.5H1.75a.75.75 0 0 1 0-1.5h2.234a.249.249 0 0 0 .125-.033l1.288-.737c.265-.15.564-.23.869-.23h.984V.75a.75.75 0 0 1 1.5 0Zm2.945 8.477c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L13 6.327Zm-10 0c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L3 6.327Z"></path></svg></span><span data-component="text" data-content="MIT license" class="Box-sc-g0xbh4-0">MIT license</span></a></li><li class="Box-sc-g0xbh4-0 gwuIGu"><a href="#" class="Link__StyledLink-sc-14289xe-0 bhqztV"><span data-component="icon" class="Box-sc-g0xbh4-0 kOxwQs"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-law" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M8.75.75V2h.985c.304 0 .603.08.867.231l1.29.736c.038.022.08.033.124.033h2.234a.75.75 0 0 1 0 1.5h-.427l2.111 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.006.005-.01.01-.045.04c-.21.176-.441.327-.686.45C14.556 10.78 13.88 11 13 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L12.178 4.5h-.162c-.305 0-.604-.079-.868-.231l-1.29-.736a.245.245 0 0 0-.124-.033H8.75V13h2.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1 0-1.5h2.5V3.5h-.984a.245.245 0 0 0-.124.033l-1.289.737c-.265.15-.564.23-.869.23h-.162l2.112 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.016.015-.045.04c-.21.176-.441.327-.686.45C4.556 10.78 3.88 11 3 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L2.178 4.5H1.75a.75.75 0 0 1 0-1.5h2.234a.249.249 0 0 0 .125-.033l1.288-.737c.265-.15.564-.23.869-.23h.984V.75a.75.75 0 0 1 1.5 0Zm2.945 8.477c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L13 6.327Zm-10 0c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L3 6.327Z"></path></svg></span><span data-component="text" data-content="Security" class="Box-sc-g0xbh4-0">Security</span></a></li></ul></nav><button style="--button-color:fg.subtle" type="button" aria-label="Outline" id=":Rr9ab:" aria-haspopup="true" aria-expanded="false" tabindex="0" class="types__StyledButton-sc-ws60qy-0 jPraEl"><svg aria-hidden="true" focusable="false" role="img" class="octicon octicon-list-unordered" viewBox="0 0 16 16" width="16" height="16" fill="currentColor" style="display:inline-block;user-select:none;vertical-align:text-bottom;overflow:visible"><path d="M5.75 2.5h8.5a.75.75 0 0 1 0 1.5h-8.5a.75.75 0 0 1 0-1.5Zm0 5h8.5a.75.75 0 0 1 0 1.5h-8.5a.75.75 0 0 1 0-1.5Zm0 5h8.5a.75.75 0 0 1 0 1.5h-8.5a.75.75 0 0 1 0-1.5ZM2 14a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm1-6a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM2 4a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path></svg></button></div><div class="Box-sc-g0xbh4-0 bJMeLZ js-snippet-clipboard-copy-unpositioned" data-hpc="true"><article class="markdown-body entry-content container-lg" itemprop="text"><table>
  <tbody><tr> 
    <th>
      <div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">
          <a href="https://github.com/karatelabs/karate/wiki/Get-Started">⏩ <br> Get Started</a>
      </h3><a id="user-content-------------get-started------" class="anchor" aria-label="Permalink: ⏩  Get Started" href="#------------get-started------"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
   </th>
   <td>
     Get started using VS Code, IntelliJ, Maven, Gradle, NPM, <br> GitHub Codespaces, Docker or the command-line
   </td>
  </tr>
  <tr> 
    <th>
      <div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">
          <a href="https://github.com/karatelabs/karate-examples/blob/main/README.md">💡 <br> Examples</a>
      </h3><a id="user-content-------------examples------" class="anchor" aria-label="Permalink: 💡  Examples" href="#------------examples------"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
   </th>
   <td>
     Examples and demos of integrations with other frameworks
   </td>
  </tr>
  <tr> 
    <th>
      <div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">
          <a href="https://www.youtube.com/playlist?list=PLnONaB4tNFOkxwM3dOvXLXJstSg_wMJSs" rel="nofollow">📺 <br> Kick Start Videos</a>
      </h3><a id="user-content-------------kick-start-videos------" class="anchor" aria-label="Permalink: 📺  Kick Start Videos" href="#------------kick-start-videos------"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
   </th>
   <td>
     Beginner-friendly step-by-step guides to starting from scratch
   </td>
  </tr>    
</tbody></table>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Karate</h1><a id="user-content-karate" class="anchor" aria-label="Permalink: Karate" href="#karate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Test Automation Made <code>Simple.</code></h2><a id="user-content-test-automation-made-simple" class="anchor" aria-label="Permalink: Test Automation Made Simple." href="#test-automation-made-simple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div dir="auto"> 
  <a href="https://github.com/karatelabs/karate/wiki/Support">
    <img src="https://camo.githubusercontent.com/2a2eb2545ac3cb7105773f4347ccf34db4da685dc30df30980854f3c7bf1c21e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f737570706f72742d77696b692d7265642e737667" data-canonical-src="https://img.shields.io/badge/support-wiki-red.svg" style="max-width: 100%;">
  </a>
  <a href="https://twitter.com/getkarate" rel="nofollow">
    <img src="https://camo.githubusercontent.com/bbe7243e0dd4c90084042986fe332dccab5b5539a52f4151780012038f13362e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f406765746b61726174652d2d6c69676874677265793f6c6f676f3d74776974746572267374796c653d736f6369616c" data-canonical-src="https://img.shields.io/badge/@getkarate--lightgrey?logo=twitter&amp;style=social" style="max-width: 100%;">
  </a>
  <a href="https://github.com/karatelabs/karate/stargazers">
    <img src="https://camo.githubusercontent.com/3b298e987c15ffc43d10395a3b59639e589d4f19791eaf0e33306f9a1cbb018b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6b61726174656c6162732f6b61726174653f7374796c653d736f6369616c" data-canonical-src="https://img.shields.io/github/stars/karatelabs/karate?style=social" style="max-width: 100%;">
  </a>
</div>
<div dir="auto">
  <a href="https://central.sonatype.com/namespace/com.intuit.karate" rel="nofollow">
    <img src="https://camo.githubusercontent.com/1bdeaff0afcb6bd0d71029eccd155404e306689b555782894d533965edbd20d9/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e696e747569742e6b61726174652f6b61726174652d636f72652e737667" data-canonical-src="https://img.shields.io/maven-central/v/com.intuit.karate/karate-core.svg" style="max-width: 100%;">
  </a>
  <a href="https://github.com/karatelabs/karate/actions?query=workflow%3Amaven-build">
    <img src="https://github.com/karatelabs/karate/actions/workflows/maven-build.yml/badge.svg?branch=develop" style="max-width: 100%;">
  </a>
  <a href="https://github.com/karatelabs/karate/releases">
    <img src="https://camo.githubusercontent.com/484cfa5b2433d603ae734ae7f1815b2e53e776f8cae374076ff7dd37c4b9cb48/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6b61726174656c6162732f6b61726174652e737667" data-canonical-src="https://img.shields.io/github/release/karatelabs/karate.svg" style="max-width: 100%;">
  </a>
</div>
<p dir="auto"><a href="https://karatelabs.io" rel="nofollow"><img src="/karatelabs/karate/raw/master/karate-core/src/test/resources/karate-map.jpg" height="650" style="max-width: 100%;"></a></p>
<p dir="auto">Karate is the only open-source tool to combine API test-automation, <a href="/karatelabs/karate/blob/master/karate-netty">mocks</a>, <a href="/karatelabs/karate/blob/master/karate-gatling">performance-testing</a> and even <a href="/karatelabs/karate/blob/master/karate-core">UI automation</a> into a <strong>single</strong>, <em>unified</em> framework. The syntax is language-neutral, and easy for even non-programmers. Assertions and HTML reports are built-in, and you can run tests in parallel for speed.</p>
<p dir="auto">There's also a cross-platform <a href="/karatelabs/karate/blob/master/karate-netty#standalone-jar">stand-alone executable</a> for teams not comfortable with Java. You don't have to compile code. Just write tests in a <strong>simple</strong>, <em>readable</em> syntax - carefully designed for HTTP, JSON, GraphQL and XML. And you can mix API and <a href="/karatelabs/karate/blob/master/karate-core">UI test-automation</a> within the same test script.</p>
<p dir="auto">A <a href="#java-api">Java API</a> also exists for those who prefer to programmatically integrate Karate's rich automation and data-assertion capabilities.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Hello World</h2><a id="user-content-hello-world" class="anchor" aria-label="Permalink: Hello World" href="#hello-world"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">For API Testing</h3><a id="user-content-for-api-testing" class="anchor" aria-label="Permalink: For API Testing" href="#for-api-testing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto"><a href="https://gist.github.com/ptrthomas/d5a2d9e15d0b07e4f1b46f692a599f93"><img src="/karatelabs/karate/raw/master/karate-demo/src/test/resources/karate-hello-world.jpg" height="400" style="max-width: 100%;"></a></p>
<blockquote>
<p dir="auto">If you are familiar with Cucumber / Gherkin, the <a href="#cucumber-vs-karate"><em>big difference</em></a> here is that you <strong>don't</strong> need to write extra "glue" code or Java "step definitions" !</p>
</blockquote>
<p dir="auto">It is worth pointing out that JSON is a 'first class citizen' of the syntax such that you can express payload and expected data without having to use double-quotes and without having to enclose JSON field names in quotes.  There is no need to 'escape' characters like you would have had to in Java or other programming languages.</p>
<p dir="auto">And you don't need to create additional Java classes for any of the payloads that you need to work with.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Index</h1><a id="user-content-index" class="anchor" aria-label="Permalink: Index" href="#index"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<table>
<tbody><tr>
  <th>Start</th>
  <td>
      <a href="#maven">Maven</a> 
    | <a href="#gradle">Gradle</a>
    | <a href="#quickstart">Quickstart</a>
    | <a href="https://github.com/karatelabs/karate/tree/master/karate-netty#standalone-jar">Standalone Executable</a>
    | <a href="#folder-structure">Naming Conventions</a>
    | <a href="#script-structure">Script Structure</a>
  </td>
</tr>
<tr>
  <th>Run</th>
  <td>
      <a href="#junit-5">JUnit 5</a>
    | <a href="#command-line">Command Line</a>
    | <a href="#ide-support">IDE Support</a>    
    | <a href="#tags">Tags / Grouping</a>
    | <a href="#parallel-execution">Parallel Execution</a>
    | <a href="#java-api">Java API</a> 
    | <a href="#jbang">jbang</a>    
  </td>
</tr>
<tr>
  <th>Report</th>
  <td>
      <a href="#configuration">Configuration</a> 
    | <a href="#switching-the-environment">Environment Switching</a>
    | <a href="#test-reports">Reports</a>
    | <a href="#junit-html-report">JUnit HTML Report</a>
    | <a href="#dry-run">Dry Run</a>
    | <a href="#report-verbosity">Report Verbosity</a>
    | <a href="#logging">Logging</a>
    | <a href="#log-masking">Log Masking</a>
  </td>
</tr>
<tr>
  <th>Types</th>
  <td>
      <a href="#json">JSON</a> 
    | <a href="#xml">XML</a>
    | <a href="#javascript-functions">JavaScript Functions</a>
    | <a href="#reading-files">Reading Files</a>
    | <a href="#type-conversion">Type / String Conversion</a>
    | <a href="#floats-and-integers">Floats and Integers</a>
    | <a href="#embedded-expressions">Embedded Expressions</a>
    | <a href="#jsonpath-filters">JsonPath</a>
    | <a href="#xpath-functions">XPath</a>
    | <a href="#karate-expressions">Karate Expressions</a>
  </td>
</tr>
<tr>
  <th>Variables</th>
  <td>
      <a href="#def"><code>def</code></a>
    | <a href="#text"><code>text</code></a>
    | <a href="#table"><code>table</code></a>
    | <a href="#yaml"><code>yaml</code></a>
    | <a href="#csv"><code>csv</code></a>
    | <a href="#type-string"><code>string</code></a>
    | <a href="#type-json"><code>json</code></a>
    | <a href="#type-xml"><code>xml</code></a>
    | <a href="#type-xmlstring"><code>xmlstring</code></a>
    | <a href="#type-bytes"><code>bytes</code></a>
    | <a href="#type-copy"><code>copy</code></a>
  </td>
</tr>
<tr>
  <th>Actions</th>
  <td>
      <a href="#assert"><code>assert</code></a>
    | <a href="#print"><code>print</code></a>
    | <a href="#replace"><code>replace</code></a>
    | <a href="#get"><code>get</code></a> 
    | <a href="#set"><code>set</code></a>
    | <a href="#remove"><code>remove</code></a>    
    | <a href="#configure"><code>configure</code></a>
    | <a href="#call"><code>call</code></a> 
    | <a href="#callonce"><code>callonce</code></a>
    | <a href="#eval"><code>eval</code></a>
    | <a href="#listen"><code>listen</code></a> 
    | <a href="#doc"><code>doc</code></a>    
    | <a href="#reading-files"><code>read()</code></a>
    | <a href="#compare-image"><code>compareImage</code></a>
    | <a href="#the-karate-object"><code>karate</code> JS API</a>  
  </td>
</tr>
<tr>
  <th>HTTP</th>
  <td>
      <a href="#url"><code>url</code></a> 
    | <a href="#path"><code>path</code></a>
    | <a href="#request"><code>request</code></a>
    | <a href="#method"><code>method</code></a>
    | <a href="#status"><code>status</code></a>
    | <a href="#soap-action"><code>soap action</code></a>
    | <a href="#retry-until"><code>retry until</code></a>
  </td>
</tr>
<tr>
  <th>Request</th>
  <td>
      <a href="#param"><code>param</code></a> 
    | <a href="#header"><code>header</code></a>    
    | <a href="#cookie"><code>cookie</code></a>
    | <a href="#form-field"><code>form field</code></a>
    | <a href="#multipart-file"><code>multipart file</code></a>
    | <a href="#multipart-field"><code>multipart field</code></a>       
    | <a href="#multipart-entity"><code>multipart entity</code></a>    
    | <a href="#params"><code>params</code></a>
    | <a href="#headers"><code>headers</code></a>
    | <a href="#cookies"><code>cookies</code></a>        
    | <a href="#form-fields"><code>form fields</code></a>
    | <a href="#multipart-files"><code>multipart files</code></a>
    | <a href="#multipart-fields"><code>multipart fields</code></a>
  </td>
</tr>
<tr>
  <th>Response</th>
  <td>
      <a href="#response"><code>response</code></a>
    | <a href="#responsebytes"><code>responseBytes</code></a> 
    | <a href="#responsestatus"><code>responseStatus</code></a>
    | <a href="#responseheaders"><code>responseHeaders</code></a>
    | <a href="#responsecookies"><code>responseCookies</code></a>
    | <a href="#responsetime"><code>responseTime</code></a>
    | <a href="#responsetype"><code>responseType</code></a>
    | <a href="#requesttimestamp"><code>requestTimeStamp</code></a>
  </td>
</tr>
<tr>
  <th>Assert</th>
  <td>
      <a href="#match"><code>match ==</code></a>
    | <a href="#match--not-equals"><code>match !=</code></a>
    | <a href="#match-contains"><code>match contains</code></a>
    | <a href="#match-contains-only"><code>match contains only</code></a>
    | <a href="#match-contains-any"><code>match contains any</code></a>
    | <a href="#match-contains-deep"><code>match contains deep</code></a>
    | <a href="#match-contains-only-deep"><code>match contains only deep</code></a>       
    | <a href="#not-contains"><code>match !contains</code></a>
    | <a href="#match-each"><code>match each</code></a>
    | <a href="#match-each-contains-deep"><code>match each contains deep</code></a>
    | <a href="#match-header"><code>match header</code></a>    
    | <a href="#fuzzy-matching">Fuzzy Matching</a>
    | <a href="#schema-validation">Schema Validation</a>
    | <a href="#contains-short-cuts"><code>contains</code> short-cuts</a>
  </td>
</tr>
<tr>
  <th>Re-Use</th>
  <td>
      <a href="#calling-other-feature-files">Calling Other <code>*.feature</code> Files</a>
    | <a href="#data-driven-features">Data Driven Features</a>       
    | <a href="#calling-javascript-functions">Calling JavaScript Functions</a>
    | <a href="#calling-java">Calling Java Code</a>
    | <a href="#commonly-needed-utilities">Commonly Needed Utilities</a>
    | <a href="#data-driven-tests">Data Driven Scenarios</a>    
  </td>
</tr>
<tr>
  <th>Advanced</th>
  <td>
      <a href="#polling">Polling</a>
    | <a href="#conditional-logic">Conditional Logic</a>
    | <a href="#hooks">Before / After Hooks</a>
    | <a href="#json-transforms">JSON Transforms</a>
    | <a href="#loops">Loops</a>
    | <a href="#http-basic-authentication-example">HTTP Basic Auth</a> 
    | <a href="#http-header-manipulation">Header Manipulation</a> 
    | <a href="#text">GraphQL</a>
    | <a href="#async">Websockets / Async</a>
    | <a href="#call-vs-read"><code>call</code> vs <code>read()</code></a>
  </td>
</tr>
<tr>
  <th>More</th>
  <td>
      <a href="/karatelabs/karate/blob/master/karate-netty">Test Doubles</a>
    | <a href="/karatelabs/karate/blob/master/karate-gatling">Performance Testing</a>
    | <a href="/karatelabs/karate/blob/master/karate-core">UI Testing</a>
    | <a href="/karatelabs/karate/blob/master/karate-robot">Desktop Automation</a>
    | <a href="https://github.com/karatelabs/karate/wiki/IDE-Support#vs-code-karate-plugin">VS Code / Debug</a>
    | <a href="#comparison-with-rest-assured">Karate vs REST-assured</a>
    | <a href="#cucumber-vs-karate">Karate vs Cucumber</a>
    | <a href="/karatelabs/karate/blob/master/karate-demo">Examples and Demos</a>
  </td>
</tr>
</tbody></table>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Features</h1><a id="user-content-features" class="anchor" aria-label="Permalink: Features" href="#features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<ul dir="auto">
<li>Java knowledge is not required and even non-programmers can write tests</li>
<li>Scripts are plain-text, require no compilation step or IDE, and teams can collaborate using Git / standard SCM</li>
<li>Based on the popular Cucumber / Gherkin standard - with <a href="https://github.com/karatelabs/karate/wiki/IDE-Support">IDE support</a> and syntax-coloring options</li>
<li>Elegant <a href="https://en.wikipedia.org/wiki/Domain-specific_language" rel="nofollow">DSL</a> syntax 'natively' supports JSON and XML - including <a href="#set">JsonPath</a> and <a href="#xpath-functions">XPath</a> expressions</li>
<li>Eliminate the need for 'Java Beans' or 'helper code' to represent payloads and HTTP end-points, and <a href="https://twitter.com/KarateDSL/status/873035687817117696" rel="nofollow">dramatically reduce the lines of code</a> needed for a test</li>
<li>Ideal for testing the highly dynamic responses from <a href="http://graphql.org" rel="nofollow">GraphQL</a> API-s because of Karate's built-in <a href="#text">text-manipulation</a> and <a href="https://github.com/json-path/JsonPath#path-examples">JsonPath</a> capabilities</li>
<li>Tests are super-readable - as scenario data can be expressed in-line, in human-friendly <a href="#json">JSON</a>, <a href="#xml">XML</a>, Cucumber <a href="#the-cucumber-way">Scenario</a> Outline <a href="#table">tables</a>, or a <a href="#set-multiple">payload builder</a> approach <a href="https://gist.github.com/ptrthomas/d6beb17e92a43220d254af942e3ed3d9">unique to Karate</a></li>
<li>Express expected results as readable, well-formed JSON or XML, and <a href="#match">assert in a single step</a> that the entire response payload (no matter how complex or deeply nested) - is as expected</li>
<li>Comprehensive <a href="#fuzzy-matching">assertion capabilities</a> - and failures clearly report which data element (and path) is not as expected, for easy troubleshooting of even large payloads</li>
<li><a href="https://github.com/karatelabs/karate/wiki/IDE-Support#vs-code-karate-plugin">Fully featured debugger</a> that can step <em>backwards</em> and even <a href="https://twitter.com/KarateDSL/status/1167533484560142336" rel="nofollow">re-play a step while editing it</a> - a <em>huge</em> time-saver</li>
<li>Simpler and more <a href="https://twitter.com/KarateDSL/status/878984854012022784" rel="nofollow">powerful alternative</a> to JSON-schema for <a href="#schema-validation">validating payload structure</a> and format - that even supports <a href="#referring-to-the-json-root">cross-field</a> / domain validation logic</li>
<li>Scripts can <a href="#calling-other-feature-files">call other scripts</a> - which means that you can easily re-use and maintain authentication and 'set up' flows efficiently, across multiple tests</li>
<li>Embedded JavaScript engine that allows you to build a library of <a href="#calling-javascript-functions">re-usable functions</a> that suit your specific environment or organization</li>
<li>Re-use of payload-data and user-defined functions across tests is <a href="#reading-files">so easy</a> - that it becomes a natural habit for the test-developer</li>
<li>Built-in support for <a href="#switching-the-environment">switching configuration</a> across different environments (e.g. dev, QA, pre-prod)</li>
<li>Support for <a href="#data-driven-tests">data-driven tests</a> and being able to <a href="#tags">tag or group</a> tests is built-in, no need to rely on an external framework</li>
<li>Native support for reading <a href="#yaml">YAML</a> and even <a href="#csv-files">CSV</a> files - and you can use them for data-driven tests</li>
<li>Standard Java / Maven project structure, and <a href="#command-line">seamless integration</a> into CI / CD pipelines - and support for <a href="#junit-5">JUnit 5</a></li>
<li>Option to use as a light-weight <a href="https://github.com/karatelabs/karate/tree/master/karate-netty#standalone-jar">stand-alone executable</a> - convenient for teams not comfortable with Java</li>
<li>Multi-threaded <a href="#parallel-execution">parallel execution</a>, which is a huge time-saver, especially for integration and end-to-end tests</li>
<li>Built-in <a href="#test-reports">test-reports</a> compatible with Cucumber so that you have the option of using third-party (open-source) maven-plugins for even <a href="/karatelabs/karate/blob/master/karate-demo#example-report">better-looking reports</a></li>
<li>Reports include HTTP request and response <a href="#test-reports">logs <em>in-line</em></a>, which makes <a href="https://twitter.com/KarateDSL/status/899671441221623809" rel="nofollow">troubleshooting</a> and <a href="https://twitter.com/KarateDSL/status/935029435140489216" rel="nofollow">debugging</a> easier</li>
<li>Easily invoke JDK classes, Java libraries, or re-use custom Java code if needed, for <a href="#calling-java">ultimate extensibility</a></li>
<li>Simple plug-in system for <a href="#http-basic-authentication-example">authentication</a> and HTTP <a href="#configure-headers">header management</a> that will handle any complex, real-world scenario</li>
<li><a href="/karatelabs/karate/blob/master/karate-core">Cross-browser Web UI automation</a> so that you can test <em>all</em> layers of your application with the same framework</li>
<li>[experimental] <a href="https://github.com/karatelabs/karate/issues/743" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/743/hovercard">Android and iOS mobile support</a> via <a href="http://appium.io" rel="nofollow">Appium</a></li>
<li>Visual Validation via the built-in <a href="#compare-image">image comparison</a> capabilities</li>
<li>Cross platform <a href="/karatelabs/karate/blob/master/karate-robot">Desktop Automation</a> that can be <a href="https://twitter.com/ptrthomas/status/1215534821234995200" rel="nofollow">mixed into Web Automation flows</a> if needed</li>
<li>Option to invoke via a <a href="#java-api">Java API</a>,  which means that you can easily <a href="https://stackoverflow.com/q/47795762/143475" rel="nofollow">mix Karate into Java projects or legacy UI-automation suites</a></li>
<li><a href="https://twitter.com/ptrthomas/status/986463717465391104" rel="nofollow">Save significant effort</a> by re-using Karate test-suites as <a href="/karatelabs/karate/blob/master/karate-gatling">Gatling performance tests</a> that <em>deeply</em> assert that server responses are accurate under load</li>
<li>Gatling integration can hook into <a href="https://github.com/karatelabs/karate/tree/master/karate-gatling#custom"><em>any</em> custom Java code</a> - which means that you can perf-test even non-HTTP protocols such as <a href="https://github.com/thinkerou/karate-grpc">gRPC</a></li>
<li><a href="/karatelabs/karate/blob/master/karate-netty">API mocks</a> or test-doubles that even <a href="https://hackernoon.com/api-consumer-contract-tests-and-test-doubles-with-karate-72c30ea25c18" rel="nofollow">maintain CRUD 'state'</a> across multiple calls - enabling TDD for micro-services and <a href="https://martinfowler.com/articles/consumerDrivenContracts.html" rel="nofollow">Consumer Driven Contracts</a></li>
<li><a href="#async">Async</a> support that allows you to seamlessly integrate the handling of custom events or listening to message-queues</li>
<li>Built-in <a href="https://twitter.com/KarateDSL/status/1338892932691070976" rel="nofollow">HTML templating</a> so that you can extend your test-reports into readable specifications</li>
<li>Comprehensive support for different flavors of HTTP calls:
<ul dir="auto">
<li><a href="#soap-action">SOAP</a> / XML requests</li>
<li>HTTPS / <a href="#configure">SSL</a> - without needing certificates, key-stores or trust-stores</li>
<li>HTTP <a href="#configure">proxy server</a> support</li>
<li>URL-encoded <a href="#form-field">HTML-form</a> data</li>
<li><a href="#multipart-field">Multi-part</a> file-upload - including <code>multipart/mixed</code> and <code>multipart/related</code></li>
<li>Browser-like <a href="#cookie">cookie</a> handling</li>
<li>Full control over HTTP <a href="#header">headers</a>, <a href="#path">path</a> and query <a href="#param">parameters</a></li>
<li><a href="#retry-until">Re-try</a> until condition</li>
<li><a href="http://www.websocket.org" rel="nofollow">Websocket</a> <a href="#async">support</a></li>
</ul>
</li>
</ul>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Real World Examples</h2><a id="user-content-real-world-examples" class="anchor" aria-label="Permalink: Real World Examples" href="#real-world-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">A set of real-life examples can be found here: <a href="/karatelabs/karate/blob/master/karate-demo">Karate Demos</a></p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Comparison with REST-assured</h2><a id="user-content-comparison-with-rest-assured" class="anchor" aria-label="Permalink: Comparison with REST-assured" href="#comparison-with-rest-assured"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For teams familiar with or currently using <a href="http://rest-assured.io" rel="nofollow">REST-assured</a>, this detailed comparison of <a href="http://tinyurl.com/karatera" rel="nofollow">Karate vs REST-assured</a> - can help you evaluate Karate. Do note that if you prefer a pure Java API - Karate has <a href="#java-api">that covered</a>, and with far more capabilities.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">References</h2><a id="user-content-references" class="anchor" aria-label="Permalink: References" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<ul dir="auto">
<li><a href="https://youtu.be/WT4gg7Jutzg" rel="nofollow">API Testing with Karate</a> - video + demos by <a href="https://twitter.com/ptrthomas" rel="nofollow">Peter Thomas</a> (creator / lead dev of Karate)</li>
<li><a href="https://youtu.be/yu3uupBZyxc" rel="nofollow">Intro to all features of Karate</a> - video + demos by <a href="https://twitter.com/ptrthomas" rel="nofollow">Peter Thomas</a> (creator / lead dev of Karate)</li>
<li><a href="https://twitter.com/KarateDSL/status/1120985060843249664" rel="nofollow">Karate entered the ThoughtWorks Tech Radar</a> in 2019 and was <a href="https://twitter.com/KarateDSL/status/1262719979104817152" rel="nofollow">upgraded in ranking</a> in May 2020</li>
<li><a href="https://speakerdeck.com/takanorig/microservices-testing-automation-with-karate" rel="nofollow">マイクロサービスにおけるテスト自動化 with Karate</a> - (<em>Microservices Test Automation with Karate</em>) presentation by <a href="https://twitter.com/takanorig" rel="nofollow">Takanori Suzuki</a></li>
<li><a href="https://www.softwaretester.blog/writing-api-tests-with-karate" rel="nofollow">Writing API Tests with Karate</a> - book by <a href="https://www.softwaretester.blog/about" rel="nofollow">Benjamin Bischoff</a>, Packt Publishing, 2023</li>
<li><a href="https://www.youtube.com/watch?v=cXDIYpT6zck&amp;t=4333s" rel="nofollow">Karate Webinar</a> - Simplificando automação de API com Karate Framework by <a href="https://www.linkedin.com/in/luanapassis/" rel="nofollow">Luana Assis</a> from <a href="https://www.base2.com.br/" rel="nofollow">Base2 Tecnologia</a></li>
</ul>
<p dir="auto">Karate also has a dedicated "tag", and a very active and supportive community at <a href="https://stackoverflow.com/questions/tagged/karate" rel="nofollow">Stack Overflow</a> - where you can get support and ask questions.</p>
<p dir="auto">You can find a lot more references, tutorials and blog-posts at <a href="https://karatelabs.io" rel="nofollow">karatelabs.io</a>.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Getting Started</h1><a id="user-content-getting-started" class="anchor" aria-label="Permalink: Getting Started" href="#getting-started"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">If you are a Java developer - Karate requires at least <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" rel="nofollow">Java</a> 11 and then either <a href="http://maven.apache.org" rel="nofollow">Maven</a>, <a href="https://gradle.org" rel="nofollow">Gradle</a>, or a Java IDE that embeds either to be installed. Note that Karate works fine on OpenJDK.</p>
<p dir="auto">If you are new to programming or test-automation, the <a href="https://plugins.jetbrains.com/plugin/19232-karate" rel="nofollow">official IntelliJ plugin</a> is recommended.</p>
<p dir="auto">If you <em>don't</em> want to use Java, the <a href="https://marketplace.visualstudio.com/items?itemName=karatelabs.karate" rel="nofollow">Karate extension for Visual Studio Code</a> is recommended, and JavaScript, .NET, Ruby and Python programmers will feel right at home.</p>
<p dir="auto">Both the official Visual Studio Code and IntelliJ plugins support step-through debugging of Karate tests.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Maven</h2><a id="user-content-maven" class="anchor" aria-label="Permalink: Maven" href="#maven"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">All you need is available in the <a href="https://search.maven.org/artifact/com.intuit.karate/karate-core" rel="nofollow"><code>karate-core</code></a> artifact. You can run tests with this <a href="#parallel-execution">directly</a>, but teams can choose the JUnit variant (shown below) that pulls in JUnit 5 and <a href="https://stackoverflow.com/a/65578167/143475" rel="nofollow">slightly improves the in-IDE experience</a>.</p>
<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;dependency&gt;
    &lt;groupId&gt;com.intuit.karate&lt;/groupId&gt;
    &lt;artifactId&gt;karate-junit5&lt;/artifactId&gt;
    &lt;version&gt;1.4.1&lt;/version&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;"><pre>&lt;<span class="pl-ent">dependency</span>&gt;
    &lt;<span class="pl-ent">groupId</span>&gt;com.intuit.karate&lt;/<span class="pl-ent">groupId</span>&gt;
    &lt;<span class="pl-ent">artifactId</span>&gt;karate-junit5&lt;/<span class="pl-ent">artifactId</span>&gt;
    &lt;<span class="pl-ent">version</span>&gt;1.4.1&lt;/<span class="pl-ent">version</span>&gt;
    &lt;<span class="pl-ent">scope</span>&gt;test&lt;/<span class="pl-ent">scope</span>&gt;
&lt;/<span class="pl-ent">dependency</span>&gt;</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Gradle</h2><a id="user-content-gradle" class="anchor" aria-label="Permalink: Gradle" href="#gradle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Alternatively for <a href="https://gradle.org" rel="nofollow">Gradle</a>:</p>
<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="    testCompile 'com.intuit.karate:karate-junit5:1.4.1'"><pre>    <span class="pl-s">testCompile 'com.intuit.karate:karate-junit5:1.4.1'</span></pre></div>
<p dir="auto">Also refer to the wiki for using <a href="https://github.com/karatelabs/karate/wiki/Gradle">Karate with Gradle</a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Karate Core "Fat JAR"</h3><a id="user-content-karate-core-fat-jar" class="anchor" aria-label="Permalink: Karate Core &quot;Fat JAR&quot;" href="#karate-core-fat-jar"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">If you mix Karate into a Maven or Gradle project with many other dependendies, you may run into problems because of dependency conflicts. For example a lot of Java projects directly (or indirectly) depend on Netty or Thymeleaf or ANTLR, etc.</p>
<p dir="auto">If you face issues such as "class not found", just pull in the <code>karate-core</code> dependency, and use the <code>all</code> <a href="https://www.baeldung.com/maven-artifact-classifiers" rel="nofollow">classifier</a> in your <code>pom.xml</code> (or <code>build.gradle</code>).</p>
<p dir="auto">For example when using Maven:</p>
<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;dependency&gt;
  &lt;groupId&gt;com.intuit.karate&lt;/groupId&gt;
  &lt;artifactId&gt;karate-core&lt;/artifactId&gt;
  &lt;version&gt;${karate.version}&lt;/version&gt;
  &lt;classifier&gt;all&lt;/classifier&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;"><pre>&lt;<span class="pl-ent">dependency</span>&gt;
  &lt;<span class="pl-ent">groupId</span>&gt;com.intuit.karate&lt;/<span class="pl-ent">groupId</span>&gt;
  &lt;<span class="pl-ent">artifactId</span>&gt;karate-core&lt;/<span class="pl-ent">artifactId</span>&gt;
  &lt;<span class="pl-ent">version</span>&gt;${karate.version}&lt;/<span class="pl-ent">version</span>&gt;
  &lt;<span class="pl-ent">classifier</span>&gt;all&lt;/<span class="pl-ent">classifier</span>&gt;
  &lt;<span class="pl-ent">scope</span>&gt;test&lt;/<span class="pl-ent">scope</span>&gt;
&lt;/<span class="pl-ent">dependency</span>&gt;</pre></div>
<p dir="auto">Note that for very complicated projects you can consider using a <a href="https://maven.apache.org/guides/introduction/introduction-to-profiles.html" rel="nofollow">Maven profile</a> so that testing-related dependencies don't collide with your development-time dependencies. Of course it is an option to have Karate tests in a separate stand-alone maven project and folder, while still being in the same Git repository.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Quickstart</h3><a id="user-content-quickstart" class="anchor" aria-label="Permalink: Quickstart" href="#quickstart"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">It may be easier for you to use the Karate Maven archetype to create a skeleton project with one command. You can then skip the next few sections, as the <code>pom.xml</code>, recommended directory structure, sample test and <a href="#junit-5">JUnit 5</a> runners - will be created for you.</p>
<blockquote>
<p dir="auto">If you are behind a corporate proxy, or especially if your local Maven installation has been configured to point to a repository within your local network, the command below may not work. One workaround is to temporarily disable or rename your Maven <a href="https://maven.apache.org/settings.html" rel="nofollow"><code>settings.xml</code></a> file, and try again.</p>
</blockquote>
<p dir="auto">You can replace the values of <code>com.mycompany</code> and <code>myproject</code> as per your needs.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn archetype:generate \
-DarchetypeGroupId=com.intuit.karate \
-DarchetypeArtifactId=karate-archetype \
-DarchetypeVersion=1.4.1 \
-DgroupId=com.mycompany \
-DartifactId=myproject"><pre class="notranslate"><code>mvn archetype:generate \
-DarchetypeGroupId=com.intuit.karate \
-DarchetypeArtifactId=karate-archetype \
-DarchetypeVersion=1.4.1 \
-DgroupId=com.mycompany \
-DartifactId=myproject
</code></pre></div>
<p dir="auto">This will create a folder called <code>myproject</code> (or whatever you set the name to).</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">IDE Support</h2><a id="user-content-ide-support" class="anchor" aria-label="Permalink: IDE Support" href="#ide-support"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Refer to the wiki - <a href="https://github.com/karatelabs/karate/wiki/IDE-Support">IDE Support</a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Folder Structure</h2><a id="user-content-folder-structure" class="anchor" aria-label="Permalink: Folder Structure" href="#folder-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">A Karate test script has the file extension <code>.feature</code> which is the standard followed by Cucumber.  You are free to organize your files using regular Java package conventions.</p>
<p dir="auto">The Maven tradition is to have non-Java source files in a separate <code>src/test/resources</code> folder structure - but we recommend that you keep them side-by-side with your <code>*.java</code> files. When you have a large and complex project, you will end up with a few data files (e.g. <code>*.js</code>, <code>*.json</code>, <code>*.txt</code>) as well and it is much more convenient to see the <code>*.java</code> and <code>*.feature</code> files and all related artifacts in the same place.</p>
<p dir="auto">This can be easily achieved with the following tweak to your maven <code>&lt;build&gt;</code> section.</p>
<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;build&gt;
    &lt;testResources&gt;
        &lt;testResource&gt;
            &lt;directory&gt;src/test/java&lt;/directory&gt;
            &lt;excludes&gt;
                &lt;exclude&gt;**/*.java&lt;/exclude&gt;
            &lt;/excludes&gt;
        &lt;/testResource&gt;
    &lt;/testResources&gt;        
    &lt;plugins&gt;
    ...
    &lt;/plugins&gt;
&lt;/build&gt;"><pre>&lt;<span class="pl-ent">build</span>&gt;
    &lt;<span class="pl-ent">testResources</span>&gt;
        &lt;<span class="pl-ent">testResource</span>&gt;
            &lt;<span class="pl-ent">directory</span>&gt;src/test/java&lt;/<span class="pl-ent">directory</span>&gt;
            &lt;<span class="pl-ent">excludes</span>&gt;
                &lt;<span class="pl-ent">exclude</span>&gt;**/*.java&lt;/<span class="pl-ent">exclude</span>&gt;
            &lt;/<span class="pl-ent">excludes</span>&gt;
        &lt;/<span class="pl-ent">testResource</span>&gt;
    &lt;/<span class="pl-ent">testResources</span>&gt;        
    &lt;<span class="pl-ent">plugins</span>&gt;
    ...
    &lt;/<span class="pl-ent">plugins</span>&gt;
&lt;/<span class="pl-ent">build</span>&gt;</pre></div>
<p dir="auto">This is very common in the world of Maven users and keep in mind that these are tests and not production code.</p>
<p dir="auto">Alternatively, if using Gradle then add the following <code>sourceSets</code> definition</p>
<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java'
        }
    }
}"><pre><span class="pl-s">sourceSets {</span>
    <span class="pl-s">test {</span>
        <span class="pl-s">resources {</span>
            <span class="pl-s">srcDir file('src/test/java')</span>
            <span class="pl-s">exclude '**/*.java'</span>
        <span class="pl-s">}</span>
    <span class="pl-s">}</span>
<span class="pl-s">}</span></pre></div>
<p dir="auto">With the above in place, you don't have to keep switching between your <code>src/test/java</code> and <code>src/test/resources</code> folders, you can have all your test-code and artifacts under <code>src/test/java</code> and everything will work as expected.</p>
<p dir="auto">Once you get used to this, you may even start wondering why projects need a <code>src/test/resources</code> folder at all !</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Spring Boot Example</h3><a id="user-content-spring-boot-example" class="anchor" aria-label="Permalink: Spring Boot Example" href="#spring-boot-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto"><a href="https://twitter.com/sdaas" rel="nofollow">Soumendra Daas</a> has created a nice example and guide that you can use as a reference here: <a href="https://github.com/Sdaas/hello-karate"><code>hello-karate</code></a>. This demonstrates a Java Maven + JUnit 5 project set up to test a <a href="http://projects.spring.io/spring-boot/" rel="nofollow">Spring Boot</a> app.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Naming Conventions</h2><a id="user-content-naming-conventions" class="anchor" aria-label="Permalink: Naming Conventions" href="#naming-conventions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Since these are tests and not production Java code, you don't need to be bound by the <code>com.mycompany.foo.bar</code> convention and the un-necessary explosion of sub-folders that ensues. We suggest that you have a folder hierarchy only one or two levels deep - where the folder names clearly identify which 'resource', 'entity' or API is the web-service under test.</p>
<p dir="auto">For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="src/test/java
    |
    +-- karate-config.js
    +-- logback-test.xml
    +-- some-reusable.feature
    +-- some-classpath-function.js
    +-- some-classpath-payload.json
    |
    \-- animals
        |
        +-- AnimalsTest.java
        |
        +-- cats
        |   |
        |   +-- cats-post.feature
        |   +-- cats-get.feature
        |   +-- cat.json
        |   \-- CatsRunner.java
        |
        \-- dogs
            |
            +-- dog-crud.feature
            +-- dog.json
            +-- some-helper-function.js
            \-- DogsRunner.java"><pre class="notranslate"><code>src/test/java
    |
    +-- karate-config.js
    +-- logback-test.xml
    +-- some-reusable.feature
    +-- some-classpath-function.js
    +-- some-classpath-payload.json
    |
    \-- animals
        |
        +-- AnimalsTest.java
        |
        +-- cats
        |   |
        |   +-- cats-post.feature
        |   +-- cats-get.feature
        |   +-- cat.json
        |   \-- CatsRunner.java
        |
        \-- dogs
            |
            +-- dog-crud.feature
            +-- dog.json
            +-- some-helper-function.js
            \-- DogsRunner.java
</code></pre></div>
<p dir="auto">Assuming you use JUnit, there are some good reasons for the recommended (best practice) naming convention and choice of file-placement shown above:</p>
<ul dir="auto">
<li>Not using the <code>*Test.java</code> convention for the JUnit classes (e.g. <code>CatsRunner.java</code>) in the <code>cats</code> and <code>dogs</code> folder ensures that these tests will <strong>not</strong> be picked up when invoking <code>mvn test</code> (for the whole project) from the <a href="#command-line">command line</a>. But you can still invoke these tests from the IDE, which is convenient when in development mode.</li>
<li><code>AnimalsTest.java</code> (the only file that follows the <code>*Test.java</code> naming convention) acts as the 'test suite' for the entire project. By default, Karate will load all <code>*.feature</code> files from sub-directories as well. But since <code>some-reusable.feature</code> is <em>above</em> <code>AnimalsTest.java</code> in the folder hierarchy, it will <strong>not</strong> be picked-up. Which is exactly what we want, because <code>some-reusable.feature</code> is designed to be <a href="#calling-other-feature-files">called</a> only from one of the other test scripts (perhaps with some parameters being passed). You can also use <a href="#tags">tags</a> to skip files.</li>
<li><code>some-classpath-function.js</code> and <code>some-classpath-payload.json</code> are in the 'root' of the Java <a href="#classpath">'classpath'</a> which means they can be easily <a href="#reading-files">read</a> (and re-used) from any test-script by using the <code>classpath:</code> prefix, for e.g: <code>read('classpath:some-classpath-function.js')</code>. Relative paths will also work.</li>
</ul>
<p dir="auto">For details on what actually goes into a script or <code>*.feature</code> file, refer to the <a href="#syntax-guide">syntax guide</a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">JUnit 5</h2><a id="user-content-junit-5" class="anchor" aria-label="Permalink: JUnit 5" href="#junit-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate supports <a href="https://junit.org/junit5" rel="nofollow">JUnit 5</a> and the advantage is that you can have multiple methods in a test-class. Only 1 <code>import</code> is needed, and instead of a class-level annotation, you use a nice <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow">DRY</a> and <a href="https://en.wikipedia.org/wiki/Fluent_interface" rel="nofollow">fluent-api</a> to express which tests and tags you want to use.</p>
<p dir="auto">Note that the Java class does not need to be <code>public</code> and even the test methods do not need to be <code>public</code> - so tests end up being very concise.</p>
<blockquote>
<p dir="auto">Karate will traverse sub-directories and look for <code>*.feature</code> files. For example if you have the JUnit class in the <code>com.mycompany</code> package, <code>*.feature</code> files in <code>com.mycompany.foo</code> and <code>com.mycompany.bar</code> will also be run. This is one reason why you may want to prefer a 'flat' directory structure as <a href="#naming-conventions">explained above</a>.</p>
</blockquote>
<p dir="auto">Here is an <a href="/karatelabs/karate/blob/master/karate-junit5/src/test/java/karate/SampleTest.java">example</a>:</p>
<div class="highlight highlight-source-java notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="package karate;

import com.intuit.karate.junit5.Karate;

class SampleTest {

    @Karate.Test
    Karate testSample() {
        return Karate.run(&quot;sample&quot;).relativeTo(getClass());
    }
    
    @Karate.Test
    Karate testTags() {
        return Karate.run(&quot;tags&quot;).tags(&quot;@second&quot;).relativeTo(getClass());
    }

    @Karate.Test
    Karate testSystemProperty() {
        return Karate.run(&quot;classpath:karate/tags.feature&quot;)
                .tags(&quot;@second&quot;)
                .karateEnv(&quot;e2e&quot;)
                .systemProperty(&quot;foo&quot;, &quot;bar&quot;);
    }

}"><pre><span class="pl-k">package</span> <span class="pl-s1">karate</span>;

<span class="pl-k">import</span> <span class="pl-s1">com</span>.<span class="pl-s1">intuit</span>.<span class="pl-s1">karate</span>.<span class="pl-s1">junit5</span>.<span class="pl-s1">Karate</span>;

<span class="pl-k">class</span> <span class="pl-smi">SampleTest</span> {

    <span class="pl-c1">@</span><span class="pl-smi">Karate</span>.<span class="pl-s1">Test</span>
    <span class="pl-smi">Karate</span> <span class="pl-en">testSample</span>() {
        <span class="pl-k">return</span> <span class="pl-smi">Karate</span>.<span class="pl-en">run</span>(<span class="pl-s">"sample"</span>).<span class="pl-en">relativeTo</span>(<span class="pl-en">getClass</span>());
    }
    
    <span class="pl-c1">@</span><span class="pl-smi">Karate</span>.<span class="pl-s1">Test</span>
    <span class="pl-smi">Karate</span> <span class="pl-en">testTags</span>() {
        <span class="pl-k">return</span> <span class="pl-smi">Karate</span>.<span class="pl-en">run</span>(<span class="pl-s">"tags"</span>).<span class="pl-en">tags</span>(<span class="pl-s">"@second"</span>).<span class="pl-en">relativeTo</span>(<span class="pl-en">getClass</span>());
    }

    <span class="pl-c1">@</span><span class="pl-smi">Karate</span>.<span class="pl-s1">Test</span>
    <span class="pl-smi">Karate</span> <span class="pl-en">testSystemProperty</span>() {
        <span class="pl-k">return</span> <span class="pl-smi">Karate</span>.<span class="pl-en">run</span>(<span class="pl-s">"classpath:karate/tags.feature"</span>)
                .<span class="pl-en">tags</span>(<span class="pl-s">"@second"</span>)
                .<span class="pl-en">karateEnv</span>(<span class="pl-s">"e2e"</span>)
                .<span class="pl-en">systemProperty</span>(<span class="pl-s">"foo"</span>, <span class="pl-s">"bar"</span>);
    }

}</pre></div>
<p dir="auto">Note that more "builder" methods are available from the <a href="#parallel-execution"><code>Runner.Builder</code></a> class such as <code>reportDir()</code> etc.</p>
<p dir="auto">You should be able to right-click and run a single method using your IDE - which should be sufficient when you are in development mode. But to be able to run JUnit 5 tests from the command-line, you need to ensure that the latest version of the <a href="https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html" rel="nofollow">maven-surefire-plugin</a> is present in your project <code>pom.xml</code> (within the <code>&lt;build&gt;/&lt;plugins&gt;</code> section):</p>
<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.22.2&lt;/version&gt;
&lt;/plugin&gt;"><pre>&lt;<span class="pl-ent">plugin</span>&gt;
    &lt;<span class="pl-ent">groupId</span>&gt;org.apache.maven.plugins&lt;/<span class="pl-ent">groupId</span>&gt;
    &lt;<span class="pl-ent">artifactId</span>&gt;maven-surefire-plugin&lt;/<span class="pl-ent">artifactId</span>&gt;
    &lt;<span class="pl-ent">version</span>&gt;2.22.2&lt;/<span class="pl-ent">version</span>&gt;
&lt;/<span class="pl-ent">plugin</span>&gt;</pre></div>
<p dir="auto">To run a single test method, for example the <code>testTags()</code> in the example above, you can do this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn test -Dtest=SampleTest#testTags"><pre class="notranslate"><code>mvn test -Dtest=SampleTest#testTags
</code></pre></div>
<p dir="auto">Also look at how to run tests via the <a href="#command-line">command-line</a> and the <a href="#parallel-execution">parallel runner</a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">JUnit HTML report</h3><a id="user-content-junit-html-report" class="anchor" aria-label="Permalink: JUnit HTML report" href="#junit-html-report"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When you use the JUnit runner - after the execution of each feature, an HTML report is output to the <code>target/karate-reports</code> folder and the full path will be printed to the console (see <a href="https://twitter.com/KarateDSL/status/935029435140489216" rel="nofollow">video</a>).</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="html report: (paste into browser to view)
-----------------------------------------
file:///projects/myproject/target/karate-reports/mypackage.myfeature.html"><pre class="notranslate"><code>html report: (paste into browser to view)
-----------------------------------------
file:///projects/myproject/target/karate-reports/mypackage.myfeature.html
</code></pre></div>
<p dir="auto">You can easily select (double-click), copy and paste this <code>file:</code> URL into your browser address bar. This report is useful for troubleshooting and debugging a test because all requests and responses are shown in-line with the steps, along with error messages and the output of <a href="#print"><code>print</code></a> statements. Just re-fresh your browser window if you re-run the test.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Dry Run</h3><a id="user-content-dry-run" class="anchor" aria-label="Permalink: Dry Run" href="#dry-run"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This will give you the usual HTML report showing what features will be run, including all steps shown (including comments) so that it can be reviewed. Of course the actual time-durations, and logs will be missing, and <em>everything</em> will pass.</p>
<p dir="auto">The “dry run” report is useful to review the tag "coverage" of what will be run. For example you can get a nice feature “coverage” report, provided you have a rich set of <a href="#tags">tags</a>. e.g. <code>@smoke @module=one @module=two</code> etc.</p>
<p dir="auto">The <a href="#parallel-execution"><code>Runner.Builder</code></a> API has a <code>dryRun()</code> method to switch this on. Note that this mode can be also triggered via the command-line by adding <code>-D</code> or <code>--dryrun</code> to the <a href="#karateoptions"><code>karate.options</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Command Line</h2><a id="user-content-command-line" class="anchor" aria-label="Permalink: Command Line" href="#command-line"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">If you are using Karate via the <a href="https://marketplace.visualstudio.com/items?itemName=karatelabs.karate" rel="nofollow">VS Code Plugin</a> or the stand-alone JAR, refer to the <a href="https://github.com/karatelabs/karate/wiki/Get-Started:-Other-Runtime-Options">CLI usage guide</a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Command Line - Maven</h3><a id="user-content-command-line---maven" class="anchor" aria-label="Permalink: Command Line - Maven" href="#command-line---maven"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Normally in dev mode, you will use your IDE to run a <code>*.feature</code> file directly or via the companion 'runner' JUnit Java class. When you have a 'runner' class in place, it would be possible to run it from the command-line as well.</p>
<p dir="auto">Note that the <code>mvn test</code> command only runs test classes that follow the <code>*Test.java</code> <a href="#naming-conventions">naming convention</a> by default. But you can choose a single test to run like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn test -Dtest=CatsRunner"><pre class="notranslate"><code>mvn test -Dtest=CatsRunner
</code></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>karate.options</code></h3><a id="user-content-karateoptions" class="anchor" aria-label="Permalink: karate.options" href="#karateoptions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When your Java test "runner" is linked to multiple feature files, which will be the case when you use the recommended <a href="#parallel-execution">parallel runner</a>, you can narrow down your scope to a single feature, scenario or directory via the command-line, useful in dev-mode. Note how even <a href="#tags">tags</a> to exclude (or include) can be specified:</p>
<blockquote>
<p dir="auto">Note that any <code>Feature</code> or <code>Scenario</code> with the <a href="#special-tags">special <code>@ignore</code> tag</a> will be skipped by default.</p>
</blockquote>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn test &quot;-Dkarate.options=--tags ~@skipme classpath:demo/cats/cats.feature&quot; -Dtest=DemoTestParallel"><pre class="notranslate"><code>mvn test "-Dkarate.options=--tags ~@skipme classpath:demo/cats/cats.feature" -Dtest=DemoTestParallel
</code></pre></div>
<p dir="auto">Multiple feature files (or paths) can be specified, de-limited by the space character. They should be at the end of the <code>karate.options</code>. To run only a single scenario, append the line number on which the scenario is defined, de-limited by <code>:</code>.</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn test &quot;-Dkarate.options=PathToFeatureFiles/order.feature:12&quot; -Dtest=DemoTestParallel"><pre class="notranslate"><code>mvn test "-Dkarate.options=PathToFeatureFiles/order.feature:12" -Dtest=DemoTestParallel
</code></pre></div>
<p dir="auto">Since paths are expected at the end of the command-line options - if you want to only over-ride tags, use the <code>=</code> sign to make argument values clear. For example:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn test -Dkarate.options='-t=@dev -t=@src' -Dtest=ExamplesTest"><pre class="notranslate"><code>mvn test -Dkarate.options='-t=@dev -t=@src' -Dtest=ExamplesTest
</code></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Command Line - Gradle</h3><a id="user-content-command-line---gradle" class="anchor" aria-label="Permalink: Command Line - Gradle" href="#command-line---gradle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For Gradle, you must extend the test task to allow the <code>karate.options</code> to be passed to the runtime (otherwise they get consumed by Gradle itself). To do that, add the following:</p>
<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="test {
    // pull karate options into the runtime
    systemProperty &quot;karate.options&quot;, System.properties.getProperty(&quot;karate.options&quot;)
    // pull karate env into the runtime
    systemProperty &quot;karate.env&quot;, System.properties.getProperty(&quot;karate.env&quot;)
    // ensure tests are always run
    outputs.upToDateWhen { false }
}"><pre><span class="pl-s">test {</span>
    <span class="pl-s">// pull karate options into the runtime</span>
    <span class="pl-s">systemProperty "karate.options", System.properties.getProperty("karate.options")</span>
    <span class="pl-s">// pull karate env into the runtime</span>
    <span class="pl-s">systemProperty "karate.env", System.properties.getProperty("karate.env")</span>
    <span class="pl-s">// ensure tests are always run</span>
    <span class="pl-s">outputs.upToDateWhen { false }</span>
<span class="pl-s">}</span></pre></div>
<p dir="auto">And then the above command in Gradle would look like:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./gradlew test --tests *CatsRunner"><pre class="notranslate"><code>./gradlew test --tests *CatsRunner
</code></pre></div>
<p dir="auto">or</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./gradlew test -Dtest.single=CatsRunner"><pre class="notranslate"><code>./gradlew test -Dtest.single=CatsRunner
</code></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Test Suites</h3><a id="user-content-test-suites" class="anchor" aria-label="Permalink: Test Suites" href="#test-suites"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">The recommended way to define and run test-suites and reporting in Karate is to use the <a href="#parallel-execution">parallel runner</a>, described in the next section. The approach in this section is more suited for troubleshooting in dev-mode, using your IDE.</p>
</blockquote>
<p dir="auto">One way to define 'test-suites' in Karate is to have a JUnit class at a level 'above' (in terms of folder hierarchy) all the <code>*.feature</code> files in your project. So if you take the previous <a href="#naming-conventions">folder structure example</a>, you can do this on the command-line:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn test &quot;-Dkarate.options=--tags ~@skipme&quot; -Dtest=AnimalsTest"><pre class="notranslate"><code>mvn test "-Dkarate.options=--tags ~@skipme" -Dtest=AnimalsTest
</code></pre></div>
<p dir="auto">Here, <code>AnimalsTest</code> is the name of the Java class we designated to run the multiple <code>*.feature</code> files that make up your test-suite. There is a neat way to <a href="#tags">tag your tests</a> and the above example demonstrates how to run all tests <em>except</em> the ones tagged <code>@skipme</code>.</p>
<p dir="auto">Note that the special, built-in tag <code>@ignore</code> will <em>always</em> be skipped by default, and you don't need to specify <code>~@ignore</code> anywhere.</p>
<p dir="auto">You can 'lock down' the fact that you only want to execute the single JUnit class that functions as a test-suite - by using the following <a href="http://maven.apache.org/surefire/maven-surefire-plugin/examples/inclusion-exclusion.html" rel="nofollow">maven-surefire-plugin configuration</a>:</p>
<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
    &lt;version&gt;${maven.surefire.version}&lt;/version&gt;
    &lt;configuration&gt;
        &lt;includes&gt;
            &lt;include&gt;animals/AnimalsTest.java&lt;/include&gt;
        &lt;/includes&gt;
        &lt;systemProperties&gt;
            &lt;karate.options&gt;--tags @smoke&lt;/karate.options&gt;
        &lt;/systemProperties&gt;            
    &lt;/configuration&gt;
&lt;/plugin&gt; "><pre>&lt;<span class="pl-ent">plugin</span>&gt;
    &lt;<span class="pl-ent">groupId</span>&gt;org.apache.maven.plugins&lt;/<span class="pl-ent">groupId</span>&gt;
    &lt;<span class="pl-ent">artifactId</span>&gt;maven-surefire-plugin&lt;/<span class="pl-ent">artifactId</span>&gt;
    &lt;<span class="pl-ent">version</span>&gt;${maven.surefire.version}&lt;/<span class="pl-ent">version</span>&gt;
    &lt;<span class="pl-ent">configuration</span>&gt;
        &lt;<span class="pl-ent">includes</span>&gt;
            &lt;<span class="pl-ent">include</span>&gt;animals/AnimalsTest.java&lt;/<span class="pl-ent">include</span>&gt;
        &lt;/<span class="pl-ent">includes</span>&gt;
        &lt;<span class="pl-ent">systemProperties</span>&gt;
            &lt;<span class="pl-ent">karate</span>.options&gt;--tags @smoke&lt;/<span class="pl-ent">karate</span>.options&gt;
        &lt;/<span class="pl-ent">systemProperties</span>&gt;            
    &lt;/<span class="pl-ent">configuration</span>&gt;
&lt;/<span class="pl-ent">plugin</span>&gt; </pre></div>
<p dir="auto">Note how the <a href="#karateoptions"><code>karate.options</code></a> can be specified using the <code>&lt;systemProperties&gt;</code> configuration.</p>
<p dir="auto">For Gradle, you simply specify the test which is to be <code>include</code>-d:</p>
<div class="highlight highlight-source-yaml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="test {
    include 'animals/AnimalsTest.java'
    // pull karate options into the runtime
    systemProperty &quot;karate.options&quot;, System.properties.getProperty(&quot;karate.options&quot;)
    // pull karate env into the runtime
    systemProperty &quot;karate.env&quot;, System.properties.getProperty(&quot;karate.env&quot;)
    // ensure tests are always run
    outputs.upToDateWhen { false }
}"><pre><span class="pl-s">test {</span>
    <span class="pl-s">include 'animals/AnimalsTest.java'</span>
    <span class="pl-s">// pull karate options into the runtime</span>
    <span class="pl-s">systemProperty "karate.options", System.properties.getProperty("karate.options")</span>
    <span class="pl-s">// pull karate env into the runtime</span>
    <span class="pl-s">systemProperty "karate.env", System.properties.getProperty("karate.env")</span>
    <span class="pl-s">// ensure tests are always run</span>
    <span class="pl-s">outputs.upToDateWhen { false }</span>
<span class="pl-s">}</span></pre></div>
<p dir="auto">The big drawback of the approach above is that you cannot run tests in parallel. The recommended approach for Karate reporting in a Continuous Integration set-up is described in the next section which can generate the <a href="https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin" rel="nofollow">JUnit XML</a> format that most CI tools can consume. The <a href="https://cucumber.io/docs/cucumber/reporting" rel="nofollow">Cucumber JSON format</a> can be also emitted, which gives you plenty of options for generating pretty reports using third-party maven plugins.</p>
<p dir="auto">And most importantly - you can run tests in parallel without having to depend on third-party hacks that introduce code-generation and config 'bloat' into your <code>pom.xml</code> or <code>build.gradle</code>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Parallel Execution</h2><a id="user-content-parallel-execution" class="anchor" aria-label="Permalink: Parallel Execution" href="#parallel-execution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">Please note that some <a href="/karatelabs/karate/blob/master/karate-core/src/test/resources/analytics.md">user analytics is tracked</a> only when you view the built-in Karate HTML report.</p>
</blockquote>
<p dir="auto">Karate can run tests in parallel, and dramatically cut down execution time. This is a 'core' feature and does not depend on JUnit, Maven or Gradle.</p>
<blockquote>
<p dir="auto">For those running Karate in non-Java projects via the command-line, note that you can set the number of threads via <code>--threads</code> or <code>-T</code> as explained <a href="https://karatelabs.github.io/karate/karate-netty/#parallel-execution" rel="nofollow">here</a>.</p>
</blockquote>
<ul dir="auto">
<li>You can easily "choose" features and tags to run and compose test-suites in a very flexible manner.</li>
<li>You can use the returned <code>Results</code> object to check if any scenarios failed, and to even summarize the errors</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin" rel="nofollow">JUnit XML</a> reports can be generated in the "<code>reportDir</code>" path you specify, and you can easily configure your CI to look for these files after a build (for e.g. in <code>**/*.xml</code> or <code>**/karate-reports/*.xml</code>). Note that you have to call the <code>outputJunitXml(true)</code> method on the <code>Runner</code> "builder".</li>
<li><a href="https://cucumber.io/docs/cucumber/reporting" rel="nofollow">Cucumber JSON reports</a> can be generated, except that the extension will be <code>.json</code> instead of <code>.xml</code>. Note that you have to call the <code>outputCucumberJson(true)</code> method on the <code>Runner</code> "builder".</li>
<li>HTML reports can be disabled by calling <a href="https://github.com/karatelabs/karate/blob/v1.2.1.RC1/karate-core/src/main/java/com/karatelabs/karate/Runner.java#L515"><code>outputHtmlReport(false)</code></a>.</li>
<li>The <code>Runner.path()</code> "builder" method in <code>karate-core</code> is how you refer to the package you want to execute, and all feature files within sub-directories will be picked up</li>
<li><code>Runner.path()</code> takes multiple string parameters, so you can refer to multiple packages or even individual <code>*.feature</code> files and easily "compose" a test-suite
<ul dir="auto">
<li>e.g. <code>Runner.path("classpath:animals", "classpath:some/other/package.feature")</code></li>
</ul>
</li>
<li>To <a href="#tags">choose tags</a>, call the <code>tags()</code> API, note that by default, any <code>*.feature</code> file tagged with the special (built-in) tag: <code>@ignore</code> will be skipped. You can also specify tags on the <a href="#test-suites">command-line</a>. The <code>tags()</code> method also takes multiple arguments, for e.g.
<ul dir="auto">
<li>this is an "AND" operation: <code>tags("@customer", "@smoke")</code></li>
<li>and this is an "OR" operation: <code>tags("@customer,@smoke")</code></li>
</ul>
</li>
<li>There is an optional <code>reportDir()</code> method if you want to customize the directory to which the <a href="#parallel-execution">HTML, XML and JSON</a> files will be output, it defaults to <code>target/karate-reports</code></li>
<li>If you want to dynamically and programmatically determine the tags and features to be included - the API also accepts <code>List&lt;String&gt;</code> as the <code>path()</code> and <code>tags()</code> methods arguments</li>
<li><code>parallel()</code> <em>has</em> to be the last method called, and you pass the number of parallel threads needed. It returns a <code>Results</code> object that has all the information you need - such as the number of passed or failed tests.</li>
</ul>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">JUnit 5 Parallel Execution</h3><a id="user-content-junit-5-parallel-execution" class="anchor" aria-label="Permalink: JUnit 5 Parallel Execution" href="#junit-5-parallel-execution"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The example below assumes that <a href="https://junit.org/junit5" rel="nofollow">JUnit 5</a> is available on the classpath, and uses the <code>@Test</code> annotation and the <code>assertEquals()</code> method.</p>
<blockquote>
<p dir="auto">But if you really want, you could use the <code>Runner</code> and <code>Results</code> API directly in <em>any</em> Java class, and even a "main" method.</p>
</blockquote>
<p dir="auto">Use the <a href="https://github.com/karatelabs/karate-template"><code>karate-template</code></a> project if you want to get an <a href="https://github.com/karatelabs/karate-template/blob/main/src/test/java/examples/ExamplesTest.java">example</a> as part of a working, "skeleton" project.</p>
<div class="highlight highlight-source-java notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="import com.intuit.karate.Results;
import com.intuit.karate.Runner;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

class TestParallel {

    @Test
    void testParallel() {
        Results results = Runner.path(&quot;classpath:animals&quot;).tags(&quot;~@skipme&quot;).parallel(5);
        assertEquals(0, results.getFailCount(), results.getErrorMessages());
    }

}"><pre><span class="pl-k">import</span> <span class="pl-s1">com</span>.<span class="pl-s1">intuit</span>.<span class="pl-s1">karate</span>.<span class="pl-s1">Results</span>;
<span class="pl-k">import</span> <span class="pl-s1">com</span>.<span class="pl-s1">intuit</span>.<span class="pl-s1">karate</span>.<span class="pl-s1">Runner</span>;
<span class="pl-k">import</span> <span class="pl-k">static</span> <span class="pl-s1">org</span>.<span class="pl-s1">junit</span>.<span class="pl-s1">jupiter</span>.<span class="pl-s1">api</span>.<span class="pl-s1">Assertions</span>.*;
<span class="pl-k">import</span> <span class="pl-s1">org</span>.<span class="pl-s1">junit</span>.<span class="pl-s1">jupiter</span>.<span class="pl-s1">api</span>.<span class="pl-s1">Test</span>;

<span class="pl-k">class</span> <span class="pl-smi">TestParallel</span> {

    <span class="pl-c1">@</span><span class="pl-c1">Test</span>
    <span class="pl-smi">void</span> <span class="pl-en">testParallel</span>() {
        <span class="pl-smi">Results</span> <span class="pl-s1">results</span> = <span class="pl-smi">Runner</span>.<span class="pl-en">path</span>(<span class="pl-s">"classpath:animals"</span>).<span class="pl-en">tags</span>(<span class="pl-s">"~@skipme"</span>).<span class="pl-en">parallel</span>(<span class="pl-c1">5</span>);
        <span class="pl-en">assertEquals</span>(<span class="pl-c1">0</span>, <span class="pl-s1">results</span>.<span class="pl-en">getFailCount</span>(), <span class="pl-s1">results</span>.<span class="pl-en">getErrorMessages</span>());
    }

}</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Parallel Stats</h3><a id="user-content-parallel-stats" class="anchor" aria-label="Permalink: Parallel Stats" href="#parallel-stats"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For convenience, some stats are logged to the console when execution completes, which should look something like this:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="======================================================
elapsed:   2.35 | threads:    5 | thread time: 4.98 
features:    54 | ignored:   25 | efficiency: 0.42
scenarios:  145 | passed:   145 | failed: 0
======================================================"><pre class="notranslate"><code>======================================================
elapsed:   2.35 | threads:    5 | thread time: 4.98 
features:    54 | ignored:   25 | efficiency: 0.42
scenarios:  145 | passed:   145 | failed: 0
======================================================
</code></pre></div>
<p dir="auto">The parallel runner will always run <code>Feature</code>-s in parallel. Karate will also run <code>Scenario</code>-s in parallel by default. So if you have a <code>Feature</code> with multiple <code>Scenario</code>-s in it - they will execute in parallel, and even each <code>Examples</code> row in a <code>Scenario Outline</code> will do so !</p>
<p dir="auto">A <code>karate-timeline.html</code> file will also be saved to the report output directory mentioned above (<code>target/karate-reports</code> by default) - which is useful for visually verifying or troubleshooting the effectiveness of the test-run (<a href="https://twitter.com/KarateDSL/status/1049321708241317888" rel="nofollow">see video</a>).</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>@parallel=false</code></h3><a id="user-content-parallelfalse" class="anchor" aria-label="Permalink: @parallel=false" href="#parallelfalse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In rare cases you may want to suppress the default of <code>Scenario</code>-s executing in parallel and the special <a href="#tags"><code>tag</code></a> <code>@parallel=false</code> can be used. If you place it above the <a href="#script-structure"><code>Feature</code></a> keyword, it will apply to all <code>Scenario</code>-s. And if you just want one or two <code>Scenario</code>-s to NOT run in parallel, you can place this tag above only <em>those</em> <code>Scenario</code>-s. See <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/encoding/encoding.feature">example</a>.</p>
<p dir="auto">Note that forcing <code>Scenario</code>-s to run in a particular sequence <a href="https://stackoverflow.com/a/46080568/143475" rel="nofollow">is an anti-pattern</a>, and should be avoided as far as possible.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Test Reports</h2><a id="user-content-test-reports" class="anchor" aria-label="Permalink: Test Reports" href="#test-reports"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">As mentioned above, most CI tools would be able to process the JUnit XML output of the <a href="#parallel-execution">parallel runner</a> and determine the status of the build as well as generate reports.</p>
<p dir="auto">The <a href="/karatelabs/karate/blob/master/karate-demo">Karate Demo</a> has a working example of the recommended parallel-runner set up. It also <a href="/karatelabs/karate/blob/master/karate-demo#example-report">details how</a> a third-party library can be easily used to generate some very nice-looking reports, from the JSON output of the parallel runner.</p>
<p dir="auto">For example, here below is an actual report generated by the <a href="https://github.com/damianszczepanik/cucumber-reporting">cucumber-reporting</a> open-source library.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="/karatelabs/karate/blob/master/karate-demo/src/test/resources/karate-maven-report.jpg"><img src="/karatelabs/karate/raw/master/karate-demo/src/test/resources/karate-maven-report.jpg" height="600px" style="max-width: 100%;"></a></p>
<p dir="auto">Another example for a popular Maven reporting plugin that is compatible with Karate JSON is <a href="https://github.com/trivago/cluecumber-report-plugin">Cluecumber</a>.</p>
<p dir="auto">The demo also features <a href="/karatelabs/karate/blob/master/karate-demo#code-coverage-using-jacoco">code-coverage using Jacoco</a>, and some tips for even non-Java back-ends. Some third-party report-server solutions integrate with Karate such as <a href="https://github.com/reportportal/agent-java-karate">ReportPortal.io</a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Logging</h2><a id="user-content-logging" class="anchor" aria-label="Permalink: Logging" href="#logging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">This is optional, and Karate will work without the logging config in place, but the default console logging may be too verbose for your needs.</p>
</blockquote>
<p dir="auto">Karate uses <a href="http://logback.qos.ch" rel="nofollow">LOGBack</a> which looks for a file called <code>logback-test.xml</code> on the '<a href="#classpath">classpath</a>'.</p>
<blockquote>
<p dir="auto">In rare cases, e.g. if you are using Karate to create a Java application, <a href="http://logback.qos.ch/manual/configuration.html" rel="nofollow">LOGBack will look for <code>logback.xml</code></a></p>
</blockquote>
<p dir="auto">Here is a sample <code>logback-test.xml</code> for you to get started.</p>
<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration&gt;
 
    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;
        &lt;/encoder&gt;
    &lt;/appender&gt;
  
    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;
        &lt;file&gt;target/karate.log&lt;/file&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;
        &lt;/encoder&gt;
    &lt;/appender&gt;    
   
    &lt;logger name=&quot;com.intuit.karate&quot; level=&quot;DEBUG&quot;/&gt;
   
    &lt;root level=&quot;info&quot;&gt;
        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;
        &lt;appender-ref ref=&quot;FILE&quot; /&gt;
    &lt;/root&gt;
  
&lt;/configuration&gt;"><pre>&lt;?<span class="pl-ent">xml</span><span class="pl-e"> version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span><span class="pl-e"> encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>UTF-8<span class="pl-pds">"</span></span>?&gt;
&lt;<span class="pl-ent">configuration</span>&gt;
 
    &lt;<span class="pl-ent">appender</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>STDOUT<span class="pl-pds">"</span></span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>ch.qos.logback.core.ConsoleAppender<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent">encoder</span>&gt;
            &lt;<span class="pl-ent">pattern</span>&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/<span class="pl-ent">pattern</span>&gt;
        &lt;/<span class="pl-ent">encoder</span>&gt;
    &lt;/<span class="pl-ent">appender</span>&gt;
  
    &lt;<span class="pl-ent">appender</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>FILE<span class="pl-pds">"</span></span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>ch.qos.logback.core.FileAppender<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent">file</span>&gt;target/karate.log&lt;/<span class="pl-ent">file</span>&gt;
        &lt;<span class="pl-ent">encoder</span>&gt;
            &lt;<span class="pl-ent">pattern</span>&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/<span class="pl-ent">pattern</span>&gt;
        &lt;/<span class="pl-ent">encoder</span>&gt;
    &lt;/<span class="pl-ent">appender</span>&gt;    
   
    &lt;<span class="pl-ent">logger</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>com.intuit.karate<span class="pl-pds">"</span></span> <span class="pl-e">level</span>=<span class="pl-s"><span class="pl-pds">"</span>DEBUG<span class="pl-pds">"</span></span>/&gt;
   
    &lt;<span class="pl-ent">root</span> <span class="pl-e">level</span>=<span class="pl-s"><span class="pl-pds">"</span>info<span class="pl-pds">"</span></span>&gt;
        &lt;<span class="pl-ent">appender-ref</span> <span class="pl-e">ref</span>=<span class="pl-s"><span class="pl-pds">"</span>STDOUT<span class="pl-pds">"</span></span> /&gt;
        &lt;<span class="pl-ent">appender-ref</span> <span class="pl-e">ref</span>=<span class="pl-s"><span class="pl-pds">"</span>FILE<span class="pl-pds">"</span></span> /&gt;
    &lt;/<span class="pl-ent">root</span>&gt;
  
&lt;/<span class="pl-ent">configuration</span>&gt;</pre></div>
<p dir="auto">You can change the <code>com.intuit.karate</code> logger level to <code>INFO</code> to reduce the amount of logging. When the level is <code>DEBUG</code> the entire request and response payloads are logged. If you use the above config, logs will be captured in <code>target/karate.log</code>.</p>
<p dir="auto">If you want to keep the level as <code>DEBUG</code> (<a href="#test-reports">for HTML reports</a>) but suppress logging to the console, you can comment out the <code>STDOUT</code> "root" <code>appender-ref</code>:</p>
<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  &lt;root level=&quot;warn&quot;&gt;
      &lt;!-- &lt;appender-ref ref=&quot;STDOUT&quot; /&gt; --&gt;
      &lt;appender-ref ref=&quot;FILE&quot; /&gt;
  &lt;/root&gt;"><pre>  &lt;<span class="pl-ent">root</span> <span class="pl-e">level</span>=<span class="pl-s"><span class="pl-pds">"</span>warn<span class="pl-pds">"</span></span>&gt;
      <span class="pl-c"><span class="pl-c">&lt;!--</span> &lt;appender-ref ref="STDOUT" /&gt; <span class="pl-c">--&gt;</span></span>
      &lt;<span class="pl-ent">appender-ref</span> <span class="pl-e">ref</span>=<span class="pl-s"><span class="pl-pds">"</span>FILE<span class="pl-pds">"</span></span> /&gt;
  &lt;/<span class="pl-ent">root</span>&gt;</pre></div>
<p dir="auto">Or another option is to use a <a href="http://logback.qos.ch/manual/filters.html#thresholdFilter" rel="nofollow"><code>ThresholdFilter</code></a>, so you still see critical logs on the console:</p>
<div class="highlight highlight-text-xml notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
      &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;
          &lt;level&gt;WARN&lt;/level&gt;
      &lt;/filter&gt;
      &lt;encoder&gt;
          &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;
      &lt;/encoder&gt;
  &lt;/appender&gt;"><pre>  &lt;<span class="pl-ent">appender</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>STDOUT<span class="pl-pds">"</span></span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>ch.qos.logback.core.ConsoleAppender<span class="pl-pds">"</span></span>&gt;
      &lt;<span class="pl-ent">filter</span> <span class="pl-e">class</span>=<span class="pl-s"><span class="pl-pds">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="pl-pds">"</span></span>&gt;
          &lt;<span class="pl-ent">level</span>&gt;WARN&lt;/<span class="pl-ent">level</span>&gt;
      &lt;/<span class="pl-ent">filter</span>&gt;
      &lt;<span class="pl-ent">encoder</span>&gt;
          &lt;<span class="pl-ent">pattern</span>&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/<span class="pl-ent">pattern</span>&gt;
      &lt;/<span class="pl-ent">encoder</span>&gt;
  &lt;/<span class="pl-ent">appender</span>&gt;</pre></div>
<p dir="auto">If you want to exclude the logs from your CI/CD pipeline but keep them in the execution of your users in their locals you can configure your logback using <a href="http://logback.qos.ch/manual/configuration.html#conditional" rel="nofollow">Janino</a>. In such cases it might be desirable to have your tests using <code>karate.logger.debug('your additional info')</code> instead of the <code>print</code> keyword so you can keep logs in your pipeline in INFO.</p>
<p dir="auto">For suppressing sensitive information such as secrets and passwords from the log and reports, see <a href="#log-masking">Log Masking</a> and <a href="#report-verbosity">Report Verbosity</a>.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Configuration</h1><a id="user-content-configuration" class="anchor" aria-label="Permalink: Configuration" href="#configuration"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">You can skip this section and jump straight to the <a href="#syntax-guide">Syntax Guide</a> if you are in a hurry to get started with Karate. Things will work even if the <code>karate-config.js</code> file is not present.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Classpath</h2><a id="user-content-classpath" class="anchor" aria-label="Permalink: Classpath" href="#classpath"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The 'classpath' is a Java concept and is where some configuration files such as the one for <a href="#logging">logging</a> are expected to be by default. If you use the Maven <code>&lt;test-resources&gt;</code> tweak <a href="#folder-structure">described earlier</a> (recommended), the 'root' of the classpath will be in the <code>src/test/java</code> folder, or else would be <code>src/test/resources</code>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>karate-config.js</code></h2><a id="user-content-karate-configjs" class="anchor" aria-label="Permalink: karate-config.js" href="#karate-configjs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The only 'rule' is that on start-up Karate expects a file called <code>karate-config.js</code> to exist on the 'classpath' and contain a <a href="#javascript-functions">JavaScript function</a>. The function is expected to return a JSON object and all keys and values in that JSON object will be made available as script variables.</p>
<p dir="auto">And that's all there is to Karate configuration ! You can easily get the value of the <a href="#switching-the-environment">current 'environment' or 'profile'</a>, and then set up 'global' variables using some simple JavaScript. Here is an example:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function fn() {   
  var env = karate.env; // get java system property 'karate.env'
  karate.log('karate.env system property was:', env);
  if (!env) {
    env = 'dev'; // a custom 'intelligent' default
  }
  var config = { // base config JSON
    appId: 'my.app.id',
    appSecret: 'my.secret',
    someUrlBase: 'https://some-host.com/v1/auth/',
    anotherUrlBase: 'https://another-host.com/v1/'
  };
  if (env == 'stage') {
    // over-ride only those that need to be
    config.someUrlBase = 'https://stage-host/v1/auth';
  } else if (env == 'e2e') {
    config.someUrlBase = 'https://e2e-host/v1/auth';
  }
  // don't waste time waiting for a connection or if servers don't respond within 5 seconds
  karate.configure('connectTimeout', 5000);
  karate.configure('readTimeout', 5000);
  return config;
}"><pre><span class="pl-k">function</span> <span class="pl-en">fn</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>   
  <span class="pl-k">var</span> <span class="pl-s1">env</span> <span class="pl-c1">=</span> <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-c1">env</span><span class="pl-kos">;</span> <span class="pl-c">// get java system property 'karate.env'</span>
  <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">log</span><span class="pl-kos">(</span><span class="pl-s">'karate.env system property was:'</span><span class="pl-kos">,</span> <span class="pl-s1">env</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-s1">env</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-s1">env</span> <span class="pl-c1">=</span> <span class="pl-s">'dev'</span><span class="pl-kos">;</span> <span class="pl-c">// a custom 'intelligent' default</span>
  <span class="pl-kos">}</span>
  <span class="pl-k">var</span> <span class="pl-s1">config</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span> <span class="pl-c">// base config JSON</span>
    <span class="pl-c1">appId</span>: <span class="pl-s">'my.app.id'</span><span class="pl-kos">,</span>
    <span class="pl-c1">appSecret</span>: <span class="pl-s">'my.secret'</span><span class="pl-kos">,</span>
    <span class="pl-c1">someUrlBase</span>: <span class="pl-s">'https://some-host.com/v1/auth/'</span><span class="pl-kos">,</span>
    <span class="pl-c1">anotherUrlBase</span>: <span class="pl-s">'https://another-host.com/v1/'</span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">env</span> <span class="pl-c1">==</span> <span class="pl-s">'stage'</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-c">// over-ride only those that need to be</span>
    <span class="pl-s1">config</span><span class="pl-kos">.</span><span class="pl-c1">someUrlBase</span> <span class="pl-c1">=</span> <span class="pl-s">'https://stage-host/v1/auth'</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span> <span class="pl-k">else</span> <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">env</span> <span class="pl-c1">==</span> <span class="pl-s">'e2e'</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
    <span class="pl-s1">config</span><span class="pl-kos">.</span><span class="pl-c1">someUrlBase</span> <span class="pl-c1">=</span> <span class="pl-s">'https://e2e-host/v1/auth'</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span>
  <span class="pl-c">// don't waste time waiting for a connection or if servers don't respond within 5 seconds</span>
  <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'connectTimeout'</span><span class="pl-kos">,</span> <span class="pl-c1">5000</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'readTimeout'</span><span class="pl-kos">,</span> <span class="pl-c1">5000</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-k">return</span> <span class="pl-s1">config</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<blockquote>
<p dir="auto">Here above, you see the <a href="#karate-log"><code>karate.log()</code></a>, <a href="#karate-env"><code>karate.env</code></a> and <a href="#karate-configure"><code>karate.configure()</code></a> "helpers" being used. Note that the <code>karate-config.js</code> is re-processed for <em>every</em> <code>Scenario</code> and in rare cases, you may want to initialize (e.g. auth tokens) only once for all of your tests. This can be achieved using <a href="#karatecallsingle"><code>karate.callSingle()</code></a>.</p>
</blockquote>
<p dir="auto">A common requirement is to pass dynamic parameter values via the command line, and you can use the <a href="#karate-properties"><code>karate.properties['some.name']</code></a> syntax for getting a system property passed via JVM options in the form <code>-Dsome.name=foo</code>. Refer to the section on <a href="#dynamic-port-numbers">dynamic port numbers</a> for an example.</p>
<blockquote>
<p dir="auto">You can even retrieve operating-system environment variables via <a href="#calling-java">Java interop</a> as follows: <code>var systemPath = java.lang.System.getenv('PATH');</code></p>
</blockquote>
<p dir="auto">This decision to use JavaScript for config is influenced by years of experience with the set-up of complicated test-suites and fighting with <a href="http://maven.apache.org/guides/introduction/introduction-to-profiles.html" rel="nofollow">Maven profiles</a>, <a href="https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html" rel="nofollow">Maven resource-filtering</a> and the XML-soup that somehow gets summoned by the <a href="http://maven.apache.org/plugins/maven-antrun-plugin/usage.html" rel="nofollow">Maven AntRun plugin</a>.</p>
<p dir="auto">Karate's approach frees you from Maven, is far more expressive, allows you to eyeball all environments in one place, and is still a plain-text file.  If you want, you could even create <a href="https://stackoverflow.com/a/49693808/143475" rel="nofollow">nested chunks of JSON that 'name-space' your config variables</a>.</p>
<blockquote>
<p dir="auto">One way to appreciate Karate's approach is to think over what it takes to add a new environment-dependent variable (e.g. a password) into a test. In typical frameworks it could mean changing multiple properties files, maven profiles and placeholders, and maybe even threading the value via a dependency-injection framework - before you can even access the value within your test.</p>
</blockquote>
<p dir="auto">This approach is indeed slightly more complicated than traditional <code>*.properties</code> files - but you <em>need</em> this complexity. Keep in mind that these are tests (not production code) and this config is going to be maintained more by the dev or QE team instead of the 'ops' or operations team.</p>
<p dir="auto">And there is no more worrying about Maven profiles and whether the 'right' <code>*.properties</code> file has been copied to the proper place.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Switching the Environment</h2><a id="user-content-switching-the-environment" class="anchor" aria-label="Permalink: Switching the Environment" href="#switching-the-environment"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">There is only one thing you need to do to switch the environment - which is to set a Java system property.</p>
<blockquote>
<p dir="auto">By default, the value of <code>karate.env</code> when you access it within <a href="#karate-configjs"><code>karate-config.js</code></a> - would be <code>null</code>.</p>
</blockquote>
<p dir="auto">The recipe for doing this when running Maven from the command line is:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn test -DargLine=&quot;-Dkarate.env=e2e&quot;"><pre class="notranslate"><code>mvn test -DargLine="-Dkarate.env=e2e"
</code></pre></div>
<p dir="auto">Or in Gradle:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="./gradlew test -Dkarate.env=e2e"><pre class="notranslate"><code>./gradlew test -Dkarate.env=e2e
</code></pre></div>
<p dir="auto">You can refer to the documentation of the
<a href="http://maven.apache.org/plugins-archives/maven-surefire-plugin-2.12.4/examples/system-properties.html" rel="nofollow">Maven Surefire Plugin</a> for alternate ways of achieving this, but the <code>argLine</code> approach is the simplest and should be more than sufficient for your Continuous Integration or test-automation needs.</p>
<p dir="auto">Here's a reminder that running any <a href="https://maven.apache.org/surefire/maven-surefire-plugin/examples/single-test.html" rel="nofollow">single JUnit test via Maven</a> can be done by:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="mvn test -Dtest=CatsRunner"><pre class="notranslate"><code>mvn test -Dtest=CatsRunner
</code></pre></div>
<p dir="auto">Where <code>CatsRunner</code> is the JUnit class name (in any package) you wish to run.</p>
<p dir="auto">Karate is flexible, you can easily over-write config variables within the Java or JUnit "runner" - which is very convenient when in dev-mode or rapid-prototyping.</p>
<div class="highlight highlight-source-java notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="System.setProperty(&quot;karate.env&quot;, &quot;pre-prod&quot;);"><pre><span class="pl-smi">System</span>.<span class="pl-en">setProperty</span>(<span class="pl-s">"karate.env"</span>, <span class="pl-s">"pre-prod"</span>);</pre></div>
<p dir="auto">But the recommended way is to use the <code>karateEnv(name, value)</code> or <code>systemProperty(name, value)</code> API on the <a href="#parallel-execution">parallel-runner</a>.</p>
<p dir="auto">For advanced users, note that <a href="#tags">tags</a> and the <code>karate.env</code> environment-switch can be "linked" using the special <a href="#environment-tags">environment tags</a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Environment Specific Config</h2><a id="user-content-environment-specific-config" class="anchor" aria-label="Permalink: Environment Specific Config" href="#environment-specific-config"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When your project gets complex, you can have separate <code>karate-config-&lt;env&gt;.js</code> files that will be processed for that specific value of <a href="#switching-the-environment"><code>karate.env</code></a>. This is especially useful when you want to maintain passwords, secrets or even URL-s specific for your local dev environment.</p>
<blockquote>
<p dir="auto">Make sure you configure your source code management system (e.g. Git) to ignore <code>karate-config-*.js</code> if needed.</p>
</blockquote>
<blockquote>
<p dir="auto">There should always be <code>karate-config.js</code> in the "root" folder, even if you don't have any "common" config. In such cases, the function can do nothing or return an empty JSON. <a href="https://github.com/karatelabs/karate/issues/1588" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/1588/hovercard">Learn more</a>.</p>
</blockquote>
<p dir="auto">Here are the rules Karate uses on bootstrap (before every <code>Scenario</code> or <code>Examples</code> row in a <code>Scenario Outline</code>):</p>
<ul dir="auto">
<li>if the system-property <code>karate.config.dir</code> was set, Karate will look in this folder for <code>karate-config.js</code> - and if found, will process it</li>
<li>else if <code>karate-config.js</code> was not found in the above location (or <code>karate.config.dir</code> was not set), <a href="#configuration"><code>classpath:karate-config.js</code></a> would be processed (this is the default / common case)</li>
<li>if the <code>karate.env</code> system property was set
<ul dir="auto">
<li>if <code>karate.config.dir</code> was set, Karate will also look for <code>file:&lt;karate.config.dir&gt;/karate-config-&lt;env&gt;.js</code></li>
<li>else (if the <code>karate.config.dir</code> was <em>not</em> set), Karate will look for <code>classpath:karate-config-&lt;env&gt;.js</code></li>
</ul>
</li>
<li>if the over-ride <code>karate-config-&lt;env&gt;.js</code> exists, it will be processed, and the configuration (JSON entries) returned by this function will over-ride any set by <code>karate-config.js</code></li>
</ul>
<p dir="auto">Refer to the <a href="/karatelabs/karate/blob/master/karate-demo">karate demo</a> for an <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/karate-config-contract.js">example</a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>karate-base.js</code></h3><a id="user-content-karate-basejs" class="anchor" aria-label="Permalink: karate-base.js" href="#karate-basejs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Advanced users who build frameworks on top of Karate have the option to supply a <code>karate-base.js</code> file that Karate will look for on the <a href="#classpath"><code>classpath:</code></a>. This is useful when you ship a JAR file containing re-usable features and JavaScript / Java code and want to 'default' a few variables that teams can 'inherit' from. So an additional rule in the above flow of 'rules' (before the <em>first</em> step) is as follows:</p>
<ul dir="auto">
<li>if <code>classpath:karate-base.js</code> exists - Karate will process this as a <a href="#configuration">configuration source</a> before anything else</li>
</ul>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Syntax Guide</h1><a id="user-content-syntax-guide" class="anchor" aria-label="Permalink: Syntax Guide" href="#syntax-guide"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Script Structure</h2><a id="user-content-script-structure" class="anchor" aria-label="Permalink: Script Structure" href="#script-structure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate scripts are technically in '<a href="https://docs.cucumber.io/gherkin/reference/" rel="nofollow">Gherkin</a>' format - but all you need to grok as someone who needs to test web-services are the three sections: <code>Feature</code>, <code>Background</code> and <code>Scenario</code>. There can be multiple Scenario-s in a <code>*.feature</code> file, and at least one should be present. The <code>Background</code> is optional.</p>
<blockquote>
<p dir="auto">Variables set using <a href="#def"><code>def</code></a> in the <code>Background</code> will be re-set before <em>every</em> <code>Scenario</code>. If you are looking for a way to do something only <strong>once</strong> per <code>Feature</code>, take a look at <a href="#callonce"><code>callonce</code></a>. On the other hand, if you are expecting a variable in the <code>Background</code> to be modified by one <code>Scenario</code> so that later ones can see the updated value - that is <em>not</em> how you should think of them, and you should combine your 'flow' into one scenario. Keep in mind that you should be able to comment-out a <code>Scenario</code> or skip some via <a href="#tags"><code>tags</code></a> without impacting any others. Note that the <a href="#parallel-execution">parallel runner</a> will run <code>Scenario</code>-s in parallel, which means they can run in <em>any</em> order. If you are looking for ways to do something only <em>once</em> per feature or across <em>all</em> your tests, see <a href="#hooks">Hooks</a>.</p>
</blockquote>
<p dir="auto">Lines that start with a <code>#</code> are comments.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature: brief description of what is being tested
    more lines of description if needed.

Background:
  # this section is optional !
  # steps here are executed before each Scenario in this file
  # variables defined here will be 'global' to all scenarios
  # and will be re-initialized before every scenario

Scenario: brief description of this scenario
  # steps for this scenario

Scenario: a different scenario
  # steps for this other scenario"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> brief description of what is being tested</span>
    more lines of description if needed.

<span class="pl-k">Background</span>:
<span class="pl-c">  # this section is optional !</span>
<span class="pl-c">  # steps here are executed before each Scenario in this file</span>
<span class="pl-c">  # variables defined here will be 'global' to all scenarios</span>
<span class="pl-c">  # and will be re-initialized before every scenario</span>

<span class="pl-k">Scenario</span>:<span class="pl-s"> brief description of this scenario</span>
<span class="pl-c">  # steps for this scenario</span>

<span class="pl-k">Scenario</span>:<span class="pl-s"> a different scenario</span>
<span class="pl-c">  # steps for this other scenario</span></pre></div>
<blockquote>
<p dir="auto">There is also a variant of <code>Scenario</code> called <code>Scenario Outline</code> along with <code>Examples</code>, useful for <a href="#data-driven-tests">data-driven tests</a>.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Given-When-Then</h3><a id="user-content-given-when-then" class="anchor" aria-label="Permalink: Given-When-Then" href="#given-when-then"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The business of web-services testing requires access to low-level aspects such as HTTP headers, URL-paths, query-parameters, complex JSON or XML payloads and response-codes. And Karate gives you control over these aspects with the small set of keywords focused on HTTP such as <a href="#url"><code>url</code></a>, <a href="#path"><code>path</code></a>, <a href="#param"><code>param</code></a>, etc.</p>
<p dir="auto">Karate does not attempt to have tests be in "natural language" like how Cucumber tests are <a href="https://docs.cucumber.io/gherkin/reference/" rel="nofollow">traditionally expected to be</a>. That said, the syntax is very concise, and the convention of every step having to start with either <code>Given</code>, <code>And</code>, <code>When</code> or <code>Then</code>, makes things very readable. You end up with a decent approximation of BDD even though web-services by nature are "headless", without a UI, and not really human-friendly.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">Cucumber vs Karate</h4><a id="user-content-cucumber-vs-karate" class="anchor" aria-label="Permalink: Cucumber vs Karate" href="#cucumber-vs-karate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">Karate was based on Cucumber-JVM until version 0.8.0 but the parser and engine were <a href="https://github.com/karatelabs/karate/issues/444" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/444/hovercard">re-written from scratch</a> in 0.9.0 onwards. So we use the same <a href="https://docs.cucumber.io/gherkin/" rel="nofollow">Gherkin</a> syntax - but the similarity ends there.</p>
</blockquote>
<p dir="auto">If you are familiar with Cucumber (JVM), you may be wondering if you need to write <a href="https://docs.cucumber.io/gherkin/step-organization/" rel="nofollow">step-definitions</a>. The answer is <strong>no</strong>.</p>
<p dir="auto">Karate's approach is that all the step-definitions you need in order to work with HTTP, JSON and XML have been already implemented. And since you can easily extend Karate <a href="#call">using JavaScript</a>, there is no need to compile Java code any more.</p>
<p dir="auto">The following table summarizes some key differences between Cucumber and Karate.</p>
<table>
<thead>
<tr>
<th>▫️</th>
<th>Cucumber</th>
<th>Karate</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Step Definitions Built-In</strong></td>
<td><strong>No</strong>. You need to keep implementing them as your functionality grows. <a href="https://thepracticaldeveloper.com/2017/08/03/microservices-end-to-end-tests-with-cucumber-and-spring-boot/" rel="nofollow">This can get very tedious</a>, especially since for <a href="https://docs.cucumber.io/cucumber/state/#dependency-injection" rel="nofollow">dependency-injection</a>, you are <a href="http://angiejones.tech/rest-assured-with-cucumber-using-bdd-for-web-services-automation?refreshed=y#comment-40" rel="nofollow">on your own</a>.</td>
<td>✅ <strong>Yes</strong>. No extra Java code needed.</td>
</tr>
<tr>
<td><strong>Single Layer of Code To Maintain</strong></td>
<td><strong>No</strong>. There are 2 Layers. The <a href="https://docs.cucumber.io/gherkin/reference/" rel="nofollow">Gherkin</a> spec or <code>*.feature</code> files make up one layer, and you will also have the corresponding Java step-definitions.</td>
<td>✅ <strong>Yes</strong>. Only 1 layer of Karate-script (based on Gherkin).</td>
</tr>
<tr>
<td><strong>Readable Specification</strong></td>
<td><strong>Yes</strong>. Cucumber will read like natural language <em>if</em> you implement the step-definitions right.</td>
<td>❌ <strong>No</strong>. Although Karate is simple, and a <a href="https://ayende.com/blog/2984/dsl-vs-fluent-interface-compare-contrast" rel="nofollow">true DSL</a>, it is ultimately a <a href="https://hackernoon.com/yes-karate-is-not-true-bdd-698bf4a9be39" rel="nofollow">mini-programming language</a>. But it is <a href="https://stackoverflow.com/a/47799207/143475" rel="nofollow">perfect for testing web-services</a> at the level of HTTP requests and responses.</td>
</tr>
<tr>
<td><strong>Re-Use Feature Files</strong></td>
<td><strong>No</strong>. Cucumber does not support being able to call (and thus re-use) other <code>*.feature</code> files from a test-script.</td>
<td>✅ <a href="#calling-other-feature-files"><strong>Yes</strong></a>.</td>
</tr>
<tr>
<td><strong>Dynamic Data-Driven Testing</strong></td>
<td><strong>No</strong>. Cucumber's <a href="#the-cucumber-way"><code>Scenario Outline</code></a> expects the <code>Examples</code> to contain a fixed set of rows.</td>
<td>✅ <strong>Yes</strong>. Karate's support for calling other <code>*.feature</code> files allows you to use a <a href="#data-driven-features">JSON array as the data-source</a> and you can <a href="https://twitter.com/KarateDSL/status/1051433711814627329" rel="nofollow">use JSON</a> or <a href="#csv-files">even CSV</a> directly in a data-driven <code>Scenario Outline</code>.</td>
</tr>
<tr>
<td><strong>Parallel Execution</strong></td>
<td><strong>No</strong>. There are some challenges (especially with reporting) and you can find various discussions and third-party projects on the web that attempt to close this gap</td>
<td>✅ <a href="#parallel-execution"><strong>Yes</strong></a>. Karate runs even <code>Scenario</code>-s in parallel, not just <code>Feature</code>-s.</td>
</tr>
<tr>
<td><strong>Run 'Set-Up' Routines Only Once</strong></td>
<td><strong>No</strong>. Cucumber has a limitation where <code>Background</code> steps are re-run for every <code>Scenario</code> and worse - even for every <code>Examples</code> row within a <code>Scenario Outline</code>. This has been a <a href="https://github.com/cucumber/cucumber-jvm/issues/515" data-hovercard-type="issue" data-hovercard-url="/cucumber/cucumber-jvm/issues/515/hovercard">highly-requested open issue</a> for a <em>long</em> time.</td>
<td>✅ <a href="#hooks"><strong>Yes</strong></a>.</td>
</tr>
<tr>
<td><strong>Embedded JavaScript Engine</strong></td>
<td><strong>No</strong>. And you have to roll your own approach to environment-specific configuration and worry about <a href="https://docs.cucumber.io/cucumber/state/#dependency-injection" rel="nofollow">dependency-injection</a>.</td>
<td>✅ <strong>Yes</strong>. Easily define all environments in a <a href="#configuration">single file</a> and share variables across all scenarios. Full script-ability via <a href="#calling-javascript-functions">JS</a> or <a href="#java-interop">Java interop</a>.</td>
</tr>
</tbody>
</table>
<p dir="auto">One nice thing about the design of the Gherkin syntax is that script-steps are treated the same no matter whether they start with the keyword <code>Given</code>, <code>And</code>, <code>When</code> or <code>Then</code>.  What this means is that you are free to use whatever makes sense for you.  You could even have all the steps start with <code>When</code> and Karate won't care.</p>
<p dir="auto">In fact Gherkin supports the <a href="https://www.relishapp.com/cucumber/cucumber/docs/gherkin/using-star-notation-instead-of-given-when-then" rel="nofollow">catch-all symbol '<code>*</code>'</a> - instead of forcing you to use <code>Given</code>, <code>When</code> or <code>Then</code>. This is perfect for those cases where it really doesn't make sense - for example the <a href="#script-structure"><code>Background</code></a> section or when you use the <a href="#def"><code>def</code></a> or <a href="#set"><code>set</code></a> syntax. When eyeballing a test-script, think of the <code>*</code> as a 'bullet-point'.</p>
<p dir="auto">You can read more about the Given-When-Then convention at the <a href="https://docs.cucumber.io/gherkin/reference/" rel="nofollow">Cucumber reference documentation</a>. Since Karate uses Gherkin, you can also employ <a href="#data-driven-tests">data-driven</a> techniques such as expressing data-tables in test scripts. Another good thing that Karate inherits is the nice IDE support for Cucumber that <a href="https://www.jetbrains.com/idea/help/cucumber.html" rel="nofollow">IntelliJ</a> and <a href="https://cucumber.io/cucumber-eclipse/" rel="nofollow">Eclipse</a> have. So you can do things like right-click and run a <code>*.feature</code> file (or scenario) without needing to use a JUnit runner.</p>
<p dir="auto">For a detailed discussion on BDD and how Karate relates to Cucumber, please refer to this blog-post: <a href="https://medium.com/@ptrthomas/yes-karate-is-not-true-bdd-698bf4a9be39" rel="nofollow">Yes, Karate is not <em>true</em> BDD</a>. It is the opinion of the author of Karate that <em>true</em> BDD is un-necessary over-kill for API testing, and this is explained more in <a href="https://stackoverflow.com/a/47799207/143475" rel="nofollow">this answer</a> on <a href="https://stackoverflow.com/questions/tagged/karate" rel="nofollow">Stack Overflow</a>.</p>
<p dir="auto">With the formalities out of the way, let's dive straight into the syntax.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Setting and Using Variables</h1><a id="user-content-setting-and-using-variables" class="anchor" aria-label="Permalink: Setting and Using Variables" href="#setting-and-using-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>def</code></h2><a id="user-content-def" class="anchor" aria-label="Permalink: def" href="#def"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Set a named variable</h3><a id="user-content-set-a-named-variable" class="anchor" aria-label="Permalink: Set a named variable" href="#set-a-named-variable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# assigning a string value:
Given def myVar = 'world'

# using a variable
Then print myVar

# assigning a number (you can use '*' instead of Given / When / Then)
* def myNum = 5"><pre><span class="pl-c"># assigning a string value:</span>
<span class="pl-k">Given </span>def myVar = <span class="pl-s">'world'</span>

<span class="pl-c"># using a variable</span>
<span class="pl-k">Then </span>print myVar

<span class="pl-c"># assigning a number (you can use '*' instead of Given / When / Then)</span>
<span class="pl-k">* </span>def myNum = 5</pre></div>
<p dir="auto">Note that <code>def</code> will over-write any variable that was using the same name earlier. Keep in mind that the start-up <a href="#configuration">configuration routine</a> could have already initialized some variables before the script even started. For details of scope and visibility of variables, see <a href="#script-structure">Script Structure</a>.</p>
<blockquote>
<p dir="auto">Note that <code>url</code> and <code>request</code> are not allowed as variable names. This is just to reduce confusion for users new to Karate who tend to do <code>* def request = {}</code> and expect the <a href="#request"><code>request</code></a> body or similarly, the <a href="#url"><code>url</code></a> to be set.</p>
</blockquote>
<p dir="auto">The examples above are simple, but a variety of expression 'shapes' are supported on the right hand side of the <code>=</code> symbol. The section on <a href="#karate-expressions">Karate Expressions</a> goes into the details.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>assert</code></h2><a id="user-content-assert" class="anchor" aria-label="Permalink: assert" href="#assert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Assert if an expression evaluates to <code>true</code></h3><a id="user-content-assert-if-an-expression-evaluates-to-true" class="anchor" aria-label="Permalink: Assert if an expression evaluates to true" href="#assert-if-an-expression-evaluates-to-true"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Once defined, you can refer to a variable by name. Expressions are evaluated using the embedded JavaScript engine. The assert keyword can be used to assert that an expression returns a boolean value.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given def color = 'red '
And def num = 5
Then assert color + num == 'red 5'"><pre><span class="pl-k">Given </span>def color = <span class="pl-s">'red '</span>
<span class="pl-k">And </span>def num = 5
<span class="pl-k">Then </span>assert color + num == <span class="pl-s">'red 5'</span></pre></div>
<p dir="auto">Everything to the right of the <code>assert</code> keyword will be evaluated as a single expression.</p>
<p dir="auto">Something worth mentioning here is that you would hardly need to use <code>assert</code> in your test scripts. Instead you would typically use the <a href="#match"><code>match</code></a> keyword, that is designed for performing powerful assertions against JSON and XML response payloads.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>print</code></h2><a id="user-content-print" class="anchor" aria-label="Permalink: print" href="#print"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Log to the console</h3><a id="user-content-log-to-the-console" class="anchor" aria-label="Permalink: Log to the console" href="#log-to-the-console"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You can use <code>print</code> to log variables to the console in the middle of a script. For convenience, you can have multiple expressions separated by commas, so this is the recommended pattern:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* print 'the value of a is:', a"><pre><span class="pl-k">* </span>print <span class="pl-s">'the value of a is:'</span>, a</pre></div>
<p dir="auto">Similar to <a href="#assert"><code>assert</code></a>, the expressions on the right-hand-side of a <code>print</code> have to be valid JavaScript. JsonPath and <a href="#karate-expressions">Karate expressions</a> are not supported.</p>
<p dir="auto">If you use commas (instead of concatenating strings using <code>+</code>), Karate will 'pretty-print' variables, which is what you typically want when dealing with <a href="#native-data-types">JSON or XML</a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def myJson = { foo: 'bar', baz: [1, 2, 3] }
* print 'the value of myJson is:', myJson"><pre><span class="pl-k">* </span>def myJson = { foo: <span class="pl-s">'bar'</span>, baz: [1, 2, 3] }
<span class="pl-k">* </span>print <span class="pl-s">'the value of myJson is:'</span>, myJson</pre></div>
<p dir="auto">Which results in the following output:</p>
<div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="20:29:11.290 [main] INFO  com.intuit.karate - [print] the value of myJson is: {
  &quot;foo&quot;: &quot;bar&quot;,
  &quot;baz&quot;: [
    1,
    2,
    3
  ]
}"><pre class="notranslate"><code>20:29:11.290 [main] INFO  com.intuit.karate - [print] the value of myJson is: {
  "foo": "bar",
  "baz": [
    1,
    2,
    3
  ]
}
</code></pre></div>
<blockquote>
<p dir="auto">Since XML is represented internally as a JSON-like or map-like object, if you perform string concatenation when printing, you will <em>not</em> see XML - which can be confusing at first. Use the comma-delimited form (see above) or the JS helper (see below).</p>
</blockquote>
<p dir="auto">The built-in <a href="#the-karate-object"><code>karate</code> object</a> is explained in detail later, but for now, note that this is also injected into <code>print</code> (and even <code>assert</code>) statements, and it has a helpful <a href="#karate-pretty"><code>pretty</code></a> method, that takes a JSON argument and a <a href="#karate-prettyxml"><code>prettyXml</code></a> method that deals with XML. So you could have also done something like:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* print 'the value of myJson is:\n' + karate.pretty(myJson)"><pre><span class="pl-k">* </span>print <span class="pl-s">'the value of myJson is:<span class="pl-cce">\n</span>'</span> + karate.pretty(myJson)</pre></div>
<p dir="auto">Also refer to the <a href="#configure"><code>configure</code></a> keyword on how to switch on pretty-printing of all HTTP requests and responses.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">'Native' data types</h1><a id="user-content-native-data-types" class="anchor" aria-label="Permalink: 'Native' data types" href="#native-data-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Native data types mean that you can insert them into a script without having to worry about enclosing them in strings and then having to 'escape' double-quotes all over the place. They seamlessly fit 'in-line' within your test script.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">JSON</h2><a id="user-content-json" class="anchor" aria-label="Permalink: JSON" href="#json"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Note that the parser is 'lenient' so that you don't have to enclose all keys in double-quotes.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def cat = { name: 'Billie', scores: [2, 5] }
* assert cat.scores[1] == 5"><pre><span class="pl-k">* </span>def cat = { name: <span class="pl-s">'Billie'</span>, scores: [2, 5] }
<span class="pl-k">* </span>assert cat.scores[1] == 5</pre></div>
<blockquote>
<p dir="auto">Some characters such as the hyphen <code>-</code> are not permitted in 'lenient' JSON keys (because they are interpreted by the JS engine as a 'minus sign'). In such cases, you <em>have</em> to use string quotes: <code>{ 'Content-Type': 'application/json' }</code></p>
</blockquote>
<p dir="auto">When asserting for expected values in JSON or XML, always prefer using <a href="#match"><code>match</code></a> instead of <a href="#assert"><code>assert</code></a>. Match failure messages are much more descriptive and useful, and you get the power of <a href="#embedded-expressions">embedded expressions</a> and <a href="#fuzzy-matching">fuzzy matching</a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def cats = [{ name: 'Billie' }, { name: 'Bob' }]
* match cats[1] == { name: 'Bob' }"><pre><span class="pl-k">* </span>def cats = [{ name: <span class="pl-s">'Billie'</span> }, { name: <span class="pl-s">'Bob'</span> }]
<span class="pl-k">* </span>match cats[1] == { name: <span class="pl-s">'Bob'</span> }</pre></div>
<p dir="auto">Karate's native support for JSON means that you can assign parts of a JSON instance into another variable, which is useful when dealing with complex <a href="#response"><code>response</code></a> payloads.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def first = cats[0]
* match first == { name: 'Billie' }"><pre><span class="pl-k">* </span>def first = cats[0]
<span class="pl-k">* </span>match first == { name: <span class="pl-s">'Billie'</span> }</pre></div>
<p dir="auto">For manipulating or updating JSON (or XML) using path expressions, refer to the <a href="#set"><code>set</code></a> keyword.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">XML</h2><a id="user-content-xml" class="anchor" aria-label="Permalink: XML" href="#xml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given def cat = &lt;cat&gt;&lt;name&gt;Billie&lt;/name&gt;&lt;scores&gt;&lt;score&gt;2&lt;/score&gt;&lt;score&gt;5&lt;/score&gt;&lt;/scores&gt;&lt;/cat&gt;
# sadly, xpath list indexes start from 1
Then match cat/cat/scores/score[2] == '5'
# but karate allows you to traverse xml like json !!
Then match cat.cat.scores.score[1] == 5"><pre><span class="pl-k">Given </span>def cat = <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Billie<span class="pl-smi">&lt;/name&gt;&lt;scores&gt;&lt;score&gt;</span>2<span class="pl-smi">&lt;/score&gt;&lt;score&gt;</span>5<span class="pl-smi">&lt;/score&gt;&lt;/scores&gt;&lt;/cat&gt;</span>
<span class="pl-c"># sadly, xpath list indexes start from 1</span>
<span class="pl-k">Then </span>match cat/cat/scores/score[2] == <span class="pl-s">'5'</span>
<span class="pl-c"># but karate allows you to traverse xml like json !!</span>
<span class="pl-k">Then </span>match cat.cat.scores.score[1] == 5</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Embedded Expressions</h3><a id="user-content-embedded-expressions" class="anchor" aria-label="Permalink: Embedded Expressions" href="#embedded-expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate has a very useful payload 'templating' approach. Variables can be referred to within JSON, for example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given def user = { name: 'john', age: 21 }
And def lang = 'en'
When def session = { name: '#(user.name)', locale: '#(lang)', sessionUser: '#(user)'  }"><pre><span class="pl-k">Given </span>def user = { name: <span class="pl-s">'john'</span>, age: 21 }
<span class="pl-k">And </span>def lang = <span class="pl-s">'en'</span>
<span class="pl-k">When </span>def session = { name: <span class="pl-s">'#(user.name)'</span>, locale: <span class="pl-s">'#(lang)'</span>, sessionUser: <span class="pl-s">'#(user)'</span>  }</pre></div>
<p dir="auto">So the rule is - if a string value within a JSON (or XML) object declaration is enclosed between <code>#(</code> and <code>)</code> - it will be evaluated as a JavaScript expression. And any variables which are alive in the context can be used in this expression. Here's how it works for XML:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given def user = &lt;user&gt;&lt;name&gt;john&lt;/name&gt;&lt;/user&gt;
And def lang = 'en'
When def session = &lt;session&gt;&lt;locale&gt;#(lang)&lt;/locale&gt;&lt;sessionUser&gt;#(user)&lt;/sessionUser&gt;&lt;/session&gt;"><pre><span class="pl-k">Given </span>def user = <span class="pl-smi">&lt;user&gt;&lt;name&gt;</span>john<span class="pl-smi">&lt;/name&gt;&lt;/user&gt;</span>
<span class="pl-k">And </span>def lang = <span class="pl-s">'en'</span>
<span class="pl-k">When </span>def session = <span class="pl-smi">&lt;session&gt;&lt;locale&gt;</span><span class="pl-c">#(lang)&lt;/locale&gt;&lt;sessionUser&gt;#(user)&lt;/sessionUser&gt;&lt;/session&gt;</span></pre></div>
<p dir="auto">This comes in useful in some cases - and avoids needing to use the <a href="#set"><code>set</code></a> keyword or <a href="#javascript-functions">JavaScript functions</a> to manipulate JSON. So you get the best of both worlds: the elegance of JSON to express complex nested data - while at the same time being able to dynamically plug values (that could even be other JSON or XML 'trees') into a 'template'.</p>
<p dir="auto">Note that embedded expressions will be evaluated even when you <a href="#reading-files"><code>read()</code> from a JSON or XML file</a>. This is super-useful for re-use and data-driven tests.</p>
<p dir="auto">A few special built-in variables such as <code>$</code> (which is a <a href="#referring-to-self">reference to the JSON root</a>) - can be mixed into JSON embedded expressions.</p>
<p dir="auto">A <a href="#remove-if-null">special case</a> of embedded expressions can remove a JSON key (or XML element / attribute) if the expression evaluates to <code>null</code>.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">Rules for Embedded Expressions</h4><a id="user-content-rules-for-embedded-expressions" class="anchor" aria-label="Permalink: Rules for Embedded Expressions" href="#rules-for-embedded-expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<ul dir="auto">
<li>They work only within JSON or XML</li>
<li>and when on the Right Hand Side of a
<ul dir="auto">
<li><a href="#def"><code>def</code></a></li>
<li><a href="#match"><code>match</code></a></li>
<li><a href="#configure"><code>configure</code></a></li>
</ul>
</li>
<li>and when you <a href="#reading-files"><code>read()</code></a> a JSON or XML file</li>
<li>the expression <em>has</em> to start with <code>#(</code> and end with <code>)</code></li>
</ul>
<p dir="auto">Because of the last rule above, note that string-concatenation may not work quite the way you expect:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# wrong !
* def foo = { bar: 'hello #(name)' }
# right !
* def foo = { bar: '#(&quot;hello &quot; + name)' }"><pre><span class="pl-c"># wrong !</span>
<span class="pl-k">* </span>def foo = { bar: <span class="pl-s">'hello #(name)'</span> }
<span class="pl-c"># right !</span>
<span class="pl-k">* </span>def foo = { bar: <span class="pl-s">'#("hello " + name)'</span> }</pre></div>
<p dir="auto">Observe how you can achieve string concatenation if you really want, because any valid JavaScript expression can be stuffed within an embedded expression. You could always do this in two steps:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def temp = 'hello ' + name
* def foo = { bar: '#(temp)' }"><pre><span class="pl-k">* </span>def temp = <span class="pl-s">'hello '</span> + name
<span class="pl-k">* </span>def foo = { bar: <span class="pl-s">'#(temp)'</span> }</pre></div>
<p dir="auto">As a convenience, embedded expressions are supported on the Right Hand Side of a <a href="#match"><code>match</code></a> statement even for "quoted string" literals:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = 'a1'
* match foo == '#(&quot;a&quot; + 1)'"><pre><span class="pl-k">* </span>def foo = <span class="pl-s">'a1'</span>
<span class="pl-k">* </span>match foo == <span class="pl-s">'#("a" + 1)'</span></pre></div>
<p dir="auto">And do note that in Karate 1.0 onwards, ES6 string-interpolation within "backticks" is supported:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* param filter = `ORDER_DATE:&quot;${todaysDate}&quot;`"><pre><span class="pl-k">* </span>param filter = `ORDER_DATE:<span class="pl-s">"${todaysDate}"</span>`</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Enclosed JavaScript</h3><a id="user-content-enclosed-javascript" class="anchor" aria-label="Permalink: Enclosed JavaScript" href="#enclosed-javascript"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">An alternative to embedded expressions (for JSON only) is to enclose the entire payload within parentheses - which tells Karate to evaluate it as pure JavaScript. This can be a lot simpler than embedded expressions in many cases, and JavaScript programmers will feel right at home.</p>
<p dir="auto">The example below shows the difference between embedded expressions and enclosed JavaScript:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="When def user = { name: 'john', age: 21 }
And def lang = 'en'

* def embedded = { name: '#(user.name)', locale: '#(lang)', sessionUser: '#(user)' }
* def enclosed = ({ name: user.name, locale: lang, sessionUser: user })
* match embedded == enclosed"><pre><span class="pl-k">When </span>def user = { name: <span class="pl-s">'john'</span>, age: 21 }
<span class="pl-k">And </span>def lang = <span class="pl-s">'en'</span>

<span class="pl-k">* </span>def embedded = { name: <span class="pl-s">'#(user.name)'</span>, locale: <span class="pl-s">'#(lang)'</span>, sessionUser: <span class="pl-s">'#(user)'</span> }
<span class="pl-k">* </span>def enclosed = ({ name: user.name, locale: lang, sessionUser: user })
<span class="pl-k">* </span>match embedded == enclosed</pre></div>
<blockquote>
<p dir="auto">So how would you choose between the two approaches to create JSON ? <a href="#embedded-expressions">Embedded expressions</a> are useful when you have complex JSON <a href="#reading-files"><code>read</code></a> from files, because you can auto-replace (or even <a href="#remove-if-null">remove</a>) data-elements with values dynamically evaluated from variables. And the JSON will still be 'well-formed', and editable in your IDE or text-editor. Embedded expressions also make more sense in <a href="#ignore-or-validate">validation</a> and <a href="#schema-validation">schema-like</a> short-cut situations. It can also be argued that the <code>#</code> symbol is easy to spot when eyeballing your test scripts - which makes things more readable and clear.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Multi-Line Expressions</h3><a id="user-content-multi-line-expressions" class="anchor" aria-label="Permalink: Multi-Line Expressions" href="#multi-line-expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The keywords <a href="#def"><code>def</code></a>, <a href="#set"><code>set</code></a>, <a href="#match"><code>match</code></a>, <a href="#request"><code>request</code></a> and <a href="#eval"><code>eval</code></a> take multi-line input as the last argument. This is useful when you want to express a one-off lengthy snippet of text in-line, without having to split it out into a separate <a href="#reading-files">file</a>. Note how triple-quotes (<code>"""</code>) are used to enclose content. Here are some examples:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# instead of:
* def cat = &lt;cat&gt;&lt;name&gt;Billie&lt;/name&gt;&lt;scores&gt;&lt;score&gt;2&lt;/score&gt;&lt;score&gt;5&lt;/score&gt;&lt;/scores&gt;&lt;/cat&gt;

# this is more readable:
* def cat = 
  &quot;&quot;&quot;
  &lt;cat&gt;
      &lt;name&gt;Billie&lt;/name&gt;
      &lt;scores&gt;
          &lt;score&gt;2&lt;/score&gt;
          &lt;score&gt;5&lt;/score&gt;
      &lt;/scores&gt;
  &lt;/cat&gt;
  &quot;&quot;&quot;
# example of a request payload in-line
Given request 
  &quot;&quot;&quot; 
  &lt;?xml version='1.0' encoding='UTF-8'?&gt;
  &lt;S:Envelope xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
  &lt;S:Body&gt;
  &lt;ns2:QueryUsageBalance xmlns:ns2=&quot;http://www.mycompany.com/usage/V1&quot;&gt;
      &lt;ns2:UsageBalance&gt;
          &lt;ns2:LicenseId&gt;12341234&lt;/ns2:LicenseId&gt;
      &lt;/ns2:UsageBalance&gt;
  &lt;/ns2:QueryUsageBalance&gt;
  &lt;/S:Body&gt;
  &lt;/S:Envelope&gt;
  &quot;&quot;&quot;

# example of a payload assertion in-line
Then match response ==
  &quot;&quot;&quot;
  { id: { domain: &quot;DOM&quot;, type: &quot;entityId&quot;, value: &quot;#ignore&quot; },
    created: { on: &quot;#ignore&quot; }, 
    lastUpdated: { on: &quot;#ignore&quot; },
    entityState: &quot;ACTIVE&quot;
  }
  &quot;&quot;&quot;"><pre><span class="pl-c"># instead of:</span>
<span class="pl-k">* </span>def cat = <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Billie<span class="pl-smi">&lt;/name&gt;&lt;scores&gt;&lt;score&gt;</span>2<span class="pl-smi">&lt;/score&gt;&lt;score&gt;</span>5<span class="pl-smi">&lt;/score&gt;&lt;/scores&gt;&lt;/cat&gt;</span>

<span class="pl-c"># this is more readable:</span>
<span class="pl-k">* </span>def cat = 
  <span class="pl-s">"""</span>
<span class="pl-s">  &lt;cat&gt;</span>
<span class="pl-s">      &lt;name&gt;Billie&lt;/name&gt;</span>
<span class="pl-s">      &lt;scores&gt;</span>
<span class="pl-s">          &lt;score&gt;2&lt;/score&gt;</span>
<span class="pl-s">          &lt;score&gt;5&lt;/score&gt;</span>
<span class="pl-s">      &lt;/scores&gt;</span>
<span class="pl-s">  &lt;/cat&gt;</span>
<span class="pl-s">  """</span>
<span class="pl-c"># example of a request payload in-line</span>
<span class="pl-k">Given </span>request 
  <span class="pl-s">""" </span>
<span class="pl-s">  &lt;?xml version='1.0' encoding='UTF-8'?&gt;</span>
<span class="pl-s">  &lt;S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/"&gt;</span>
<span class="pl-s">  &lt;S:Body&gt;</span>
<span class="pl-s">  &lt;ns2:QueryUsageBalance xmlns:ns2="http://www.mycompany.com/usage/V1"&gt;</span>
<span class="pl-s">      &lt;ns2:UsageBalance&gt;</span>
<span class="pl-s">          &lt;ns2:LicenseId&gt;12341234&lt;/ns2:LicenseId&gt;</span>
<span class="pl-s">      &lt;/ns2:UsageBalance&gt;</span>
<span class="pl-s">  &lt;/ns2:QueryUsageBalance&gt;</span>
<span class="pl-s">  &lt;/S:Body&gt;</span>
<span class="pl-s">  &lt;/S:Envelope&gt;</span>
<span class="pl-s">  """</span>

<span class="pl-c"># example of a payload assertion in-line</span>
<span class="pl-k">Then </span>match response ==
  <span class="pl-s">"""</span>
<span class="pl-s">  { id: { domain: "DOM", type: "entityId", value: "#ignore" },</span>
<span class="pl-s">    created: { on: "#ignore" }, </span>
<span class="pl-s">    lastUpdated: { on: "#ignore" },</span>
<span class="pl-s">    entityState: "ACTIVE"</span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>table</code></h2><a id="user-content-table" class="anchor" aria-label="Permalink: table" href="#table"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">A simple way to create JSON Arrays</h3><a id="user-content-a-simple-way-to-create-json-arrays" class="anchor" aria-label="Permalink: A simple way to create JSON Arrays" href="#a-simple-way-to-create-json-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Now that we have seen how JSON is a 'native' data type that Karate understands, there is a very nice way to create JSON using the support for expressing <a href="http://www.thinkcode.se/blog/2014/06/30/cucumber-data-tables" rel="nofollow">data-tables</a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* table cats
  | name   | age |
  | 'Bob'  | 2   |
  | 'Wild' | 4   |
  | 'Nyan' | 3   |

* match cats == [{name: 'Bob', age: 2}, {name: 'Wild', age: 4}, {name: 'Nyan', age: 3}]"><pre><span class="pl-k">* </span>table cats
<span class="pl-k">  | <span class="pl-s1">name</span>   | <span class="pl-s1">age</span> |</span>
<span class="pl-k">  | '<span class="pl-s1">Bob</span>'  | <span class="pl-s1">2</span>   |</span>
<span class="pl-k">  | '<span class="pl-s1">Wild</span>' | <span class="pl-s1">4</span>   |</span>
<span class="pl-k">  | '<span class="pl-s1">Nyan</span>' | <span class="pl-s1">3</span>   |</span>

<span class="pl-k">* </span>match cats == [{name: <span class="pl-s">'Bob'</span>, age: 2}, {name: <span class="pl-s">'Wild'</span>, age: 4}, {name: <span class="pl-s">'Nyan'</span>, age: 3}]</pre></div>
<p dir="auto">The <a href="#match"><code>match</code></a> keyword is explained later, but it should be clear right away how convenient the <code>table</code> keyword is. JSON can be combined with the ability to <a href="#data-driven-features">call other <code>*.feature</code> files</a> to achieve dynamic data-driven testing in Karate.</p>
<p dir="auto">Notice that in the above example, string values within the table need to be enclosed in quotes. Otherwise they would be evaluated as expressions - which does come in useful for some dynamic data-driven situations:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def one = 'hello'
* def two = { baz: 'world' }
* table json
  | foo     | bar            |
  | one     | { baz: 1 }     |
  | two.baz | ['baz', 'ban'] |
* match json == [{ foo: 'hello', bar: { baz: 1 } }, { foo: 'world', bar: ['baz', 'ban'] }]"><pre><span class="pl-k">* </span>def one = <span class="pl-s">'hello'</span>
<span class="pl-k">* </span>def two = { baz: <span class="pl-s">'world'</span> }
<span class="pl-k">* </span>table json
<span class="pl-k">  | <span class="pl-s1">foo</span>     | <span class="pl-s1">bar</span>            |</span>
<span class="pl-k">  | <span class="pl-s1">one</span>     | { <span class="pl-s1">baz</span>: <span class="pl-s1">1</span> }     |</span>
<span class="pl-k">  | <span class="pl-s1">two</span>.<span class="pl-s1">baz</span> | ['<span class="pl-s1">baz</span>', '<span class="pl-s1">ban</span>'] |</span>
<span class="pl-k">* </span>match json == [{ foo: <span class="pl-s">'hello'</span>, bar: { baz: 1 } }, { foo: <span class="pl-s">'world'</span>, bar: [<span class="pl-s">'baz'</span>, <span class="pl-s">'ban'</span>] }]</pre></div>
<p dir="auto">Yes, you can even nest chunks of JSON in tables, and things work as you would expect.</p>
<p dir="auto">Empty cells or expressions that evaluate to <code>null</code> will result in the key being omitted from the JSON. To force a <code>null</code> value, wrap it in parentheses:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def one = { baz: null }
* table json
  | foo     | bar    |
  | 'hello' |        |
  | one.baz | (null) |
  | 'world' | null   |
* match json == [{ foo: 'hello' }, { bar: null }, { foo: 'world' }]"><pre><span class="pl-k">* </span>def one = { baz: null }
<span class="pl-k">* </span>table json
<span class="pl-k">  | <span class="pl-s1">foo</span>     | <span class="pl-s1">bar</span>    |</span>
<span class="pl-k">  | '<span class="pl-s1">hello</span>' |        |</span>
<span class="pl-k">  | <span class="pl-s1">one</span>.<span class="pl-s1">baz</span> | (<span class="pl-s1">null</span>) |</span>
<span class="pl-k">  | '<span class="pl-s1">world</span>' | <span class="pl-s1">null</span>   |</span>
<span class="pl-k">* </span>match json == [{ foo: <span class="pl-s">'hello'</span> }, { bar: null }, { foo: <span class="pl-s">'world'</span> }]</pre></div>
<p dir="auto">An alternate way to create data is using the <a href="#set-multiple"><code>set</code> multiple</a> syntax. It is actually a 'transpose' of the <code>table</code> approach, and can be very convenient when there are a large number of keys per row or if the nesting is complex. Here is an example of what is possible:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* set search
  | path       | 0        | 1      | 2       |
  | name.first | 'John'   | 'Jane' |         |
  | name.last  | 'Smith'  | 'Doe'  | 'Waldo' |
  | age        | 20       |        |         |

* match search[0] == { name: { first: 'John', last: 'Smith' }, age: 20 }
* match search[1] == { name: { first: 'Jane', last: 'Doe' } }
* match search[2] == { name: { last: 'Waldo' } }"><pre><span class="pl-k">* </span>set search
<span class="pl-k">  | <span class="pl-s1">path</span>       | <span class="pl-s1">0</span>        | <span class="pl-s1">1</span>      | <span class="pl-s1">2</span>       |</span>
<span class="pl-k">  | <span class="pl-s1">name</span>.<span class="pl-s1">first</span> | '<span class="pl-s1">John</span>'   | '<span class="pl-s1">Jane</span>' |         |</span>
<span class="pl-k">  | <span class="pl-s1">name</span>.<span class="pl-s1">last</span>  | '<span class="pl-s1">Smith</span>'  | '<span class="pl-s1">Doe</span>'  | '<span class="pl-s1">Waldo</span>' |</span>
<span class="pl-k">  | <span class="pl-s1">age</span>        | <span class="pl-s1">20</span>       |        |         |</span>

<span class="pl-k">* </span>match search[0] == { name: { first: <span class="pl-s">'John'</span>, last: <span class="pl-s">'Smith'</span> }, age: 20 }
<span class="pl-k">* </span>match search[1] == { name: { first: <span class="pl-s">'Jane'</span>, last: <span class="pl-s">'Doe'</span> } }
<span class="pl-k">* </span>match search[2] == { name: { last: <span class="pl-s">'Waldo'</span> } }</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>text</code></h2><a id="user-content-text" class="anchor" aria-label="Permalink: text" href="#text"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Don't parse, treat as raw text</h3><a id="user-content-dont-parse-treat-as-raw-text" class="anchor" aria-label="Permalink: Don't parse, treat as raw text" href="#dont-parse-treat-as-raw-text"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Not something you would commonly use, but in some cases you need to disable Karate's default behavior of attempting to parse anything that looks like JSON (or XML) when using <a href="#multi-line-expressions">multi-line</a> / string <a href="#karate-expressions">expressions</a>. This is especially relevant when manipulating <a href="http://graphql.org" rel="nofollow">GraphQL</a> queries - because although they look suspiciously like JSON, they are not, and tend to confuse Karate's internals. And as shown in the example below, having text 'in-line' is useful especially when you use the <code>Scenario Outline:</code> and <code>Examples:</code> for <a href="#data-driven-tests">data-driven tests</a> involving place-holder substitutions in strings.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Scenario Outline:
  # note the 'text' keyword instead of 'def'
  * text query =
    &quot;&quot;&quot;
    {
      hero(name: &quot;&lt;name&gt;&quot;) {
        height
        mass
      }
    }
    &quot;&quot;&quot;
  Given path 'graphql'
  And request { query: '#(query)' }
  And header Accept = 'application/json'
  When method post
  Then status 200

  Examples:
    | name  |
    | John  |
    | Smith | "><pre><span class="pl-k">Scenario Outline</span>:
<span class="pl-c">  # note the 'text' keyword instead of 'def'</span>
  <span class="pl-k">* </span>text query =
    <span class="pl-s">"""</span>
<span class="pl-s">    {</span>
<span class="pl-s">      hero(name: "&lt;name&gt;") {</span>
<span class="pl-s">        height</span>
<span class="pl-s">        mass</span>
<span class="pl-s">      }</span>
<span class="pl-s">    }</span>
<span class="pl-s">    """</span>
  <span class="pl-k">Given </span>path <span class="pl-s">'graphql'</span>
  <span class="pl-k">And </span>request { query: <span class="pl-s">'#(query)'</span> }
  <span class="pl-k">And </span>header Accept = <span class="pl-s">'application/json'</span>
  <span class="pl-k">When </span>method post
  <span class="pl-k">Then </span>status 200

  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">name</span>  |</span>
<span class="pl-k">    | <span class="pl-s1">John</span>  |</span>
<span class="pl-k">    | <span class="pl-s1">Smith</span> | </span></pre></div>
<p dir="auto">Note that if you did not need to inject <a href="#data-driven-tests"><code>Examples:</code></a> into 'placeholders' enclosed within <code>&lt;</code> and <code>&gt;</code>, <a href="#reading-files">reading from a file</a> with the extension <code>*.txt</code> may have been sufficient.</p>
<p dir="auto">For placeholder-substitution, the <a href="#replace"><code>replace</code></a> keyword can be used instead, but with the advantage that the text can be read from a file or dynamically created.</p>
<p dir="auto">Karate is a great fit for testing GraphQL because of how easy it is to deal with dynamic and deeply nested JSON responses. Refer to this example for more details: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/graphql/graphql.feature"><code>graphql.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>replace</code></h2><a id="user-content-replace" class="anchor" aria-label="Permalink: replace" href="#replace"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Text Placeholder Replacement</h3><a id="user-content-text-placeholder-replacement" class="anchor" aria-label="Permalink: Text Placeholder Replacement" href="#text-placeholder-replacement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">Modifying existing JSON and XML is <strong>natively</strong> supported by Karate via the <a href="#set"><code>set</code></a> keyword, and <code>replace</code> is primarily intended for dealing with raw strings. But when you deal with complex, nested JSON (or XML) - it may be easier in some cases to use <code>replace</code>, especially when you want to substitute multiple placeholders with one value, and when you don't need array manipulation. Since <code>replace</code> auto-converts the result to a string, make sure you perform <a href="#type-conversion">type conversion</a> back to JSON (or XML) if applicable.</p>
</blockquote>
<p dir="auto">Karate provides an elegant 'native-like' experience for placeholder substitution within strings or text content. This is useful in any situation where you need to concatenate dynamic string fragments to form content such as GraphQL or SQL.</p>
<p dir="auto">The placeholder format defaults to angle-brackets, for example: <code>&lt;replaceMe&gt;</code>. Here is how to replace one placeholder at a time:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def text = 'hello &lt;foo&gt; world'
* replace text.foo = 'bar'
* match text == 'hello bar world'"><pre><span class="pl-k">* </span>def text = <span class="pl-s">'hello &lt;foo&gt; world'</span>
<span class="pl-k">* </span>replace text.foo = <span class="pl-s">'bar'</span>
<span class="pl-k">* </span>match text == <span class="pl-s">'hello bar world'</span></pre></div>
<p dir="auto">Karate makes it really easy to substitute multiple placeholders in a single, readable step as follows:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def text = 'hello &lt;one&gt; world &lt;two&gt; bye'

* replace text
  | token | value   |
  | one   | 'cruel' |
  | two   | 'good'  |

* match text == 'hello cruel world good bye'"><pre><span class="pl-k">* </span>def text = <span class="pl-s">'hello &lt;one&gt; world &lt;two&gt; bye'</span>

<span class="pl-k">* </span>replace text
<span class="pl-k">  | <span class="pl-s1">token</span> | <span class="pl-s1">value</span>   |</span>
<span class="pl-k">  | <span class="pl-s1">one</span>   | '<span class="pl-s1">cruel</span>' |</span>
<span class="pl-k">  | <span class="pl-s1">two</span>   | '<span class="pl-s1">good</span>'  |</span>

<span class="pl-k">* </span>match text == <span class="pl-s">'hello cruel world good bye'</span></pre></div>
<p dir="auto">Note how strings have to be enclosed in quotes. This is so that you can mix expressions into text replacements as shown below. This example also shows how you can use a custom placeholder format instead of the default:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def text = 'hello &lt;one&gt; world ${two} bye'
* def first = 'cruel'
* def json = { second: 'good' }

* replace text
    | token  | value       |
    | one    | first       |
    | ${two} | json.second |

* match text == 'hello cruel world good bye'"><pre><span class="pl-k">* </span>def text = <span class="pl-s">'hello &lt;one&gt; world ${two} bye'</span>
<span class="pl-k">* </span>def first = <span class="pl-s">'cruel'</span>
<span class="pl-k">* </span>def json = { second: <span class="pl-s">'good'</span> }

<span class="pl-k">* </span>replace text
<span class="pl-k">    | <span class="pl-s1">token</span>  | <span class="pl-s1">value</span>       |</span>
<span class="pl-k">    | <span class="pl-s1">one</span>    | <span class="pl-s1">first</span>       |</span>
<span class="pl-k">    | ${<span class="pl-s1">two</span>} | <span class="pl-s1">json</span>.<span class="pl-s1">second</span> |</span>

<span class="pl-k">* </span>match text == <span class="pl-s">'hello cruel world good bye'</span></pre></div>
<p dir="auto">Refer to this file for a detailed example: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/replace.feature"><code>replace.feature</code></a></p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">YAML Files</h2><a id="user-content-yaml-files" class="anchor" aria-label="Permalink: YAML Files" href="#yaml-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For those who may prefer <a href="http://yaml.org" rel="nofollow">YAML</a> as a simpler way to represent data, Karate allows you to read YAML content from a <a href="#reading-files">file</a> - and it will be auto-converted into JSON.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# yaml from a file (the extension matters), and the data-type of 'bar' would be JSON
* def bar = read('data.yaml')"><pre><span class="pl-c"># yaml from a file (the extension matters), and the data-type of 'bar' would be JSON</span>
<span class="pl-k">* </span>def bar = read(<span class="pl-s">'data.yaml'</span>)</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>yaml</code></h3><a id="user-content-yaml" class="anchor" aria-label="Permalink: yaml" href="#yaml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">A very rare need is to be able to convert a string which happens to be in YAML form into JSON, and this can be done via the <code>yaml</code> type cast keyword. For example - if a response data element or downloaded file is YAML and you need to use the data in subsequent steps. Also see <a href="#type-conversion">type conversion</a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* text foo =
  &quot;&quot;&quot;
  name: John
  input:
    id: 1
    subType: 
      name: Smith
      deleted: false
  &quot;&quot;&quot;
# yaml to json type conversion  
* yaml foo = foo
* match foo ==
  &quot;&quot;&quot;
  {
    name: 'John',
    input: { 
      id: 1,
      subType: { name: 'Smith', deleted: false }    
    }
  }
  &quot;&quot;&quot;"><pre><span class="pl-k">* </span>text foo =
  <span class="pl-s">"""</span>
<span class="pl-s">  name: John</span>
<span class="pl-s">  input:</span>
<span class="pl-s">    id: 1</span>
<span class="pl-s">    subType: </span>
<span class="pl-s">      name: Smith</span>
<span class="pl-s">      deleted: false</span>
<span class="pl-s">  """</span>
<span class="pl-c"># yaml to json type conversion  </span>
<span class="pl-k">* </span>yaml foo = foo
<span class="pl-k">* </span>match foo ==
  <span class="pl-s">"""</span>
<span class="pl-s">  {</span>
<span class="pl-s">    name: 'John',</span>
<span class="pl-s">    input: { </span>
<span class="pl-s">      id: 1,</span>
<span class="pl-s">      subType: { name: 'Smith', deleted: false }    </span>
<span class="pl-s">    }</span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">CSV Files</h2><a id="user-content-csv-files" class="anchor" aria-label="Permalink: CSV Files" href="#csv-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate can read <code>*.csv</code> files and will auto-convert them to JSON. A header row is always expected. See the section on <a href="#reading-files">reading files</a> - and also this example <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/outline/dynamic-csv.feature"><code>dynamic-csv.feature</code></a>, which shows off the convenience of <a href="#dynamic-scenario-outline">dynamic <code>Scenario Outline</code>-s</a>.</p>
<p dir="auto">In rare cases you may want to use a csv-file as-is and <em>not</em> auto-convert it to JSON. A good example is when you want to use a CSV file as the <a href="#request">request-body</a> for a file-upload. You could get by by renaming the file-extension to say <code>*.txt</code> but an alternative is to use the <a href="#read-file-as-string"><code>karate.readAsString()</code></a> API.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>csv</code></h3><a id="user-content-csv" class="anchor" aria-label="Permalink: csv" href="#csv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Just like <a href="#yaml"><code>yaml</code></a>, you may occasionally need to <a href="#type-conversion">convert a string</a> which happens to be in CSV form into JSON, and this can be done via the <code>csv</code> keyword.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* text foo =
    &quot;&quot;&quot;
    name,type
    Billie,LOL
    Bob,Wild
    &quot;&quot;&quot;
* csv bar = foo
* match bar == [{ name: 'Billie', type: 'LOL' }, { name: 'Bob', type: 'Wild' }]"><pre><span class="pl-k">* </span>text foo =
    <span class="pl-s">"""</span>
<span class="pl-s">    name,type</span>
<span class="pl-s">    Billie,LOL</span>
<span class="pl-s">    Bob,Wild</span>
<span class="pl-s">    """</span>
<span class="pl-k">* </span>csv bar = foo
<span class="pl-k">* </span>match bar == [{ name: <span class="pl-s">'Billie'</span>, type: <span class="pl-s">'LOL'</span> }, { name: <span class="pl-s">'Bob'</span>, type: <span class="pl-s">'Wild'</span> }]</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">JavaScript Functions</h2><a id="user-content-javascript-functions" class="anchor" aria-label="Permalink: JavaScript Functions" href="#javascript-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">JavaScript Functions are also 'native'. And yes, functions can take arguments.</p>
<blockquote>
<p dir="auto">Standard JavaScript syntax rules apply, but the right-hand-side should begin with the <code>function</code> keyword if declared <em>in-line</em>. When using stand-alone <code>*.js</code> files, you can have a comment before the <code>function</code> keyword, and you can use <code>fn</code> as the function name, so that your IDE does not complain about JavaScript syntax errors, e.g. <code>function fn(x){ return x + 1 }</code></p>
</blockquote>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def greeter = function(title, name) { return 'hello ' + title + ' ' + name }
* assert greeter('Mr.', 'Bob') == 'hello Mr. Bob'"><pre><span class="pl-k">* </span>def greeter = function(title, name) { return <span class="pl-s">'hello '</span> + title + <span class="pl-s">' '</span> + name }
<span class="pl-k">* </span>assert greeter(<span class="pl-s">'Mr.'</span>, <span class="pl-s">'Bob'</span>) == <span class="pl-s">'hello Mr. Bob'</span></pre></div>
<blockquote>
<p dir="auto">When JavaScript executes in Karate, the built-in <a href="#the-karate-object"><code>karate</code> object</a> provides some commonly used utility functions. And with <a href="#karate-expressions">Karate expressions</a>, you can "dive into" JavaScript without needing to define a function - and <a href="#conditional-logic">conditional logic</a> is a good example.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Java Interop</h3><a id="user-content-java-interop" class="anchor" aria-label="Permalink: Java Interop" href="#java-interop"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For more complex functions you are better off using the <a href="#multi-line-expressions">multi-line</a> 'doc-string' approach. This example actually calls into existing Java code, and being able to do this opens up a whole lot of possibilities. The JavaScript interpreter will try to convert types across Java and JavaScript as smartly as possible. For e.g. JSON objects become Java <code>Map</code>-s, JSON arrays become Java <code>List</code>-s, and Java Bean properties are accessible (and update-able) using 'dot notation' e.g. '<code>object.name</code>'</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def dateStringToLong =
  &quot;&quot;&quot;
  function(s) {
    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
    var sdf = new SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot;);
    return sdf.parse(s).time; // '.getTime()' would also have worked instead of '.time'
  } 
  &quot;&quot;&quot;
* assert dateStringToLong(&quot;2016-12-24T03:39:21.081+0000&quot;) == 1482550761081"><pre><span class="pl-k">* </span>def dateStringToLong =
  <span class="pl-s">"""</span>
<span class="pl-s">  function(s) {</span>
<span class="pl-s">    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');</span>
<span class="pl-s">    var sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");</span>
<span class="pl-s">    return sdf.parse(s).time; // '.getTime()' would also have worked instead of '.time'</span>
<span class="pl-s">  } </span>
<span class="pl-s">  """</span>
<span class="pl-k">* </span>assert dateStringToLong(<span class="pl-s">"2016-12-24T03:39:21.081+0000"</span>) == 1482550761081</pre></div>
<blockquote>
<p dir="auto">More examples of Java interop and how to invoke custom code can be found in the section on <a href="#calling-java">Calling Java</a>.</p>
</blockquote>
<p dir="auto">The <code>call</code> keyword provides an <a href="#calling-javascript-functions">alternate way of calling JavaScript functions</a> that have only one argument. The argument can be provided after the function name, without parentheses, which makes things slightly more readable (and less cluttered) especially when the solitary argument is JSON.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def timeLong = call dateStringToLong '2016-12-24T03:39:21.081+0000'
* assert timeLong == 1482550761081

# a better example, with a JSON argument
* def greeter = function(name){ return 'Hello ' + name.first + ' ' + name.last + '!' }
* def greeting = call greeter { first: 'John', last: 'Smith' }"><pre><span class="pl-k">* </span>def timeLong = call dateStringToLong <span class="pl-s">'2016-12-24T03:39:21.081+0000'</span>
<span class="pl-k">* </span>assert timeLong == 1482550761081

<span class="pl-c"># a better example, with a JSON argument</span>
<span class="pl-k">* </span>def greeter = function(name){ return <span class="pl-s">'Hello '</span> + name.first + <span class="pl-s">' '</span> + name.last + <span class="pl-s">'!'</span> }
<span class="pl-k">* </span>def greeting = call greeter { first: <span class="pl-s">'John'</span>, last: <span class="pl-s">'Smith'</span> }</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Reading Files</h2><a id="user-content-reading-files" class="anchor" aria-label="Permalink: Reading Files" href="#reading-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate makes re-use of payload data, utility-functions and even other test-scripts as easy as possible. Teams typically define complicated JSON (or XML) payloads in a file and then re-use this in multiple scripts. Keywords such as <a href="#set"><code>set</code></a> and <a href="#remove"><code>remove</code></a> allow you to to 'tweak' payload-data to fit the scenario under test. You can imagine how this greatly simplifies setting up tests for boundary conditions. And such re-use makes it easier to re-factor tests when needed, which is great for maintainability.</p>
<blockquote>
<p dir="auto">Note that the <a href="#set-multiple"><code>set</code> (multiple)</a> keyword can build complex, nested JSON (or XML) from scratch in a data-driven manner, and you may not even need to read from files for many situations. Test data can be within the main flow itself, which makes scripts highly readable.</p>
</blockquote>
<p dir="auto">Reading files is achieved using the built-in JavaScript function called <code>read()</code>. By default, the file is expected to be in the same folder (package) and side-by-side with the <code>*.feature</code> file. But you can prefix the name with <code>classpath:</code> in which case the <a href="#classpath">'root' folder</a> would be <code>src/test/java</code> (assuming you are using the <a href="#folder-structure">recommended folder structure</a>).</p>
<p dir="auto">Prefer <a href="#classpath"><code>classpath:</code></a> when a file is expected to be heavily re-used all across your project.  And yes, relative paths will work.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# json
* def someJson = read('some-json.json')
* def moreJson = read('classpath:more-json.json')

# xml
* def someXml = read('../common/my-xml.xml')

# import yaml (will be converted to json)
* def jsonFromYaml = read('some-data.yaml')

# csv (will be converted to json)
* def jsonFromCsv = read('some-data.csv')

# string
* def someString = read('classpath:messages.txt')

# javascript (will be evaluated)
* def someValue = read('some-js-code.js')

# if the js file evaluates to a function, it can be re-used later using the 'call' keyword (or invoked just like normal js)
* def someFunction = read('classpath:some-reusable-code.js')
* def someCallResult = call someFunction
* def sameCallResult = someFunction()

# the following short-cut is also allowed
* def someCallResult = call read('some-js-code.js')"><pre><span class="pl-c"># json</span>
<span class="pl-k">* </span>def someJson = read(<span class="pl-s">'some-json.json'</span>)
<span class="pl-k">* </span>def moreJson = read(<span class="pl-s">'classpath:more-json.json'</span>)

<span class="pl-c"># xml</span>
<span class="pl-k">* </span>def someXml = read(<span class="pl-s">'../common/my-xml.xml'</span>)

<span class="pl-c"># import yaml (will be converted to json)</span>
<span class="pl-k">* </span>def jsonFromYaml = read(<span class="pl-s">'some-data.yaml'</span>)

<span class="pl-c"># csv (will be converted to json)</span>
<span class="pl-k">* </span>def jsonFromCsv = read(<span class="pl-s">'some-data.csv'</span>)

<span class="pl-c"># string</span>
<span class="pl-k">* </span>def someString = read(<span class="pl-s">'classpath:messages.txt'</span>)

<span class="pl-c"># javascript (will be evaluated)</span>
<span class="pl-k">* </span>def someValue = read(<span class="pl-s">'some-js-code.js'</span>)

<span class="pl-c"># if the js file evaluates to a function, it can be re-used later using the 'call' keyword (or invoked just like normal js)</span>
<span class="pl-k">* </span>def someFunction = read(<span class="pl-s">'classpath:some-reusable-code.js'</span>)
<span class="pl-k">* </span>def someCallResult = call someFunction
<span class="pl-k">* </span>def sameCallResult = someFunction()

<span class="pl-c"># the following short-cut is also allowed</span>
<span class="pl-k">* </span>def someCallResult = call read(<span class="pl-s">'some-js-code.js'</span>)</pre></div>
<p dir="auto">You can also <a href="#calling-other-feature-files">re-use other <code>*.feature</code></a> files from test-scripts:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# perfect for all those common authentication or 'set up' flows
* def result = call read('classpath:some-reusable-steps.feature')"><pre><span class="pl-c"># perfect for all those common authentication or 'set up' flows</span>
<span class="pl-k">* </span>def result = call read(<span class="pl-s">'classpath:some-reusable-steps.feature'</span>)</pre></div>
<p dir="auto">When a <em>called</em> feature depends on some side-by-side resources such as JSON or JS files, you can use the <code>this:</code> prefix to ensure that relative paths work correctly - because by default Karate calculates relative paths from the "root" feature or the top-most "caller".</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def data = read('this:payload.json')"><pre><span class="pl-k">* </span>def data = read(<span class="pl-s">'this:payload.json'</span>)</pre></div>
<p dir="auto">If a file does not end in <code>.json</code>, <code>.xml</code>, <code>.yaml</code>, <code>.js</code>, <code>.csv</code> or <code>.txt</code>, it is treated as a stream - which is typically what you would need for <a href="#multipart-field"><code>multipart</code></a> file uploads.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def someStream = read('some-pdf.pdf')"><pre><span class="pl-k">* </span>def someStream = read(<span class="pl-s">'some-pdf.pdf'</span>)</pre></div>
<blockquote>
<p dir="auto">The <code>.graphql</code> and <code>.gql</code> extensions are also recognized (for GraphQL) but are handled the same way as <code>.txt</code> and treated as a string.</p>
</blockquote>
<p dir="auto">For JSON and XML files, Karate will evaluate any <a href="#embedded-expressions">embedded expressions</a> on load. This enables more concise tests, and the file can be re-usable in multiple, data-driven tests.</p>
<p dir="auto">Since it is internally implemented as a JavaScript function, you can mix calls to <code>read()</code> freely wherever JavaScript expressions are allowed:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def someBigString = read('first.txt') + read('second.txt')"><pre><span class="pl-k">* </span>def someBigString = read(<span class="pl-s">'first.txt'</span>) + read(<span class="pl-s">'second.txt'</span>)</pre></div>
<blockquote>
<p dir="auto">Tip: you can even use JS expressions to dynamically choose a file based on some condition: <code>* def someConfig = read('my-config-' + someVariable + '.json')</code>. Refer to <a href="#conditional-logic">conditional logic</a> for more ideas.</p>
</blockquote>
<p dir="auto">And a very common need would be to use a file as the <a href="#request"><code>request</code></a> body:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given request read('some-big-payload.json')"><pre><span class="pl-k">Given </span>request read(<span class="pl-s">'some-big-payload.json'</span>)</pre></div>
<p dir="auto">Or in a <a href="#match"><code>match</code></a>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="And match response == read('expected-response-payload.json')"><pre><span class="pl-k">And </span>match response == read(<span class="pl-s">'expected-response-payload.json'</span>)</pre></div>
<p dir="auto">The rarely used <code>file:</code> prefix is also supported. You could use it for 'hard-coded' absolute paths in dev mode, but is obviously not recommended for CI test-suites. A good example of where you may need this is if you programmatically write a file to the <code>target</code> folder, and then you can read it like this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def payload = read('file:target/large.xml')"><pre><span class="pl-k">* </span>def payload = read(<span class="pl-s">'file:target/large.xml'</span>)</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Path Prefixes</h3><a id="user-content-path-prefixes" class="anchor" aria-label="Permalink: Path Prefixes" href="#path-prefixes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">To summarize the possible prefixes:</p>
<table>
<thead>
<tr>
<th>Prefix</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>classpath:</code></td>
<td>relative to the <a href="#classpath">classpath</a>, recommended for re-usable features</td>
</tr>
<tr>
<td><code>file:</code></td>
<td>do not use this unless you know what you are doing, see above</td>
</tr>
<tr>
<td><code>this:</code></td>
<td>when in a <em>called</em> feature, ensure that files are resolved relative to the current feature file</td>
</tr>
</tbody>
</table>
<p dir="auto">Take a look at the <a href="/karatelabs/karate/blob/master/karate-demo">Karate Demos</a> for real-life examples of how you can use files for validating HTTP responses, like this one: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/read/read-files.feature"><code>read-files.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Read File As String</h3><a id="user-content-read-file-as-string" class="anchor" aria-label="Permalink: Read File As String" href="#read-file-as-string"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In some rare cases where you don't want to auto-convert JSON, XML, YAML or CSV, and just get the raw string content (without having to re-name the file to end with <code>.txt</code>) - you can use the <a href="#karate-readasstring"><code>karate.readAsString()</code></a> API. Here is an example of using a CSV file as the request-body:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given path 'upload'
And header Content-Type = 'text/csv'
And request karate.readAsString('classpath:my.csv')
When method post
Then status 202"><pre><span class="pl-k">Given </span>path <span class="pl-s">'upload'</span>
<span class="pl-k">And </span>header Content-Type = <span class="pl-s">'text/csv'</span>
<span class="pl-k">And </span>request karate.readAsString(<span class="pl-s">'classpath:my.csv'</span>)
<span class="pl-k">When </span>method post
<span class="pl-k">Then </span>status 202</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Compare Image</h2><a id="user-content-compare-image" class="anchor" aria-label="Permalink: Compare Image" href="#compare-image"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate provides a flexible way to compare two images to determine if they are the same or similar. This is especially useful when capturing screenshots during tests and comparing against baseline images that are known to be correct.</p>
<blockquote>
<p dir="auto">A stand-alone example can be found here: <a href="/karatelabs/karate/blob/master/examples/image-comparison"><code>examples/image-comparison</code></a> along with a <a href="https://youtu.be/wlvmNBraP60" rel="nofollow">video explanation</a>.</p>
</blockquote>
<p dir="auto">Below is a simple example that will compare a <code>baseline</code> image to a more recent <code>latest</code> image. An image comparison UI will also be embedded into the Karate HTML report with detailed information about any differences between the two images.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* compareImage { baseline: 'screenshots/login.png', latest: '/tmp/login.png' }"><pre><span class="pl-k">* </span>compareImage { baseline: <span class="pl-s">'screenshots/login.png'</span>, latest: <span class="pl-s">'/tmp/login.png'</span> }</pre></div>
<p dir="auto">You can also compare images using Karate <a href="#path-prefixes">path prefixes</a> (e.g. <code>classpath:</code>, <code>this:</code>, <code>file:</code>) or byte arrays:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def latestImgBytes = karate.readAsBytes('login.png')
* compareImage { baseline: 'classpath:screenshots/login.png', latest: '#(latestImgBytes)' }"><pre><span class="pl-k">* </span>def latestImgBytes = karate.readAsBytes(<span class="pl-s">'login.png'</span>)
<span class="pl-k">* </span>compareImage { baseline: <span class="pl-s">'classpath:screenshots/login.png'</span>, latest: <span class="pl-s">'#(latestImgBytes)'</span> }</pre></div>
<p dir="auto">You may configure the following image comparison options using the <code>configure</code> action:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* configure imageComparison = { /* image comparison options ... */ }"><pre><span class="pl-k">* </span>configure imageComparison = { /* image comparison options ... */ }</pre></div>
<p dir="auto">Image comparison configuration options:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>allowScaling</code></td>
<td>boolean</td>
<td><code>false</code></td>
<td>When <code>true</code> we will scale latest images to match the dimensions of the baseline when they are not equal</td>
</tr>
<tr>
<td><code>engine</code></td>
<td>string</td>
<td>'resemble'</td>
<td>Comparison engine(s) to use. Valid options are <code>resemble</code> and <code>ssim</code> separated by either <code>,</code> or <code>&amp;#124</code></td>
</tr>
<tr>
<td><code>failureThreshold</code></td>
<td>number</td>
<td><code>0.0</code></td>
<td>Precentage of <code>latest</code> image pixels allowed to differ from <code>baseline</code> before we consider the comparison as failed</td>
</tr>
<tr>
<td><code>mismatchShouldPass</code></td>
<td>boolean</td>
<td><code>false</code></td>
<td>When <code>true</code> all image comparisons will pass (even when difference is &gt;= <code>failureThreshold</code>). Note: failures will result in image comparison UI <em>always</em> being embedded in Karate HTML reports regardless of <code>hideUiOnSuccess</code> setting.</td>
</tr>
<tr>
<td><code>onShowRebase</code></td>
<td>string (js)</td>
<td><code>null</code></td>
<td>Function to be called when displaying image comparison rebase in Karate HTML reports (e.g. to customize rebase filename and/or output)</td>
</tr>
<tr>
<td><code>onShowConfig</code></td>
<td>string (js)</td>
<td><code>null</code></td>
<td>Function to be called when displaying image comparison configuration in Karate HTML reports (e.g. to customize configuration output)</td>
</tr>
<tr>
<td><code>hideUiOnSuccess</code></td>
<td>boolean</td>
<td><code>false</code></td>
<td>When <code>true</code> the comparison UI will <em>NOT</em> be embedded in Karate HTML reports for all non-failed image comparisons</td>
</tr>
</tbody>
</table>
<p dir="auto">Examples:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# use only 'ssim' (structural similarity) engine
* configure imageComparison = { engine: 'ssim' }

# always use both 'resemble' and 'ssim' engines but only evaluate the lowest mismatch percentage against our `failureThreshold`
* configure imageComparison = { engine: 'resemble,ssim' }

# prefer 'resemble' and fallback to 'ssim' engine only if the resemble mismatch percentage is &gt;= `failureThreshold`
* configure imageComparison = { engine: 'resemble|ssim' }

# only consider the comparison as failed when 2% or more pixels are different from the baseline
* configure imageComparison = { failureThreshold: 2 }

# consider image comparisons that fail due to too many mismatched pixels as passed (especially useful when you are first starting without any baseline images)
* configure imageComparison = { mismatchShouldPass: true }

# custom JS function called in Karate HTML image comparison UI when the user clicks the `Rebase` button
* text onShowRebaseFn =
&quot;&quot;&quot;
function (config, downloadLatestFn) {
  // trigger download of latest image with custom file name
  downloadLatestFn('custom_latest.png')
  return 'this text will be displayed to the user when they click the rebase button'
}
&quot;&quot;&quot;
* configure imageComparison = { onShowRebase: '#(onShowRebaseFn)' }

# custom JS function called in Karate HTML image comparison UI when the user clicks the `Show config` button
* text onShowConfigFn =
&quot;&quot;&quot;
function (customConfigJson, config) {
  return 'this text will be displayed above the image comparison config\n' + customConfigJson
}
&quot;&quot;&quot;
* configure imageComparison = { onShowConfig: '#(onShowConfigFn)' }

# don't embed the image comparison UI when the latest image is the same / similar to the baseline (e.g. to save space and speed up report loading)
* configure imageComparison = { hideUiOnSuccess: true }"><pre><span class="pl-c"># use only 'ssim' (structural similarity) engine</span>
<span class="pl-k">* </span>configure imageComparison = { engine: <span class="pl-s">'ssim'</span> }

<span class="pl-c"># always use both 'resemble' and 'ssim' engines but only evaluate the lowest mismatch percentage against our `failureThreshold`</span>
<span class="pl-k">* </span>configure imageComparison = { engine: <span class="pl-s">'resemble,ssim'</span> }

<span class="pl-c"># prefer 'resemble' and fallback to 'ssim' engine only if the resemble mismatch percentage is &gt;= `failureThreshold`</span>
<span class="pl-k">* </span>configure imageComparison = { engine: <span class="pl-s">'resemble|ssim'</span> }

<span class="pl-c"># only consider the comparison as failed when 2% or more pixels are different from the baseline</span>
<span class="pl-k">* </span>configure imageComparison = { failureThreshold: 2 }

<span class="pl-c"># consider image comparisons that fail due to too many mismatched pixels as passed (especially useful when you are first starting without any baseline images)</span>
<span class="pl-k">* </span>configure imageComparison = { mismatchShouldPass: true }

<span class="pl-c"># custom JS function called in Karate HTML image comparison UI when the user clicks the `Rebase` button</span>
<span class="pl-k">* </span>text onShowRebaseFn =
<span class="pl-s">"""</span>
<span class="pl-s">function (config, downloadLatestFn) {</span>
<span class="pl-s">  // trigger download of latest image with custom file name</span>
<span class="pl-s">  downloadLatestFn('custom_latest.png')</span>
<span class="pl-s">  return 'this text will be displayed to the user when they click the rebase button'</span>
<span class="pl-s">}</span>
<span class="pl-s">"""</span>
<span class="pl-k">* </span>configure imageComparison = { onShowRebase: <span class="pl-s">'#(onShowRebaseFn)'</span> }

<span class="pl-c"># custom JS function called in Karate HTML image comparison UI when the user clicks the `Show config` button</span>
<span class="pl-k">* </span>text onShowConfigFn =
<span class="pl-s">"""</span>
<span class="pl-s">function (customConfigJson, config) {</span>
<span class="pl-s">  return 'this text will be displayed above the image comparison config\n' + customConfigJson</span>
<span class="pl-s">}</span>
<span class="pl-s">"""</span>
<span class="pl-k">* </span>configure imageComparison = { onShowConfig: <span class="pl-s">'#(onShowConfigFn)'</span> }

<span class="pl-c"># don't embed the image comparison UI when the latest image is the same / similar to the baseline (e.g. to save space and speed up report loading)</span>
<span class="pl-k">* </span>configure imageComparison = { hideUiOnSuccess: true }</pre></div>
<p dir="auto">Image comparison engines can also be customized:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { /* engine options ... */ } }"><pre><span class="pl-k">* </span>compareImage { baseline: <span class="pl-s">'baseline.png'</span>, latest: <span class="pl-s">'latest.png'</span>, options: { /* engine options ... */ } }</pre></div>
<p dir="auto">Image comparison configuration options:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Engines</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ignoredBoxes</code></td>
<td>resemble, ssim</td>
<td>array of object</td>
<td><code>null</code></td>
<td>Array of rectangles that should be ignored during image comparison</td>
</tr>
<tr>
<td><code>ignore</code></td>
<td>resemble</td>
<td>string</td>
<td>'less'</td>
<td>Resemble ignore preset. Valid options are <code>nothing</code>, <code>less</code>, <code>antialiasing</code>, <code>colors</code>, <code>alpha</code> (see <a href="https://github.com/t12y/resemble/blob/0c55a1849232b68aa4c16f1d7a949cc429a6af8e/src/main/java/io/github/t12y/resemble/Options.java#L20">presets</a>).</td>
</tr>
<tr>
<td><code>ignoreAreasColoredWith</code></td>
<td>resemble</td>
<td>object</td>
<td><code>null</code></td>
<td>Resemble option to ignore a specific color</td>
</tr>
<tr>
<td><code>ignoreColors</code></td>
<td>resemble</td>
<td>boolean</td>
<td><code>false</code></td>
<td>When <code>true</code> only pixel brightness is compared</td>
</tr>
<tr>
<td><code>ignoreAntialiasing</code></td>
<td>resemble</td>
<td>boolean</td>
<td><code>false</code></td>
<td>When <code>true</code> only pixel brightness is compared for pixels determined to be antialiased</td>
</tr>
<tr>
<td><code>tolerances</code></td>
<td>resemble</td>
<td>object</td>
<td><code>null</code></td>
<td>Resemble option to override preset tolerances for color and brightness</td>
</tr>
<tr>
<td><code>ssim</code></td>
<td>ssim</td>
<td>string</td>
<td>'WEBER'</td>
<td>SSIM algorithm. Valid options are <code>FAST</code> or <code>WEBER</code></td>
</tr>
<tr>
<td><code>rgb2grayVersion</code></td>
<td>ssim</td>
<td>string</td>
<td>'INTEGER'</td>
<td>SSIM grayscale algorithm. Valid options are <code>ORIGINAL</code> or <code>INTEGER</code></td>
</tr>
<tr>
<td><code>k1</code></td>
<td>ssim</td>
<td>number</td>
<td><code>0.01</code></td>
<td>SSIM first stability constant (see <a href="https://github.com/obartra/ssim/blob/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf">ssim.pdf</a>)</td>
</tr>
<tr>
<td><code>k2</code></td>
<td>ssim</td>
<td>number</td>
<td><code>0.03</code></td>
<td>SSIM second stability constant (see <a href="https://github.com/obartra/ssim/blob/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf">ssim.pdf</a>)</td>
</tr>
<tr>
<td><code>windowSize</code></td>
<td>ssim</td>
<td>integer</td>
<td><code>11</code></td>
<td>Window size for the SSIM map (see <a href="https://github.com/obartra/ssim/blob/3f3af6118c78b3ed4f0ff6eb224700c071f29c99/assets/ssim.pdf">ssim.pdf</a>)</td>
</tr>
<tr>
<td><code>bitDepth</code></td>
<td>ssim</td>
<td>integer</td>
<td><code>8</code></td>
<td>The number of bits used to encode each pixel</td>
</tr>
<tr>
<td><code>maxSize</code></td>
<td>ssim</td>
<td>integer</td>
<td><code>256</code></td>
<td>The maximum size on the smallest dimension before downsampling</td>
</tr>
</tbody>
</table>
<p dir="auto">Examples:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# ignore areas of an image (e.g. to avoid constant failures due to loading animations)
* def boxes =
&quot;&quot;&quot;
[{
  top: 483,
  left: 1085,
  bottom: 893,
  right: 1496
}]
&quot;&quot;&quot;
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoredBoxes: #(boxes) } }

#############################
### Resemble-only options ###
#############################

# zero-tolerance for color shifts
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignore: 'nothing' } }

# ignore all purple areas
* def purple =
&quot;&quot;&quot;
{
  r: 190,
  g: 0,
  b: 255
}
&quot;&quot;&quot;
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreAreasColoredWith: '#(purple)' } }

# compare images as grayscale
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreColors: true } }

# attempt to detect and ignore antialiasing
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ignoreAntialiasing: true } }

# customize color / brightness tolerances
* def customTolerances =
&quot;&quot;&quot;
{
  red: 4,
  green: 4,
  blue: 4,
  alpha: 4,
  minBrightness: 4,
  maxBrightness: 250
}
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { tolerances: '#(customTolerances)' } }

#########################
### SSIM-only options ###
#########################

# switch to `fast` SSIM algorithm
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ssim: 'FAST' } }

# switch to `original` grayscale SSIM algorithm
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { rgb2grayVersion: 'ORIGINAL' } }

# update SSIM stability constants
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { k1: 0, k2: 0 } }

# update SSIM window size
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { windowSize: 3 } }

# update SSIM bit depth
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { bitDepth: 16 } }

# update SSIM max size
* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { maxSize: 512 } }"><pre><span class="pl-c"># ignore areas of an image (e.g. to avoid constant failures due to loading animations)</span>
<span class="pl-k">* </span>def boxes =
<span class="pl-s">"""</span>
<span class="pl-s">[{</span>
<span class="pl-s">  top: 483,</span>
<span class="pl-s">  left: 1085,</span>
<span class="pl-s">  bottom: 893,</span>
<span class="pl-s">  right: 1496</span>
<span class="pl-s">}]</span>
<span class="pl-s">"""</span>
<span class="pl-k">* </span>compareImage { baseline: <span class="pl-s">'baseline.png'</span>, latest: <span class="pl-s">'latest.png'</span>, options: { ignoredBoxes:<span class="pl-c"> #(boxes) } }</span>

<span class="pl-c">#############################</span>
<span class="pl-c">### Resemble-only options ###</span>
<span class="pl-c">#############################</span>

<span class="pl-c"># zero-tolerance for color shifts</span>
<span class="pl-k">* </span>compareImage { baseline: <span class="pl-s">'baseline.png'</span>, latest: <span class="pl-s">'latest.png'</span>, options: { ignore: <span class="pl-s">'nothing'</span> } }

<span class="pl-c"># ignore all purple areas</span>
<span class="pl-k">* </span>def purple =
<span class="pl-s">"""</span>
<span class="pl-s">{</span>
<span class="pl-s">  r: 190,</span>
<span class="pl-s">  g: 0,</span>
<span class="pl-s">  b: 255</span>
<span class="pl-s">}</span>
<span class="pl-s">"""</span>
<span class="pl-k">* </span>compareImage { baseline: <span class="pl-s">'baseline.png'</span>, latest: <span class="pl-s">'latest.png'</span>, options: { ignoreAreasColoredWith: <span class="pl-s">'#(purple)'</span> } }

<span class="pl-c"># compare images as grayscale</span>
<span class="pl-k">* </span>compareImage { baseline: <span class="pl-s">'baseline.png'</span>, latest: <span class="pl-s">'latest.png'</span>, options: { ignoreColors: true } }

<span class="pl-c"># attempt to detect and ignore antialiasing</span>
<span class="pl-k">* </span>compareImage { baseline: <span class="pl-s">'baseline.png'</span>, latest: <span class="pl-s">'latest.png'</span>, options: { ignoreAntialiasing: true } }

<span class="pl-c"># customize color / brightness tolerances</span>
<span class="pl-k">* </span>def customTolerances =
<span class="pl-s">"""</span>
<span class="pl-s">{</span>
<span class="pl-s">  red: 4,</span>
<span class="pl-s">  green: 4,</span>
<span class="pl-s">  blue: 4,</span>
<span class="pl-s">  alpha: 4,</span>
<span class="pl-s">  minBrightness: 4,</span>
<span class="pl-s">  maxBrightness: 250</span>
<span class="pl-s">}</span>
<span class="pl-s">* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { tolerances: '#(customTolerances)' } }</span>
<span class="pl-s"></span>
<span class="pl-s">#########################</span>
<span class="pl-s">### SSIM-only options ###</span>
<span class="pl-s">#########################</span>
<span class="pl-s"></span>
<span class="pl-s"># switch to `fast` SSIM algorithm</span>
<span class="pl-s">* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { ssim: 'FAST' } }</span>
<span class="pl-s"></span>
<span class="pl-s"># switch to `original` grayscale SSIM algorithm</span>
<span class="pl-s">* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { rgb2grayVersion: 'ORIGINAL' } }</span>
<span class="pl-s"></span>
<span class="pl-s"># update SSIM stability constants</span>
<span class="pl-s">* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { k1: 0, k2: 0 } }</span>
<span class="pl-s"></span>
<span class="pl-s"># update SSIM window size</span>
<span class="pl-s">* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { windowSize: 3 } }</span>
<span class="pl-s"></span>
<span class="pl-s"># update SSIM bit depth</span>
<span class="pl-s">* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { bitDepth: 16 } }</span>
<span class="pl-s"></span>
<span class="pl-s"># update SSIM max size</span>
<span class="pl-s">* compareImage { baseline: 'baseline.png', latest: 'latest.png', options: { maxSize: 512 } }</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Type Conversion</h2><a id="user-content-type-conversion" class="anchor" aria-label="Permalink: Type Conversion" href="#type-conversion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">Best practice is to stick to using only <a href="#def"><code>def</code></a> unless there is a very good reason to do otherwise.</p>
</blockquote>
<p dir="auto">Internally, Karate will auto-convert JSON (and even XML) to Java <code>Map</code> objects. And JSON arrays would become Java <code>List</code>-s. But you will never need to worry about this internal data-representation most of the time.</p>
<p dir="auto">In some rare cases, for e.g. if you acquired a string from some external source, or if you generated JSON (or XML) by concatenating text or using <a href="#replace"><code>replace</code></a>, you may want to convert a string to JSON and vice-versa. You can even perform a conversion from XML to JSON if you want.</p>
<p dir="auto">One example of when you may want to convert JSON (or XML) to a string is when you are passing a payload to custom code via <a href="#calling-java">Java interop</a>. Do note that when passing JSON, the default <code>Map</code> and <code>List</code> representations should suffice for most needs (<a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/java/cats-java.feature">see example</a>), and using them would avoid un-necessary string-conversion.</p>
<p dir="auto">So you have the following type markers you can use instead of <a href="#def"><code>def</code></a> (or the rarely used <a href="#text"><code>text</code></a>). The first four below are best explained in this example file: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature"><code>type-conv.feature</code></a>.</p>
<ul dir="auto">
<li><a name="user-content-type-string"><code>string</code></a> - convert JSON or any other data-type (except XML) to a string</li>
<li><a name="user-content-type-json"><code>json</code></a> - convert XML, a map-like or list-like object, a string, or even a Java object into JSON</li>
<li><a name="user-content-type-xml"><code>xml</code></a> - convert JSON, a map-like object, a string, or even a Java object into XML</li>
<li><a name="user-content-type-xmlstring"><code>xmlstring</code></a> - specifically for converting the map-like Karate internal representation of XML into a string</li>
<li><a name="user-content-type-csv"><code>csv</code></a> - convert a CSV string into JSON, see <a href="#csv"><code>csv</code></a></li>
<li><a name="user-content-type-yaml"><code>yaml</code></a> - convert a YAML string into JSON, see <a href="#yaml"><code>yaml</code></a></li>
<li><a name="user-content-type-bytes"><code>bytes</code></a> - convert to a byte-array, useful for binary payloads or comparisons, see <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/websocket/echo.feature">example</a></li>
<li><a name="user-content-type-copy"><code>copy</code></a> - to clone a given payload variable reference (JSON, XML, Map or List), refer: <a href="#copy"><code>copy</code></a></li>
</ul>
<p dir="auto">The <code>csv</code> and <code>yaml</code> types can be initialized in-line using the "triple quote" or "docstring" multi-line approach as shown <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conversion.feature">here</a>.</p>
<p dir="auto">If you want to 'pretty print' a JSON or XML value with indenting, refer to the documentation of the <a href="#print"><code>print</code></a> keyword.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Floats and Integers</h3><a id="user-content-floats-and-integers" class="anchor" aria-label="Permalink: Floats and Integers" href="#floats-and-integers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">While converting a number to a string is easy (just concatenate an empty string e.g. <code>myInt + ''</code>), in some rare cases, you may need to convert a string to a number. You can do this by multiplying by <code>1</code> or using the built-in JavaScript <code>parseInt()</code> function:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = '10'
* string json = { bar: '#(1 * foo)' }
* match json == '{&quot;bar&quot;:10.0}'

* string json = { bar: '#(parseInt(foo))' }
* match json == '{&quot;bar&quot;:10.0}'"><pre><span class="pl-k">* </span>def foo = <span class="pl-s">'10'</span>
<span class="pl-k">* </span>string json = { bar: <span class="pl-s">'#(1 * foo)'</span> }
<span class="pl-k">* </span>match json == <span class="pl-s">'{"bar":10.0}'</span>

<span class="pl-k">* </span>string json = { bar: <span class="pl-s">'#(parseInt(foo))'</span> }
<span class="pl-k">* </span>match json == <span class="pl-s">'{"bar":10.0}'</span></pre></div>
<p dir="auto">As per the JSON spec, all numeric values are treated as doubles, so for integers - it really doesn't matter if there is a decimal point or not. In fact it may be a good idea to slip doubles instead of integers into some of your tests ! Anyway, there are times when you may want to force integers (perhaps for cosmetic reasons) and you can easily do so using the 'double-tilde' <a href="http://rocha.la/JavaScript-bitwise-operators-in-practice" rel="nofollow">short-cut: '<code>~~</code>'</a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = '10'
* string json = { bar: '#(~~foo)' }
* match json == '{&quot;bar&quot;:10}'

# JS math can introduce a decimal point in some cases
* def foo = 100
* string json = { bar: '#(foo * 0.1)' }
* match json == '{&quot;bar&quot;:10.0}'

# but you can easily coerce to an integer if needed
* string json = { bar: '#(~~(foo * 0.1))' }
* match json == '{&quot;bar&quot;:10}'"><pre><span class="pl-k">* </span>def foo = <span class="pl-s">'10'</span>
<span class="pl-k">* </span>string json = { bar: <span class="pl-s">'#(~~foo)'</span> }
<span class="pl-k">* </span>match json == <span class="pl-s">'{"bar":10}'</span>

<span class="pl-c"># JS math can introduce a decimal point in some cases</span>
<span class="pl-k">* </span>def foo = 100
<span class="pl-k">* </span>string json = { bar: <span class="pl-s">'#(foo * 0.1)'</span> }
<span class="pl-k">* </span>match json == <span class="pl-s">'{"bar":10.0}'</span>

<span class="pl-c"># but you can easily coerce to an integer if needed</span>
<span class="pl-k">* </span>string json = { bar: <span class="pl-s">'#(~~(foo * 0.1))'</span> }
<span class="pl-k">* </span>match json == <span class="pl-s">'{"bar":10}'</span></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Large Numbers</h3><a id="user-content-large-numbers" class="anchor" aria-label="Permalink: Large Numbers" href="#large-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Sometimes when dealing with very large numbers, the JS engine may mangle the number into scientific notation:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def big = 123123123123
* string json = { num: '#(big)' }
* match json == '{&quot;num&quot;:1.23123123123E11}'"><pre><span class="pl-k">* </span>def big = 123123123123
<span class="pl-k">* </span>string json = { num: <span class="pl-s">'#(big)'</span> }
<span class="pl-k">* </span>match json == <span class="pl-s">'{"num":1.23123123123E11}'</span></pre></div>
<p dir="auto">This can be easily solved by using <code>java.math.BigDecimal</code>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def big = new java.math.BigDecimal(123123123123)
* string json = { num: '#(big)' }
* match json == '{&quot;num&quot;:123123123123}'"><pre><span class="pl-k">* </span>def big = new java.math.BigDecimal(123123123123)
<span class="pl-k">* </span>string json = { num: <span class="pl-s">'#(big)'</span> }
<span class="pl-k">* </span>match json == <span class="pl-s">'{"num":123123123123}'</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>doc</code></h2><a id="user-content-doc" class="anchor" aria-label="Permalink: doc" href="#doc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate has a built-in HTML templating engine that can be used to insert additional custom HTML into the test-reports. Here is an <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/users-doc.feature">example</a>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* url 'https://jsonplaceholder.typicode.com/users'
* method get
* doc { read: 'users.html' }"><pre><span class="pl-k">* </span>url <span class="pl-s">'https://jsonplaceholder.typicode.com/users'</span>
<span class="pl-k">* </span>method get
<span class="pl-k">* </span>doc { read: <span class="pl-s">'users.html'</span> }</pre></div>
<p dir="auto">Any Karate <a href="#def">variable</a> will be available to the template, which is <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/users.html"><code>users.html</code></a> in this example.</p>
<div class="highlight highlight-text-html-basic notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="&lt;table class=&quot;table table-striped&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ID&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;E-Mail&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr th:each=&quot;user: response&quot;&gt;
      &lt;td th:text=&quot;user.id&quot;&gt;&lt;/td&gt;
      &lt;td th:text=&quot;user.name&quot;&gt;&lt;/td&gt;
      &lt;td th:text=&quot;user.email&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;"><pre><span class="pl-kos">&lt;</span><span class="pl-ent">table</span> <span class="pl-c1">class</span>="<span class="pl-s">table table-striped</span>"<span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">thead</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
      <span class="pl-kos">&lt;</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>ID<span class="pl-kos">&lt;/</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>
      <span class="pl-kos">&lt;</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>Name<span class="pl-kos">&lt;/</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>
      <span class="pl-kos">&lt;</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>E-Mail<span class="pl-kos">&lt;/</span><span class="pl-ent">th</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;/</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;/</span><span class="pl-ent">thead</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;</span><span class="pl-ent">tbody</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;</span><span class="pl-ent">tr</span> <span class="pl-c1">th:each</span>="<span class="pl-s">user: response</span>"<span class="pl-kos">&gt;</span>
      <span class="pl-kos">&lt;</span><span class="pl-ent">td</span> <span class="pl-c1">th:text</span>="<span class="pl-s">user.id</span>"<span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">td</span><span class="pl-kos">&gt;</span>
      <span class="pl-kos">&lt;</span><span class="pl-ent">td</span> <span class="pl-c1">th:text</span>="<span class="pl-s">user.name</span>"<span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">td</span><span class="pl-kos">&gt;</span>
      <span class="pl-kos">&lt;</span><span class="pl-ent">td</span> <span class="pl-c1">th:text</span>="<span class="pl-s">user.email</span>"<span class="pl-kos">&gt;</span><span class="pl-kos">&lt;/</span><span class="pl-ent">td</span><span class="pl-kos">&gt;</span>
    <span class="pl-kos">&lt;/</span><span class="pl-ent">tr</span><span class="pl-kos">&gt;</span>
  <span class="pl-kos">&lt;/</span><span class="pl-ent">tbody</span><span class="pl-kos">&gt;</span>
<span class="pl-kos">&lt;/</span><span class="pl-ent">table</span><span class="pl-kos">&gt;</span></pre></div>
<p dir="auto">You can see what the result looks like <a href="https://twitter.com/ptrthomas/status/1335478948365443072" rel="nofollow">here</a>.</p>
<p dir="auto">Since templates can be loaded using the <a href="#classpath"><code>classpath:</code></a> prefix, you can even re-use templates across your projects via <a href="https://stackoverflow.com/a/58339662/143475" rel="nofollow">Java JAR files</a>.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Karate Expressions</h1><a id="user-content-karate-expressions" class="anchor" aria-label="Permalink: Karate Expressions" href="#karate-expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Before we get to the HTTP keywords, it is worth doing a recap of the various 'shapes' that the right-hand-side of an assignment statement can take:</p>
<table>
<thead>
<tr>
<th>Example</th>
<th>Shape</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>* def foo = 'bar'</code></td>
<td>JS</td>
<td>simple strings, numbers or booleans</td>
</tr>
<tr>
<td><code>* def foo = 'bar' + baz[0]</code></td>
<td>JS</td>
<td>any valid JavaScript expression, and variables can be mixed in, another example: <code>bar.length + 1</code></td>
</tr>
<tr>
<td><code>* def foo = { bar: '#(baz)' }</code></td>
<td>JSON</td>
<td>anything that starts with a <code>{</code> or a <code>[</code> is parsed as JSON, use <a href="#text"><code>text</code></a> instead of <a href="#def"><code>def</code></a> if you need to suppress the default behavior</td>
</tr>
<tr>
<td><code>* def foo = ({ bar: baz })</code></td>
<td>JS</td>
<td><a href="#enclosed-javascript">enclosed JavaScript</a>, the result of which is exactly equivalent to the above</td>
</tr>
<tr>
<td><code>* def foo = &lt;foo&gt;bar&lt;/foo&gt;</code></td>
<td>XML</td>
<td>anything that starts with a <code>&lt;</code> is parsed as XML, use <a href="#text"><code>text</code></a> instead of <a href="#def"><code>def</code></a> if you need to suppress the default behavior</td>
</tr>
<tr>
<td><code>* def foo = function(arg){ return arg + bar }</code></td>
<td>JS Fn</td>
<td>anything that starts with <code>function(...){</code> is parsed as a JS function.</td>
</tr>
<tr>
<td><code>* def foo = read('bar.json')</code></td>
<td>JS</td>
<td>using the built-in <a href="#reading-files"><code>read()</code></a> function</td>
</tr>
<tr>
<td><code>* def foo = $.bar[0]</code></td>
<td>JsonPath</td>
<td>short-cut JsonPath on the <a href="#response"><code>response</code></a></td>
</tr>
<tr>
<td><code>* def foo = /bar/baz</code></td>
<td>XPath</td>
<td>short-cut XPath on the <a href="#response"><code>response</code></a></td>
</tr>
<tr>
<td><code>* def foo = get bar $..baz[?(@.ban)]</code></td>
<td><a href="#get"><code>get</code></a> JsonPath</td>
<td><a href="https://github.com/json-path/JsonPath#path-examples">JsonPath</a> on the variable <code>bar</code>, you can also use <a href="#get-plus-index"><code>get[0]</code></a> to get the first item if the JsonPath evaluates to an array - especially useful when using wildcards such as <code>[*]</code> or <a href="#jsonpath-filters">filter-criteria</a></td>
</tr>
<tr>
<td><code>* def foo = $bar..baz[?(@.ban)]</code></td>
<td>$var.JsonPath</td>
<td><a href="#get-short-cut">convenience short-cut</a> for the above</td>
</tr>
<tr>
<td><code>* def foo = get bar count(/baz//ban)</code></td>
<td><a href="#get"><code>get</code></a> XPath</td>
<td>XPath on the variable <code>bar</code></td>
</tr>
<tr>
<td><code>* def foo = karate.pretty(bar)</code></td>
<td>JS</td>
<td>using the <a href="#the-karate-object">built-in <code>karate</code> object</a> in JS expressions</td>
</tr>
<tr>
<td><code>* def Foo = Java.type('com.mycompany.Foo')</code></td>
<td>JS-Java</td>
<td><a href="#java-interop">Java Interop</a>, and even package-name-spaced one-liners like <code>java.lang.System.currentTimeMillis()</code> are possible</td>
</tr>
<tr>
<td><code>* def foo = call bar { baz: '#(ban)' }</code></td>
<td><a href="#call"><code>call</code></a></td>
<td>or <a href="#callonce"><code>callonce</code></a>, where expressions like <a href="#reading-files"><code>read('foo.js')</code></a> are allowed as the object to be called or the argument</td>
</tr>
<tr>
<td><code>* def foo = bar({ baz: ban })</code></td>
<td>JS</td>
<td>equivalent to the above, JavaScript function invocation</td>
</tr>
</tbody>
</table>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Core Keywords</h1><a id="user-content-core-keywords" class="anchor" aria-label="Permalink: Core Keywords" href="#core-keywords"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">They are <code>url</code>, <code>path</code>, <code>request</code>, <code>method</code> and <code>status</code>.</p>
<p dir="auto">These are essential HTTP operations, they focus on setting one (un-named or 'key-less') value at a time and therefore don't need an <code>=</code> sign in the syntax.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>url</code></h2><a id="user-content-url" class="anchor" aria-label="Permalink: url" href="#url"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given url 'https://myhost.com/v1/cats'"><pre><span class="pl-k">Given </span>url <span class="pl-s">'https://myhost.com/v1/cats'</span></pre></div>
<p dir="auto">Within a <code>Scenario</code>, a URL remains constant until you use the <code>url</code> keyword again, so this is a good place to set-up the 'non-changing' parts of your REST URL-s.</p>
<p dir="auto">A URL can take expressions, so the approach below is legal.  And yes, variables can come from global <a href="#configuration">config</a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given url 'https://' + e2eHostName + '/v1/api'"><pre><span class="pl-k">Given </span>url <span class="pl-s">'https://'</span> + e2eHostName + <span class="pl-s">'/v1/api'</span></pre></div>
<p dir="auto">JavaScript enthusiasts may prefer variable interpolation using backticks:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* url `https://${e2eHostName}/v1/api`"><pre><span class="pl-k">* </span>url `https://${e2eHostName}/v1/api`</pre></div>
<p dir="auto">If you are trying to build dynamic URLs including query-string parameters in the form: <code>http://myhost/some/path?foo=bar&amp;search=true</code> - please refer to the <a href="#param"><code>param</code></a> keyword.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>configure url</code></h3><a id="user-content-configure-url" class="anchor" aria-label="Permalink: configure url" href="#configure-url"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When you <a href="#call"><code>call</code></a> other features, the <code>url</code> will be "reset". But if you want the <code>url</code> to persist, you can do this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature:

Scenario:
* configure url = 'https://httpbin.org'
* path 'anything'
* method get
* call read('@called')

@ignore @called
Scenario:
* path 'anything'
* method get"><pre>Feature:

<span class="pl-k">Scenario</span>:
<span class="pl-k">* </span>configure url = <span class="pl-s">'https://httpbin.org'</span>
<span class="pl-k">* </span>path <span class="pl-s">'anything'</span>
<span class="pl-k">* </span>method get
<span class="pl-k">* </span>call read(<span class="pl-s">'@called'</span>)

<span class="pl-k">@ignore</span> <span class="pl-k">@called</span>
<span class="pl-k">Scenario</span>:
<span class="pl-k">* </span>path <span class="pl-s">'anything'</span>
<span class="pl-k">* </span>method get</pre></div>
<p dir="auto">Note how in the "called" <code>Scenario</code> you could omit the <code>url</code>. It is easy to change the <code>url</code> anytime by using the keyword. Note that you can use variables to set up the <code>url</code> any time you need to.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>path</code></h2><a id="user-content-path" class="anchor" aria-label="Permalink: path" href="#path"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">REST-style path parameters.  Can be expressions that will be evaluated.  Comma delimited values are supported which can be more convenient, and takes care of URL-encoding and appending '/' between path segments as needed.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given path 'documents', documentId, 'download'

# or you can do the same on multiple lines if you wish
Given path 'documents'
And path documentId
And path 'download'"><pre><span class="pl-k">Given </span>path <span class="pl-s">'documents'</span>, documentId, <span class="pl-s">'download'</span>

<span class="pl-c"># or you can do the same on multiple lines if you wish</span>
<span class="pl-k">Given </span>path <span class="pl-s">'documents'</span>
<span class="pl-k">And </span>path documentId
<span class="pl-k">And </span>path <span class="pl-s">'download'</span></pre></div>
<p dir="auto">Note that the <code>path</code> 'resets' after any HTTP request is made but not the <code>url</code>. The <a href="#hello-world">Hello World</a> is a great example of 'REST-ful' use of the <code>url</code> when the test focuses on a single REST 'resource'. Look at how the <code>path</code> did not need to be specified for the second HTTP <code>get</code> call since <code>/cats</code> is part of the <code>url</code>.</p>
<blockquote>
<p dir="auto">Important: If you attempt to build a URL in the form <code>?myparam=value</code> by using <code>path</code> the <code>?</code> will get encoded into <code>%3F</code>. Use either the <a href="#param"><code>param</code></a> keyword, e.g.: <code>* param myparam = 'value'</code> or <a href="#url"><code>url</code></a>: <code>* url 'http://example.com/v1?myparam'</code></p>
</blockquote>
<p dir="auto">Because Karate strips trailing slashes if part of a <code>path</code> parameter, if you want to append a forward-slash to the end of the URL in the final HTTP request - make sure that the last <code>path</code> is a single '/'. For example, if your path has to be <code>documents/</code> (and not just <code>documents</code>), use:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given path 'documents', '/'"><pre><span class="pl-k">Given </span>path <span class="pl-s">'documents'</span>, <span class="pl-s">'/'</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>request</code></h2><a id="user-content-request" class="anchor" aria-label="Permalink: request" href="#request"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In-line JSON:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given request { name: 'Billie', type: 'LOL' }"><pre><span class="pl-k">Given </span>request { name: <span class="pl-s">'Billie'</span>, type: <span class="pl-s">'LOL'</span> }</pre></div>
<p dir="auto">In-line XML:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="And request &lt;cat&gt;&lt;name&gt;Billie&lt;/name&gt;&lt;type&gt;Ceiling&lt;/type&gt;&lt;/cat&gt;"><pre><span class="pl-k">And </span>request <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Billie<span class="pl-smi">&lt;/name&gt;&lt;type&gt;</span>Ceiling<span class="pl-smi">&lt;/type&gt;&lt;/cat&gt;</span></pre></div>
<p dir="auto">From a <a href="#reading-files">file</a> in the same package.  Use the <code>classpath:</code> prefix to load from the <a href="#classpath">classpath</a> instead.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given request read('my-json.json')"><pre><span class="pl-k">Given </span>request read(<span class="pl-s">'my-json.json'</span>)</pre></div>
<p dir="auto">You could always use a variable:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="And request myVariable"><pre><span class="pl-k">And </span>request myVariable</pre></div>
<p dir="auto">In most cases you won't need to set the <code>Content-Type</code> <a href="#header"><code>header</code></a> as Karate will automatically do the right thing depending on the data-type of the <code>request</code>.</p>
<p dir="auto">Defining the <code>request</code> is mandatory if you are using an HTTP <code>method</code> that expects a body such as <code>post</code>. If you really need to have an empty body, you can use an empty string as shown below, and you can force the right <code>Content-Type</code> header by using the <a href="#header"><code>header</code></a> keyword.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given request ''
And header Content-Type = 'text/html'"><pre><span class="pl-k">Given </span>request <span class="pl-s">''</span>
<span class="pl-k">And </span>header Content-Type = <span class="pl-s">'text/html'</span></pre></div>
<p dir="auto">Sending a <a href="#reading-files">file</a> as the entire binary request body is easy (note that <a href="#multipart-file"><code>multipart</code></a> is different):</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given path 'upload'
And request read('my-image.jpg')
When method put
Then status 200"><pre><span class="pl-k">Given </span>path <span class="pl-s">'upload'</span>
<span class="pl-k">And </span>request read(<span class="pl-s">'my-image.jpg'</span>)
<span class="pl-k">When </span>method put
<span class="pl-k">Then </span>status 200</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>method</code></h2><a id="user-content-method" class="anchor" aria-label="Permalink: method" href="#method"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The HTTP verb - <code>get</code>, <code>post</code>, <code>put</code>, <code>delete</code>, <code>patch</code>, <code>options</code>, <code>head</code>, <code>connect</code>, <code>trace</code>.</p>
<p dir="auto">Lower-case is fine.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="When method post"><pre><span class="pl-k">When </span>method post</pre></div>
<p dir="auto">It is worth internalizing that during test-execution, it is upon the <code>method</code> keyword that the actual HTTP request is issued. Which suggests that the step should be in the <code>When</code> form, for example: <code>When method post</code>. And steps that follow should logically be in the <code>Then</code> form. Also make sure that you complete the set up of things like <a href="#url"><code>url</code></a>, <a href="#param"><code>param</code></a>, <a href="#header"><code>header</code></a>, <a href="#configure"><code>configure</code></a> etc. <em>before</em> you fire the <code>method</code>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# set headers or params (if any) BEFORE the method step
Given header Accept = 'application/json'
When method get
# the step that immediately follows the above would typically be:
Then status 200"><pre><span class="pl-c"># set headers or params (if any) BEFORE the method step</span>
<span class="pl-k">Given </span>header Accept = <span class="pl-s">'application/json'</span>
<span class="pl-k">When </span>method get
<span class="pl-c"># the step that immediately follows the above would typically be:</span>
<span class="pl-k">Then </span>status 200</pre></div>
<p dir="auto">Although rarely needed, variable references or <a href="#karate-expressions">expressions</a> are also supported:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def putOrPost = (someVariable == 'dev' ? 'put' : 'post')
* method putOrPost"><pre><span class="pl-k">* </span>def putOrPost = (someVariable == <span class="pl-s">'dev'</span> ? <span class="pl-s">'put'</span> : <span class="pl-s">'post'</span>)
<span class="pl-k">* </span>method putOrPost</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>status</code></h2><a id="user-content-status" class="anchor" aria-label="Permalink: status" href="#status"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This is a shortcut to assert the HTTP response code.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Then status 200"><pre><span class="pl-k">Then </span>status 200</pre></div>
<p dir="auto">And this assertion will cause the test to fail if the HTTP response code is something else.</p>
<p dir="auto">See also <a href="#responsestatus"><code>responseStatus</code></a> if you want to do some complex assertions against the HTTP status code.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Keywords that set key-value pairs</h1><a id="user-content-keywords-that-set-key-value-pairs" class="anchor" aria-label="Permalink: Keywords that set key-value pairs" href="#keywords-that-set-key-value-pairs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">They are <code>param</code>, <code>header</code>, <code>cookie</code>, <code>form field</code> and <code>multipart field</code>.</p>
<p dir="auto">The syntax will include a '=' sign between the key and the value.  The key should not be within quotes.</p>
<blockquote>
<p dir="auto">To make dynamic data-driven testing easier, the following keywords also exist: <a href="#params"><code>params</code></a>, <a href="#headers"><code>headers</code></a>, <a href="#cookies-json"><code>cookies</code></a> and <a href="#form-fields"><code>form fields</code></a>. They use JSON to build the relevant parts of the HTTP request.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>param</code></h2><a id="user-content-param" class="anchor" aria-label="Permalink: param" href="#param"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Setting query-string parameters:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given param someKey = 'hello'
And param anotherKey = someVariable"><pre><span class="pl-k">Given </span>param someKey = <span class="pl-s">'hello'</span>
<span class="pl-k">And </span>param anotherKey = someVariable</pre></div>
<p dir="auto">The above would result in a URL like: <code>http://myhost/mypath?someKey=hello&amp;anotherKey=foo</code>. Note that the <code>?</code> and <code>&amp;</code> will be automatically inserted.</p>
<p dir="auto">Multi-value params are also supported:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* param myParam = ['foo', 'bar']"><pre><span class="pl-k">* </span>param myParam = [<span class="pl-s">'foo'</span>, <span class="pl-s">'bar'</span>]</pre></div>
<p dir="auto">For convenience, a <code>null</code> value will be ignored. You can also use JSON to set multiple query-parameters in one-line using <a href="#params"><code>params</code></a> and this is especially useful for dynamic data-driven testing.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>header</code></h2><a id="user-content-header" class="anchor" aria-label="Permalink: header" href="#header"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You can use <a href="#calling-javascript-functions">functions</a> or <a href="#karate-expressions">expressions</a>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given header Authorization = myAuthFunction()
And header transaction-id = 'test-' + myIdString"><pre><span class="pl-k">Given </span>header Authorization = myAuthFunction()
<span class="pl-k">And </span>header transaction-id = <span class="pl-s">'test-'</span> + myIdString</pre></div>
<p dir="auto">It is worth repeating that in most cases you won't need to set the <code>Content-Type</code> header as Karate will automatically do the right thing depending on the data-type of the <a href="#request"><code>request</code></a>.</p>
<p dir="auto">Because of how easy it is to set HTTP headers, Karate does not provide any special keywords for things like
the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept" rel="nofollow"><code>Accept</code></a> header. You simply do
something like this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given path 'some/path'
And request { some: 'data' }
And header Accept = 'application/json'
When method post
Then status 200"><pre><span class="pl-k">Given </span>path <span class="pl-s">'some/path'</span>
<span class="pl-k">And </span>request { some: <span class="pl-s">'data'</span> }
<span class="pl-k">And </span>header Accept = <span class="pl-s">'application/json'</span>
<span class="pl-k">When </span>method post
<span class="pl-k">Then </span>status 200</pre></div>
<p dir="auto">A common need is to send the same header(s) for <em>every</em> request, and <a href="#configure-headers"><code>configure headers</code></a> (with JSON) is how you can set this up once for all subsequent requests. And if you do this within a <code>Background:</code> section, it would apply to all <code>Scenario:</code> sections within the <code>*.feature</code> file.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* configure headers = { 'Content-Type': 'application/xml' }"><pre><span class="pl-k">* </span>configure headers = { <span class="pl-s">'Content-Type'</span>: <span class="pl-s">'application/xml'</span> }</pre></div>
<p dir="auto">Note that <code>Content-Type</code> had to be enclosed in quotes in the JSON above because the "<code>-</code>" (hyphen character) would cause problems otherwise. Also note that "<code>; charset=UTF-8</code>" would be appended to the <code>Content-Type</code> header that Karate sends by default, and in some rare cases, you may need to suppress this behavior completely. You can do so by setting the <code>charset</code> to null via the <a href="#configure"><code>configure</code></a> keyword:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* configure charset = null"><pre><span class="pl-k">* </span>configure charset = null</pre></div>
<p dir="auto">If you need headers to be dynamically generated for each HTTP request, use a JavaScript function with <a href="#configure-headers"><code>configure headers</code></a> instead of JSON.</p>
<p dir="auto">Multi-value headers (though rarely used in the wild) are also supported:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* header myHeader = ['foo', 'bar']"><pre><span class="pl-k">* </span>header myHeader = [<span class="pl-s">'foo'</span>, <span class="pl-s">'bar'</span>]</pre></div>
<p dir="auto">Also look at the <a href="#headers"><code>headers</code></a> keyword which uses JSON and makes some kinds of dynamic data-driven testing easier.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>cookie</code></h2><a id="user-content-cookie" class="anchor" aria-label="Permalink: cookie" href="#cookie"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Setting a cookie:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given cookie foo = 'bar'"><pre><span class="pl-k">Given </span>cookie foo = <span class="pl-s">'bar'</span></pre></div>
<p dir="auto">You also have the option of setting multiple cookies in one-step using the <a href="#cookies"><code>cookies</code></a> keyword.</p>
<p dir="auto">Note that any cookies returned in the HTTP response would be automatically set for any future requests. This mechanism works by calling <a href="#configure"><code>configure cookies</code></a> behind the scenes and if you need to stop auto-adding cookies for future requests, just do this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* configure cookies = null"><pre><span class="pl-k">* </span>configure cookies = null</pre></div>
<p dir="auto">Also refer to the built-in variable <a href="#responsecookies"><code>responseCookies</code></a> for how you can access and perform assertions on cookie data values.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>form field</code></h2><a id="user-content-form-field" class="anchor" aria-label="Permalink: form field" href="#form-field"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">HTML form fields would be URL-encoded when the HTTP request is submitted (by the <a href="#method"><code>method</code></a> step). You would typically use these to simulate a user sign-in and then grab a security token from the <a href="#response"><code>response</code></a>.</p>
<p dir="auto">Note that the <code>Content-Type</code> header will be automatically set to: <code>application/x-www-form-urlencoded</code>. You just need to do a normal <code>POST</code> (or <code>GET</code>).</p>
<p dir="auto">For example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given path 'login'
And form field username = 'john'
And form field password = 'secret'
When method post
Then status 200
And def authToken = response.token"><pre><span class="pl-k">Given </span>path <span class="pl-s">'login'</span>
<span class="pl-k">And </span>form field username = <span class="pl-s">'john'</span>
<span class="pl-k">And </span>form field password = <span class="pl-s">'secret'</span>
<span class="pl-k">When </span>method post
<span class="pl-k">Then </span>status 200
<span class="pl-k">And </span>def authToken = response.token</pre></div>
<p dir="auto">A good example of the use of <code>form field</code> for a typical sign-in flow is this OAuth 2 demo: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/oauth/oauth2.feature"><code>oauth2.feature</code></a>.</p>
<p dir="auto">Multi-values are supported the way you would expect (e.g. for simulating check-boxes and multi-selects):</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* form field selected = ['apple', 'orange']"><pre><span class="pl-k">* </span>form field selected = [<span class="pl-s">'apple'</span>, <span class="pl-s">'orange'</span>]</pre></div>
<p dir="auto">You can also dynamically set multiple fields in one step using the <a href="#form-fields"><code>form fields</code></a> keyword.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>multipart field</code></h2><a id="user-content-multipart-field" class="anchor" aria-label="Permalink: multipart field" href="#multipart-field"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Use this for building multipart named (form) field requests. This is typically combined with <code>multipart file</code> as shown below.</p>
<blockquote>
<p dir="auto">Multiple fields can be set in one step using <a href="#multipart-fields"><code>multipart fields</code></a>.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>multipart file</code></h2><a id="user-content-multipart-file" class="anchor" aria-label="Permalink: multipart file" href="#multipart-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given multipart file myFile = { read: 'test.pdf', filename: 'upload-name.pdf', contentType: 'application/pdf' }
And multipart field message = 'hello world'
When method post
Then status 200"><pre><span class="pl-k">Given </span>multipart file myFile = { read: <span class="pl-s">'test.pdf'</span>, filename: <span class="pl-s">'upload-name.pdf'</span>, contentType: <span class="pl-s">'application/pdf'</span> }
<span class="pl-k">And </span>multipart field message = <span class="pl-s">'hello world'</span>
<span class="pl-k">When </span>method post
<span class="pl-k">Then </span>status 200</pre></div>
<p dir="auto">It is important to note that <code>myFile</code> above is the "field name" within the <code>multipart/form-data</code> request payload. This roughly corresponds to a <a href="https://curl.haxx.se/docs/manpage.html#-F" rel="nofollow"><code>cURL</code></a> argument of <code>-F @myFile=test.pdf</code>.</p>
<blockquote>
<p dir="auto"><code>multipart</code> file uploads can be tricky, and hard to get right. If you get stuck and ask a question on <a href="https://stackoverflow.com/questions/tagged/karate" rel="nofollow">Stack Overflow</a>, make sure you provide a <code>cURL</code> command that works - or else it would be very difficult for anyone to troubleshoot what you could be doing wrong. Also see <a href="https://github.com/karatelabs/karate/issues/1645#issuecomment-862502881" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/1645/hovercard">this thread</a>.</p>
</blockquote>
<p dir="auto">Also note that <code>multipart file</code> takes a JSON argument so that you can easily set the <code>filename</code> and the <code>contentType</code> (mime-type) in one step.</p>
<ul dir="auto">
<li><code>read</code>: the name of a file, and the <a href="#reading-files"><code>classpath:</code></a> prefix also is allowed. mandatory unless <code>value</code> is used, see below.</li>
<li><code>value</code>: alternative to <code>read</code> in rare cases where something like a JSON or XML file is being uploaded and you want to create it dynamically.</li>
<li><code>filename</code>: optional, if not specified there will be no <code>filename</code> attribute in <code>Content-Disposition</code></li>
<li><code>contentType</code>: optional, will default to <code>application/octet-stream</code></li>
</ul>
<p dir="auto">When 'multipart' content is involved, the <code>Content-Type</code> header of the HTTP request defaults to <code>multipart/form-data</code>.
You can over-ride it by using the <a href="#header"><code>header</code></a> keyword before the <code>method</code> step.  Look at
<a href="#multipart-entity"><code>multipart entity</code></a> for an example.</p>
<p dir="auto">Also refer to this <a href="/karatelabs/karate/blob/master/karate-demo">demo example</a> for a working example of multipart file uploads: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/upload/upload.feature"><code>upload.feature</code></a>.</p>
<p dir="auto">You can also dynamically set multiple files in one step using <a href="#multipart-files"><code>multipart files</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>multipart entity</code></h2><a id="user-content-multipart-entity" class="anchor" aria-label="Permalink: multipart entity" href="#multipart-entity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">This is technically not in the key-value form: <code>multipart field name = 'foo'</code>, but logically
belongs here in the documentation.</p>
</blockquote>
<p dir="auto">Use this for multipart content items that don't have field-names.  Here below is an example that
also demonstrates using the <a href="https://tools.ietf.org/html/rfc2387" rel="nofollow"><code>multipart/related</code></a> content-type.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given path 'v2', 'documents'
And multipart entity read('foo.json')
And multipart field image = read('bar.jpg')
And header Content-Type = 'multipart/related'
When method post 
Then status 201"><pre><span class="pl-k">Given </span>path <span class="pl-s">'v2'</span>, <span class="pl-s">'documents'</span>
<span class="pl-k">And </span>multipart entity read(<span class="pl-s">'foo.json'</span>)
<span class="pl-k">And </span>multipart field image = read(<span class="pl-s">'bar.jpg'</span>)
<span class="pl-k">And </span>header Content-Type = <span class="pl-s">'multipart/related'</span>
<span class="pl-k">When </span>method post 
<span class="pl-k">Then </span>status 201</pre></div>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Multi-Param Keywords</h1><a id="user-content-multi-param-keywords" class="anchor" aria-label="Permalink: Multi-Param Keywords" href="#multi-param-keywords"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Keywords that set multiple key-value pairs in one step</h2><a id="user-content-keywords-that-set-multiple-key-value-pairs-in-one-step" class="anchor" aria-label="Permalink: Keywords that set multiple key-value pairs in one step" href="#keywords-that-set-multiple-key-value-pairs-in-one-step"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto"><code>params</code>, <code>headers</code>, <code>cookies</code>, <code>form fields</code>, <code>multipart fields</code> and <code>multipart files</code> take a single JSON argument (which can be in-line or a variable reference), and this enables certain types of dynamic data-driven testing, especially because any JSON key with a <code>null</code> value will be ignored. Here is a good example in the demos: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/search/dynamic-params.feature"><code>dynamic-params.feature</code></a></p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>params</code></h2><a id="user-content-params" class="anchor" aria-label="Permalink: params" href="#params"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* params { searchBy: 'client', active: true, someList: [1, 2, 3] }"><pre><span class="pl-k">* </span>params { searchBy: <span class="pl-s">'client'</span>, active: true, someList: [1, 2, 3] }</pre></div>
<p dir="auto">See also <a href="#param"><code>param</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>headers</code></h2><a id="user-content-headers" class="anchor" aria-label="Permalink: headers" href="#headers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def someData = { Authorization: 'sometoken', tx_id: '1234', extraTokens: ['abc', 'def'] }
* headers someData"><pre><span class="pl-k">* </span>def someData = { Authorization: <span class="pl-s">'sometoken'</span>, tx_id: <span class="pl-s">'1234'</span>, extraTokens: [<span class="pl-s">'abc'</span>, <span class="pl-s">'def'</span>] }
<span class="pl-k">* </span>headers someData</pre></div>
<p dir="auto">See also <a href="#header"><code>header</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>cookies</code></h2><a id="user-content-cookies" class="anchor" aria-label="Permalink: cookies" href="#cookies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* cookies { someKey: 'someValue', foo: 'bar' }"><pre><span class="pl-k">* </span>cookies { someKey: <span class="pl-s">'someValue'</span>, foo: <span class="pl-s">'bar'</span> }</pre></div>
<p dir="auto">See also <a href="#cookie"><code>cookie</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>form fields</code></h2><a id="user-content-form-fields" class="anchor" aria-label="Permalink: form fields" href="#form-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def credentials = { username: '#(user.name)', password: 'secret', projects: ['one', 'two'] }
* form fields credentials"><pre><span class="pl-k">* </span>def credentials = { username: <span class="pl-s">'#(user.name)'</span>, password: <span class="pl-s">'secret'</span>, projects: [<span class="pl-s">'one'</span>, <span class="pl-s">'two'</span>] }
<span class="pl-k">* </span>form fields credentials</pre></div>
<p dir="auto">See also <a href="#form-field"><code>form field</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>multipart fields</code></h2><a id="user-content-multipart-fields" class="anchor" aria-label="Permalink: multipart fields" href="#multipart-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="And multipart fields { message: 'hello world', json: { foo: 'bar' } }"><pre><span class="pl-k">And </span>multipart fields { message: <span class="pl-s">'hello world'</span>, json: { foo: <span class="pl-s">'bar'</span> } }</pre></div>
<p dir="auto">See also <a href="#multipart-field"><code>multipart field</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>multipart files</code></h2><a id="user-content-multipart-files" class="anchor" aria-label="Permalink: multipart files" href="#multipart-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The single JSON argument needs to be in the form <code>{ field1: { read: 'file1.ext' }, field2: { read: 'file2.ext' } }</code> where each nested JSON is in the form expected by <a href="#multipart-file"><code>multipart file</code></a></p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def json = {}
* set json.myFile1 = { read: 'test1.pdf', filename: 'upload-name1.pdf', contentType: 'application/pdf' }
# if you have dynamic keys you can do this
* def key = 'myFile2'
* json[key] = { read: 'test2.pdf', filename: 'upload-name2.pdf', contentType: 'application/pdf' }
And multipart files json"><pre><span class="pl-k">* </span>def json = {}
<span class="pl-k">* </span>set json.myFile1 = { read: <span class="pl-s">'test1.pdf'</span>, filename: <span class="pl-s">'upload-name1.pdf'</span>, contentType: <span class="pl-s">'application/pdf'</span> }
<span class="pl-c"># if you have dynamic keys you can do this</span>
<span class="pl-k">* </span>def key = <span class="pl-s">'myFile2'</span>
<span class="pl-k">* </span>json[key] = { read: <span class="pl-s">'test2.pdf'</span>, filename: <span class="pl-s">'upload-name2.pdf'</span>, contentType: <span class="pl-s">'application/pdf'</span> }
<span class="pl-k">And </span>multipart files json</pre></div>
<p dir="auto">For an example, refer: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/upload/upload-multiple-files.feature"><code>upload-multiple-files.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">SOAP</h1><a id="user-content-soap" class="anchor" aria-label="Permalink: SOAP" href="#soap"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Since a SOAP request needs special handling, this is the only case where the
<a href="#method"><code>method</code></a> step is not used to actually fire the request to the server.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>soap action</code></h2><a id="user-content-soap-action" class="anchor" aria-label="Permalink: soap action" href="#soap-action"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The name of the SOAP action specified is used as the 'SOAPAction' header.  Here is an example
which also demonstrates how you could assert for expected values in the response XML.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given request read('soap-request.xml')
When soap action 'QueryUsageBalance'
Then status 200
And match response /Envelope/Body/QueryUsageBalanceResponse/Result/Error/Code == 'DAT_USAGE_1003'
And match response /Envelope/Body/QueryUsageBalanceResponse == read('expected-response.xml')"><pre><span class="pl-k">Given </span>request read(<span class="pl-s">'soap-request.xml'</span>)
<span class="pl-k">When </span>soap action <span class="pl-s">'QueryUsageBalance'</span>
<span class="pl-k">Then </span>status 200
<span class="pl-k">And </span>match response /Envelope/Body/QueryUsageBalanceResponse/Result/Error/Code == <span class="pl-s">'DAT_USAGE_1003'</span>
<span class="pl-k">And </span>match response /Envelope/Body/QueryUsageBalanceResponse == read(<span class="pl-s">'expected-response.xml'</span>)</pre></div>
<p dir="auto">Refer to the <a href="/karatelabs/karate/blob/master/karate-demo">demos</a> for an example: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/soap/soap.feature"><code>soap.feature</code></a>.</p>
<p dir="auto">More examples are available that showcase various ways of parameter-izing and dynamically manipulating SOAP requests in a data-driven fashion. Karate is quite flexible, and provides multiple options for you to evolve patterns that fit your environment, as you can see here: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature"><code>xml.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>retry until</code></h2><a id="user-content-retry-until" class="anchor" aria-label="Permalink: retry until" href="#retry-until"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate has built-in support for re-trying an HTTP request until a certain condition has been met. The default setting for the max retry-attempts is 3 with a poll interval of 3000 milliseconds (3 seconds). If needed, this can be changed by using <a href="#configure"><code>configure</code></a> - any time during a test, or set globally via <a href="#configuration"><code>karate-config.js</code></a></p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* configure retry = { count: 10, interval: 5000 }"><pre><span class="pl-k">* </span>configure retry = { count: 10, interval: 5000 }</pre></div>
<p dir="auto">The <code>retry</code> keyword is designed to extend the existing <a href="#method"><code>method</code></a> syntax (and should appear <strong>before</strong> a <code>method</code> step) like so:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given url demoBaseUrl
And path 'greeting'
And retry until response.id &gt; 3
When method get
Then status 200"><pre><span class="pl-k">Given </span>url demoBaseUrl
<span class="pl-k">And </span>path <span class="pl-s">'greeting'</span>
<span class="pl-k">And </span>retry until response.id &gt; 3
<span class="pl-k">When </span>method get
<span class="pl-k">Then </span>status 200</pre></div>
<p dir="auto">Any JavaScript expression that uses any variable in scope can be placed after the "<code>retry until</code>" part. So you can refer to the <a href="#response"><code>response</code></a>, <a href="#responsestatus"><code>responseStatus</code></a> or even <a href="#responseheaders"><code>responseHeaders</code></a> if needed. For example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given url demoBaseUrl
And path 'greeting'
And retry until responseStatus == 200 &amp;&amp; response.id &gt; 3
When method get"><pre><span class="pl-k">Given </span>url demoBaseUrl
<span class="pl-k">And </span>path <span class="pl-s">'greeting'</span>
<span class="pl-k">And </span>retry until responseStatus == 200 &amp;&amp; response.id &gt; 3
<span class="pl-k">When </span>method get</pre></div>
<blockquote>
<p dir="auto">Note that it has to be a pure JavaScript expression - which means that <code>match</code> syntax such as <code>contains</code> will <em>not</em> work. But you can easily achieve any complex logic by <a href="https://stackoverflow.com/a/55823180/143475" rel="nofollow">using the JS API</a>.</p>
</blockquote>
<p dir="auto">Refer to <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/polling/polling.feature"><code>polling.feature</code></a> for an example, and also see the alternative way to achieve <a href="#polling">polling</a>.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto"><code>configure</code></h1><a id="user-content-configure" class="anchor" aria-label="Permalink: configure" href="#configure"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Managing Headers, SSL, Timeouts and HTTP Proxy</h2><a id="user-content-managing-headers-ssl-timeouts-and-http-proxy" class="anchor" aria-label="Permalink: Managing Headers, SSL, Timeouts and HTTP Proxy" href="#managing-headers-ssl-timeouts-and-http-proxy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You can adjust configuration settings for the HTTP client used by Karate using this keyword. The syntax is similar to <a href="#def"><code>def</code></a> but instead of a named variable, you update configuration. Here are the configuration keys supported:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>string</td>
<td>See <a href="#configure-url"><code>configure url</code></a></td>
</tr>
<tr>
<td><code>headers</code></td>
<td>JSON / JS function</td>
<td>See <a href="#configure-headers"><code>configure headers</code></a></td>
</tr>
<tr>
<td><code>cookies</code></td>
<td>JSON / JS function</td>
<td>Just like <code>configure headers</code>, but for cookies. You will typically never use this, as response cookies are auto-added to all future requests. If you need to clear cookies at any time, just do <code>configure cookies = null</code></td>
</tr>
<tr>
<td><code>logPrettyRequest</code></td>
<td>boolean</td>
<td>Pretty print the request payload JSON or XML with indenting (default <code>false</code>)</td>
</tr>
<tr>
<td><code>logPrettyResponse</code></td>
<td>boolean</td>
<td>Pretty print the response payload JSON or XML with indenting (default <code>false</code>)</td>
</tr>
<tr>
<td><code>printEnabled</code></td>
<td>boolean</td>
<td>Can be used to suppress the <a href="#print"><code>print</code></a> output when not in 'dev mode' by setting as <code>false</code> (default <code>true</code>)</td>
</tr>
<tr>
<td><code>report</code></td>
<td>JSON / boolean</td>
<td>see <a href="#report-verbosity">report verbosity</a></td>
</tr>
<tr>
<td><code>afterScenario</code></td>
<td>JS function</td>
<td>Will be called <a href="#hooks">after every <code>Scenario</code></a> (or <code>Example</code> within a <code>Scenario Outline</code>), refer to this example: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/hooks/hooks.feature"><code>hooks.feature</code></a></td>
</tr>
<tr>
<td><code>afterFeature</code></td>
<td>JS function</td>
<td>Will be called <a href="#hooks">after every <code>Feature</code></a>, refer to this example: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/hooks/hooks.feature"><code>hooks.feature</code></a></td>
</tr>
<tr>
<td><code>ssl</code></td>
<td>boolean</td>
<td>Enable HTTPS calls without needing to configure a trusted certificate or key-store.</td>
</tr>
<tr>
<td><code>ssl</code></td>
<td>string</td>
<td>Like above, but force the SSL algorithm to one of <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext" rel="nofollow">these values</a>. (The above form internally defaults to <code>TLS</code> if simply set to <code>true</code>).</td>
</tr>
<tr>
<td><code>ssl</code></td>
<td>JSON</td>
<td>see <a href="#x509-certificate-authentication">X509 certificate authentication</a></td>
</tr>
<tr>
<td><code>followRedirects</code></td>
<td>boolean</td>
<td>Whether the HTTP client automatically follows redirects - (default <code>true</code>), refer to this <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/redirect/redirect.feature">example</a>.</td>
</tr>
<tr>
<td><code>connectTimeout</code></td>
<td>integer</td>
<td>Set the connect timeout (milliseconds). The default is 30000 (30 seconds). Note that for <code>karate-apache</code>, this sets the <a href="https://stackoverflow.com/a/22722260/143475" rel="nofollow">socket timeout</a> to the same value as well.</td>
</tr>
<tr>
<td><code>readTimeout</code></td>
<td>integer</td>
<td>Set the read timeout (milliseconds). The default is 30000 (30 seconds).</td>
</tr>
<tr>
<td><code>proxy</code></td>
<td>string</td>
<td>Set the URI of the HTTP proxy to use.</td>
</tr>
<tr>
<td><code>proxy</code></td>
<td>JSON</td>
<td>For a proxy that requires authentication, set the <code>uri</code>, <code>username</code> and <code>password</code>, see example below. Also a <code>nonProxyHosts</code> key is supported which can take a list for e.g. <code>{ uri: 'http://my.proxy.host:8080',  nonProxyHosts: ['host1', 'host2']}</code></td>
</tr>
<tr>
<td><code>localAddress</code></td>
<td>string</td>
<td>see <a href="/karatelabs/karate/blob/master/karate-gatling#configure-localaddress"><code>karate-gatling</code></a></td>
</tr>
<tr>
<td><code>charset</code></td>
<td>string</td>
<td>The charset that will be sent in the request <code>Content-Type</code> which defaults to <code>utf-8</code>. You typically never need to change this, and you can over-ride (or disable) this per-request if needed via the <a href="#header"><code>header</code></a> keyword (<a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/content-type.feature">example</a>).</td>
</tr>
<tr>
<td><code>retry</code></td>
<td>JSON</td>
<td>defaults to <code>{ count: 3, interval: 3000 }</code> - see <a href="#retry-until"><code>retry until</code></a></td>
</tr>
<tr>
<td><code>callSingleCache</code></td>
<td>JSON</td>
<td>defaults to <code>{ minutes: 0, dir: 'target' }</code> - see <a href="#configure-callsinglecache"><code>configure callSingleCache</code></a></td>
</tr>
<tr>
<td><code>lowerCaseResponseHeaders</code></td>
<td>boolean</td>
<td>Converts every key in the <a href="#responseheaders"><code>responseHeaders</code></a> to lower-case which makes it easier to validate or re-use</td>
</tr>
<tr>
<td><code>abortedStepsShouldPass</code></td>
<td>boolean</td>
<td>defaults to <code>false</code>, whether steps after a <a href="#karate-abort"><code>karate.abort()</code></a> should be marked as <code>PASSED</code> instead of <code>SKIPPED</code> - this can impact the behavior of 3rd-party reports, see <a href="https://github.com/karatelabs/karate/issues/755" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/755/hovercard">this issue</a> for details</td>
</tr>
<tr>
<td><code>logModifier</code></td>
<td>Java Object</td>
<td>See <a href="#log-masking">Log Masking</a></td>
</tr>
<tr>
<td><code>responseHeaders</code></td>
<td>JSON / JS function</td>
<td>See <a href="/karatelabs/karate/blob/master/karate-netty#configure-responseheaders"><code>karate-netty</code></a></td>
</tr>
<tr>
<td><code>cors</code></td>
<td>boolean</td>
<td>See <a href="/karatelabs/karate/blob/master/karate-netty#configure-cors"><code>karate-netty</code></a></td>
</tr>
<tr>
<td><code>driver</code></td>
<td>JSON</td>
<td>See <a href="/karatelabs/karate/blob/master/karate-core">UI Automation</a></td>
</tr>
<tr>
<td><code>driverTarget</code></td>
<td>JSON / Java Object</td>
<td>See <a href="/karatelabs/karate/blob/master/karate-core#configure-drivertarget"><code>configure driverTarget</code></a></td>
</tr>
<tr>
<td><code>pauseIfNotPerf</code></td>
<td>boolean</td>
<td>defaults to <code>false</code>, relevant only for performance-testing, see <a href="#karate-pause"><code>karate.pause()</code></a> and <a href="/karatelabs/karate/blob/master/karate-gatling#think-time"><code>karate-gatling</code></a></td>
</tr>
<tr>
<td><code>xmlNamespaceAware</code></td>
<td>boolean</td>
<td>defaults to <code>false</code>, to handle XML namespaces in <a href="https://github.com/karatelabs/karate/issues/1587" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/1587/hovercard">some special circumstances</a></td>
</tr>
<tr>
<td><code>abortSuiteOnFailure</code></td>
<td>boolean</td>
<td>defaults to <code>false</code>, to not attempt to run any more tests upon a failure</td>
</tr>
<tr>
<td><code>ntlmAuth</code></td>
<td>JSON</td>
<td>See <a href="#ntlm-authentication">NTLM Authentication</a></td>
</tr>
<tr>
<td><code>matchEachEmptyAllowed</code></td>
<td>boolean</td>
<td>defaults to <code>false</code>, <a href="#match-each"><code>match each</code></a> by default expects the array to be non-empty, refer to <a href="https://github.com/karatelabs/karate/issues/2364" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/2364/hovercard">this issue</a> to understand why you may want to over-ride this.</td>
</tr>
<tr>
<td><code>httpRetryEnabled</code></td>
<td>boolean</td>
<td>defaults to <code>false</code>, retry when the http requests fails with an exception <code>org.apache.httpNoHttpResponseException</code>.  For details see <a href="https://github.com/karatelabs/karate/issues/2408" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/2408/hovercard">this issue</a></td>
</tr>
</tbody>
</table>
<p dir="auto">Examples:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# pretty print the response payload
* configure logPrettyResponse = true

# enable ssl (and no certificate is required)
* configure ssl = true

# enable ssl and force the algorithm to TLSv1.2
* configure ssl = 'TLSv1.2'

# time-out if the response is not received within 10 seconds (after the connection is established)
* configure readTimeout = 10000

# set the uri of the http proxy server to use
* configure proxy = 'http://my.proxy.host:8080'

# proxy which needs authentication
* configure proxy = { uri: 'http://my.proxy.host:8080', username: 'john', password: 'secret' }"><pre><span class="pl-c"># pretty print the response payload</span>
<span class="pl-k">* </span>configure logPrettyResponse = true

<span class="pl-c"># enable ssl (and no certificate is required)</span>
<span class="pl-k">* </span>configure ssl = true

<span class="pl-c"># enable ssl and force the algorithm to TLSv1.2</span>
<span class="pl-k">* </span>configure ssl = <span class="pl-s">'TLSv1.2'</span>

<span class="pl-c"># time-out if the response is not received within 10 seconds (after the connection is established)</span>
<span class="pl-k">* </span>configure readTimeout = 10000

<span class="pl-c"># set the uri of the http proxy server to use</span>
<span class="pl-k">* </span>configure proxy = <span class="pl-s">'http://my.proxy.host:8080'</span>

<span class="pl-c"># proxy which needs authentication</span>
<span class="pl-k">* </span>configure proxy = { uri: <span class="pl-s">'http://my.proxy.host:8080'</span>, username: <span class="pl-s">'john'</span>, password: <span class="pl-s">'secret'</span> }</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>configure</code> globally</h2><a id="user-content-configure-globally" class="anchor" aria-label="Permalink: configure globally" href="#configure-globally"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">If you need to set any of these "globally" you can easily do so using <a href="#the-karate-object">the <code>karate</code> object</a> in <a href="#configuration"><code>karate-config.js</code></a> - for e.g:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  karate.configure('ssl', true);
  karate.configure('readTimeout', 5000);"><pre>  <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'ssl'</span><span class="pl-kos">,</span> <span class="pl-c1">true</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'readTimeout'</span><span class="pl-kos">,</span> <span class="pl-c1">5000</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">In rare cases where you need to add nested non-JSON data to the <code>configure</code> value, you have to play by the <a href="#restrictions-on-global-variables">rules</a> that apply within <a href="#karate-configjs"><code>karate-config.js</code></a>. Here is an example of performing a <a href="/karatelabs/karate/blob/master/karate-core#configure-driver"><code>configure driver</code></a> step in JavaScript:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  var LM = Java.type('com.mycompany.MyHttpLogModifier');
  var driverConfig = { type:'chromedriver', start: false, webDriverUrl:'https://user:password@zalenium.net/wd/hub' };
  driverConfig.httpConfig = karate.toMap({ logModifier: LM.INSTANCE });
  karate.configure('driver', driverConfig);"><pre>  <span class="pl-k">var</span> <span class="pl-c1">LM</span> <span class="pl-c1">=</span> <span class="pl-v">Java</span><span class="pl-kos">.</span><span class="pl-en">type</span><span class="pl-kos">(</span><span class="pl-s">'com.mycompany.MyHttpLogModifier'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-k">var</span> <span class="pl-s1">driverConfig</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span> <span class="pl-c1">type</span>:<span class="pl-s">'chromedriver'</span><span class="pl-kos">,</span> <span class="pl-c1">start</span>: <span class="pl-c1">false</span><span class="pl-kos">,</span> <span class="pl-c1">webDriverUrl</span>:<span class="pl-s">'https://user:password@zalenium.net/wd/hub'</span> <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-s1">driverConfig</span><span class="pl-kos">.</span><span class="pl-c1">httpConfig</span> <span class="pl-c1">=</span> <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">toMap</span><span class="pl-kos">(</span><span class="pl-kos">{</span> <span class="pl-c1">logModifier</span>: <span class="pl-c1">LM</span><span class="pl-kos">.</span><span class="pl-c1">INSTANCE</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'driver'</span><span class="pl-kos">,</span> <span class="pl-s1">driverConfig</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Report Verbosity</h3><a id="user-content-report-verbosity" class="anchor" aria-label="Permalink: Report Verbosity" href="#report-verbosity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">By default, Karate will add logs to the report output so that HTTP requests and responses appear in-line in the HTML reports. There may be cases where you want to suppress this to make the reports "lighter" and easier to read.</p>
<p dir="auto">The configure key here is <code>report</code> and it takes a JSON value. For example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* configure report = { showLog: true, showAllSteps: false }"><pre><span class="pl-k">* </span>configure report = { showLog: true, showAllSteps: false }</pre></div>
<table>
<thead>
<tr>
<th><code>report</code></th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>showLog</code></td>
<td>boolean</td>
<td>HTTP requests and responses (including headers) will appear in the HTML report, default <code>true</code></td>
</tr>
<tr>
<td><code>showAllSteps</code></td>
<td>boolean</td>
<td>If <code>false</code>, any step that starts with <code>*</code> instead of <code>Given</code>, <code>When</code>, <code>Then</code> etc. will <em>not</em> appear in the HTML report. The <a href="#print"><code>print</code></a> step is an exception. Default <code>true</code>.</td>
</tr>
</tbody>
</table>
<p dir="auto">You can 'reset' default settings by using the following short-cut:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# reset to defaults
* configure report = true"><pre><span class="pl-c"># reset to defaults</span>
<span class="pl-k">* </span>configure report = true</pre></div>
<p dir="auto">Since you can use <code>configure</code> any time within a test, you have control over which requests or steps you want to show / hide. This can be convenient if a particular call results in a huge response payload.</p>
<p dir="auto">The following short-cut is also supported which will disable all logs:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* configure report = false"><pre><span class="pl-k">* </span>configure report = false</pre></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>@report=false</code></h4><a id="user-content-reportfalse" class="anchor" aria-label="Permalink: @report=false" href="#reportfalse"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When you use a re-usable feature that has <a href="/karatelabs/karate/blob/master/multiple-functions-in-one-file">commonly used utilities</a>, you may want to hide this completely from the HTML reports. The special <a href="#tags">tag</a> <code>@report=false</code> can be used, and it can even be used only for a single <code>Scenario</code>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@ignore @report=false
Feature:

Scenario:
# some re-usable steps"><pre><span class="pl-k">@ignore</span> <span class="pl-k">@report=false</span>
Feature:

<span class="pl-k">Scenario</span>:
<span class="pl-c"># some re-usable steps</span></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Log Masking</h3><a id="user-content-log-masking" class="anchor" aria-label="Permalink: Log Masking" href="#log-masking"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In cases where you want to "mask" values which are sensitive from a security point of view from the output files, logs and HTML reports, you can implement the <a href="/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/http/HttpLogModifier.java"><code>HttpLogModifier</code></a> and tell Karate to use it via the <a href="#configure"><code>configure</code></a> keyword. Here is an <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/DemoLogModifier.java">example</a> of an implementation. For performance reasons, you can implement  <code>enableForUri()</code> so that this "activates" only for some URL patterns.</p>
<p dir="auto">Instantiating a Java class and using this in a test is easy (see <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/headers-masking.feature">example</a>):</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# if this was in karate-config.js, it would apply &quot;globally&quot;
* def LM = Java.type('demo.headers.DemoLogModifier')
* configure logModifier = new LM()"><pre><span class="pl-c"># if this was in karate-config.js, it would apply "globally"</span>
<span class="pl-k">* </span>def LM = Java.type(<span class="pl-s">'demo.headers.DemoLogModifier'</span>)
<span class="pl-k">* </span>configure logModifier = new LM()</pre></div>
<p dir="auto">Or globally in <a href="#karate-configjs"><code>karate-config.js</code></a></p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="var LM = Java.type('demo.headers.DemoLogModifier');
karate.configure('logModifier', new LM());"><pre><span class="pl-k">var</span> <span class="pl-c1">LM</span> <span class="pl-c1">=</span> <span class="pl-v">Java</span><span class="pl-kos">.</span><span class="pl-en">type</span><span class="pl-kos">(</span><span class="pl-s">'demo.headers.DemoLogModifier'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'logModifier'</span><span class="pl-kos">,</span> <span class="pl-k">new</span> <span class="pl-c1">LM</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">Since <code>karate-config.js</code> is processed for every <code>Scenario</code>, you can use a singleton instead of calling <code>new</code> every time. Something like this:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="var LM = Java.type('demo.headers.DemoLogModifier');
karate.configure('logModifier', LM.INSTANCE);"><pre><span class="pl-k">var</span> <span class="pl-c1">LM</span> <span class="pl-c1">=</span> <span class="pl-v">Java</span><span class="pl-kos">.</span><span class="pl-en">type</span><span class="pl-kos">(</span><span class="pl-s">'demo.headers.DemoLogModifier'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'logModifier'</span><span class="pl-kos">,</span> <span class="pl-c1">LM</span><span class="pl-kos">.</span><span class="pl-c1">INSTANCE</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">System Properties for SSL and HTTP proxy</h3><a id="user-content-system-properties-for-ssl-and-http-proxy" class="anchor" aria-label="Permalink: System Properties for SSL and HTTP proxy" href="#system-properties-for-ssl-and-http-proxy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For HTTPS / SSL, you can also specify a custom certificate or trust store by <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#InstallationAndCustomization" rel="nofollow">setting Java system properties</a>. And similarly - for <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html" rel="nofollow">specifying the HTTP proxy</a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">X509 Certificate Authentication</h3><a id="user-content-x509-certificate-authentication" class="anchor" aria-label="Permalink: X509 Certificate Authentication" href="#x509-certificate-authentication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Also referred to as "mutual auth" - if your API requires that clients present an X509 certificate for authentication, Karate supports this via JSON as the <code>configure ssl</code> value.  The following parameters are supported:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Required?</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>keyStore</code></td>
<td>string</td>
<td>optional</td>
<td>path to file containing public and private keys for your client certificate.</td>
</tr>
<tr>
<td><code>keyStorePassword</code></td>
<td>string</td>
<td>optional</td>
<td>password for keyStore file.</td>
</tr>
<tr>
<td><code>keyStoreType</code></td>
<td>string</td>
<td>optional</td>
<td>Format of the keyStore file.  Allowed keystore types are as described in the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore" rel="nofollow">Java <code>KeyStore</code> docs</a>.</td>
</tr>
<tr>
<td><code>trustStore</code></td>
<td>string</td>
<td>optional</td>
<td>path to file containing the trust chain for your server certificate.</td>
</tr>
<tr>
<td><code>trustStorePassword</code></td>
<td>string</td>
<td>optional</td>
<td>password for trustStore file.</td>
</tr>
<tr>
<td><code>trustStoreType</code></td>
<td>string</td>
<td>optional</td>
<td>Format of the trustStore file.  Allowed keystore types are as described in the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#KeyStore" rel="nofollow">Java <code>KeyStore</code> docs</a>.</td>
</tr>
<tr>
<td><code>trustAll</code></td>
<td>boolean</td>
<td>optional</td>
<td>if all server certificates should be considered trusted. Default value is <code>false</code>. If <code>true</code> will allow self-signed certificates. If <code>false</code>, will expect the whole chain in the <code>trustStore</code> or use what is available in the environment.</td>
</tr>
<tr>
<td><code>algorithm</code></td>
<td>string</td>
<td>optional</td>
<td>force the SSL algorithm to one of <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext" rel="nofollow">these values</a>. Default is <code>TLS</code>.</td>
</tr>
</tbody>
</table>
<p dir="auto">Example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# enable X509 certificate authentication with PKCS12 file 'certstore.pfx' and password 'certpassword'
* configure ssl = { keyStore: 'classpath:certstore.pfx', keyStorePassword: 'certpassword', keyStoreType: 'pkcs12' }"><pre><span class="pl-c"># enable X509 certificate authentication with PKCS12 file 'certstore.pfx' and password 'certpassword'</span>
<span class="pl-k">* </span>configure ssl = { keyStore: <span class="pl-s">'classpath:certstore.pfx'</span>, keyStorePassword: <span class="pl-s">'certpassword'</span>, keyStoreType: <span class="pl-s">'pkcs12'</span> }</pre></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# trust all server certificates, in the feature file
* configure ssl = { trustAll: true }"><pre><span class="pl-c"># trust all server certificates, in the feature file</span>
<span class="pl-k">* </span>configure ssl = { trustAll: true }</pre></div>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="// trust all server certificates, global configuration in 'karate-config.js'
karate.configure('ssl', { trustAll: true });"><pre><span class="pl-c">// trust all server certificates, global configuration in 'karate-config.js'</span>
<span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'ssl'</span><span class="pl-kos">,</span> <span class="pl-kos">{</span> <span class="pl-c1">trustAll</span>: <span class="pl-c1">true</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">For end-to-end examples in the Karate demos, look at the files in <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/ssl">this folder</a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">NTLM Authentication</h3><a id="user-content-ntlm-authentication" class="anchor" aria-label="Permalink: NTLM Authentication" href="#ntlm-authentication"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate provides support for NTLM authentication using the Apache NTLMEngine implementation.</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Required?</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>username</code></td>
<td>string</td>
<td>required</td>
<td>NTLM username</td>
</tr>
<tr>
<td><code>password</code></td>
<td>string</td>
<td>required</td>
<td>NTLM password</td>
</tr>
<tr>
<td><code>workstation</code></td>
<td>string</td>
<td>optional</td>
<td>The workstation the authentication request is originating from</td>
</tr>
<tr>
<td><code>domain</code></td>
<td>string</td>
<td>optional</td>
<td>The domain to authenticate within</td>
</tr>
</tbody>
</table>
<p dir="auto">Example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# enable NTLM authentication for the remaining scenario requests
* configure ntlmAuth = { username: 'admin', password: 'secret', domain: 'my.domain', workstation: 'my-pc' }

# enable NTLM authentication with only credentials
* configure ntlmAuth = { username: 'admin', password: 'secret' }

# disable NTLM authentication
* configure ntlmAuth = null"><pre><span class="pl-c"># enable NTLM authentication for the remaining scenario requests</span>
<span class="pl-k">* </span>configure ntlmAuth = { username: <span class="pl-s">'admin'</span>, password: <span class="pl-s">'secret'</span>, domain: <span class="pl-s">'my.domain'</span>, workstation: <span class="pl-s">'my-pc'</span> }

<span class="pl-c"># enable NTLM authentication with only credentials</span>
<span class="pl-k">* </span>configure ntlmAuth = { username: <span class="pl-s">'admin'</span>, password: <span class="pl-s">'secret'</span> }

<span class="pl-c"># disable NTLM authentication</span>
<span class="pl-k">* </span>configure ntlmAuth = null</pre></div>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="// enable NTLM authentication within js
karate.confgure('ntlmAuth', { username: 'admin', password: 'secret', domain: 'my.domain', workstation: 'my-pc' })"><pre><span class="pl-c">// enable NTLM authentication within js</span>
<span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">confgure</span><span class="pl-kos">(</span><span class="pl-s">'ntlmAuth'</span><span class="pl-kos">,</span> <span class="pl-kos">{</span> <span class="pl-c1">username</span>: <span class="pl-s">'admin'</span><span class="pl-kos">,</span> <span class="pl-c1">password</span>: <span class="pl-s">'secret'</span><span class="pl-kos">,</span> <span class="pl-c1">domain</span>: <span class="pl-s">'my.domain'</span><span class="pl-kos">,</span> <span class="pl-c1">workstation</span>: <span class="pl-s">'my-pc'</span> <span class="pl-kos">}</span><span class="pl-kos">)</span></pre></div>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Payload Assertions</h1><a id="user-content-payload-assertions" class="anchor" aria-label="Permalink: Payload Assertions" href="#payload-assertions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Prepare, Mutate, Assert.</h2><a id="user-content-prepare-mutate-assert" class="anchor" aria-label="Permalink: Prepare, Mutate, Assert." href="#prepare-mutate-assert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Now it should be clear how Karate makes it easy to express JSON or XML. If you <a href="#reading-files">read from a file</a>, the advantage is that multiple scripts can re-use the same data.</p>
<p dir="auto">Once you have a <a href="#native-data-types">JSON or XML object</a>, Karate provides multiple ways to manipulate, extract or transform data. And you can easily assert that the data is as expected by comparing it with another JSON or XML object.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>match</code></h2><a id="user-content-match" class="anchor" aria-label="Permalink: match" href="#match"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Payload Assertions / Smart Comparison</h3><a id="user-content-payload-assertions--smart-comparison" class="anchor" aria-label="Permalink: Payload Assertions / Smart Comparison" href="#payload-assertions--smart-comparison"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The <code>match</code> operation is smart because white-space does not matter, and the order of keys (or data elements) does not matter. Karate is even able to <a href="#ignore-or-validate">ignore fields you choose</a> - which is very useful when you want to handle server-side dynamically generated fields such as UUID-s, time-stamps, security-tokens and the like.</p>
<p dir="auto">The match syntax involves a double-equals sign '==' to represent a comparison (and not an assignment '=').</p>
<p dir="auto">Since <code>match</code> and <code>set</code> go well together, they are both introduced in the examples in the section below.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>set</code></h2><a id="user-content-set" class="anchor" aria-label="Permalink: set" href="#set"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Game, <code>set</code> and <code>match</code> - Karate !</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">JS for JSON</h3><a id="user-content-js-for-json" class="anchor" aria-label="Permalink: JS for JSON" href="#js-for-json"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Before you consider the <code>set</code> keyword - note that for simple JSON update operations, you can use <a href="#eval"><code>eval</code></a> - especially useful when the path you are trying to mutate is dynamic. Since the <code>eval</code> keyword can be omitted when operating on variables using JavaScript, this leads to very concise code:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def myJson = { a: '1' }
* myJson.b = 2
* match myJson == { a: '1', b: 2 }"><pre><span class="pl-k">* </span>def myJson = { a: <span class="pl-s">'1'</span> }
<span class="pl-k">* </span>myJson.b = 2
<span class="pl-k">* </span>match myJson == { a: <span class="pl-s">'1'</span>, b: 2 }</pre></div>
<p dir="auto">Refer to <a href="#eval"><code>eval</code></a> for more / advanced examples.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Manipulating Data</h3><a id="user-content-manipulating-data" class="anchor" aria-label="Permalink: Manipulating Data" href="#manipulating-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Setting values on JSON documents is simple using the <code>set</code> keyword.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def myJson = { foo: 'bar' }
* set myJson.foo = 'world'
* match myJson == { foo: 'world' }

# add new keys.  you can use pure JsonPath expressions (notice how this is different from the above)
* set myJson $.hey = 'ho'
* match myJson == { foo: 'world', hey: 'ho' }

# and even append to json arrays (or create them automatically)
* set myJson.zee[0] = 5
* match myJson == { foo: 'world', hey: 'ho', zee: [5] }

# omit the array index to append
* set myJson.zee[] = 6
* match myJson == { foo: 'world', hey: 'ho', zee: [5, 6] }

# nested json ? no problem
* set myJson.cat = { name: 'Billie' }
* match myJson == { foo: 'world', hey: 'ho', zee: [5, 6], cat: { name: 'Billie' } }

# and for match - the order of keys does not matter
* match myJson == { cat: { name: 'Billie' }, hey: 'ho', foo: 'world', zee: [5, 6] }

# you can ignore fields marked with '#ignore'
* match myJson == { cat: '#ignore', hey: 'ho', foo: 'world', zee: [5, 6] }"><pre><span class="pl-k">* </span>def myJson = { foo: <span class="pl-s">'bar'</span> }
<span class="pl-k">* </span>set myJson.foo = <span class="pl-s">'world'</span>
<span class="pl-k">* </span>match myJson == { foo: <span class="pl-s">'world'</span> }

<span class="pl-c"># add new keys.  you can use pure JsonPath expressions (notice how this is different from the above)</span>
<span class="pl-k">* </span>set myJson $.hey = <span class="pl-s">'ho'</span>
<span class="pl-k">* </span>match myJson == { foo: <span class="pl-s">'world'</span>, hey: <span class="pl-s">'ho'</span> }

<span class="pl-c"># and even append to json arrays (or create them automatically)</span>
<span class="pl-k">* </span>set myJson.zee[0] = 5
<span class="pl-k">* </span>match myJson == { foo: <span class="pl-s">'world'</span>, hey: <span class="pl-s">'ho'</span>, zee: [5] }

<span class="pl-c"># omit the array index to append</span>
<span class="pl-k">* </span>set myJson.zee[] = 6
<span class="pl-k">* </span>match myJson == { foo: <span class="pl-s">'world'</span>, hey: <span class="pl-s">'ho'</span>, zee: [5, 6] }

<span class="pl-c"># nested json ? no problem</span>
<span class="pl-k">* </span>set myJson.cat = { name: <span class="pl-s">'Billie'</span> }
<span class="pl-k">* </span>match myJson == { foo: <span class="pl-s">'world'</span>, hey: <span class="pl-s">'ho'</span>, zee: [5, 6], cat: { name: <span class="pl-s">'Billie'</span> } }

<span class="pl-c"># and for match - the order of keys does not matter</span>
<span class="pl-k">* </span>match myJson == { cat: { name: <span class="pl-s">'Billie'</span> }, hey: <span class="pl-s">'ho'</span>, foo: <span class="pl-s">'world'</span>, zee: [5, 6] }

<span class="pl-c"># you can ignore fields marked with '#ignore'</span>
<span class="pl-k">* </span>match myJson == { cat: <span class="pl-s">'#ignore'</span>, hey: <span class="pl-s">'ho'</span>, foo: <span class="pl-s">'world'</span>, zee: [5, 6] }</pre></div>
<p dir="auto">XML and XPath works just like you'd expect.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def cat = &lt;cat&gt;&lt;name&gt;Billie&lt;/name&gt;&lt;/cat&gt;
* set cat /cat/name = 'Jean'
* match cat / == &lt;cat&gt;&lt;name&gt;Jean&lt;/name&gt;&lt;/cat&gt;

# you can even set whole fragments of xml
* def xml = &lt;foo&gt;&lt;bar&gt;baz&lt;/bar&gt;&lt;/foo&gt;
* set xml/foo/bar = &lt;hello&gt;world&lt;/hello&gt;
* match xml == &lt;foo&gt;&lt;bar&gt;&lt;hello&gt;world&lt;/hello&gt;&lt;/bar&gt;&lt;/foo&gt;"><pre><span class="pl-k">* </span>def cat = <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Billie<span class="pl-smi">&lt;/name&gt;&lt;/cat&gt;</span>
<span class="pl-k">* </span>set cat /cat/name = <span class="pl-s">'Jean'</span>
<span class="pl-k">* </span>match cat / == <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Jean<span class="pl-smi">&lt;/name&gt;&lt;/cat&gt;</span>

<span class="pl-c"># you can even set whole fragments of xml</span>
<span class="pl-k">* </span>def xml = <span class="pl-smi">&lt;foo&gt;&lt;bar&gt;</span>baz<span class="pl-smi">&lt;/bar&gt;&lt;/foo&gt;</span>
<span class="pl-k">* </span>set xml/foo/bar = <span class="pl-smi">&lt;hello&gt;</span>world<span class="pl-smi">&lt;/hello&gt;</span>
<span class="pl-k">* </span>match xml == <span class="pl-smi">&lt;foo&gt;&lt;bar&gt;&lt;hello&gt;</span>world<span class="pl-smi">&lt;/hello&gt;&lt;/bar&gt;&lt;/foo&gt;</span></pre></div>
<p dir="auto">Refer to the section on <a href="#xpath-functions">XPath Functions</a> for examples of advanced XPath usage.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>match</code> and variables</h3><a id="user-content-match-and-variables" class="anchor" aria-label="Permalink: match and variables" href="#match-and-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In case you were wondering, variables (and even expressions) are supported on the right-hand-side. So you can compare 2 JSON (or XML) payloads if you wanted to:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = { hello: 'world', baz: 'ban' }
* def bar = { baz: 'ban', hello: 'world' }
* match foo == bar"><pre><span class="pl-k">* </span>def foo = { hello: <span class="pl-s">'world'</span>, baz: <span class="pl-s">'ban'</span> }
<span class="pl-k">* </span>def bar = { baz: <span class="pl-s">'ban'</span>, hello: <span class="pl-s">'world'</span> }
<span class="pl-k">* </span>match foo == bar</pre></div>
<p dir="auto">If you are wondering about the finer details of the <code>match</code> syntax, the Left-Hand-Side has to be either a</p>
<ul dir="auto">
<li>variable name - e.g. <code>foo</code></li>
<li>a 'named' JsonPath or XPath expression - e.g. <code>foo[0].bar</code> or <code>foo[*].bar</code>
<ul dir="auto">
<li>note that this cannot be "dynamic" (with in-line variables) so <a href="#get">use an extra step</a> if needed</li>
</ul>
</li>
<li>any valid function or method call - e.g. <code>foo.bar()</code> or <code>foo.bar('hello').baz</code></li>
<li>or anything wrapped in parentheses which will be evaluated as JavaScript - e.g. <code>(foo + bar)</code> or <code>(42)</code> - and in <em>this</em> case, variables can be used</li>
</ul>
<p dir="auto">And the right-hand-side can be any valid <a href="#karate-expressions">Karate expression</a>. Refer to the section on <a href="#jsonpath-short-cuts">JsonPath short-cuts</a> for a deeper understanding of 'named' JsonPath expressions in Karate.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>match !=</code> (not equals)</h3><a id="user-content-match--not-equals" class="anchor" aria-label="Permalink: match != (not equals)" href="#match--not-equals"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The 'not equals' operator <code>!=</code> works as you would expect:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def test = { foo: 'bar' }
* match test != { foo: 'baz' }"><pre><span class="pl-k">* </span>def test = { foo: <span class="pl-s">'bar'</span> }
<span class="pl-k">* </span>match test != { foo: <span class="pl-s">'baz'</span> }</pre></div>
<blockquote>
<p dir="auto">You typically will <em>never</em> need to use the <code>!=</code> (not-equals) operator ! Use it sparingly, and only for string, number or simple payload comparisons.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>set</code> multiple</h3><a id="user-content-set-multiple" class="anchor" aria-label="Permalink: set multiple" href="#set-multiple"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate has an elegant way to set multiple keys (via path expressions) in one step. For convenience, non-existent keys (or array elements) will be created automatically. You can find more JSON examples here: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature"><code>js-arrays.feature</code></a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def cat = { name: '' }

* set cat
  | path   | value |
  | name   | 'Bob' |
  | age    | 5     |

* match cat == { name: 'Bob', age: 5 }"><pre><span class="pl-k">* </span>def cat = { name: <span class="pl-s">''</span> }

<span class="pl-k">* </span>set cat
<span class="pl-k">  | <span class="pl-s1">path</span>   | <span class="pl-s1">value</span> |</span>
<span class="pl-k">  | <span class="pl-s1">name</span>   | '<span class="pl-s1">Bob</span>' |</span>
<span class="pl-k">  | <span class="pl-s1">age</span>    | <span class="pl-s1">5</span>     |</span>

<span class="pl-k">* </span>match cat == { name: <span class="pl-s">'Bob'</span>, age: 5 }</pre></div>
<p dir="auto">One extra convenience for JSON is that if the variable itself (which was <code>cat</code> in the above example) does not exist, it will be created automatically. You can even create (or modify existing) JSON arrays by using multiple columns.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* set foo
  | path | 0     | 1     |
  | bar  | 'baz' | 'ban' |

* match foo == [{ bar: 'baz' }, { bar: 'ban' }]"><pre><span class="pl-k">* </span>set foo
<span class="pl-k">  | <span class="pl-s1">path</span> | <span class="pl-s1">0</span>     | <span class="pl-s1">1</span>     |</span>
<span class="pl-k">  | <span class="pl-s1">bar</span>  | '<span class="pl-s1">baz</span>' | '<span class="pl-s1">ban</span>' |</span>

<span class="pl-k">* </span>match foo == [{ bar: <span class="pl-s">'baz'</span> }, { bar: <span class="pl-s">'ban'</span> }]</pre></div>
<p dir="auto">If you have to set a bunch of deeply nested keys, you can move the parent path to the top, next to the <code>set</code> keyword and save a lot of typing ! Note that this is not supported for "arrays" like above, and you can have only one <code>value</code> column.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* set foo.bar
  | path   | value |
  | one    | 1     |
  | two[0] | 2     |
  | two[1] | 3     |

* match foo == { bar: { one: 1, two: [2, 3] } }"><pre><span class="pl-k">* </span>set foo.bar
<span class="pl-k">  | <span class="pl-s1">path</span>   | <span class="pl-s1">value</span> |</span>
<span class="pl-k">  | <span class="pl-s1">one</span>    | <span class="pl-s1">1</span>     |</span>
<span class="pl-k">  | <span class="pl-s1">two</span>[<span class="pl-s1">0</span>] | <span class="pl-s1">2</span>     |</span>
<span class="pl-k">  | <span class="pl-s1">two</span>[<span class="pl-s1">1</span>] | <span class="pl-s1">3</span>     |</span>

<span class="pl-k">* </span>match foo == { bar: { one: 1, two: [2, 3] } }</pre></div>
<p dir="auto">The same concept applies to XML and you can build complicated payloads from scratch in just a few, extremely readable lines. The <code>value</code> column can take expressions, <em>even</em> XML chunks. You can find more examples here: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature"><code>xml.feature</code></a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* set search /acc:getAccountByPhoneNumber
  | path                        | value |
  | acc:phone/@foo              | 'bar' |
  | acc:phone/acc:number[1]     | 1234  |
  | acc:phone/acc:number[2]     | 5678  |     
  | acc:phoneNumberSearchOption | 'all' |

* match search ==
  &quot;&quot;&quot;
  &lt;acc:getAccountByPhoneNumber&gt;
      &lt;acc:phone foo=&quot;bar&quot;&gt;
          &lt;acc:number&gt;1234&lt;/acc:number&gt;
          &lt;acc:number&gt;5678&lt;/acc:number&gt;
      &lt;/acc:phone&gt;
      &lt;acc:phoneNumberSearchOption&gt;all&lt;/acc:phoneNumberSearchOption&gt;        
  &lt;/acc:getAccountByPhoneNumber&gt;
  &quot;&quot;&quot;"><pre><span class="pl-k">* </span>set search /acc:getAccountByPhoneNumber
<span class="pl-k">  | <span class="pl-s1">path</span>                        | <span class="pl-s1">value</span> |</span>
<span class="pl-k">  | <span class="pl-s1">acc</span>:<span class="pl-s1">phone</span>/@<span class="pl-s1">foo</span>              | '<span class="pl-s1">bar</span>' |</span>
<span class="pl-k">  | <span class="pl-s1">acc</span>:<span class="pl-s1">phone</span>/<span class="pl-s1">acc</span>:<span class="pl-s1">number</span>[<span class="pl-s1">1</span>]     | <span class="pl-s1">1234</span>  |</span>
<span class="pl-k">  | <span class="pl-s1">acc</span>:<span class="pl-s1">phone</span>/<span class="pl-s1">acc</span>:<span class="pl-s1">number</span>[<span class="pl-s1">2</span>]     | <span class="pl-s1">5678</span>  |     </span>
<span class="pl-k">  | <span class="pl-s1">acc</span>:<span class="pl-s1">phoneNumberSearchOption</span> | '<span class="pl-s1">all</span>' |</span>

<span class="pl-k">* </span>match search ==
  <span class="pl-s">"""</span>
<span class="pl-s">  &lt;acc:getAccountByPhoneNumber&gt;</span>
<span class="pl-s">      &lt;acc:phone foo="bar"&gt;</span>
<span class="pl-s">          &lt;acc:number&gt;1234&lt;/acc:number&gt;</span>
<span class="pl-s">          &lt;acc:number&gt;5678&lt;/acc:number&gt;</span>
<span class="pl-s">      &lt;/acc:phone&gt;</span>
<span class="pl-s">      &lt;acc:phoneNumberSearchOption&gt;all&lt;/acc:phoneNumberSearchOption&gt;        </span>
<span class="pl-s">  &lt;/acc:getAccountByPhoneNumber&gt;</span>
<span class="pl-s">  """</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>remove</code></h2><a id="user-content-remove" class="anchor" aria-label="Permalink: remove" href="#remove"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This is like the opposite of <a href="#set"><code>set</code></a> if you need to remove keys or data elements from JSON or XML instances. You can even remove JSON array elements by index.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def json = { foo: 'world', hey: 'ho', zee: [1, 2, 3] }
* remove json.hey
* match json == { foo: 'world', zee: [1, 2, 3] }
* remove json $.zee[1]
* match json == { foo: 'world', zee: [1, 3] }"><pre><span class="pl-k">* </span>def json = { foo: <span class="pl-s">'world'</span>, hey: <span class="pl-s">'ho'</span>, zee: [1, 2, 3] }
<span class="pl-k">* </span>remove json.hey
<span class="pl-k">* </span>match json == { foo: <span class="pl-s">'world'</span>, zee: [1, 2, 3] }
<span class="pl-k">* </span>remove json $.zee[1]
<span class="pl-k">* </span>match json == { foo: <span class="pl-s">'world'</span>, zee: [1, 3] }</pre></div>
<p dir="auto"><code>remove</code> works for XML elements as well:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def xml = &lt;foo&gt;&lt;bar&gt;&lt;hello&gt;world&lt;/hello&gt;&lt;/bar&gt;&lt;/foo&gt;
* remove xml/foo/bar/hello
* match xml == &lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;
* remove xml /foo/bar
* match xml == &lt;foo/&gt;"><pre><span class="pl-k">* </span>def xml = <span class="pl-smi">&lt;foo&gt;&lt;bar&gt;&lt;hello&gt;</span>world<span class="pl-smi">&lt;/hello&gt;&lt;/bar&gt;&lt;/foo&gt;</span>
<span class="pl-k">* </span>remove xml/foo/bar/hello
<span class="pl-k">* </span>match xml == <span class="pl-smi">&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;</span>
<span class="pl-k">* </span>remove xml /foo/bar
<span class="pl-k">* </span>match xml == <span class="pl-smi">&lt;foo/&gt;</span></pre></div>
<p dir="auto">Also take a look at how a special case of <a href="#embedded-expressions">embedded-expressions</a> can remove key-value pairs from a JSON (or XML) payload: <a href="#remove-if-null">Remove if Null</a>.</p>
<p dir="auto">See also <code>delete</code>, below.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>delete</code></h3><a id="user-content-delete" class="anchor" aria-label="Permalink: delete" href="#delete"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For JSON, you can also use the JS <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete" rel="nofollow"><code>delete</code></a> operator via <a href="#eval"><code>eval</code></a>, useful when the path you are trying to mutate is dynamic.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def key = 'a'
* def foo = { a: 1 }
* eval delete foo[key]"><pre><span class="pl-k">* </span>def key = <span class="pl-s">'a'</span>
<span class="pl-k">* </span>def foo = { a: 1 }
<span class="pl-k">* </span>eval delete foo[key]</pre></div>
<p dir="auto">As a convenience, you can omit the <code>eval</code>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* delete foo[key]"><pre><span class="pl-k">* </span>delete foo[key]</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Fuzzy Matching</h2><a id="user-content-fuzzy-matching" class="anchor" aria-label="Permalink: Fuzzy Matching" href="#fuzzy-matching"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Ignore or Validate</h3><a id="user-content-ignore-or-validate" class="anchor" aria-label="Permalink: Ignore or Validate" href="#ignore-or-validate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When expressing expected results (in JSON or <a href="#match-and-xml">XML</a>) you can mark some fields to be ignored when the match (comparison) is performed.  You can even use a regular-expression so that instead of checking for equality, Karate will just validate that the actual value conforms to the expected pattern.</p>
<p dir="auto">This means that even when you have dynamic server-side generated values such as UUID-s and time-stamps appearing in the response, you can still assert that the full-payload matched in one step.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def cat = { name: 'Billie', type: 'LOL', id: 'a9f7a56b-8d5c-455c-9d13-808461d17b91' }
* match cat == { name: '#ignore', type: '#regex [A-Z]{3}', id: '#uuid' }
# this will fail
# * match cat == { name: '#ignore', type: '#regex .{2}', id: '#uuid' }	"><pre><span class="pl-k">* </span>def cat = { name: <span class="pl-s">'Billie'</span>, type: <span class="pl-s">'LOL'</span>, id: <span class="pl-s">'a9f7a56b-8d5c-455c-9d13-808461d17b91'</span> }
<span class="pl-k">* </span>match cat == { name: <span class="pl-s">'#ignore'</span>, type: <span class="pl-s">'#regex [A-Z]{3}'</span>, id: <span class="pl-s">'#uuid'</span> }
<span class="pl-c"># this will fail</span>
<span class="pl-c"># * match cat == { name: '#ignore', type: '#regex .{2}', id: '#uuid' }	</span></pre></div>
<blockquote>
<p dir="auto">Note that regex escaping has to be done with a <em>double</em> back-slash - for e.g: <code>'#regex a\\.dot'</code> will match <code>'a.dot'</code></p>
</blockquote>
<p dir="auto">The supported markers are the following:</p>
<table>
<thead>
<tr>
<th>Marker</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>#ignore</code></td>
<td>Skip comparison for this field even if the data element or JSON key is present</td>
</tr>
<tr>
<td><code>#null</code></td>
<td>Expects actual value to be <code>null</code>, and the data element or JSON key <em>must</em> be present</td>
</tr>
<tr>
<td><code>#notnull</code></td>
<td>Expects actual value to be not-<code>null</code></td>
</tr>
<tr>
<td><code>#present</code></td>
<td>Actual value can be any type or <em>even</em> <code>null</code>, but the key <em>must</em> be present (only for JSON / XML, see below)</td>
</tr>
<tr>
<td><code>#notpresent</code></td>
<td>Expects the key to be <strong>not</strong> present at all (only for JSON / XML, see below)</td>
</tr>
<tr>
<td><code>#array</code></td>
<td>Expects actual value to be a JSON array</td>
</tr>
<tr>
<td><code>#object</code></td>
<td>Expects actual value to be a JSON object</td>
</tr>
<tr>
<td><code>#boolean</code></td>
<td>Expects actual value to be a boolean <code>true</code> or <code>false</code></td>
</tr>
<tr>
<td><code>#number</code></td>
<td>Expects actual value to be a number</td>
</tr>
<tr>
<td><code>#string</code></td>
<td>Expects actual value to be a string</td>
</tr>
<tr>
<td><code>#uuid</code></td>
<td>Expects actual (string) value to conform to the UUID format</td>
</tr>
<tr>
<td><code>#regex STR</code></td>
<td>Expects actual (string) value to match the regular-expression 'STR' (see examples above)</td>
</tr>
<tr>
<td><code>#? EXPR</code></td>
<td>Expects the JavaScript expression 'EXPR' to evaluate to true, see <a href="#self-validation-expressions">self-validation expressions</a> below</td>
</tr>
<tr>
<td><code>#[NUM] EXPR</code></td>
<td>Advanced array validation, see <a href="#schema-validation">schema validation</a></td>
</tr>
<tr>
<td><code>#(EXPR)</code></td>
<td>For completeness, <a href="#embedded-expressions">embedded expressions</a> belong in this list as well</td>
</tr>
</tbody>
</table>
<p dir="auto">Note that <code>#present</code> and <code>#notpresent</code> only make sense when you are matching within a JSON or XML context or using a JsonPath or XPath on the left-hand-side.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def json = { foo: 'bar' }
* match json == { foo: '#present' }
* match json.nope == '#notpresent'"><pre><span class="pl-k">* </span>def json = { foo: <span class="pl-s">'bar'</span> }
<span class="pl-k">* </span>match json == { foo: <span class="pl-s">'#present'</span> }
<span class="pl-k">* </span>match json.nope == <span class="pl-s">'#notpresent'</span></pre></div>
<p dir="auto">The rest can also be used even in 'primitive' data matches like so:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* match foo == '#string'
# convenient (and recommended) way to check for array length
* match bar == '#[2]'"><pre><span class="pl-k">* </span>match foo == <span class="pl-s">'#string'</span>
<span class="pl-c"># convenient (and recommended) way to check for array length</span>
<span class="pl-k">* </span>match bar == <span class="pl-s">'#[2]'</span></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Optional Fields</h3><a id="user-content-optional-fields" class="anchor" aria-label="Permalink: Optional Fields" href="#optional-fields"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">If two cross-hatch <code>#</code> symbols are used as the prefix (for example: <code>##number</code>), it means that the key is optional or that the value can be null.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = { bar: 'baz' }
* match foo == { bar: '#string', ban: '##string' }"><pre><span class="pl-k">* </span>def foo = { bar: <span class="pl-s">'baz'</span> }
<span class="pl-k">* </span>match foo == { bar: <span class="pl-s">'#string'</span>, ban: <span class="pl-s">'##string'</span> }</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Remove If Null</h3><a id="user-content-remove-if-null" class="anchor" aria-label="Permalink: Remove If Null" href="#remove-if-null"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">A very useful behavior when you combine the optional marker with an <a href="#embedded-expressions">embedded expression</a> is as follows: if the embedded expression evaluates to <code>null</code> - the JSON key (or XML element or attribute) will be deleted from the payload (the equivalent of <a href="#remove"><code>remove</code></a>).</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def data = { a: 'hello', b: null, c: null }
* def json = { foo: '#(data.a)', bar: '#(data.b)', baz: '##(data.c)' }
* match json == { foo: 'hello', bar: null }"><pre><span class="pl-k">* </span>def data = { a: <span class="pl-s">'hello'</span>, b: null, c: null }
<span class="pl-k">* </span>def json = { foo: <span class="pl-s">'#(data.a)'</span>, bar: <span class="pl-s">'#(data.b)'</span>, baz: <span class="pl-s">'##(data.c)'</span> }
<span class="pl-k">* </span>match json == { foo: <span class="pl-s">'hello'</span>, bar: null }</pre></div>
<p dir="auto">If you are just trying to pre-define schema snippets to use in a <a href="#fuzzy-matching">fuzzy-match</a>, you can use <a href="#enclosed-javascript">enclosed Javascript</a> to suppress the default behavior of replacing placeholders. For example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def dogSchema = { id: '#string', color: '#string' }
# here we enclose in round-brackets to preserve the optional embedded expression
# so that it can be used later in a &quot;match&quot;
* def schema = ({ id: '#string', name: '#string', dog: '##(dogSchema)' })

* def response1 = { id: '123', name: 'foo' }
* match response1 == schema"><pre><span class="pl-k">* </span>def dogSchema = { id: <span class="pl-s">'#string'</span>, color: <span class="pl-s">'#string'</span> }
<span class="pl-c"># here we enclose in round-brackets to preserve the optional embedded expression</span>
<span class="pl-c"># so that it can be used later in a "match"</span>
<span class="pl-k">* </span>def schema = ({ id: <span class="pl-s">'#string'</span>, name: <span class="pl-s">'#string'</span>, dog: <span class="pl-s">'##(dogSchema)'</span> })

<span class="pl-k">* </span>def response1 = { id: <span class="pl-s">'123'</span>, name: <span class="pl-s">'foo'</span> }
<span class="pl-k">* </span>match response1 == schema</pre></div>
<p dir="auto">And if you need to suppress placeholder substitution for <a href="#reading-files"><code>read()</code></a>, but still need a JSON snippet, you can do this. Note how we read as a string, but <a href="#type-conversion">"cast" to JSON</a>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* json schema = karate.readAsString('schema.json')"><pre><span class="pl-k">* </span>json schema = karate.readAsString(<span class="pl-s">'schema.json'</span>)</pre></div>
<p dir="auto">If you want to use the triple-quote / multi-line way of defining JSON or if you have to use XML - you can use <a href="#text"><code>text</code></a> and "cast" to JSON or XML as a second step -  before using in a <a href="#match"><code>match</code></a>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* text schema =
&quot;&quot;&quot;
&lt;root&gt;
  &lt;a&gt;#string&lt;/a&gt;
  &lt;b&gt;##(subSchema)&lt;/b&gt;
&lt;/root&gt;
&quot;&quot;&quot;
* xml schema = schema"><pre><span class="pl-k">* </span>text schema =
<span class="pl-s">"""</span>
<span class="pl-s">&lt;root&gt;</span>
<span class="pl-s">  &lt;a&gt;#string&lt;/a&gt;</span>
<span class="pl-s">  &lt;b&gt;##(subSchema)&lt;/b&gt;</span>
<span class="pl-s">&lt;/root&gt;</span>
<span class="pl-s">"""</span>
<span class="pl-k">* </span>xml schema = schema</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>#null</code> and <code>#notpresent</code></h3><a id="user-content-null-and-notpresent" class="anchor" aria-label="Permalink: #null and #notpresent" href="#null-and-notpresent"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate's <a href="#match"><code>match</code></a> is strict, and the case where a JSON key exists but has a <code>null</code> value (<code>#null</code>) is considered different from the case where the key is not present at all (<code>#notpresent</code>) in the payload.</p>
<p dir="auto">But note that <code>##null</code> can be used to represent a convention that many teams adopt, which is that keys with <code>null</code> values are stripped from the JSON payload. In other words, <code>{ a: 1, b: null }</code> is considered 'equal' to <code>{ a: 1 }</code> and <code>{ a: 1, b: '##null' }</code> will <code>match</code> both cases.</p>
<p dir="auto">These examples (all exact matches) can make things more clear:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = { }
* match foo == { a: '##null' }
* match foo == { a: '##notnull' }
* match foo == { a: '#notpresent' }
* match foo == { a: '#ignore' }

* def foo = { a: null }
* match foo == { a: '#null' }    
* match foo == { a: '##null' }
* match foo == { a: '#present' }
* match foo == { a: '#ignore' }

* def foo = { a: 1 }
* match foo == { a: '#notnull' }
* match foo == { a: '##notnull' }
* match foo == { a: '#present' }
* match foo == { a: '#ignore' }"><pre><span class="pl-k">* </span>def foo = { }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'##null'</span> }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'##notnull'</span> }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#notpresent'</span> }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#ignore'</span> }

<span class="pl-k">* </span>def foo = { a: null }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#null'</span> }    
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'##null'</span> }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#present'</span> }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#ignore'</span> }

<span class="pl-k">* </span>def foo = { a: 1 }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#notnull'</span> }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'##notnull'</span> }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#present'</span> }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#ignore'</span> }</pre></div>
<p dir="auto">Note that you can alternatively use JsonPath on the left-hand-side:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = { a: 1 }
* match foo.a == '#present'
* match foo.nope == '#notpresent'"><pre><span class="pl-k">* </span>def foo = { a: 1 }
<span class="pl-k">* </span>match foo.a == <span class="pl-s">'#present'</span>
<span class="pl-k">* </span>match foo.nope == <span class="pl-s">'#notpresent'</span></pre></div>
<p dir="auto">But of course it is preferable to match whole objects in one step as far as possible.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">'Self' Validation Expressions</h3><a id="user-content-self-validation-expressions" class="anchor" aria-label="Permalink: 'Self' Validation Expressions" href="#self-validation-expressions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The special 'predicate' marker <code>#? EXPR</code> in the table above is an interesting one.  It is best explained via examples. Any valid JavaScript expression that evaluates to a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" rel="nofollow">Truthy</a> or <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" rel="nofollow">Falsy</a> value is expected after the <code>#?</code>.</p>
<p dir="auto">Observe how the value of the field being validated (or 'self') is injected into the 'underscore' expression variable: '<code>_</code>'</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def date = { month: 3 }
* match date == { month: '#? _ &gt; 0 &amp;&amp; _ &lt; 13' }"><pre><span class="pl-k">* </span>def date = { month: 3 }
<span class="pl-k">* </span>match date == { month: <span class="pl-s">'#? _ &gt; 0 &amp;&amp; _ &lt; 13'</span> }</pre></div>
<p dir="auto">What is even more interesting is that expressions can refer to variables:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def date = { month: 3 }
* def min = 1
* def max = 12
* match date == { month: '#? _ &gt;= min &amp;&amp; _ &lt;= max' }"><pre><span class="pl-k">* </span>def date = { month: 3 }
<span class="pl-k">* </span>def min = 1
<span class="pl-k">* </span>def max = 12
<span class="pl-k">* </span>match date == { month: <span class="pl-s">'#? _ &gt;= min &amp;&amp; _ &lt;= max'</span> }</pre></div>
<p dir="auto">And functions work as well ! You can imagine how you could evolve a nice set of utilities that validate all your domain objects.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def date = { month: 3 }
* def isValidMonth = function(m) { return m &gt;= 1 &amp;&amp; m &lt;= 12 }
* match date == { month: '#? isValidMonth(_)' }"><pre><span class="pl-k">* </span>def date = { month: 3 }
<span class="pl-k">* </span>def isValidMonth = function(m) { return m &gt;= 1 &amp;&amp; m <span class="pl-smi">&lt;= 12 }</span>
<span class="pl-smi">* match date == { month: '#? isValidMonth(_)' }</span></pre></div>
<p dir="auto">Especially since strings can be easily coerced to numbers (and vice-versa) in Javascript, you can combine built-in validators with the self-validation 'predicate' form like this: <code>'#number? _ &gt; 0'</code></p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# given this invalid input (string instead of number)
* def date = { month: '3' }
# this will pass
* match date == { month: '#? _ &gt; 0' }
# but this 'combined form' will fail, which is what we want
# * match date == { month: '#number? _ &gt; 0' }"><pre><span class="pl-c"># given this invalid input (string instead of number)</span>
<span class="pl-k">* </span>def date = { month: <span class="pl-s">'3'</span> }
<span class="pl-c"># this will pass</span>
<span class="pl-k">* </span>match date == { month: <span class="pl-s">'#? _ &gt; 0'</span> }
<span class="pl-c"># but this 'combined form' will fail, which is what we want</span>
<span class="pl-c"># * match date == { month: '#number? _ &gt; 0' }</span></pre></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">Referring to the JSON root</h4><a id="user-content-referring-to-the-json-root" class="anchor" aria-label="Permalink: Referring to the JSON root" href="#referring-to-the-json-root"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You can actually refer to any JsonPath on the document via <code>$</code> and perform cross-field or conditional validations ! This example uses <a href="#match-contains"><code>contains</code></a> and the <a href="#self-validation-expressions"><code>#?</code></a> 'predicate' syntax, and situations where this comes in useful will be apparent when we discuss <a href="#match-each"><code>match each</code></a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given def temperature = { celsius: 100, fahrenheit: 212 }
Then match temperature == { celsius: '#number', fahrenheit: '#? _ == $.celsius * 1.8 + 32' }
# when validation logic is an 'equality' check, an embedded expression works better
Then match temperature contains { fahrenheit: '#($.celsius * 1.8 + 32)' }"><pre><span class="pl-k">Given </span>def temperature = { celsius: 100, fahrenheit: 212 }
<span class="pl-k">Then </span>match temperature == { celsius: <span class="pl-s">'#number'</span>, fahrenheit: <span class="pl-s">'#? _ == $.celsius * 1.8 + 32'</span> }
<span class="pl-c"># when validation logic is an 'equality' check, an embedded expression works better</span>
<span class="pl-k">Then </span>match temperature contains { fahrenheit: <span class="pl-s">'#($.celsius * 1.8 + 32)'</span> }</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>match</code> text or binary</h3><a id="user-content-match-text-or-binary" class="anchor" aria-label="Permalink: match text or binary" href="#match-text-or-binary"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# when the response is plain-text
Then match response == 'Health Check OK'
And match response != 'Error'

# when the response is binary (byte-array)
Then match responseBytes == read('test.pdf')

# incidentally, match and assert behave exactly the same way for strings
* def hello = 'Hello World!'
* match hello == 'Hello World!'
* assert hello == 'Hello World!'"><pre><span class="pl-c"># when the response is plain-text</span>
<span class="pl-k">Then </span>match response == <span class="pl-s">'Health Check OK'</span>
<span class="pl-k">And </span>match response != <span class="pl-s">'Error'</span>

<span class="pl-c"># when the response is binary (byte-array)</span>
<span class="pl-k">Then </span>match responseBytes == read(<span class="pl-s">'test.pdf'</span>)

<span class="pl-c"># incidentally, match and assert behave exactly the same way for strings</span>
<span class="pl-k">* </span>def hello = <span class="pl-s">'Hello World!'</span>
<span class="pl-k">* </span>match hello == <span class="pl-s">'Hello World!'</span>
<span class="pl-k">* </span>assert hello == <span class="pl-s">'Hello World!'</span></pre></div>
<p dir="auto">Checking if a string is contained within another string is a very common need and <a href="#match-contains"><code>match</code> (name) <code>contains</code></a> works just like you'd expect:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def hello = 'Hello World!'
* match hello contains 'World'
* match hello !contains 'blah'"><pre><span class="pl-k">* </span>def hello = <span class="pl-s">'Hello World!'</span>
<span class="pl-k">* </span>match hello contains <span class="pl-s">'World'</span>
<span class="pl-k">* </span>match hello !contains <span class="pl-s">'blah'</span></pre></div>
<p dir="auto">For case-insensitive string comparisons, see how to create <a href="#commonly-needed-utilities">custom utilities</a> or <a href="#karate-lowercase"><code>karate.lowerCase()</code></a>. And for dealing with binary content - see <a href="#type-bytes"><code>bytes</code></a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>match header</code></h3><a id="user-content-match-header" class="anchor" aria-label="Permalink: match header" href="#match-header"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Since asserting against header values in the response is a common task - <code>match header</code> has a special meaning.  It short-cuts to the pre-defined variable <a href="#responseheaders"><code>responseHeaders</code></a> and reduces some complexity - because strictly, HTTP headers are a 'multi-valued map' or a 'map of lists' - the Java-speak equivalent being <code>Map&lt;String, List&lt;String&gt;&gt;</code>. And since header names are case-insensitive - it ignores the case when finding the header to match.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# so after a http request
Then match header Content-Type == 'application/json'
# 'contains' works as well
Then match header Content-Type contains 'application'"><pre><span class="pl-c"># so after a http request</span>
<span class="pl-k">Then </span>match header Content-Type == <span class="pl-s">'application/json'</span>
<span class="pl-c"># 'contains' works as well</span>
<span class="pl-k">Then </span>match header Content-Type contains <span class="pl-s">'application'</span></pre></div>
<p dir="auto">Note the extra convenience where you don't have to enclose the LHS key in quotes.</p>
<p dir="auto">You can always directly access the variable called <a href="#responseheaders"><code>responseHeaders</code></a> if you wanted to do more checks, but you typically won't need to.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>match</code> and XML</h3><a id="user-content-match-and-xml" class="anchor" aria-label="Permalink: match and XML" href="#match-and-xml"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">All the <a href="#fuzzy-matching">fuzzy matching</a> markers will work in XML as well. Here are some examples:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  * def xml = &lt;root&gt;&lt;hello&gt;world&lt;/hello&gt;&lt;foo&gt;bar&lt;/foo&gt;&lt;/root&gt;
  * match xml == &lt;root&gt;&lt;hello&gt;world&lt;/hello&gt;&lt;foo&gt;#ignore&lt;/foo&gt;&lt;/root&gt;
  * def xml = &lt;root&gt;&lt;hello foo=&quot;bar&quot;&gt;world&lt;/hello&gt;&lt;/root&gt;
  * match xml == &lt;root&gt;&lt;hello foo=&quot;#ignore&quot;&gt;world&lt;/hello&gt;&lt;/root&gt;"><pre>  <span class="pl-k">* </span>def xml = <span class="pl-smi">&lt;root&gt;&lt;hello&gt;</span>world<span class="pl-smi">&lt;/hello&gt;&lt;foo&gt;</span>bar<span class="pl-smi">&lt;/foo&gt;&lt;/root&gt;</span>
  <span class="pl-k">* </span>match xml == <span class="pl-smi">&lt;root&gt;&lt;hello&gt;</span>world<span class="pl-smi">&lt;/hello&gt;&lt;foo&gt;</span><span class="pl-c">#ignore&lt;/foo&gt;&lt;/root&gt;</span>
  <span class="pl-k">* </span>def xml = <span class="pl-smi">&lt;root&gt;&lt;hello foo="bar"&gt;</span>world<span class="pl-smi">&lt;/hello&gt;&lt;/root&gt;</span>
  <span class="pl-k">* </span>match xml == <span class="pl-smi">&lt;root&gt;&lt;hello foo="#ignore"&gt;</span>world<span class="pl-smi">&lt;/hello&gt;&lt;/root&gt;</span></pre></div>
<p dir="auto">Refer to this file for a comprehensive set of XML examples: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature"><code>xml.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Matching Sub-Sets of JSON Keys and Arrays</h2><a id="user-content-matching-sub-sets-of-json-keys-and-arrays" class="anchor" aria-label="Permalink: Matching Sub-Sets of JSON Keys and Arrays" href="#matching-sub-sets-of-json-keys-and-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>match contains</code></h3><a id="user-content-match-contains" class="anchor" aria-label="Permalink: match contains" href="#match-contains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">JSON Keys</h4><a id="user-content-json-keys" class="anchor" aria-label="Permalink: JSON Keys" href="#json-keys"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In some cases where the response JSON is wildly dynamic, you may want to only check for the existence of some keys. And <code>match</code> (name) <code>contains</code> is how you can do so:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = { bar: 1, baz: 'hello', ban: 'world' }

* match foo contains { bar: 1 }
* match foo contains { baz: 'hello' }
* match foo contains { bar:1, baz: 'hello' }
# this will fail
# * match foo == { bar:1, baz: 'hello' }"><pre><span class="pl-k">* </span>def foo = { bar: 1, baz: <span class="pl-s">'hello'</span>, ban: <span class="pl-s">'world'</span> }

<span class="pl-k">* </span>match foo contains { bar: 1 }
<span class="pl-k">* </span>match foo contains { baz: <span class="pl-s">'hello'</span> }
<span class="pl-k">* </span>match foo contains { bar:1, baz: <span class="pl-s">'hello'</span> }
<span class="pl-c"># this will fail</span>
<span class="pl-c"># * match foo == { bar:1, baz: 'hello' }</span></pre></div>
<p dir="auto">Note that <code>match contains</code> will <em>not</em> "recurse" any nested JSON chunks so use <a href="#match-contains-deep"><code>match contains deep</code></a> instead.</p>
<p dir="auto">Also note that <a href="#match-contains-any"><code>match contains any</code></a> is possible for JSON objects as well as <a href="#json-arrays">JSON arrays</a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">(not) <code>!contains</code></h3><a id="user-content-not-contains" class="anchor" aria-label="Permalink: (not) !contains" href="#not-contains"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">It is sometimes useful to be able to check if a key-value-pair does <strong>not</strong> exist. This is possible by prefixing <code>contains</code> with a <code>!</code> (with no space in between).</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = { bar: 1, baz: 'hello', ban: 'world' }
* match foo !contains { bar: 2 }
* match foo !contains { huh: '#notnull' }"><pre><span class="pl-k">* </span>def foo = { bar: 1, baz: <span class="pl-s">'hello'</span>, ban: <span class="pl-s">'world'</span> }
<span class="pl-k">* </span>match foo !contains { bar: 2 }
<span class="pl-k">* </span>match foo !contains { huh: <span class="pl-s">'#notnull'</span> }</pre></div>
<p dir="auto">Here's a reminder that the <a href="#null-and-notpresent"><code>#notpresent</code></a> marker can be mixed into an equality <code>match</code> (<code>==</code>) to assert that some keys exist and at the same time ensure that some keys do <strong>not</strong> exist:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = { a: 1 }
* match foo == { a: '#number', b: '#notpresent' }

# if b can be present (optional) but should always be null
* match foo == { a: '#number', b: '##null' }"><pre><span class="pl-k">* </span>def foo = { a: 1 }
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#number'</span>, b: <span class="pl-s">'#notpresent'</span> }

<span class="pl-c"># if b can be present (optional) but should always be null</span>
<span class="pl-k">* </span>match foo == { a: <span class="pl-s">'#number'</span>, b: <span class="pl-s">'##null'</span> }</pre></div>
<p dir="auto">The <code>!</code> (not) operator is especially useful for <code>contains</code> and JSON arrays.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = [1, 2, 3]
* match foo !contains 4
* match foo !contains [5, 6]"><pre><span class="pl-k">* </span>def foo = [1, 2, 3]
<span class="pl-k">* </span>match foo !contains 4
<span class="pl-k">* </span>match foo !contains [5, 6]</pre></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">JSON Arrays</h4><a id="user-content-json-arrays" class="anchor" aria-label="Permalink: JSON Arrays" href="#json-arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This is a good time to deep-dive into JsonPath, which is perfect for slicing and dicing JSON into manageable chunks. It is worth taking a few minutes to go through the documentation and examples here: <a href="https://github.com/jayway/JsonPath#path-examples">JsonPath Examples</a>.</p>
<p dir="auto">Here are some example assertions performed while scraping a list of child elements out of the JSON below. Observe how you can <code>match</code> the result of a JsonPath expression with your expected data.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given def cat = 
  &quot;&quot;&quot;
  {
    name: 'Billie',
    kittens: [
      { id: 23, name: 'Bob' },
      { id: 42, name: 'Wild' }
    ]
  }
  &quot;&quot;&quot;
# normal 'equality' match. note the wildcard '*' in the JsonPath (returns an array)
Then match cat.kittens[*].id == [23, 42]

# when inspecting a json array, 'contains' just checks if the expected items exist
# and the size and order of the actual array does not matter
Then match cat.kittens[*].id contains 23
Then match cat.kittens[*].id contains [42]
Then match cat.kittens[*].id contains [23, 42]
Then match cat.kittens[*].id contains [42, 23]

# the .. operator is great because it matches nodes at any depth in the JSON &quot;tree&quot;
Then match cat..name == ['Billie', 'Bob', 'Wild']

# and yes, you can assert against nested objects within JSON arrays !
Then match cat.kittens contains [{ id: 42, name: 'Wild' }, { id: 23, name: 'Bob' }]

# ... and even ignore fields at the same time !
Then match cat.kittens contains { id: 42, name: '#string' }"><pre><span class="pl-k">Given </span>def cat = 
  <span class="pl-s">"""</span>
<span class="pl-s">  {</span>
<span class="pl-s">    name: 'Billie',</span>
<span class="pl-s">    kittens: [</span>
<span class="pl-s">      { id: 23, name: 'Bob' },</span>
<span class="pl-s">      { id: 42, name: 'Wild' }</span>
<span class="pl-s">    ]</span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span>
<span class="pl-c"># normal 'equality' match. note the wildcard '*' in the JsonPath (returns an array)</span>
<span class="pl-k">Then </span>match cat.kittens[*].id == [23, 42]

<span class="pl-c"># when inspecting a json array, 'contains' just checks if the expected items exist</span>
<span class="pl-c"># and the size and order of the actual array does not matter</span>
<span class="pl-k">Then </span>match cat.kittens[*].id contains 23
<span class="pl-k">Then </span>match cat.kittens[*].id contains [42]
<span class="pl-k">Then </span>match cat.kittens[*].id contains [23, 42]
<span class="pl-k">Then </span>match cat.kittens[*].id contains [42, 23]

<span class="pl-c"># the .. operator is great because it matches nodes at any depth in the JSON "tree"</span>
<span class="pl-k">Then </span>match cat..name == [<span class="pl-s">'Billie'</span>, <span class="pl-s">'Bob'</span>, <span class="pl-s">'Wild'</span>]

<span class="pl-c"># and yes, you can assert against nested objects within JSON arrays !</span>
<span class="pl-k">Then </span>match cat.kittens contains [{ id: 42, name: <span class="pl-s">'Wild'</span> }, { id: 23, name: <span class="pl-s">'Bob'</span> }]

<span class="pl-c"># ... and even ignore fields at the same time !</span>
<span class="pl-k">Then </span>match cat.kittens contains { id: 42, name: <span class="pl-s">'#string'</span> }</pre></div>
<p dir="auto">It is worth mentioning that to do the equivalent of the last line in Java, you would typically have to traverse 2 Java Objects, one of which is within a list, and you would have to check for nulls as well.</p>
<p dir="auto">When you use Karate, all your data assertions can be done in pure JSON and without needing a thick forest of companion Java objects. And when you <a href="#read"><code>read</code></a> your JSON objects from (re-usable) files, even complex response payload assertions can be accomplished in just a single line of Karate-script.</p>
<p dir="auto">Refer to this <a href="https://twitter.com/KarateDSL/status/873035687817117696" rel="nofollow">case study</a> for how dramatic the reduction of lines of code can be.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>match contains only</code></h4><a id="user-content-match-contains-only" class="anchor" aria-label="Permalink: match contains only" href="#match-contains-only"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For those cases where you need to assert that <strong>all</strong> array elements are present but in <strong>any order</strong>
you can do this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def data = { foo: [1, 2, 3] }
* match data.foo contains 1
* match data.foo contains [2]
* match data.foo contains [3, 2]
* match data.foo contains only [3, 2, 1]
* match data.foo contains only [2, 3, 1]
# this will fail
# * match data.foo contains only [2, 3]"><pre><span class="pl-k">* </span>def data = { foo: [1, 2, 3] }
<span class="pl-k">* </span>match data.foo contains 1
<span class="pl-k">* </span>match data.foo contains [2]
<span class="pl-k">* </span>match data.foo contains [3, 2]
<span class="pl-k">* </span>match data.foo contains only [3, 2, 1]
<span class="pl-k">* </span>match data.foo contains only [2, 3, 1]
<span class="pl-c"># this will fail</span>
<span class="pl-c"># * match data.foo contains only [2, 3]</span></pre></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>match contains any</code></h4><a id="user-content-match-contains-any" class="anchor" aria-label="Permalink: match contains any" href="#match-contains-any"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">To assert that <strong>any</strong> of the given array elements are present.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def data = { foo: [1, 2, 3] }
* match data.foo contains any [9, 2, 8]"><pre><span class="pl-k">* </span>def data = { foo: [1, 2, 3] }
<span class="pl-k">* </span>match data.foo contains any [9, 2, 8]</pre></div>
<p dir="auto">And this happens to work as expected for JSON object keys as well:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def data = { a: 1, b: 'x' }
* match data contains any { b: 'x', c: true }"><pre><span class="pl-k">* </span>def data = { a: 1, b: <span class="pl-s">'x'</span> }
<span class="pl-k">* </span>match data contains any { b: <span class="pl-s">'x'</span>, c: true }</pre></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>match contains deep</code></h4><a id="user-content-match-contains-deep" class="anchor" aria-label="Permalink: match contains deep" href="#match-contains-deep"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This modifies the behavior of <a href="#match-contains"><code>match contains</code></a> so that nested lists or objects are processed for a "deep contains" match instead of a "deep equals" one which is the default. This is convenient for complex nested payloads where you are sure that you only want to check for <em>some</em> values in the various "trees" of data.</p>
<p dir="auto">Here is an example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Scenario: recurse nested json
  * def original = { a: 1, b: 2, c: 3, d: { a: 1, b: 2 } }
  * def expected = { a: 1, c: 3, d: { b: 2 } }
  * match original contains deep expected

Scenario: recurse nested array
  * def original = { a: 1, arr: [ { b: 2, c: 3 }, { b: 3, c: 4 } ] }
  * def expected = { a: 1, arr: [ { b: 2 }, { c: 4 } ] }
  * match original contains deep expected"><pre><span class="pl-k">Scenario</span>:<span class="pl-s"> recurse nested json</span>
  <span class="pl-k">* </span>def original = { a: 1, b: 2, c: 3, d: { a: 1, b: 2 } }
  <span class="pl-k">* </span>def expected = { a: 1, c: 3, d: { b: 2 } }
  <span class="pl-k">* </span>match original contains deep expected

<span class="pl-k">Scenario</span>:<span class="pl-s"> recurse nested array</span>
  <span class="pl-k">* </span>def original = { a: 1, arr: [ { b: 2, c: 3 }, { b: 3, c: 4 } ] }
  <span class="pl-k">* </span>def expected = { a: 1, arr: [ { b: 2 }, { c: 4 } ] }
  <span class="pl-k">* </span>match original contains deep expected</pre></div>
<blockquote>
<p dir="auto">the NOT operator e.g. <code>!contains deep</code> is not yet supported, please contribute code if you can.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>match contains only deep</code></h4><a id="user-content-match-contains-only-deep" class="anchor" aria-label="Permalink: match contains only deep" href="#match-contains-only-deep"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This is exactly like <a href="#match"><code>match ==</code></a> but the order of arrays does not matter. All arrays no matter the "depth" will be checked in this way.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def response = { foo: [ 'a', 'b' ] }
* match response contains only deep { foo: [ 'b', 'a' ] }"><pre><span class="pl-k">* </span>def response = { foo: [ <span class="pl-s">'a'</span>, <span class="pl-s">'b'</span> ] }
<span class="pl-k">* </span>match response contains only deep { foo: [ <span class="pl-s">'b'</span>, <span class="pl-s">'a'</span> ] }</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Validate every element in a JSON array</h2><a id="user-content-validate-every-element-in-a-json-array" class="anchor" aria-label="Permalink: Validate every element in a JSON array" href="#validate-every-element-in-a-json-array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>match each</code></h3><a id="user-content-match-each" class="anchor" aria-label="Permalink: match each" href="#match-each"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The <code>match</code> keyword can be made to iterate over all elements in a JSON array using the <code>each</code> modifier. Here's how it works:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def data = { foo: [{ bar: 1, baz: 'a' }, { bar: 2, baz: 'b' }, { bar: 3, baz: 'c' }]}

* match each data.foo == { bar: '#number', baz: '#string' }

# and you can use 'contains' the way you'd expect
* match each data.foo contains { bar: '#number' }
* match each data.foo contains { bar: '#? _ != 4' }

# some more examples of validation macros
* match each data.foo contains { baz: &quot;#? _ != 'z'&quot; }
* def isAbc = function(x) { return x == 'a' || x == 'b' || x == 'c' }
* match each data.foo contains { baz: '#? isAbc(_)' }

# this is also possible, see the subtle difference from the above
* def isXabc = function(x) { return x.baz == 'a' || x.baz == 'b' || x.baz == 'c' }
* match each data.foo == '#? isXabc(_)'"><pre><span class="pl-k">* </span>def data = { foo: [{ bar: 1, baz: <span class="pl-s">'a'</span> }, { bar: 2, baz: <span class="pl-s">'b'</span> }, { bar: 3, baz: <span class="pl-s">'c'</span> }]}

<span class="pl-k">* </span>match each data.foo == { bar: <span class="pl-s">'#number'</span>, baz: <span class="pl-s">'#string'</span> }

<span class="pl-c"># and you can use 'contains' the way you'd expect</span>
<span class="pl-k">* </span>match each data.foo contains { bar: <span class="pl-s">'#number'</span> }
<span class="pl-k">* </span>match each data.foo contains { bar: <span class="pl-s">'#? _ != 4'</span> }

<span class="pl-c"># some more examples of validation macros</span>
<span class="pl-k">* </span>match each data.foo contains { baz: <span class="pl-s">"#? _ != 'z'"</span> }
<span class="pl-k">* </span>def isAbc = function(x) { return x == <span class="pl-s">'a'</span> || x == <span class="pl-s">'b'</span> || x == <span class="pl-s">'c'</span> }
<span class="pl-k">* </span>match each data.foo contains { baz: <span class="pl-s">'#? isAbc(_)'</span> }

<span class="pl-c"># this is also possible, see the subtle difference from the above</span>
<span class="pl-k">* </span>def isXabc = function(x) { return x.baz == <span class="pl-s">'a'</span> || x.baz == <span class="pl-s">'b'</span> || x.baz == <span class="pl-s">'c'</span> }
<span class="pl-k">* </span>match each data.foo == <span class="pl-s">'#? isXabc(_)'</span></pre></div>
<p dir="auto">Here is a contrived example that uses <code>match each</code>, <a href="#match-contains"><code>contains</code></a> and the <a href="#self-validation-expressions"><code>#?</code></a> 'predicate' marker to validate that the value of <code>totalPrice</code> is always equal to the <code>roomPrice</code> of the first item in the <code>roomInformation</code> array.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Given def json =
  &quot;&quot;&quot;
  {
    &quot;hotels&quot;: [
      { &quot;roomInformation&quot;: [{ &quot;roomPrice&quot;: 618.4 }], &quot;totalPrice&quot;: 618.4  },
      { &quot;roomInformation&quot;: [{ &quot;roomPrice&quot;: 679.79}], &quot;totalPrice&quot;: 679.79 }
    ]
  }
  &quot;&quot;&quot;
Then match each json.hotels contains { totalPrice: '#? _ == _$.roomInformation[0].roomPrice' }
# when validation logic is an 'equality' check, an embedded expression works better
Then match each json.hotels contains { totalPrice: '#(_$.roomInformation[0].roomPrice)' }"><pre><span class="pl-k">Given </span>def json =
  <span class="pl-s">"""</span>
<span class="pl-s">  {</span>
<span class="pl-s">    "hotels": [</span>
<span class="pl-s">      { "roomInformation": [{ "roomPrice": 618.4 }], "totalPrice": 618.4  },</span>
<span class="pl-s">      { "roomInformation": [{ "roomPrice": 679.79}], "totalPrice": 679.79 }</span>
<span class="pl-s">    ]</span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span>
<span class="pl-k">Then </span>match each json.hotels contains { totalPrice: <span class="pl-s">'#? _ == _$.roomInformation[0].roomPrice'</span> }
<span class="pl-c"># when validation logic is an 'equality' check, an embedded expression works better</span>
<span class="pl-k">Then </span>match each json.hotels contains { totalPrice: <span class="pl-s">'#(_$.roomInformation[0].roomPrice)'</span> }</pre></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">Referring to self</h4><a id="user-content-referring-to-self" class="anchor" aria-label="Permalink: Referring to self" href="#referring-to-self"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">While <a href="#referring-to-the-json-root"><code>$</code></a> always refers to the <a href="#referring-to-the-json-root">JSON 'root'</a>, note the use of <code>_$</code> above to represent the 'current' node of a <code>match each</code> iteration. Here is a recap of symbols that can be used in JSON <a href="#embedded-expressions">embedded expressions</a>:</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Evaluates To</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$</code></td>
<td>The <a href="#referring-to-the-json-root">'root'</a> of the JSON document in scope</td>
</tr>
<tr>
<td><code>_</code></td>
<td>The value of <a href="#self-validation-expressions">'self'</a></td>
</tr>
<tr>
<td><code>_$</code></td>
<td>The 'parent' of 'self' or 'current' item in the list, relevant when using <a href="#match-each"><code>match each</code></a></td>
</tr>
</tbody>
</table>
<p dir="auto">There is a shortcut for <code>match each</code> explained in the next section that can be quite useful, especially for 'in-line' schema-like validations.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>match each contains deep</code></h4><a id="user-content-match-each-contains-deep" class="anchor" aria-label="Permalink: match each contains deep" href="#match-each-contains-deep"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto"><code>match each</code> can be combined with <code>contains deep</code> so that for each JSON object  a “deep contains” match is performed within nested lists or objects.</p>
<p dir="auto">This is useful for testing payloads with JSON arrays whose members have a few essential keys that you wish to validate.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  Given def response = 
  &quot;&quot;&quot;
  [
    {
      &quot;a&quot;: 1,
      &quot;arr&quot;: [
          {
              &quot;b&quot;: 2,
              &quot;c&quot;: 3
          }
      ]
    },
    {
      &quot;a&quot;: 1,
      &quot;arr&quot;: [
          {
              &quot;b&quot;: 2,
              &quot;c&quot;: 3
          },
          {
              &quot;b&quot;: 4,
              &quot;c&quot;: 5
          }
      ]
    }
  ]
  &quot;&quot;&quot;
  Then match each response contains deep { a: 1, arr: [ { b: 2 } ] }"><pre>  <span class="pl-k">Given </span>def response = 
  <span class="pl-s">"""</span>
<span class="pl-s">  [</span>
<span class="pl-s">    {</span>
<span class="pl-s">      "a": 1,</span>
<span class="pl-s">      "arr": [</span>
<span class="pl-s">          {</span>
<span class="pl-s">              "b": 2,</span>
<span class="pl-s">              "c": 3</span>
<span class="pl-s">          }</span>
<span class="pl-s">      ]</span>
<span class="pl-s">    },</span>
<span class="pl-s">    {</span>
<span class="pl-s">      "a": 1,</span>
<span class="pl-s">      "arr": [</span>
<span class="pl-s">          {</span>
<span class="pl-s">              "b": 2,</span>
<span class="pl-s">              "c": 3</span>
<span class="pl-s">          },</span>
<span class="pl-s">          {</span>
<span class="pl-s">              "b": 4,</span>
<span class="pl-s">              "c": 5</span>
<span class="pl-s">          }</span>
<span class="pl-s">      ]</span>
<span class="pl-s">    }</span>
<span class="pl-s">  ]</span>
<span class="pl-s">  """</span>
  <span class="pl-k">Then </span>match each response contains deep { a: 1, arr: [ { b: 2 } ] }</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Schema Validation</h2><a id="user-content-schema-validation" class="anchor" aria-label="Permalink: Schema Validation" href="#schema-validation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate provides a far more simpler and more powerful way than <a href="http://json-schema.org" rel="nofollow">JSON-schema</a> to validate the structure of a given payload. You can even mix domain and conditional validations and perform all assertions in a single step.</p>
<p dir="auto">But first, a special short-cut for array validation needs to be introduced:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo = ['bar', 'baz']

# should be an array
* match foo == '#[]'

# should be an array of size 2
* match foo == '#[2]'

# should be an array of strings with size 2
* match foo == '#[2] #string'

# each array element should have a 'length' property with value 3
* match foo == '#[]? _.length == 3'

# should be an array of strings each of length 3
* match foo == '#[] #string? _.length == 3'

# should be null or an array of strings
* match foo == '##[] #string'"><pre><span class="pl-k">* </span>def foo = [<span class="pl-s">'bar'</span>, <span class="pl-s">'baz'</span>]

<span class="pl-c"># should be an array</span>
<span class="pl-k">* </span>match foo == <span class="pl-s">'#[]'</span>

<span class="pl-c"># should be an array of size 2</span>
<span class="pl-k">* </span>match foo == <span class="pl-s">'#[2]'</span>

<span class="pl-c"># should be an array of strings with size 2</span>
<span class="pl-k">* </span>match foo == <span class="pl-s">'#[2] #string'</span>

<span class="pl-c"># each array element should have a 'length' property with value 3</span>
<span class="pl-k">* </span>match foo == <span class="pl-s">'#[]? _.length == 3'</span>

<span class="pl-c"># should be an array of strings each of length 3</span>
<span class="pl-k">* </span>match foo == <span class="pl-s">'#[] #string? _.length == 3'</span>

<span class="pl-c"># should be null or an array of strings</span>
<span class="pl-k">* </span>match foo == <span class="pl-s">'##[] #string'</span></pre></div>
<p dir="auto">This 'in-line' short-cut for validating JSON arrays is similar to how <a href="#match-each"><code>match each</code></a> works. So now, complex payloads (that include arrays) can easily be validated in one step by combining <a href="#ignore-or-validate">validation markers</a> like so:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def oddSchema = { price: '#string', status: '#? _ &lt; 3', ck: '##number', name: '#regex[0-9X]' }
* def isValidTime = read('time-validator.js')
When method get
Then match response ==
  &quot;&quot;&quot;
  { 
    id: '#regex[0-9]+',
    count: '#number',
    odd: '#(oddSchema)',
    data: { 
      countryId: '#number', 
      countryName: '#string', 
      leagueName: '##string', 
      status: '#number? _ &gt;= 0', 
      sportName: '#string',
      time: '#? isValidTime(_)'
    },
    odds: '#[] oddSchema'  
  }
  &quot;&quot;&quot;"><pre><span class="pl-k">* </span>def oddSchema = { price: <span class="pl-s">'#string'</span>, status: <span class="pl-s">'#? _ &lt; 3'</span>, ck: <span class="pl-s">'##number'</span>, name: <span class="pl-s">'#regex[0-9X]'</span> }
<span class="pl-k">* </span>def isValidTime = read(<span class="pl-s">'time-validator.js'</span>)
<span class="pl-k">When </span>method get
<span class="pl-k">Then </span>match response ==
  <span class="pl-s">"""</span>
<span class="pl-s">  { </span>
<span class="pl-s">    id: '#regex[0-9]+',</span>
<span class="pl-s">    count: '#number',</span>
<span class="pl-s">    odd: '#(oddSchema)',</span>
<span class="pl-s">    data: { </span>
<span class="pl-s">      countryId: '#number', </span>
<span class="pl-s">      countryName: '#string', </span>
<span class="pl-s">      leagueName: '##string', </span>
<span class="pl-s">      status: '#number? _ &gt;= 0', </span>
<span class="pl-s">      sportName: '#string',</span>
<span class="pl-s">      time: '#? isValidTime(_)'</span>
<span class="pl-s">    },</span>
<span class="pl-s">    odds: '#[] oddSchema'  </span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span></pre></div>
<p dir="auto">Especially note the re-use of the <code>oddSchema</code> both as an <a href="#embedded-expressions">embedded-expression</a> and as an array validation (on the last line).</p>
<p dir="auto">And you can perform conditional / <a href="#referring-to-the-json-root">cross-field validations</a> and even business-logic validations at the same time.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# optional (can be null) and if present should be an array of size greater than zero
* match $.odds == '##[_ &gt; 0]'

# should be an array of size equal to $.count
* match $.odds == '#[$.count]'

# use a predicate function to validate each array element
* def isValidOdd = function(o){ return o.name.length == 1 }
* match $.odds == '#[]? isValidOdd(_)'"><pre><span class="pl-c"># optional (can be null) and if present should be an array of size greater than zero</span>
<span class="pl-k">* </span>match $.odds == <span class="pl-s">'##[_ &gt; 0]'</span>

<span class="pl-c"># should be an array of size equal to $.count</span>
<span class="pl-k">* </span>match $.odds == <span class="pl-s">'#[$.count]'</span>

<span class="pl-c"># use a predicate function to validate each array element</span>
<span class="pl-k">* </span>def isValidOdd = function(o){ return o.name.length == 1 }
<span class="pl-k">* </span>match $.odds == <span class="pl-s">'#[]? isValidOdd(_)'</span></pre></div>
<p dir="auto">Refer to this for the complete example: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/schema-like.feature"><code>schema-like.feature</code></a></p>
<p dir="auto">And there is another example in the <a href="/karatelabs/karate/blob/master/karate-demo">karate-demos</a>: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/schema/schema.feature"><code>schema.feature</code></a> where you can compare Karate's approach with an actual JSON-schema example. You can also find a nice visual comparison and explanation <a href="https://twitter.com/KarateDSL/status/878984854012022784" rel="nofollow">here</a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>contains</code> short-cuts</h3><a id="user-content-contains-short-cuts" class="anchor" aria-label="Permalink: contains short-cuts" href="#contains-short-cuts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Especially when payloads are complex (or highly dynamic), it may be more practical to use <a href="#match-contains"><code>contains</code></a> semantics. Karate has the following short-cut symbols designed to be mixed into <a href="#embedded-expressions"><code>embedded expressions</code></a>:</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Means</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td><a href="#match-contains"><code>contains</code></a></td>
</tr>
<tr>
<td><code>^^</code></td>
<td><a href="#match-contains-only"><code>contains only</code></a></td>
</tr>
<tr>
<td><code>^*</code></td>
<td><a href="#match-contains-any"><code>contains any</code></a></td>
</tr>
<tr>
<td><code>^+</code></td>
<td><a href="#match-contains-deep"><code>contains deep</code></a></td>
</tr>
<tr>
<td><code>!^</code></td>
<td><a href="#not-contains"><code>not contains</code></a></td>
</tr>
</tbody>
</table>
<blockquote>
<p dir="auto">For completeness, <a href="#match"><code>==</code></a> and <a href="#match--not-equals"><code>!=</code></a> also belong in the above list.</p>
</blockquote>
<p dir="auto">Here'a table of the alternative 'in-line' forms compared with the 'standard' form. Note that <em>all</em> the short-cut forms on the right-side of the table resolve to 'equality' (<code>==</code>) matches, which enables them to be 'in-lined' into a <em>full</em> (single-step) payload <code>match</code>, using <a href="#embedded-expressions">embedded expressions</a>.</p>
<p dir="auto"><a href="https://gist.github.com/ptrthomas/2a1e30bcb4d782279019b3d5c10b3ed1"><img src="/karatelabs/karate/raw/master/karate-demo/src/test/resources/karate-json-assertions.jpg" height="690px" style="max-width: 100%;"></a></p>
<p dir="auto">A very useful capability is to be able to check that an array <code>contains</code> an object that <code>contains</code> the provided <em>sub-set</em> of keys instead of having to specify the <em>complete</em> JSON - which can get really cumbersome for large objects. This turns out to be very useful in practice, and this particular <code>match</code> <em>jsonArray</em> <code>contains '#(^</code><em>partialObject</em><code>)'</code> form has no 'in-line' equivalent (see the third-from-last row above).</p>
<blockquote>
<p dir="auto">The last row in the table is a little different from the rest, and this short-cut form is the recommended way to validate the length of a JSON array. As a rule of thumb, prefer <a href="#match"><code>match</code></a> over <a href="#assert"><code>assert</code></a>, because <code>match</code> failure messages are more detailed and descriptive.</p>
</blockquote>
<p dir="auto">In real-life tests, these are very useful when the order of items in arrays returned from the server are not guaranteed. You can easily assert that all expected elements are present, <em>even</em> in nested parts of your JSON - while doing a <a href="#match"><code>match</code></a> on the <em>full</em> payload.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def cat = 
  &quot;&quot;&quot;
  {
    name: 'Billie',
    kittens: [
      { id: 23, name: 'Bob' },
      { id: 42, name: 'Wild' }
    ]
  }
  &quot;&quot;&quot;
* def expected = [{ id: 42, name: 'Wild' }, { id: 23, name: 'Bob' }]
* match cat == { name: 'Billie', kittens: '#(^^expected)' }"><pre><span class="pl-k">* </span>def cat = 
  <span class="pl-s">"""</span>
<span class="pl-s">  {</span>
<span class="pl-s">    name: 'Billie',</span>
<span class="pl-s">    kittens: [</span>
<span class="pl-s">      { id: 23, name: 'Bob' },</span>
<span class="pl-s">      { id: 42, name: 'Wild' }</span>
<span class="pl-s">    ]</span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span>
<span class="pl-k">* </span>def expected = [{ id: 42, name: <span class="pl-s">'Wild'</span> }, { id: 23, name: <span class="pl-s">'Bob'</span> }]
<span class="pl-k">* </span>match cat == { name: <span class="pl-s">'Billie'</span>, kittens: <span class="pl-s">'#(^^expected)'</span> }</pre></div>
<p dir="auto">There's a lot going on in the last line above ! It validates the entire payload in one step and checks if the <code>kittens</code> array <a href="#contains-short-cuts"><em><strong>contains all</strong></em></a>  the <code>expected</code> items but in <em><strong>any order</strong></em>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>get</code></h2><a id="user-content-get" class="anchor" aria-label="Permalink: get" href="#get"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">By now, it should be clear that JsonPath can be very useful for extracting JSON 'trees' out of a given object. The <code>get</code> keyword allows you to save the results of a JsonPath expression for later use - which is especially useful for dynamic <a href="#data-driven-features">data-driven testing</a>.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def cat = 
  &quot;&quot;&quot;
  {
    name: 'Billie',
    kittens: [
      { id: 23, name: 'Bob' },
      { id: 42, name: 'Wild' }
    ]
  }
  &quot;&quot;&quot;
* def kitnums = get cat.kittens[*].id
* match kitnums == [23, 42]
* def kitnames = get cat $.kittens[*].name
* match kitnames == ['Bob', 'Wild']"><pre><span class="pl-k">* </span>def cat = 
  <span class="pl-s">"""</span>
<span class="pl-s">  {</span>
<span class="pl-s">    name: 'Billie',</span>
<span class="pl-s">    kittens: [</span>
<span class="pl-s">      { id: 23, name: 'Bob' },</span>
<span class="pl-s">      { id: 42, name: 'Wild' }</span>
<span class="pl-s">    ]</span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span>
<span class="pl-k">* </span>def kitnums = get cat.kittens[*].id
<span class="pl-k">* </span>match kitnums == [23, 42]
<span class="pl-k">* </span>def kitnames = get cat $.kittens[*].name
<span class="pl-k">* </span>match kitnames == [<span class="pl-s">'Bob'</span>, <span class="pl-s">'Wild'</span>]</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>get</code> short-cut</h3><a id="user-content-get-short-cut" class="anchor" aria-label="Permalink: get short-cut" href="#get-short-cut"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The 'short cut' <code>$variableName</code> form is also supported. Refer to <a href="#jsonpath-short-cuts">JsonPath short-cuts</a> for a detailed explanation. So the above could be re-written as follows:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def kitnums = $cat.kittens[*].id
* match kitnums == [23, 42]
* def kitnames = $cat.kittens[*].name
* match kitnames == ['Bob', 'Wild']"><pre><span class="pl-k">* </span>def kitnums = $cat.kittens[*].id
<span class="pl-k">* </span>match kitnums == [23, 42]
<span class="pl-k">* </span>def kitnames = $cat.kittens[*].name
<span class="pl-k">* </span>match kitnames == [<span class="pl-s">'Bob'</span>, <span class="pl-s">'Wild'</span>]</pre></div>
<p dir="auto">It is worth repeating that the above can be condensed into 2 lines. Note that since <a href="#match-and-variables">only JsonPath is expected</a> on the left-hand-side of the <code>==</code> sign of a <a href="#match"><code>match</code></a> statement, you don't need to prefix the variable reference with <code>$</code>:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* match cat.kittens[*].id == [23, 42]
* match cat.kittens[*].name == ['Bob', 'Wild']

# if you prefer using 'pure' JsonPath, you can do this
* match cat $.kittens[*].id == [23, 42]
* match cat $.kittens[*].name == ['Bob', 'Wild']"><pre><span class="pl-k">* </span>match cat.kittens[*].id == [23, 42]
<span class="pl-k">* </span>match cat.kittens[*].name == [<span class="pl-s">'Bob'</span>, <span class="pl-s">'Wild'</span>]

<span class="pl-c"># if you prefer using 'pure' JsonPath, you can do this</span>
<span class="pl-k">* </span>match cat $.kittens[*].id == [23, 42]
<span class="pl-k">* </span>match cat $.kittens[*].name == [<span class="pl-s">'Bob'</span>, <span class="pl-s">'Wild'</span>]</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>get</code> plus index</h3><a id="user-content-get-plus-index" class="anchor" aria-label="Permalink: get plus index" href="#get-plus-index"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">A convenience that the <code>get</code> syntax supports (but not the <code>$</code> short-cut form) is to return a single element if the right-hand-side evaluates to a list-like result (e.g. a JSON array). This is useful because the moment you use a wildcard <code>[*]</code> or search filter in JsonPath (see the next section), you get an <em>array</em> back - even though typically you would only be interested in the <em>first</em> item.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def actual = 23

# so instead of this
* def kitnums = get cat.kittens[*].id
* match actual == kitnums[0]

# you can do this in one line
* match actual == get[0] cat.kittens[*].id"><pre><span class="pl-k">* </span>def actual = 23

<span class="pl-c"># so instead of this</span>
<span class="pl-k">* </span>def kitnums = get cat.kittens[*].id
<span class="pl-k">* </span>match actual == kitnums[0]

<span class="pl-c"># you can do this in one line</span>
<span class="pl-k">* </span>match actual == get[0] cat.kittens[*].id</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">JsonPath filters</h3><a id="user-content-jsonpath-filters" class="anchor" aria-label="Permalink: JsonPath filters" href="#jsonpath-filters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">JsonPath <a href="https://github.com/json-path/JsonPath#filter-operators">filter expressions</a> are very useful for extracting elements that meet some filter criteria out of arrays.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def cat = 
  &quot;&quot;&quot;
  {
    name: 'Billie',
    kittens: [
      { id: 23, name: 'Bob' },
      { id: 42, name: 'Wild' }
    ]
  }
  &quot;&quot;&quot;
# find single kitten where id == 23
* def bob = get[0] cat.kittens[?(@.id==23)]
* match bob.name == 'Bob'

# using the karate object if the expression is dynamic
* def temp = karate.jsonPath(cat, &quot;$.kittens[?(@.name=='&quot; + bob.name + &quot;')]&quot;)
* match temp[0] == bob

# or alternatively
* def temp = karate.jsonPath(cat, &quot;$.kittens[?(@.name=='&quot; + bob.name + &quot;')]&quot;)[0]
* match temp == bob"><pre><span class="pl-k">* </span>def cat = 
  <span class="pl-s">"""</span>
<span class="pl-s">  {</span>
<span class="pl-s">    name: 'Billie',</span>
<span class="pl-s">    kittens: [</span>
<span class="pl-s">      { id: 23, name: 'Bob' },</span>
<span class="pl-s">      { id: 42, name: 'Wild' }</span>
<span class="pl-s">    ]</span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span>
<span class="pl-c"># find single kitten where id == 23</span>
<span class="pl-k">* </span>def bob = get[0] cat.kittens[?(<span class="pl-k">@.id==23)]</span>
<span class="pl-k">* </span>match bob.name == <span class="pl-s">'Bob'</span>

<span class="pl-c"># using the karate object if the expression is dynamic</span>
<span class="pl-k">* </span>def temp = karate.jsonPath(cat, <span class="pl-s">"$.kittens[?(@.name=='"</span> + bob.name + <span class="pl-s">"')]"</span>)
<span class="pl-k">* </span>match temp[0] == bob

<span class="pl-c"># or alternatively</span>
<span class="pl-k">* </span>def temp = karate.jsonPath(cat, <span class="pl-s">"$.kittens[?(@.name=='"</span> + bob.name + <span class="pl-s">"')]"</span>)[0]
<span class="pl-k">* </span>match temp == bob</pre></div>
<p dir="auto">You usually won't need this, but the second-last line above shows how the <code>karate</code> object can be used to <a href="#karate-jsonpath">evaluate JsonPath</a> if the filter expression depends on a variable. If you find yourself struggling to write <a href="https://stackoverflow.com/a/52741196/143475" rel="nofollow">dynamic JsonPath filters</a>, look at <a href="#karate-filter"><code>karate.filter()</code></a> as an alternative, described just below.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">JSON Transforms</h2><a id="user-content-json-transforms" class="anchor" aria-label="Permalink: JSON Transforms" href="#json-transforms"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate supports the following <a href="https://en.wikipedia.org/wiki/Functional_programming" rel="nofollow">functional-style</a> operations via the JS API -  <a href="#karate-map"><code>karate.map()</code></a>, <a href="#karate-filter"><code>karate.filter()</code></a> and <a href="#karate-foreach"><code>karate.forEach()</code></a>. They can be very useful in some situations. A <a href="https://stackoverflow.com/a/53120851/143475" rel="nofollow">good example</a> is when you have the <em>expected</em> data available as ready-made JSON but it is in a different "shape" from the <em>actual</em> data or HTTP <code>response</code>. There is also a <a href="#karate-mapwithkey"><code>karate.mapWithKey()</code></a> for a common need - which is to convert an array of primitives into an array of objects, which is the form that <a href="#data-driven-features">data driven features</a> expect.</p>
<p dir="auto">The Graal JS engine that Karate uses supports the full ES6 spec, which means that JSON variables are first-class JS objects, and arrays can be <em>directly</em> looped over or manipulated using <a href="https://stackoverflow.com/a/76091034/143475" rel="nofollow"><code>map()</code>, <code>filter()</code> and <code>forEach()</code></a>. And JS "arrow functions" are supported, which makes code much more concise.</p>
<p dir="auto">A few more useful "transforms" are to select a sub-set of key-value pairs using <a href="#karate-filterkeys"><code>karate.filterKeys()</code></a>, merging 2 or more JSON-s using <a href="#karate-merge"><code>karate.merge()</code></a> and combining 2 or more arrays (or objects) into a single array using <a href="#karate-append"><code>karate.append()</code></a>. And <a href="#karate-appendto"><code>karate.appendTo()</code></a> is for updating an existing variable (the equivalent of <code>array.push()</code> in JavaScript), which is especially useful in the body of a <code>karate.forEach()</code>.</p>
<p dir="auto">You can also sort arrays of arbitrary JSON using <a href="#karate-sort"><code>karate.sort()</code></a>. Simple arrays of strings or numbers can be stripped of duplicates using <a href="#karate-distinct"><code>karate.distinct()</code></a>. All JS "native" array operations can be used, such as <code>someName.reverse()</code>.</p>
<blockquote>
<p dir="auto">Note that a single JS function is sufficient to transform a given JSON object into a completely new one, and you can use complex conditional logic if needed.</p>
</blockquote>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Scenario: karate map operation
    * def fun = function(x){ return x * x }
    * def list = [1, 2, 3]
    * def res = karate.map(list, fun)
    * match res == [1, 4, 9]

Scenario: js style map operation
    * def list = [1, 2, 3]
    * def res = list.map(list, x =&gt; x * x)
    * match res == [1, 4, 9]

Scenario: convert an array into a different shape
    * def before = [{ foo: 1 }, { foo: 2 }, { foo: 3 }]
    * def fun = function(x){ return { bar: x.foo } }
    * def after = karate.map(before, fun)
    * match after == [{ bar: 1 }, { bar: 2 }, { bar: 3 }]

Scenario: convert array of primitives into array of objects
    * def list = [ 'Bob', 'Wild', 'Nyan' ]
    * def data = karate.mapWithKey(list, 'name')
    * match data == [{ name: 'Bob' }, { name: 'Wild' }, { name: 'Nyan' }]

Scenario: karate filter operation
    * def fun = function(x){ return x % 2 == 0 }
    * def list = [1, 2, 3, 4]
    * def res = karate.filter(list, fun)
    * match res == [2, 4]

Scenario: js style filter operation
    * def list = [1, 2, 3, 4]
    * def res = list.filter(list, x =&gt; x % 2 == 0)
    * match res == [2, 4]    

Scenario: karate.forEach() works even on object key-values, not just arrays
    * def keys = []
    * def vals = []
    * def idxs = []
    * def fun = 
    &quot;&quot;&quot;
    function(x, y, i) { 
      karate.appendTo(keys, x); 
      karate.appendTo(vals, y); 
      karate.appendTo(idxs, i); 
    }
    &quot;&quot;&quot;
    * def map = { a: 2, b: 4, c: 6 }
    * karate.forEach(map, fun)
    * match keys == ['a', 'b', 'c']
    * match vals == [2, 4, 6]
    * match idxs == [0, 1, 2]

Scenario: filterKeys
    * def schema = { a: '#string', b: '#number', c: '#boolean' }
    * def response = { a: 'x', c: true }
    # very useful for validating a response against a schema &quot;super-set&quot;
    * match response == karate.filterKeys(schema, response)
    * match karate.filterKeys(response, 'b', 'c') == { c: true }
    * match karate.filterKeys(response, ['a', 'b']) == { a: 'x' }

Scenario: merge
    * def foo = { a: 1 }
    * def bar = karate.merge(foo, { b: 2 })
    * match bar == { a: 1, b: 2 }

Scenario: append
    * def foo = [{ a: 1 }]
    * def bar = karate.append(foo, { b: 2 })
    * match bar == [{ a: 1 }, { b: 2 }]

Scenario: sort
    * def foo = [{a: { b: 3 }}, {a: { b: 1 }}, {a: { b: 2 }}]
    * def fun = function(x){ return x.a.b }
    * def bar = karate.sort(foo, fun)
    * match bar == [{a: { b: 1 }}, {a: { b: 2 }}, {a: { b: 3 }}]
    * match bar.reverse() == [{a: { b: 3 }}, {a: { b: 2 }}, {a: { b: 1 }}]"><pre><span class="pl-k">Scenario</span>:<span class="pl-s"> karate map operation</span>
    <span class="pl-k">* </span>def fun = function(x){ return x * x }
    <span class="pl-k">* </span>def list = [1, 2, 3]
    <span class="pl-k">* </span>def res = karate.map(list, fun)
    <span class="pl-k">* </span>match res == [1, 4, 9]

<span class="pl-k">Scenario</span>:<span class="pl-s"> js style map operation</span>
    <span class="pl-k">* </span>def list = [1, 2, 3]
    <span class="pl-k">* </span>def res = list.map(list, x =&gt; x * x)
    <span class="pl-k">* </span>match res == [1, 4, 9]

<span class="pl-k">Scenario</span>:<span class="pl-s"> convert an array into a different shape</span>
    <span class="pl-k">* </span>def before = [{ foo: 1 }, { foo: 2 }, { foo: 3 }]
    <span class="pl-k">* </span>def fun = function(x){ return { bar: x.foo } }
    <span class="pl-k">* </span>def after = karate.map(before, fun)
    <span class="pl-k">* </span>match after == [{ bar: 1 }, { bar: 2 }, { bar: 3 }]

<span class="pl-k">Scenario</span>:<span class="pl-s"> convert array of primitives into array of objects</span>
    <span class="pl-k">* </span>def list = [ <span class="pl-s">'Bob'</span>, <span class="pl-s">'Wild'</span>, <span class="pl-s">'Nyan'</span> ]
    <span class="pl-k">* </span>def data = karate.mapWithKey(list, <span class="pl-s">'name'</span>)
    <span class="pl-k">* </span>match data == [{ name: <span class="pl-s">'Bob'</span> }, { name: <span class="pl-s">'Wild'</span> }, { name: <span class="pl-s">'Nyan'</span> }]

<span class="pl-k">Scenario</span>:<span class="pl-s"> karate filter operation</span>
    <span class="pl-k">* </span>def fun = function(x){ return x % 2 == 0 }
    <span class="pl-k">* </span>def list = [1, 2, 3, 4]
    <span class="pl-k">* </span>def res = karate.filter(list, fun)
    <span class="pl-k">* </span>match res == [2, 4]

<span class="pl-k">Scenario</span>:<span class="pl-s"> js style filter operation</span>
    <span class="pl-k">* </span>def list = [1, 2, 3, 4]
    <span class="pl-k">* </span>def res = list.filter(list, x =&gt; x % 2 == 0)
    <span class="pl-k">* </span>match res == [2, 4]    

<span class="pl-k">Scenario</span>:<span class="pl-s"> karate.forEach() works even on object key-values, not just arrays</span>
    <span class="pl-k">* </span>def keys = []
    <span class="pl-k">* </span>def vals = []
    <span class="pl-k">* </span>def idxs = []
    <span class="pl-k">* </span>def fun = 
    <span class="pl-s">"""</span>
<span class="pl-s">    function(x, y, i) { </span>
<span class="pl-s">      karate.appendTo(keys, x); </span>
<span class="pl-s">      karate.appendTo(vals, y); </span>
<span class="pl-s">      karate.appendTo(idxs, i); </span>
<span class="pl-s">    }</span>
<span class="pl-s">    """</span>
    <span class="pl-k">* </span>def map = { a: 2, b: 4, c: 6 }
    <span class="pl-k">* </span>karate.forEach(map, fun)
    <span class="pl-k">* </span>match keys == [<span class="pl-s">'a'</span>, <span class="pl-s">'b'</span>, <span class="pl-s">'c'</span>]
    <span class="pl-k">* </span>match vals == [2, 4, 6]
    <span class="pl-k">* </span>match idxs == [0, 1, 2]

<span class="pl-k">Scenario</span>:<span class="pl-s"> filterKeys</span>
    <span class="pl-k">* </span>def schema = { a: <span class="pl-s">'#string'</span>, b: <span class="pl-s">'#number'</span>, c: <span class="pl-s">'#boolean'</span> }
    <span class="pl-k">* </span>def response = { a: <span class="pl-s">'x'</span>, c: true }
<span class="pl-c">    # very useful for validating a response against a schema "super-set"</span>
    <span class="pl-k">* </span>match response == karate.filterKeys(schema, response)
    <span class="pl-k">* </span>match karate.filterKeys(response, <span class="pl-s">'b'</span>, <span class="pl-s">'c'</span>) == { c: true }
    <span class="pl-k">* </span>match karate.filterKeys(response, [<span class="pl-s">'a'</span>, <span class="pl-s">'b'</span>]) == { a: <span class="pl-s">'x'</span> }

<span class="pl-k">Scenario</span>:<span class="pl-s"> merge</span>
    <span class="pl-k">* </span>def foo = { a: 1 }
    <span class="pl-k">* </span>def bar = karate.merge(foo, { b: 2 })
    <span class="pl-k">* </span>match bar == { a: 1, b: 2 }

<span class="pl-k">Scenario</span>:<span class="pl-s"> append</span>
    <span class="pl-k">* </span>def foo = [{ a: 1 }]
    <span class="pl-k">* </span>def bar = karate.append(foo, { b: 2 })
    <span class="pl-k">* </span>match bar == [{ a: 1 }, { b: 2 }]

<span class="pl-k">Scenario</span>:<span class="pl-s"> sort</span>
    <span class="pl-k">* </span>def foo = [{a: { b: 3 }}, {a: { b: 1 }}, {a: { b: 2 }}]
    <span class="pl-k">* </span>def fun = function(x){ return x.a.b }
    <span class="pl-k">* </span>def bar = karate.sort(foo, fun)
    <span class="pl-k">* </span>match bar == [{a: { b: 1 }}, {a: { b: 2 }}, {a: { b: 3 }}]
    <span class="pl-k">* </span>match bar.reverse() == [{a: { b: 3 }}, {a: { b: 2 }}, {a: { b: 1 }}]</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Loops</h3><a id="user-content-loops" class="anchor" aria-label="Permalink: Loops" href="#loops"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Given the examples above, it has to be said that a best practice with Karate is to avoid JavaScript <code>for</code> loops as far as possible. A common requirement is to build an array with <code>n</code> elements or do something <code>n</code> times where <code>n</code> is an integer (that could even be a variable reference). This is easily achieved with the <a href="#karate-repeat"><code>karate.repeat()</code></a> API:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def fun = function(i){ return i * 2 }
* def foo = karate.repeat(5, fun)
* match foo == [0, 2, 4, 6, 8]

* def foo = []
* def fun = function(i){ karate.appendTo(foo, i) }
* karate.repeat(5, fun)
* match foo == [0, 1, 2, 3, 4]

# generate test data easily
* def fun = function(i){ return { name: 'User ' + (i + 1) } }
* def foo = karate.repeat(3, fun)
* match foo == [{ name: 'User 1' }, { name: 'User 2' }, { name: 'User 3' }]

# generate a range of numbers as a json array
* def foo = karate.range(4, 9)
* match foo == [4, 5, 6, 7, 8, 9]"><pre><span class="pl-k">* </span>def fun = function(i){ return i * 2 }
<span class="pl-k">* </span>def foo = karate.repeat(5, fun)
<span class="pl-k">* </span>match foo == [0, 2, 4, 6, 8]

<span class="pl-k">* </span>def foo = []
<span class="pl-k">* </span>def fun = function(i){ karate.appendTo(foo, i) }
<span class="pl-k">* </span>karate.repeat(5, fun)
<span class="pl-k">* </span>match foo == [0, 1, 2, 3, 4]

<span class="pl-c"># generate test data easily</span>
<span class="pl-k">* </span>def fun = function(i){ return { name: <span class="pl-s">'User '</span> + (i + 1) } }
<span class="pl-k">* </span>def foo = karate.repeat(3, fun)
<span class="pl-k">* </span>match foo == [{ name: <span class="pl-s">'User 1'</span> }, { name: <span class="pl-s">'User 2'</span> }, { name: <span class="pl-s">'User 3'</span> }]

<span class="pl-c"># generate a range of numbers as a json array</span>
<span class="pl-k">* </span>def foo = karate.range(4, 9)
<span class="pl-k">* </span>match foo == [4, 5, 6, 7, 8, 9]</pre></div>
<p dir="auto">And there's also <a href="#karate-range"><code>karate.range()</code></a> which can be useful to generate test-data.</p>
<p dir="auto">Don't forget that Karate's <a href="#data-driven-tests">data-driven testing capabilities</a> can loop over arrays of JSON objects automatically.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">XPath Functions</h2><a id="user-content-xpath-functions" class="anchor" aria-label="Permalink: XPath Functions" href="#xpath-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When handling XML, you sometimes need to call <a href="https://docs.oracle.com/javase/tutorial/jaxp/xslt/xpath.html" rel="nofollow">XPath functions</a>, for example to get the count of a node-set. Any valid XPath expression is allowed on the left-hand-side of a <a href="#match"><code>match</code></a> statement.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def foo =
  &quot;&quot;&quot;
  &lt;records&gt;
    &lt;record index=&quot;1&quot;&gt;a&lt;/record&gt;
    &lt;record index=&quot;2&quot;&gt;b&lt;/record&gt;
    &lt;record index=&quot;3&quot; foo=&quot;bar&quot;&gt;c&lt;/record&gt;
  &lt;/records&gt;
  &quot;&quot;&quot;

* match foo count(/records//record) == 3
* match foo //record[@index=2] == 'b'
* match foo //record[@foo='bar'] == 'c'"><pre><span class="pl-k">* </span>def foo =
  <span class="pl-s">"""</span>
<span class="pl-s">  &lt;records&gt;</span>
<span class="pl-s">    &lt;record index="1"&gt;a&lt;/record&gt;</span>
<span class="pl-s">    &lt;record index="2"&gt;b&lt;/record&gt;</span>
<span class="pl-s">    &lt;record index="3" foo="bar"&gt;c&lt;/record&gt;</span>
<span class="pl-s">  &lt;/records&gt;</span>
<span class="pl-s">  """</span>

<span class="pl-k">* </span>match foo count(/records//record) == 3
<span class="pl-k">* </span>match foo //record[<span class="pl-k">@index=2]</span> == <span class="pl-s">'b'</span>
<span class="pl-k">* </span>match foo //record[<span class="pl-k">@foo='bar']</span> == <span class="pl-s">'c'</span></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Advanced XPath</h3><a id="user-content-advanced-xpath" class="anchor" aria-label="Permalink: Advanced XPath" href="#advanced-xpath"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Some XPath expressions return a list of nodes (instead of a single node). But since you can express a list of data-elements as a JSON array - even these XPath expressions can be used in <code>match</code> statements.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def teachers = 
  &quot;&quot;&quot;
  &lt;teachers&gt;
    &lt;teacher department=&quot;science&quot;&gt;
      &lt;subject&gt;math&lt;/subject&gt;
      &lt;subject&gt;physics&lt;/subject&gt;
    &lt;/teacher&gt;
    &lt;teacher department=&quot;arts&quot;&gt;
      &lt;subject&gt;political education&lt;/subject&gt;
      &lt;subject&gt;english&lt;/subject&gt;
    &lt;/teacher&gt;
  &lt;/teachers&gt;
  &quot;&quot;&quot;
* match teachers //teacher[@department='science']/subject == ['math', 'physics']"><pre><span class="pl-k">* </span>def teachers = 
  <span class="pl-s">"""</span>
<span class="pl-s">  &lt;teachers&gt;</span>
<span class="pl-s">    &lt;teacher department="science"&gt;</span>
<span class="pl-s">      &lt;subject&gt;math&lt;/subject&gt;</span>
<span class="pl-s">      &lt;subject&gt;physics&lt;/subject&gt;</span>
<span class="pl-s">    &lt;/teacher&gt;</span>
<span class="pl-s">    &lt;teacher department="arts"&gt;</span>
<span class="pl-s">      &lt;subject&gt;political education&lt;/subject&gt;</span>
<span class="pl-s">      &lt;subject&gt;english&lt;/subject&gt;</span>
<span class="pl-s">    &lt;/teacher&gt;</span>
<span class="pl-s">  &lt;/teachers&gt;</span>
<span class="pl-s">  """</span>
<span class="pl-k">* </span>match teachers //teacher[<span class="pl-k">@department='science']/subject</span> == [<span class="pl-s">'math'</span>, <span class="pl-s">'physics'</span>]</pre></div>
<p dir="auto">If your XPath is dynamic and has to be formed 'on the fly' perhaps by using some variable derived from previous steps, you can use the <a href="#karate-xmlpath"><code>karate.xmlPath()</code></a> helper:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def xml = &lt;query&gt;&lt;name&gt;&lt;foo&gt;bar&lt;/foo&gt;&lt;/name&gt;&lt;/query&gt;
* def elementName = 'name'
* def name = karate.xmlPath(xml, '/query/' + elementName + '/foo')
* match name == 'bar'
* def queryName = karate.xmlPath(xml, '/query/' + elementName)
* match queryName == &lt;name&gt;&lt;foo&gt;bar&lt;/foo&gt;&lt;/name&gt;"><pre><span class="pl-k">* </span>def xml = <span class="pl-smi">&lt;query&gt;&lt;name&gt;&lt;foo&gt;</span>bar<span class="pl-smi">&lt;/foo&gt;&lt;/name&gt;&lt;/query&gt;</span>
<span class="pl-k">* </span>def elementName = <span class="pl-s">'name'</span>
<span class="pl-k">* </span>def name = karate.xmlPath(xml, <span class="pl-s">'/query/'</span> + elementName + <span class="pl-s">'/foo'</span>)
<span class="pl-k">* </span>match name == <span class="pl-s">'bar'</span>
<span class="pl-k">* </span>def queryName = karate.xmlPath(xml, <span class="pl-s">'/query/'</span> + elementName)
<span class="pl-k">* </span>match queryName == <span class="pl-smi">&lt;name&gt;&lt;foo&gt;</span>bar<span class="pl-smi">&lt;/foo&gt;&lt;/name&gt;</span></pre></div>
<p dir="auto">You can refer to this file (which is part of the Karate test-suite) for more XML examples: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml-and-xpath.feature"><code>xml-and-xpath.feature</code></a></p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Special Variables</h1><a id="user-content-special-variables" class="anchor" aria-label="Permalink: Special Variables" href="#special-variables"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">These are 'built-in' variables, there are only a few and all of them give you access to the HTTP response.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>response</code></h2><a id="user-content-response" class="anchor" aria-label="Permalink: response" href="#response"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">After every HTTP call this variable is set with the response body, and is available until the next HTTP request over-writes it. You can easily assign the whole <code>response</code> (or just parts of it using Json-Path or XPath) to a variable, and use it in later steps.</p>
<p dir="auto">The response is automatically available as a JSON, XML or String object depending on what the response contents are.</p>
<p dir="auto">As a short-cut, when running JsonPath expressions - <code>$</code> represents the <code>response</code>.  This has the advantage that you can use pure <a href="https://github.com/jayway/JsonPath#path-examples">JsonPath</a> and be more concise.  For example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# the three lines below are equivalent
Then match response $ == { name: 'Billie' }
Then match response == { name: 'Billie' }
Then match $ == { name: 'Billie' }

# the three lines below are equivalent
Then match response.name == 'Billie'
Then match response $.name == 'Billie'
Then match $.name == 'Billie'
"><pre><span class="pl-c"># the three lines below are equivalent</span>
<span class="pl-k">Then </span>match response $ == { name: <span class="pl-s">'Billie'</span> }
<span class="pl-k">Then </span>match response == { name: <span class="pl-s">'Billie'</span> }
<span class="pl-k">Then </span>match $ == { name: <span class="pl-s">'Billie'</span> }

<span class="pl-c"># the three lines below are equivalent</span>
<span class="pl-k">Then </span>match response.name == <span class="pl-s">'Billie'</span>
<span class="pl-k">Then </span>match response $.name == <span class="pl-s">'Billie'</span>
<span class="pl-k">Then </span>match $.name == <span class="pl-s">'Billie'</span>
</pre></div>
<p dir="auto">And similarly for XML and XPath, '/' represents the <code>response</code></p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# the four lines below are equivalent
Then match response / == &lt;cat&gt;&lt;name&gt;Billie&lt;/name&gt;&lt;/cat&gt;
Then match response/ == &lt;cat&gt;&lt;name&gt;Billie&lt;/name&gt;&lt;/cat&gt;
Then match response == &lt;cat&gt;&lt;name&gt;Billie&lt;/name&gt;&lt;/cat&gt;
Then match / == &lt;cat&gt;&lt;name&gt;Billie&lt;/name&gt;&lt;/cat&gt; 

# the three lines below are equivalent
Then match response /cat/name == 'Billie'
Then match response/cat/name == 'Billie'
Then match /cat/name == 'Billie'"><pre><span class="pl-c"># the four lines below are equivalent</span>
<span class="pl-k">Then </span>match response / == <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Billie<span class="pl-smi">&lt;/name&gt;&lt;/cat&gt;</span>
<span class="pl-k">Then </span>match response/ == <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Billie<span class="pl-smi">&lt;/name&gt;&lt;/cat&gt;</span>
<span class="pl-k">Then </span>match response == <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Billie<span class="pl-smi">&lt;/name&gt;&lt;/cat&gt;</span>
<span class="pl-k">Then </span>match / == <span class="pl-smi">&lt;cat&gt;&lt;name&gt;</span>Billie<span class="pl-smi">&lt;/name&gt;&lt;/cat&gt;</span> 

<span class="pl-c"># the three lines below are equivalent</span>
<span class="pl-k">Then </span>match response /cat/name == <span class="pl-s">'Billie'</span>
<span class="pl-k">Then </span>match response/cat/name == <span class="pl-s">'Billie'</span>
<span class="pl-k">Then </span>match /cat/name == <span class="pl-s">'Billie'</span></pre></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">JsonPath short-cuts</h4><a id="user-content-jsonpath-short-cuts" class="anchor" aria-label="Permalink: JsonPath short-cuts" href="#jsonpath-short-cuts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The <a href="#get-short-cut"><code>$varName</code> form</a> is used on the right-hand-side of <a href="#karate-expressions">Karate expressions</a> and is <em>slightly</em> different from pure <a href="https://github.com/json-path/JsonPath#path-examples">JsonPath expressions</a> which always begin with <code>$.</code> or <code>$[</code>. Here is a summary of what the different 'shapes' mean in Karate:</p>
<table>
<thead>
<tr>
<th>Shape</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$.bar</code></td>
<td>Pure JsonPath equivalent of <code>$response.bar</code> where <code>response</code> is a JSON object</td>
</tr>
<tr>
<td><code>$[0]</code></td>
<td>Pure JsonPath equivalent of <code>$response[0]</code> where <code>response</code> is a JSON array</td>
</tr>
<tr>
<td><code>$foo.bar</code></td>
<td>Evaluates the JsonPath <code>$.bar</code> on the variable <code>foo</code> which is a JSON object or map-like</td>
</tr>
<tr>
<td><code>$foo[0]</code></td>
<td>Evaluates the JsonPath <code>$[0]</code> on the variable <code>foo</code> which is a JSON array or list-like</td>
</tr>
</tbody>
</table>
<blockquote>
<p dir="auto">There is no need to prefix variable names with <code>$</code> on the left-hand-side of <a href="#match"><code>match</code></a> statements because it is implied. You <em>can</em> if you want to, but since <a href="#match-and-variables"><em>only</em> JsonPath (on variables)</a> is allowed here, Karate ignores the <code>$</code> and looks only at the variable name. None of the examples in the documentation use the <code>$varName</code> form on the LHS, and this is the recommended best-practice.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>responseBytes</code></h2><a id="user-content-responsebytes" class="anchor" aria-label="Permalink: responseBytes" href="#responsebytes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This will always hold the contents of the response as a byte-array. This is rarely used, unless you are expecting binary content returned by the server. The <code>match</code> keyword will <a href="#match-text-or-binary">work as you expect</a>. Here is an example: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/mock/binary.feature"><code>binary.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>responseCookies</code></h2><a id="user-content-responsecookies" class="anchor" aria-label="Permalink: responseCookies" href="#responsecookies"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The <code>responseCookies</code> variable is set upon any HTTP response and is a map-like (or JSON-like) object. It can be easily inspected or used in expressions.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* assert responseCookies['my.key'].value == 'someValue'

# karate's unified data handling means that even 'match' works
* match responseCookies contains { time: '#notnull' }

# ... which means that checking if a cookie does NOT exist is a piece of cake
* match responseCookies !contains { blah: '#notnull' }

# save a response cookie for later use
* def time = responseCookies.time.value"><pre><span class="pl-k">* </span>assert responseCookies[<span class="pl-s">'my.key'</span>].value == <span class="pl-s">'someValue'</span>

<span class="pl-c"># karate's unified data handling means that even 'match' works</span>
<span class="pl-k">* </span>match responseCookies contains { time: <span class="pl-s">'#notnull'</span> }

<span class="pl-c"># ... which means that checking if a cookie does NOT exist is a piece of cake</span>
<span class="pl-k">* </span>match responseCookies !contains { blah: <span class="pl-s">'#notnull'</span> }

<span class="pl-c"># save a response cookie for later use</span>
<span class="pl-k">* </span>def time = responseCookies.time.value</pre></div>
<p dir="auto">As a convenience, cookies from the previous response are collected and passed as-is as part of the next HTTP request. This is what is normally expected and simulates a web-browser - which makes it easy to script things like HTML-form based authentication into test-flows. Refer to the documentation for <a href="#cookie"><code>cookie</code></a> for details and how you can disable this if need be.</p>
<p dir="auto">Each item within <code>responseCookies</code> is itself a 'map-like' object. Typically you would examine the <code>value</code> property as in the example above, but <code>domain</code> and <code>path</code> are also available.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>responseHeaders</code></h2><a id="user-content-responseheaders" class="anchor" aria-label="Permalink: responseHeaders" href="#responseheaders"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">See also <a href="#match-header"><code>match header</code></a> which is what you would normally need.</p>
<p dir="auto">But if you need to use values in the response headers - they will be in a variable named <code>responseHeaders</code>. Note that it is a 'map of lists' so you will need to do things like this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def contentType = responseHeaders['Content-Type'][0]"><pre><span class="pl-k">* </span>def contentType = responseHeaders[<span class="pl-s">'Content-Type'</span>][0]</pre></div>
<p dir="auto">And just as in the <a href="#responsecookies"><code>responseCookies</code></a> example above, you can use <a href="#match"><code>match</code></a> to run complex validations on the <code>responseHeaders</code>.</p>
<p dir="auto">Finally, using <a href="#karate-response"><code>karate.response.header(name)</code></a> can be simpler to just get a header value string by name, and it will ignore-case for the name passed as the argument:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* match karate.response.header('content-type') == 'application/json'"><pre><span class="pl-k">* </span>match karate.response.header(<span class="pl-s">'content-type'</span>) == <span class="pl-s">'application/json'</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>responseStatus</code></h2><a id="user-content-responsestatus" class="anchor" aria-label="Permalink: responseStatus" href="#responsestatus"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You would normally only need to use the <a href="#status"><code>status</code></a> keyword.  But if you really need to use the HTTP response code in an expression or save it for later, you can get it as an integer:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def uploadStatusCode = responseStatus

# check if the response status is either of two values
Then assert responseStatus == 200 || responseStatus == 204"><pre><span class="pl-k">* </span>def uploadStatusCode = responseStatus

<span class="pl-c"># check if the response status is either of two values</span>
<span class="pl-k">Then </span>assert responseStatus == 200 || responseStatus == 204</pre></div>
<p dir="auto">Note that <a href="#match"><code>match</code></a> can give you some extra readable options:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* match [200, 201, 204] contains responseStatus

# this may be sufficient to check a range of values
* assert responseStatus &gt;= 200
* assert responseStatus &lt; 300

# but using karate.range() you can even do this !
* match karate.range(200, 299) contains responseStatus"><pre><span class="pl-k">* </span>match [200, 201, 204] contains responseStatus

<span class="pl-c"># this may be sufficient to check a range of values</span>
<span class="pl-k">* </span>assert responseStatus &gt;= 200
<span class="pl-k">* </span>assert responseStatus <span class="pl-smi">&lt; 300</span>
<span class="pl-smi"></span>
<span class="pl-smi"># but using karate.range() you can even do this !</span>
<span class="pl-smi">* match karate.range(200, 299) contains responseStatus</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>responseTime</code></h2><a id="user-content-responsetime" class="anchor" aria-label="Permalink: responseTime" href="#responsetime"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The response time (in milliseconds) for the current <a href="#response"><code>response</code></a> would be available in a variable called <code>responseTime</code>. You can use this to assert that it was returned within the expected time like so:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="When method post
Then status 201
And assert responseTime &lt; 1000"><pre><span class="pl-k">When </span>method post
<span class="pl-k">Then </span>status 201
<span class="pl-k">And </span>assert responseTime <span class="pl-smi">&lt; 1000</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>responseType</code></h2><a id="user-content-responsetype" class="anchor" aria-label="Permalink: responseType" href="#responsetype"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate will attempt to parse the raw HTTP response body as JSON or XML and make it available as the <a href="#response"><code>response</code></a> value. If parsing fails, Karate will log a warning and the value of <code>response</code> will then be a plain string. You can still perform string comparisons such as a <a href="#match-text-or-binary"><code>match contains</code></a> and look for error messages etc. In rare cases, you may want to check what the "type" of the <code>response</code> is and it can be one of 3 different values: <code>json</code>, <code>xml</code> and <code>string</code>.</p>
<p dir="auto">So if you really wanted to assert that the HTTP response body is well-formed JSON or XML you can do this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="When method post
Then status 201
And match responseType == 'json'"><pre><span class="pl-k">When </span>method post
<span class="pl-k">Then </span>status 201
<span class="pl-k">And </span>match responseType == <span class="pl-s">'json'</span></pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>requestTimeStamp</code></h2><a id="user-content-requesttimestamp" class="anchor" aria-label="Permalink: requestTimeStamp" href="#requesttimestamp"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Very rarely used - but you can get the Java system-time (for the current <a href="#response"><code>response</code></a>) at the point when the HTTP request was initiated (the value of <code>System.currentTimeMillis()</code>) which can be used for detailed logging or custom framework / stats calculations.</p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">HTTP Header Manipulation</h1><a id="user-content-http-header-manipulation" class="anchor" aria-label="Permalink: HTTP Header Manipulation" href="#http-header-manipulation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>configure headers</code></h2><a id="user-content-configure-headers" class="anchor" aria-label="Permalink: configure headers" href="#configure-headers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Custom header manipulation for every HTTP request is something that Karate makes very easy and pluggable. For every HTTP request made from Karate, the internal flow is as follows:</p>
<ul dir="auto">
<li>did we <a href="#configure"><code>configure</code></a> the value of <code>headers</code> ?</li>
<li>if so, is the configured value a JavaScript function ?
<ul dir="auto">
<li>if so, a <a href="#call"><code>call</code></a> is made to that function.</li>
<li>did the function invocation return a map-like (or JSON) object ?
<ul dir="auto">
<li>all the key-value pairs are added to the HTTP headers.</li>
</ul>
</li>
</ul>
</li>
<li>or is the configured value a JSON object ?
<ul dir="auto">
<li>all the key-value pairs are added to the HTTP headers.</li>
</ul>
</li>
</ul>
<p dir="auto">This makes setting up of complex authentication schemes for your test-flows really easy. It typically ends up being a one-liner that appears in the <code>Background</code> section at the start of your test-scripts.  You can re-use the function you create across your whole project.</p>
<p dir="auto">Here is an example JavaScript function that uses some variables in the context (which have been possibly set as the result of a sign-in) to build the <code>Authorization</code> header. Note how even <a href="#calling-java">calls to Java code</a> can be made if needed.</p>
<blockquote>
<p dir="auto">In the example below, note the use of the <a href="#karate-get"><code>karate.get()</code></a> helper for getting the value of a dynamic variable (which was <em>not set</em> at the time this JS <code>function</code> was <em>declared</em>). This is preferred because it takes care of situations such as if the value is <code>undefined</code> in JavaScript. In rare cases you may need to <em>set</em> a variable from this routine, and a good example is to make the generated UUID "visible" to the currently executing script or feature. You can easily do this via <a href="#karate-set"><code>karate.set('someVarName', value)</code></a>.</p>
</blockquote>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function fn() {
  var uuid = '' + java.util.UUID.randomUUID(); // convert to string
  var out = { // so now the txid_header would be a unique uuid for each request
    txid_header: uuid,
    ip_header: '123.45.67.89', // hard coded here, but also can be as dynamic as you want   
  };
  var authString = '';
  var authToken = karate.get('authToken'); // use the 'karate' helper to do a 'safe' get of a 'dynamic' variable
  if (authToken) { // and if 'authToken' is not null ... 
    authString = ',auth_type=MyAuthScheme'
        + ',auth_key=' + authToken.key
        + ',auth_user=' + authToken.userId
        + ',auth_project=' + authToken.projectId;
  }
  // the 'appId' variable here is expected to have been set via karate-config.js (bootstrap init) and will never change
  out['Authorization'] = 'My_Auth app_id=' + appId + authString;
  return out;
}"><pre><span class="pl-k">function</span> <span class="pl-en">fn</span><span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">var</span> <span class="pl-s1">uuid</span> <span class="pl-c1">=</span> <span class="pl-s">''</span> <span class="pl-c1">+</span> <span class="pl-s1">java</span><span class="pl-kos">.</span><span class="pl-c1">util</span><span class="pl-kos">.</span><span class="pl-c1">UUID</span><span class="pl-kos">.</span><span class="pl-en">randomUUID</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// convert to string</span>
  <span class="pl-k">var</span> <span class="pl-s1">out</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span> <span class="pl-c">// so now the txid_header would be a unique uuid for each request</span>
    <span class="pl-c1">txid_header</span>: <span class="pl-s1">uuid</span><span class="pl-kos">,</span>
    <span class="pl-c1">ip_header</span>: <span class="pl-s">'123.45.67.89'</span><span class="pl-kos">,</span> <span class="pl-c">// hard coded here, but also can be as dynamic as you want   </span>
  <span class="pl-kos">}</span><span class="pl-kos">;</span>
  <span class="pl-k">var</span> <span class="pl-s1">authString</span> <span class="pl-c1">=</span> <span class="pl-s">''</span><span class="pl-kos">;</span>
  <span class="pl-k">var</span> <span class="pl-s1">authToken</span> <span class="pl-c1">=</span> <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">get</span><span class="pl-kos">(</span><span class="pl-s">'authToken'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// use the 'karate' helper to do a 'safe' get of a 'dynamic' variable</span>
  <span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">authToken</span><span class="pl-kos">)</span> <span class="pl-kos">{</span> <span class="pl-c">// and if 'authToken' is not null ... </span>
    <span class="pl-s1">authString</span> <span class="pl-c1">=</span> <span class="pl-s">',auth_type=MyAuthScheme'</span>
        <span class="pl-c1">+</span> <span class="pl-s">',auth_key='</span> <span class="pl-c1">+</span> <span class="pl-s1">authToken</span><span class="pl-kos">.</span><span class="pl-c1">key</span>
        <span class="pl-c1">+</span> <span class="pl-s">',auth_user='</span> <span class="pl-c1">+</span> <span class="pl-s1">authToken</span><span class="pl-kos">.</span><span class="pl-c1">userId</span>
        <span class="pl-c1">+</span> <span class="pl-s">',auth_project='</span> <span class="pl-c1">+</span> <span class="pl-s1">authToken</span><span class="pl-kos">.</span><span class="pl-c1">projectId</span><span class="pl-kos">;</span>
  <span class="pl-kos">}</span>
  <span class="pl-c">// the 'appId' variable here is expected to have been set via karate-config.js (bootstrap init) and will never change</span>
  <span class="pl-s1">out</span><span class="pl-kos">[</span><span class="pl-s">'Authorization'</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-s">'My_Auth app_id='</span> <span class="pl-c1">+</span> <span class="pl-s1">appId</span> <span class="pl-c1">+</span> <span class="pl-s1">authString</span><span class="pl-kos">;</span>
  <span class="pl-k">return</span> <span class="pl-s1">out</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<p dir="auto">Assuming the above code is in a file called <code>my-headers.js</code>, the next section on <a href="#calling-other-feature-files">calling other feature files</a> shows how it looks like in action at the beginning of a test script.</p>
<p dir="auto">Notice how once the <code>authToken</code> variable is initialized, it is used by the above function to generate headers for every HTTP call made as part of the test flow.</p>
<p dir="auto">If a few steps in your flow need to temporarily change (or completely bypass) the currently-set header-manipulation scheme, just update <code>configure headers</code> to a new value (or set it to <code>null</code>) in the middle of a script. Then use the <a href="#header"><code>header</code></a> keyword to do a custom 'over-ride' if needed.</p>
<p dir="auto">The <a href="/karatelabs/karate/blob/master/karate-demo">karate-demo</a> has an example showing various ways to <code>configure</code> or set headers: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/headers.feature"><code>headers.feature</code></a></p>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">The <code>karate</code> object</h1><a id="user-content-the-karate-object" class="anchor" aria-label="Permalink: The karate object" href="#the-karate-object"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">A JavaScript function or <a href="#karate-expressions">Karate expression</a> at runtime has access to a utility object in a variable named: <code>karate</code>.  This provides the following methods:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a name="user-content-karate-abort"><code>karate.abort()</code></a></td>
<td>you can prematurely exit a <code>Scenario</code> by combining this with <a href="#conditional-logic">conditional logic</a> like so: <code>* if (condition) karate.abort()</code> - please use <a href="https://martinfowler.com/articles/nonDeterminism.html" rel="nofollow">sparingly</a> ! and also see <a href="#configure"><code>configure abortedStepsShouldPass</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-append"><code>karate.append(... items)</code></a></td>
<td>useful to create lists out of items (which can be lists as well), see <a href="#json-transforms">JSON transforms</a></td>
</tr>
<tr>
<td><a name="user-content-karate-appendto"><code>karate.appendTo(name, ... items)</code></a></td>
<td>useful to append to a list-like variable (that has to exist) in scope, see <a href="#json-transforms">JSON transforms</a> - the first argument can be a reference to an array-like variable or even the name (string) of an existing variable which is list-like</td>
</tr>
<tr>
<td><a name="user-content-karate-compareimage"><code>karate.compareImage(baseline, latest, [options])</code></a></td>
<td>compare two images the same way that <a href="#compare-image"><code>compareImage</code></a> works (with an optional <code>options</code> argument), returns an object with the following keys: <code>baseline</code>, <code>latest</code>, <code>mismatchPercentage</code>, <code>engine</code>, <code>failureThreshold</code> and optionally: <code>error</code>, <code>isBaselineMissing</code>, <code>isScaleMismatch</code>, <code>isMismatch</code>, <code>resembleMismatchPercentage</code>, <code>ssimMismatchPercentage</code></td>
</tr>
<tr>
<td><a name="user-content-karate-call"><code>karate.call(fileName, [arg])</code></a></td>
<td>invoke a <a href="#calling-other-feature-files"><code>*.feature</code> file</a> or a <a href="#calling-javascript-functions">JavaScript function</a> the same way that <a href="#call"><code>call</code></a> works (with an optional solitary argument), see <a href="#call-vs-read"><code>call()</code> vs <code>read()</code></a> for details</td>
</tr>
<tr>
<td><a name="user-content-karate-callsingle"><code>karate.callSingle(fileName, [arg])</code></a></td>
<td>like the above, but guaranteed to run <strong>only once</strong> even across multiple features - see <a href="#karatecallsingle"><code>karate.callSingle()</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-configure"><code>karate.configure(key, value)</code></a></td>
<td>does the same thing as the <a href="#configure"><code>configure</code></a> keyword, and a very useful example is to do <code>karate.configure('connectTimeout', 5000);</code> in <a href="#configuration"><code>karate-config.js</code></a> - which has the 'global' effect of not wasting time if a connection cannot be established within 5 seconds</td>
</tr>
<tr>
<td><a name="user-content-karate-distinct"><code>karate.distinct(list)</code></a></td>
<td>returns only unique items out of an array of strings or numbers</td>
</tr>
<tr>
<td><a name="user-content-karate-doc"><code>karate.doc(arg)</code></a></td>
<td>just like <a href="#karate-render"><code>karate.render()</code></a> but will insert the HTML into the report</td>
</tr>
<tr>
<td><a name="user-content-karate-embed"><code>karate.embed(object, mimeType)</code></a></td>
<td>embeds the object (can be raw bytes or an image) into the JSON report output, see this <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/embed/embed.feature">example</a></td>
</tr>
<tr>
<td><a name="user-content-karate-env"><code>karate.env</code></a></td>
<td>gets the value (read-only) of the environment property 'karate.env', and this is typically used for bootstrapping <a href="#configuration">configuration</a></td>
</tr>
<tr>
<td><a name="user-content-karate-eval"><code>karate.eval(expression)</code></a></td>
<td>for really advanced needs, you can programmatically generate a snippet of JavaScript which can be evaluated at run-time, you can find an example <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature">here</a></td>
</tr>
<tr>
<td><a name="user-content-karate-exec"><code>karate.exec(command)</code></a></td>
<td>convenient way to execute an OS specific command and return the console output e.g. <code>karate.exec('some.exe -h')</code> (or <code>karate.exec(['some.exe', '-h'])</code>) useful for calling non-Java code (that can even return data) or for starting user-interfaces to be automated, this command will block until the process terminates, also see <a href="#karate-fork"><code>karate.fork()</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-extract"><code>karate.extract(text, regex, group)</code></a></td>
<td>useful to "scrape" text out of non-JSON or non-XML text sources such as HTML, <code>group</code> follows the Java <a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html" rel="nofollow">regex rules</a>, see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/extract.feature">this example</a></td>
</tr>
<tr>
<td><a name="user-content-karate-extractall"><code>karate.extractAll(text, regex, group)</code></a></td>
<td>like the above, but returns a list of text-matches</td>
</tr>
<tr>
<td><a name="user-content-karate-fail"><code>karate.fail(message)</code></a></td>
<td>if you want to conditionally stop a test with a descriptive error message, e.g. <code>* if (condition) karate.fail('we expected something else')</code></td>
</tr>
<tr>
<td><a name="user-content-karate-feature"><code>karate.feature</code></a></td>
<td>get metadata about the currently executing feature within a test</td>
</tr>
<tr>
<td><a name="user-content-karate-filter"><code>karate.filter(list, predicate)</code></a></td>
<td>functional-style 'filter' operation useful to filter list-like objects (e.g. JSON arrays), see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature">example</a>, the second argument has to be a JS function (item, [index]) that returns a <code>boolean</code></td>
</tr>
<tr>
<td><a name="user-content-karate-filterkeys"><code>karate.filterKeys(map, keys)</code></a></td>
<td>extracts a sub-set of key-value pairs from the first argument, the second argument can be a list (or varargs) of keys - or even another JSON where only the keys would be used for extraction, <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature">example</a></td>
</tr>
<tr>
<td><code>karate.forEach(list, function)</code></td>
<td>functional-style 'loop' operation useful to traverse list-like (or even map-like) objects (e.g. JSON / arrays), see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature">example</a>, the second argument has to be a JS function (item, [index]) for lists and (key, [value], [index]) for JSON / maps</td>
</tr>
<tr>
<td><a name="user-content-karate-fork"><code>karate.fork(map)</code></a></td>
<td>executes an OS command, but forks a process in parallel and will not block the test like <a href="#karate-exec"><code>karate.exec()</code></a> e.g. <code>karate.fork({ args: ['some.exe', '-h'] })</code> or <code>karate.fork(['some.exe', '-h'])</code> - you can use a composite string as <code>line</code> (or the solitary argument e.g. <code>karate.fork('some.exe -h')</code>) instead of <code>args</code>, and an optional <code>workingDir</code> string property and <code>env</code> JSON / map is also supported - this returns a <a href="/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/shell/Command.java"><code>Command</code></a> object which has operations such as <code>waitSync()</code> and <code>close()</code> if you need more control, more details <a href="https://stackoverflow.com/a/62911366/143475" rel="nofollow">here</a></td>
</tr>
<tr>
<td><a name="user-content-karate-fromstring"><code>karate.fromString(string)</code></a></td>
<td>for advanced conditional logic for e.g. when a string coming from an external process is dynamic - and whether it is JSON or XML is not known in advance, see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature">example</a></td>
</tr>
<tr>
<td><a name="user-content-karate-get"><code>karate.get(name, [default])</code></a></td>
<td>get the value of a variable by name (or JsonPath expression), if not found - this returns <code>null</code> which is easier to handle in JavaScript (than <code>undefined</code>), and an optional (literal / constant) second argument can be used to return a "default" value, very useful to set variables in called features that have not been pre-defined</td>
</tr>
<tr>
<td><a name="user-content-karate-http"><code>karate.http(url)</code></a></td>
<td>returns a convenience <a href="/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/Http.java"><code>Http</code></a> request builder class, only recommended for <a href="https://github.com/karatelabs/karate/tree/develop/examples/ui-test#webdriver-tips">advanced use</a></td>
</tr>
<tr>
<td><a name="user-content-karate-jsonpath"><code>karate.jsonPath(json, expression)</code></a></td>
<td>brings the power of <a href="https://github.com/json-path/JsonPath">JsonPath</a> into JavaScript, and you can find an example <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature">here</a>.</td>
</tr>
<tr>
<td><a name="user-content-karate-keysof"><code>karate.keysOf(object)</code></a></td>
<td>returns only the keys of a map-like object</td>
</tr>
<tr>
<td><a name="user-content-karate-log"><code>karate.log(... args)</code></a></td>
<td>log to the same logger (and log file) being used by the parent process, logging can be suppressed with <a href="#configure"><code>configure printEnabled</code></a> set to <code>false</code>, and just like <a href="#print"><code>print</code></a> - use comma-separated values to "pretty print" JSON or XML</td>
</tr>
<tr>
<td><a name="user-content-karate-logger-debug"><code>karate.logger.debug(... args)</code></a></td>
<td>access to the Karate logger directly and log in debug. Might be desirable instead of <code>karate.log</code> or <code>print</code> when looking to reduce the logs in console in your CI/CD pipeline but still retain the information for reports. See <a href="#logging">Logging</a> for additional details.</td>
</tr>
<tr>
<td><a name="user-content-karate-lowercase"><code>karate.lowerCase(object)</code></a></td>
<td>useful to brute-force all keys and values in a JSON or XML payload to lower-case, useful in some cases, see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/lower-case.feature">example</a></td>
</tr>
<tr>
<td><a name="user-content-karate-map"><code>karate.map(list, function)</code></a></td>
<td>functional-style 'map' operation useful to transform list-like objects (e.g. JSON arrays), see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature">example</a>, the second argument has to be a JS function (item, [index])</td>
</tr>
<tr>
<td><a name="user-content-karate-mapwithkey"><code>karate.mapWithKey(list, string)</code></a></td>
<td>convenient for the common case of transforming an array of primitives into an array of objects, see <a href="#json-transforms">JSON transforms</a></td>
</tr>
<tr>
<td><a name="user-content-karate-match"><code>karate.match(actual, expected)</code></a></td>
<td>brings the power of the <em>fuzzy</em> <a href="#match"><code>match</code></a> syntax into Karate-JS, returns a JSON in the form <code>{ pass: '#boolean', message: '#string' }</code> and you can find an example <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/js-arrays.feature">here</a> - you can even place a <em>full</em> match expression like this: <code>karate.match("each foo contains { a: '#number' }")</code></td>
</tr>
<tr>
<td><a name="user-content-karate-merge"><code>karate.merge(... maps)</code></a></td>
<td>useful to merge the key-values of two (or more) JSON (or map-like) objects, see <a href="#json-transforms">JSON transforms</a></td>
</tr>
<tr>
<td><a name="user-content-karate-os"><code>karate.os</code></a></td>
<td>returns the operating system details as JSON, for e.g. <code>{ type: 'macosx', name: 'Mac OS X' }</code> - useful for writing conditional logic, the possible <code>type</code>-s being: <code>macosx</code>, <code>windows</code>, <code>linux</code> and <code>unknown</code></td>
</tr>
<tr>
<td><a name="user-content-karate-pause"><code>karate.pause(number)</code></a></td>
<td>sleep time in milliseconds, relevant only for <a href="/karatelabs/karate/blob/master/karate-gatling#think-time">performance-testing</a> - and will be a no-op otherwise unless <a href="#configure"><code>configure pauseIfNotPerf</code></a> is <code>true</code></td>
</tr>
<tr>
<td><a name="user-content-karate-pretty"><code>karate.pretty(value)</code></a></td>
<td>return a 'pretty-printed', nicely indented string representation of the JSON value, also see: <a href="#print"><code>print</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-prettyxml"><code>karate.prettyXml(value)</code></a></td>
<td>return a 'pretty-printed', nicely indented string representation of the XML value, also see: <a href="#print"><code>print</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-prevrequest"><code>karate.prevRequest</code></a></td>
<td>for advanced users, you can inspect the <em>actual</em> HTTP request after it happens, useful if you are writing a framework over Karate, refer to this example: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/request/request.feature"><code>request.feature</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-properties"><code>karate.properties[key]</code></a></td>
<td>get the value of any Java system-property by name, useful for <a href="#dynamic-port-numbers">advanced custom configuration</a></td>
</tr>
<tr>
<td><a name="user-content-karate-range"><code>karate.range(start, end, [interval])</code></a></td>
<td>returns a JSON array of integers (inclusive), the optional third argument must be a positive integer and defaults to 1, and if start &lt; end the order of values is reversed</td>
</tr>
<tr>
<td><a name="user-content-karate-read"><code>karate.read(filename)</code></a></td>
<td>the same <a href="#reading-files"><code>read()</code></a> function - which is pre-defined even within JS blocks, so there is no need to ever do <code>karate.read()</code>, and just <code>read()</code> is sufficient</td>
</tr>
<tr>
<td><a name="user-content-karate-readasbytes"><code>karate.readAsBytes(filename)</code></a></td>
<td>rarely used, like <a href="#karate-readasstring"><code>karate.readAsString</code></a> - but returns a byte array</td>
</tr>
<tr>
<td><a name="user-content-karate-readasstream"><code>karate.readAsStream(filename)</code></a></td>
<td>rarely used, like <a href="#karate-readasstring"><code>karate.readAsString</code></a> - but returns a Java <code>InputStream</code></td>
</tr>
<tr>
<td><a name="user-content-karate-readasstring"><code>karate.readAsString(filename)</code></a></td>
<td><a href="#read-file-as-string">rarely used</a>, behaves exactly like <a href="#reading-files"><code>read</code></a> - but does <em>not</em> auto convert to JSON or XML</td>
</tr>
<tr>
<td><a name="user-content-karate-remove"><code>karate.remove(name, path)</code></a></td>
<td>very rarely used - when needing to perform conditional removal of JSON keys or XML nodes. Behaves the same way as the <a href="#remove"><code>remove</code></a> keyword.</td>
</tr>
<tr>
<td><a name="user-content-karate-render"><code>karate.render(arg)</code></a></td>
<td>renders an HTML template, the <code>arg</code> can be a string (prefixable path to the HTML) or a JSON that takes either a <code>path</code> or <code>html</code> property, see <a href="#doc"><code>doc</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-repeat"><code>karate.repeat(count, function)</code></a></td>
<td>useful for building an array with <code>count</code> items or doing something <code>count</code> times, see <a href="#loops">loops</a>.</td>
</tr>
<tr>
<td><a name="user-content-karate-response"><code>karate.response</code></a></td>
<td>returns the last HTTP response as a JS object that enables advanced use-cases such as getting a header ignoring case: <code>karate.response.header('some-header')</code></td>
</tr>
<tr>
<td><a name="user-content-karate-request"><code>karate.request</code></a></td>
<td>returns the last HTTP request as a JS object that enables advanced use-cases such as getting a header ignoring case: <code>karate.request.header('some-header')</code>, which works <a href="https://github.com/karatelabs/karate/tree/master/karate-netty#requestheaders">even in mocks</a></td>
</tr>
<tr>
<td><a name="user-content-karate-scenario"><code>karate.scenario</code></a></td>
<td>get metadata about the currently executing <code>Scenario</code> (or <code>Outline</code> - <code>Example</code>) within a test</td>
</tr>
<tr>
<td><a name="user-content-karate-set"><code>karate.set(name, value)</code></a></td>
<td>sets the value of a variable (immediately), which may be needed in case any other routines (such as the <a href="#configure-headers">configured headers</a>) depend on that variable</td>
</tr>
<tr>
<td><a name="user-content-karate-setall"><code>karate.set(object)</code></a></td>
<td>where the single argument is expected to be a <code>Map</code> or JSON-like, and will perform the above <code>karate.set()</code> operation for all key-value pairs in one-shot</td>
</tr>
<tr>
<td><a name="user-content-karate-setpath"><code>karate.set(name, path, value)</code></a></td>
<td>only needed when you need to conditionally build payload elements, especially XML. This is best explained via <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature#L211">an example</a>, and it behaves the same way as the <a href="#set"><code>set</code></a> keyword. Also see <a href="#eval"><code>eval</code></a>.</td>
</tr>
<tr>
<td><a name="user-content-karate-setxml"><code>karate.setXml(name, xmlString)</code></a></td>
<td>rarely used, refer to the example above</td>
</tr>
<tr>
<td><a name="user-content-karate-setup"><code>karate.setup([name])</code></a></td>
<td>call a <code>Scenario</code> tagged with the built-in <a href="#setup"><code>@setup</code></a> annotation</td>
</tr>
<tr>
<td><a name="user-content-karate-setuponce"><code>karate.setupOnce([name])</code></a></td>
<td>like <a href="#karate-setup"><code>karate.setup()</code></a> above, but cache the result so that the "setup" runs only once</td>
</tr>
<tr>
<td><a name="user-content-karate-signal"><code>karate.signal(result)</code></a></td>
<td>trigger an event that <a href="#karate-listen"><code>karate.listen(timeout)</code></a> is waiting for, and pass the data, see <a href="#async">async</a></td>
</tr>
<tr>
<td><a name="user-content-karate-sizeof"><code>karate.sizeOf(object)</code></a></td>
<td>returns the size of the map-like or list-like object</td>
</tr>
<tr>
<td><a name="user-content-karate-sort"><code>karate.sort(list, function)</code></a></td>
<td>sorts the list using the provided custom function called for each item in the list (and the optional second argument is the item index) e.g. <code>karate.sort(myList, x =&gt; x.val)</code>, and the second / function argument is not needed if the list is of plain strings or numbers</td>
</tr>
<tr>
<td><a name="user-content-karate-start"><code>karate.start()</code></a></td>
<td>only for starting a mock from <a href="/karatelabs/karate/blob/master/karate-netty#within-a-karate-test">within a test / feature file see mocks</a></td>
</tr>
<tr>
<td><a name="user-content-karate-stop"><code>karate.stop(port)</code></a></td>
<td>will pause the test execution until a socket connection (even HTTP <code>GET</code>) is made to the port logged to the console, useful for troubleshooting UI tests without using a <a href="https://twitter.com/KarateDSL/status/1167533484560142336" rel="nofollow">de-bugger</a>, of course - <em>NEVER</em> forget to remove this after use !</td>
</tr>
<tr>
<td><a name="user-content-karate-target"><code>karate.target(object)</code></a></td>
<td>currently for web-ui automation only, see <a href="/karatelabs/karate/blob/master/karate-core#target-lifecycle">target lifecycle</a></td>
</tr>
<tr>
<td><a name="user-content-karate-tags"><code>karate.tags</code></a></td>
<td>for advanced users - scripts can introspect the tags that apply to the current scope, refer to this example: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/tags.feature"><code>tags.feature</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-tagvalues"><code>karate.tagValues</code></a></td>
<td>for even more advanced users - Karate natively supports tags in a <code>@name=val1,val2</code> format, and there is an inheritance mechanism where <code>Scenario</code> level tags can over-ride <code>Feature</code> level tags, refer to this example: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/tags.feature"><code>tags.feature</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-toabsolutepath"><code>karate.toAbsolutePath(relativePath)</code></a></td>
<td>when you want to get the absolute OS path to the argument which could even have a prefix such as <code>classpath:</code>, e.g. <code>karate.toAbsolutePath('some.json')</code></td>
</tr>
<tr>
<td><a name="user-content-karate-tobean"><code>karate.toBean(json, className)</code></a></td>
<td>converts a JSON string or map-like object into a Java object, given the Java class name as the second argument, refer to this <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature">file</a> for an example</td>
</tr>
<tr>
<td><a name="user-content-karate-tocsv"><code>karate.toCsv(list)</code></a></td>
<td>converts a JSON array (of objects) or a list-like object into a CSV string, writing this to a file is your responsibility or you could use <a href="#karate-write"><code>karate.write()</code></a></td>
</tr>
<tr>
<td><a name="user-content-karate-tojava"><code>karate.toJava(function)</code></a></td>
<td>rarely used, when you need to pass a JS function to custom Java code, typically for <a href="#async">Async</a>, and another edge case is to convert a JSON array or object to a Java <code>List</code> or <code>Map</code>, see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/to-bean.feature">example</a></td>
</tr>
<tr>
<td><a name="user-content-karate-tojavafile"><code>karate.toJavaFile(path)</code></a></td>
<td>in case you need a <code>java.io.File</code> instance to pass to Java interop, takes the <a href="#reading-files">Karate prefixes</a> such as <code>classpath:</code> for convenience</td>
</tr>
<tr>
<td><a name="user-content-karate-tojson"><code>karate.toJson(object)</code></a></td>
<td>converts a Java object into JSON, and <code>karate.toJson(object, true)</code> will strip all keys that have <code>null</code> values from the resulting JSON, convenient for unit-testing Java code, see <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/unit/cat.feature">example</a></td>
</tr>
<tr>
<td><a name="user-content-karate-typeof"><code>karate.typeOf(any)</code></a></td>
<td>for advanced conditional logic when object types are dynamic and not known in advance, see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/type-conv.feature">example</a></td>
</tr>
<tr>
<td><a name="user-content-karate-urldecode"><code>karate.urlDecode(string)</code></a></td>
<td>URL decode</td>
</tr>
<tr>
<td><a name="user-content-karate-urlencode"><code>karate.urlEncode(string)</code></a></td>
<td>URL encode</td>
</tr>
<tr>
<td><a name="user-content-karate-valuesof"><code>karate.valuesOf(object)</code></a></td>
<td>returns only the values of a map-like object (or itself if a list-like object)</td>
</tr>
<tr>
<td><a name="user-content-karate-waitforhttp"><code>karate.waitForHttp(url)</code></a></td>
<td>will wait until the URL is ready to accept HTTP connections</td>
</tr>
<tr>
<td><a name="user-content-karate-waitforport"><code>karate.waitForPort(host, port)</code></a></td>
<td>will wait until the host:port is ready to accept socket connections</td>
</tr>
<tr>
<td><a name="user-content-karate-websocket"><code>karate.webSocket(url, handler)</code></a></td>
<td>see <a href="#websocket">websocket</a></td>
</tr>
<tr>
<td><a name="user-content-karate-write"><code>karate.write(object, path)</code></a></td>
<td><em>normally not recommended, please <a href="https://stackoverflow.com/a/54593057/143475" rel="nofollow">read this first</a></em> - writes the bytes of <code>object</code> to a path which will <em>always</em> be relative to the "build" directory (typically <code>target</code>), see this example: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/embed/embed-pdf.js"><code>embed-pdf.js</code></a> - and this method returns a <code>java.io.File</code> reference to the file created / written to</td>
</tr>
<tr>
<td><a name="user-content-karate-xmlpath"><code>karate.xmlPath(xml, expression)</code></a></td>
<td>Just like <a href="#karate-jsonpath"><code>karate.jsonPath()</code></a> - but for XML, and allows you to use dynamic XPath if needed, see <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/xml/xml.feature">example</a>.</td>
</tr>
</tbody>
</table>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Code Reuse / Common Routines</h1><a id="user-content-code-reuse--common-routines" class="anchor" aria-label="Permalink: Code Reuse / Common Routines" href="#code-reuse--common-routines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>call</code></h2><a id="user-content-call" class="anchor" aria-label="Permalink: call" href="#call"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In any complex testing endeavor, you would find yourself needing 'common' code that needs to be re-used across multiple test scripts. A typical need would be to perform a 'sign in', or create a fresh user as a pre-requisite for the scenarios being tested.</p>
<p dir="auto">There are two types of code that can be <code>call</code>-ed. <code>*.feature</code> files and <a href="#calling-javascript-functions">JavaScript functions</a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Calling other <code>*.feature</code> files</h2><a id="user-content-calling-other-feature-files" class="anchor" aria-label="Permalink: Calling other *.feature files" href="#calling-other-feature-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When you have a sequence of HTTP calls that need to be repeated for multiple test scripts, Karate allows you to treat a <code>*.feature</code> file as a re-usable unit. You can also pass parameters into the <code>*.feature</code> file being called, and extract variables out of the invocation result.</p>
<p dir="auto">Here is an example of using the <code>call</code> keyword to invoke another feature file, loaded using the <a href="#reading-files"><code>read</code></a> function:</p>
<blockquote>
<p dir="auto">If you find this hard to understand at first, try looking at this <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/callfeature/call-feature.feature">set of examples</a>.</p>
</blockquote>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature: which makes a 'call' to another re-usable feature

Background:
  * configure headers = read('classpath:my-headers.js')
  * def signIn = call read('classpath:my-signin.feature') { username: 'john', password: 'secret' }
  * def authToken = signIn.authToken

Scenario: some scenario
  # main test steps"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> which makes a 'call' to another re-usable feature</span>

<span class="pl-k">Background</span>:
  <span class="pl-k">* </span>configure headers = read(<span class="pl-s">'classpath:my-headers.js'</span>)
  <span class="pl-k">* </span>def signIn = call read(<span class="pl-s">'classpath:my-signin.feature'</span>) { username: <span class="pl-s">'john'</span>, password: <span class="pl-s">'secret'</span> }
  <span class="pl-k">* </span>def authToken = signIn.authToken

<span class="pl-k">Scenario</span>:<span class="pl-s"> some scenario</span>
<span class="pl-c">  # main test steps</span></pre></div>
<blockquote>
<p dir="auto">Note that <a href="#def"><code>def</code></a> can be used to <em>assign</em> a <strong>feature</strong> to a variable. For example look at how "<code>creator</code>" has been defined in the <code>Background</code> in <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/calldynamic/call-dynamic-json.feature">this example</a>, and used later in a <code>call</code> statement. This is very close to how "custom keywords" work in other frameworks. See this other example for more ideas: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/dsl/dsl.feature"><code>dsl.feature</code></a>.</p>
</blockquote>
<p dir="auto">The contents of <code>my-signin.feature</code> are shown below. A few points to note:</p>
<ul dir="auto">
<li>Karate creates a new 'context' for the feature file being invoked but passes along all variables and configuration. This means that all your <a href="#configuration">config variables</a> and <a href="#configure"><code>configure</code> settings</a> would be available to use, for example <code>loginUrlBase</code> in the example below.</li>
<li>When you use <a href="#def"><code>def</code></a> in the 'called' feature, it will <strong>not</strong> over-write variables in the 'calling' feature (unless you explicitly choose to use <a href="#shared-scope">shared scope</a>). But note that JSON, XML, Map-like or List-like variables are 'passed by reference' which means that 'called' feature steps can <em>update</em> or 'mutate' them using the <a href="#set"><code>set</code></a> keyword. Use the <a href="#copy"><code>copy</code></a> keyword to 'clone' a JSON or XML payload if needed, and refer to this example for more details: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/copy.feature"><code>copy.feature</code></a>.</li>
<li>You can add (or over-ride) variables by passing a call 'argument' as shown above. Only one JSON argument is allowed, but this does not limit you in any way as you can use any complex JSON structure. You can even initialize the JSON in a separate step and pass it by name, especially if it is complex. Observe how using JSON for parameter-passing makes things super-readable. In the 'called' feature, the argument can also be accessed using the built-in variable: <a href="#built-in-variables-for-call"><code>__arg</code></a>.</li>
<li><strong>All</strong> variables that were defined (using <a href="#def"><code>def</code></a>) in the 'called' script would be returned as 'keys' within a JSON-like object. Note that this includes <a href="#special-variables">'built-in' variables</a>, which means that things like the last value of <a href="#response"><code>response</code></a> would also be present. In the example above you can see that the JSON 'envelope' returned - is assigned to the variable named <code>signIn</code>. And then getting hold of any data that was generated by the 'called' script is as simple as accessing it by name, for example <code>signIn.authToken</code> as shown above. This design has the following advantages:
<ul dir="auto">
<li>'called' Karate scripts don't need to use any special keywords to 'return' data and can behave like 'normal' Karate tests in 'stand-alone' mode if needed</li>
<li>the data 'return' mechanism is 'safe', there is no danger of the 'called' script over-writing any variables in the 'calling' (or parent) script (unless you use <a href="#shared-scope">shared scope</a>)</li>
<li>the need to explicitly 'unpack' variables by name from the returned 'envelope' keeps things readable and maintainable in the 'caller' script</li>
</ul>
</li>
</ul>
<blockquote>
<p dir="auto">Note that only <a href="#def">variables</a> and <a href="#configure">configuration settings</a> will be passed. You can't do things such as <code>* url 'http://foo.bar'</code> and expect the URL to be set in the "called" feature. Use a variable in the "called" feature instead, for e.g. <code>* url myUrl</code> or take a look at <a href="#configure-url"><code>configure url</code></a>.</p>
</blockquote>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature: here are the contents of 'my-signin.feature'

Scenario:
  Given url loginUrlBase
  And request { userId: '#(username)', userPass: '#(password)' }
  When method post
  Then status 200
  And def authToken = response

  # second HTTP call, to get a list of 'projects'
  Given path 'users', authToken.userId, 'projects'
  When method get
  Then status 200
  # logic to 'choose' first project
  And set authToken.projectId = response.projects[0].projectId;"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> here are the contents of 'my-signin.feature</span>'

<span class="pl-k">Scenario</span>:
  <span class="pl-k">Given </span>url loginUrlBase
  <span class="pl-k">And </span>request { userId: <span class="pl-s">'#(username)'</span>, userPass: <span class="pl-s">'#(password)'</span> }
  <span class="pl-k">When </span>method post
  <span class="pl-k">Then </span>status 200
  <span class="pl-k">And </span>def authToken = response

<span class="pl-c">  # second HTTP call, to get a list of 'projects'</span>
  <span class="pl-k">Given </span>path <span class="pl-s">'users'</span>, authToken.userId, <span class="pl-s">'projects'</span>
  <span class="pl-k">When </span>method get
  <span class="pl-k">Then </span>status 200
<span class="pl-c">  # logic to 'choose' first project</span>
  <span class="pl-k">And </span>set authToken.projectId = response.projects[0].projectId;</pre></div>
<p dir="auto">The above example actually makes two HTTP requests - the first is a standard 'sign-in' POST and then (for illustrative purposes) another HTTP call (a GET) is made for retrieving a list of projects for the signed-in user, and the first one is 'selected' and added to the returned 'auth token' JSON object.</p>
<p dir="auto">So you get the picture, any kind of complicated 'sign-in' flow can be scripted and re-used.</p>
<blockquote>
<p dir="auto">If the second HTTP call above expects headers to be set by <code>my-headers.js</code> - which in turn depends on the <code>authToken</code> variable being updated, you will need to duplicate the line <code>* configure headers = read('classpath:my-headers.js')</code> from the 'caller' feature here as well. The above example does <strong>not</strong> use <a href="#shared-scope">shared scope</a>, which means that the variables in the 'calling' (parent) feature are <em>not</em> shared by the 'called' <code>my-signin.feature</code>. The above example can be made more simpler with the use of <code>call</code> (or <a href="#callonce"><code>callonce</code></a>) <em>without</em> a <a href="#def"><code>def</code></a>-assignment to a variable, and is the <a href="#shared-scope">recommended pattern</a> for implementing re-usable authentication setup flows.</p>
</blockquote>
<p dir="auto">Do look at the documentation and example for <a href="#configure-headers"><code>configure headers</code></a> also as it goes hand-in-hand with <code>call</code>. In the above example, the end-result of the <code>call</code> to <code>my-signin.feature</code> resulted in the <code>authToken</code> variable being initialized. Take a look at how the <a href="#configure-headers"><code>configure headers</code></a> example uses the <code>authToken</code> variable.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Call Tag Selector</h3><a id="user-content-call-tag-selector" class="anchor" aria-label="Permalink: Call Tag Selector" href="#call-tag-selector"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You can "select" a single <code>Scenario</code> (or <code>Scenario</code>-s or <code>Scenario Outline</code>-s or even specific <code>Examples</code> rows) by appending a "tag selector" at the end of the feature-file you are calling. For example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="call read('classpath:my-signin.feature@name=someScenarioName')"><pre>call read(<span class="pl-s">'classpath:my-signin.feature@name=someScenarioName'</span>)</pre></div>
<p dir="auto">While the tag does not need to be in the <code>@key=value</code> form, it is recommended for readability when you start getting into the business of giving meaningful names to your <code>Scenario</code>-s.</p>
<p dir="auto">This "tag selection" capability is designed for you to be able to "compose" flows out of existing test-suites when using the <a href="/karatelabs/karate/blob/master/karate-gatling">Karate Gatling integration</a>. Normally we recommend that you keep your "re-usable" features lightweight - by limiting them to just one <code>Scenario</code>.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">Call Same Feature</h4><a id="user-content-call-same-feature" class="anchor" aria-label="Permalink: Call Same Feature" href="#call-same-feature"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">As a convenience, you can call a tag directly, which is a short-cut to call another <code>Scenario</code> within the same feature file. Note that you would typically want to use the <a href="#special-tags"><code>@ignore</code></a> tag for such cases.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Scenario: one
* call read('@two')

@ignore @two
Scenario: two
* print 'called'"><pre><span class="pl-k">Scenario</span>:<span class="pl-s"> one</span>
<span class="pl-k">* </span>call read(<span class="pl-s">'@two'</span>)

<span class="pl-k">@ignore</span> <span class="pl-k">@two</span>
<span class="pl-k">Scenario</span>:<span class="pl-s"> two</span>
<span class="pl-k">* </span>print <span class="pl-s">'called'</span></pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Data-Driven Features</h3><a id="user-content-data-driven-features" class="anchor" aria-label="Permalink: Data-Driven Features" href="#data-driven-features"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">If the argument passed to the <a href="#calling-other-feature-files">call of a <code>*.feature</code> file</a> is a JSON array, something interesting happens. The feature is invoked for each item in the array. Each array element is expected to be a JSON object, and for each object - the behavior will be as described above.</p>
<p dir="auto">But this time, the return value from the <code>call</code> step will be a JSON array of the same size as the input array. And each element of the returned array will be the 'envelope' of variables that resulted from each iteration where the <code>*.feature</code> got invoked.</p>
<p dir="auto">Here is an example that combines the <a href="#table"><code>table</code></a> keyword with calling a <code>*.feature</code>. Observe how the <a href="#get"><code>get</code></a> <a href="#get-short-cut">shortcut</a> is used to 'distill' the result array of variable 'envelopes' into an array consisting only of <a href="#response"><code>response</code></a> payloads.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* table kittens 
  | name   | age |
  | 'Bob'  |   2 |
  | 'Wild' |   1 |
  | 'Nyan' |   3 |

* def result = call read('cat-create.feature') kittens
* def created = $result[*].response
* match each created == { id: '#number', name: '#string', age: '#number' }
* match created[*].name contains only ['Bob', 'Wild', 'Nyan']"><pre><span class="pl-k">* </span>table kittens 
<span class="pl-k">  | <span class="pl-s1">name</span>   | <span class="pl-s1">age</span> |</span>
<span class="pl-k">  | '<span class="pl-s1">Bob</span>'  |   <span class="pl-s1">2</span> |</span>
<span class="pl-k">  | '<span class="pl-s1">Wild</span>' |   <span class="pl-s1">1</span> |</span>
<span class="pl-k">  | '<span class="pl-s1">Nyan</span>' |   <span class="pl-s1">3</span> |</span>

<span class="pl-k">* </span>def result = call read(<span class="pl-s">'cat-create.feature'</span>) kittens
<span class="pl-k">* </span>def created = $result[*].response
<span class="pl-k">* </span>match each created == { id: <span class="pl-s">'#number'</span>, name: <span class="pl-s">'#string'</span>, age: <span class="pl-s">'#number'</span> }
<span class="pl-k">* </span>match created[*].name contains only [<span class="pl-s">'Bob'</span>, <span class="pl-s">'Wild'</span>, <span class="pl-s">'Nyan'</span>]</pre></div>
<p dir="auto">And here is how <code>cat-create.feature</code> could look like:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@ignore
Feature:

Scenario:
  Given url someUrlFromConfig
  And path 'cats'
  And request { name: '#(name)', age: '#(age)' }
  When method post
  Then status 200"><pre><span class="pl-k">@ignore</span>
Feature:

<span class="pl-k">Scenario</span>:
  <span class="pl-k">Given </span>url someUrlFromConfig
  <span class="pl-k">And </span>path <span class="pl-s">'cats'</span>
  <span class="pl-k">And </span>request { name: <span class="pl-s">'#(name)'</span>, age: <span class="pl-s">'#(age)'</span> }
  <span class="pl-k">When </span>method post
  <span class="pl-k">Then </span>status 200</pre></div>
<p dir="auto">If you replace the <code>table</code> with perhaps a JavaScript function call that gets some JSON data from some data-source, you can imagine how you could go about dynamic data-driven testing.</p>
<p dir="auto">Although it is just a few lines of code, take time to study the above example carefully. It is a great example of how to effectively use the unique combination of syntax and JsonPath that Karate provides.</p>
<p dir="auto">Also look at the <a href="/karatelabs/karate/blob/master/karate-demo">demo examples</a>, especially <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/search/dynamic-params.feature"><code>dynamic-params.feature</code></a> - to compare the above approach with how the Gherkin <a href="#the-cucumber-way"><code>Scenario Outline:</code></a> can be alternatively used for data-driven tests.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Built-in variables for <code>call</code></h3><a id="user-content-built-in-variables-for-call" class="anchor" aria-label="Permalink: Built-in variables for call" href="#built-in-variables-for-call"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Although all properties in the passed JSON-like argument are 'unpacked' into the current scope as separate 'named' variables, it sometimes makes sense to access the whole argument and this can be done via <code>__arg</code>. And if being called in a loop, a built-in variable called <code>__loop</code> will also be available that will hold the value of the current loop index. So you can do things like this: <code>* def name = name + __loop</code> - or you can use the loop index value for looking up other values that may be in scope - in a data-driven style.</p>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Refers To</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>__arg</code></td>
<td>the single <code>call</code> (or <a href="#callonce"><code>callonce</code></a>) argument, will be <code>null</code> if there was none</td>
</tr>
<tr>
<td><code>__loop</code></td>
<td>the current iteration index (starts from 0) if being called in a loop, will be <code>-1</code> if not</td>
</tr>
</tbody>
</table>
<p dir="auto">Refer to this <a href="/karatelabs/karate/blob/master/karate-demo">demo feature</a> for an example: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/calltable/kitten-create.feature"><code>kitten-create.feature</code></a></p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Default Values</h3><a id="user-content-default-values" class="anchor" aria-label="Permalink: Default Values" href="#default-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Some users need "callable" features that are re-usable even when variables have not been defined by the calling feature. Normally an undefined variable results in nasty JavaScript errors. But there is an elegant way you can specify a default value using the <a href="#karate-get"><code>karate.get()</code></a> API:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# if foo is not defined, it will default to 42
* def foo = karate.get('foo', 42)"><pre><span class="pl-c"># if foo is not defined, it will default to 42</span>
<span class="pl-k">* </span>def foo = karate.get(<span class="pl-s">'foo'</span>, 42)</pre></div>
<blockquote>
<p dir="auto">A word of caution: we recommend that you should not over-use Karate's capability of being able to re-use features. Re-use can sometimes result in negative benefits - especially when applied to test-automation. Prefer readability over re-use. See this for an <a href="https://stackoverflow.com/a/54126724/143475" rel="nofollow">example</a>.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>copy</code></h3><a id="user-content-copy" class="anchor" aria-label="Permalink: copy" href="#copy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For a <a href="#call"><code>call</code></a> (or <a href="#callonce"><code>callonce</code></a>) - payload / data structures (JSON, XML, Map-like or List-like) variables are 'passed by reference' which means that steps within the 'called' feature can update or 'mutate' them, for e.g. using the <a href="#set"><code>set</code></a> keyword. This is actually the intent most of the time and is convenient. If you want to pass a 'clone' to a 'called' feature, you can do so using the rarely used <code>copy</code> keyword that works very similar to <a href="#type-conversion">type conversion</a>. This is best explained in this example: <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/copy.feature"><code>copy.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Calling JavaScript Functions</h2><a id="user-content-calling-javascript-functions" class="anchor" aria-label="Permalink: Calling JavaScript Functions" href="#calling-javascript-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Examples of <a href="#javascript-functions">defining and using JavaScript functions</a> appear in earlier sections of this document. Being able to define and re-use JavaScript functions is a powerful capability of Karate. For example, you can:</p>
<ul dir="auto">
<li>call re-usable functions that take complex data as an argument and return complex data that can be stored in a variable</li>
<li><a href="#calling-java">call and interoperate with Java code</a> if needed</li>
<li>share and re-use test <a href="#commonly-needed-utilities">utilities</a> or 'helper' functionality across your organization</li>
</ul>
<blockquote>
<p dir="auto">For an advanced example of how you can build and re-use a common set of JS functions, refer to <a href="https://stackoverflow.com/a/49384760/143475" rel="nofollow">this answer on Stack Overflow</a>.</p>
</blockquote>
<p dir="auto">In real-life scripts, you would typically also use this capability of Karate to <a href="#configure-headers"><code>configure headers</code></a> where the specified JavaScript function uses the variables that result from a <a href="#calling-other-feature-files">sign in</a> to manipulate headers for all subsequent HTTP requests. And it is worth mentioning that the Karate <a href="#configuration">configuration 'bootstrap'</a> routine is itself a JavaScript function.</p>
<blockquote>
<p dir="auto">Also refer to the <a href="#eval"><code>eval</code></a> keyword for a simpler way to execute arbitrary JavaScript that can be useful in some situations.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">JS function argument rules for <code>call</code></h3><a id="user-content-js-function-argument-rules-for-call" class="anchor" aria-label="Permalink: JS function argument rules for call" href="#js-function-argument-rules-for-call"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When using <code>call</code> (or <a href="#callonce"><code>callonce</code></a>), only one argument is allowed. But this does not limit you in any way, because similar to how you can <a href="#calling-other-feature-files">call <code>*.feature files</code></a>, you can pass a whole JSON object as the argument. In the case of the <code>call</code> of a JavaScript function, you can also pass a JSON array or a primitive (string, number, boolean) as the solitary argument, and the function implementation is expected to handle whatever is passed.</p>
<p dir="auto">Instead of using <code>call</code> (or <code>callonce</code>) you are always free to call JavaScript functions 'normally' and then you can use more than one argument.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def adder = function(a, b){ return a + b }
* assert adder(1, 2) == 3"><pre><span class="pl-k">* </span>def adder = function(a, b){ return a + b }
<span class="pl-k">* </span>assert adder(1, 2) == 3</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Return types</h3><a id="user-content-return-types" class="anchor" aria-label="Permalink: Return types" href="#return-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Naturally, only one value can be returned.  But again, you can return a JSON object. There are two things that can happen to the returned value.</p>
<p dir="auto">Either - it can be assigned to a variable like so.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def returnValue = call myFunction"><pre><span class="pl-k">* </span>def returnValue = call myFunction</pre></div>
<p dir="auto">Or - if a <code>call</code> is made without an assignment, and if the function returns a map-like object, it will add each key-value pair returned as a new variable into the execution context.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# while this looks innocent ...
# ... behind the scenes, it could be creating (or over-writing) a bunch of variables !
* call someFunction"><pre><span class="pl-c"># while this looks innocent ...</span>
<span class="pl-c"># ... behind the scenes, it could be creating (or over-writing) a bunch of variables !</span>
<span class="pl-k">* </span>call someFunction</pre></div>
<p dir="auto">While this sounds dangerous and should be used with care (and limits readability), the reason this feature exists is to quickly set (or over-write) a bunch of config variables when needed. In fact, this is the mechanism used when <a href="#configuration"><code>karate-config.js</code></a> is processed on start-up.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">Shared Scope</h4><a id="user-content-shared-scope" class="anchor" aria-label="Permalink: Shared Scope" href="#shared-scope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This behavior where all key-value pairs in the returned map-like object get automatically added as variables - applies to the <a href="#calling-other-feature-files">calling of <code>*.feature</code> files</a> as well. In other words, when <a href="#call"><code>call</code></a> or <a href="#callonce"><code>callonce</code></a> is used without a <a href="#def"><code>def</code></a>, the 'called' script not only shares all variables (and <a href="#configure"><code>configure</code></a> settings) but can update the shared execution context. This is very useful to boil-down those 'common' steps that you may have to perform at the start of multiple test-scripts - into one-liners. But use wisely, because called scripts will now over-write variables that may have been already defined.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def config = { user: 'john', password: 'secret' }
# this next line may perform many steps and result in multiple variables set for the rest of the script
* call read('classpath:common-setup.feature') config"><pre><span class="pl-k">* </span>def config = { user: <span class="pl-s">'john'</span>, password: <span class="pl-s">'secret'</span> }
<span class="pl-c"># this next line may perform many steps and result in multiple variables set for the rest of the script</span>
<span class="pl-k">* </span>call read(<span class="pl-s">'classpath:common-setup.feature'</span>) config</pre></div>
<p dir="auto">You can use <a href="#callonce"><code>callonce</code></a> instead of <code>call</code> within the <a href="#script-structure"><code>Background</code></a> in case you have multiple <code>Scenario</code> sections or <a href="#data-driven-tests"><code>Examples</code></a>. Note the 'inline' use of the <a href="#reading-files">read</a> function as a short-cut above. This applies to JS functions as well:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* call read('my-function.js')"><pre><span class="pl-k">* </span>call read(<span class="pl-s">'my-function.js'</span>)</pre></div>
<p dir="auto">These heavily commented <a href="/karatelabs/karate/blob/master/karate-demo">demo examples</a> can help you understand 'shared scope' better, and are designed to get you started with creating re-usable 'sign-in' or authentication flows:</p>
<table>
<thead>
<tr>
<th>Scope</th>
<th>Caller Feature</th>
<th>Called Feature</th>
</tr>
</thead>
<tbody>
<tr>
<td>Isolated</td>
<td><a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/call-isolated-headers.feature"><code>call-isolated-headers.feature</code></a></td>
<td><a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/common-multiple.feature"><code>common-multiple.feature</code></a></td>
</tr>
<tr>
<td>Shared</td>
<td><a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/call-updates-config.feature"><code>call-updates-config.feature</code></a></td>
<td><a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/common.feature"><code>common.feature</code></a></td>
</tr>
</tbody>
</table>
<blockquote>
<p dir="auto">Once you get comfortable with Karate, you can consider moving your authentication flow into a 'global' one-time flow using <a href="#karate-callsingle"><code>karate.callSingle()</code></a>, think of it as '<a href="#callonce"><code>callonce</code></a> on steroids'.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>call</code> vs <code>read()</code></h4><a id="user-content-call-vs-read" class="anchor" aria-label="Permalink: call vs read()" href="#call-vs-read"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Since this is a frequently asked question, the different ways of being able to re-use code (or data) are summarized below.</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>* def login = read('login.feature')</code><br><code>* call login</code></td>
<td><a href="#shared-scope">Shared Scope</a>, and the <br><code>login</code> variable can be re-used</td>
</tr>
<tr>
<td><code>* call read('login.feature')</code></td>
<td>short-cut for the above <br>without needing a variable</td>
</tr>
<tr>
<td><code>* def credentials = read('credentials.json')</code><br><code>* def login = read('login.feature')</code><br><code>* call login credentials</code></td>
<td>Note how using <a href="#reading-files"><code>read()</code></a> <br>for a JSON file returns <em>data</em> - <br>not "callable" code, and here it is <br>used as the <a href="#call"><code>call</code></a> argument</td>
</tr>
<tr>
<td><code>* call read('login.feature') read('credentials.json')</code></td>
<td>You <em>can</em> do this in theory, <br>but it is not as readable as the above</td>
</tr>
<tr>
<td><code>* karate.call('login.feature')</code></td>
<td>The <a href="#karate-call">JS API</a> allows you to do this, <br>but this will <em>not</em> be <a href="#shared-scope">Shared Scope</a></td>
</tr>
<tr>
<td><code>* def result = call read('login.feature')</code></td>
<td><a href="#call"><code>call</code></a> result assigned to a variable <br>and <em>not</em> <a href="#shared-scope">Shared Scope</a></td>
</tr>
<tr>
<td><code>* def result = karate.call('login.feature')</code></td>
<td>exactly equivalent to the above !</td>
</tr>
<tr>
<td><code>* if (cond) karate.call(true, 'login.feature')</code></td>
<td>if you need <a href="#conditional-logic">conditional logic</a> <br><em>and</em> <a href="#shared-scope">Shared Scope</a>, add a <br>boolean <code>true</code> first argument</td>
</tr>
<tr>
<td><code>* def credentials = read('credentials.json')</code><br><code>* def result = call read('login.feature') credentials</code></td>
<td>like the above, <br>but with a <a href="#call"><code>call</code></a> argument</td>
</tr>
<tr>
<td><code>* def credentials = read('credentials.json')</code><br><code>* def result = karate.call('login.feature', credentials)</code></td>
<td>like the above, but in <a href="#karate-call">JS API</a> form, <br>the advantage of the above form is <br>that using an in-line argument is less <br>"cluttered" (see next row)</td>
</tr>
<tr>
<td><code>* def login = read('login.feature')</code><br><code>* def result = call login { user: 'john', password: 'secret' }</code></td>
<td>using the <code>call</code> keyword makes <br>passing an in-line JSON argument <br>more "readable"</td>
</tr>
<tr>
<td><code>* call read 'credentials.json'</code></td>
<td>Since "<code>read</code>" happens to be a <br><a href="#calling-javascript-functions"><em>function</em></a> (that takes a single <br>string argument), this has the effect <br>of loading <em>all</em> keys in the JSON file<br>into <a href="#shared-scope">Shared Scope</a> as <a href="#def">variables</a> ! <br>This <em>can</em> be <a href="/karatelabs/karate/blob/master/karate-core#locator-lookup">sometimes handy</a>.</td>
</tr>
<tr>
<td><code>* call read ('credentials.json')</code></td>
<td>A common mistake. First, there <br>is no meaning in <code>call</code> for JSON. <br>Second, the space after the "<code>read</code>" <br>makes this equal to the above.</td>
</tr>
<tr>
<td><code>* karate.set(read('credentials.json'))</code></td>
<td>For completeness - this has <em>exactly</em> the <a href="#karate-setall">same effect</a> as the above two rows !</td>
</tr>
</tbody>
</table>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Calling Java</h3><a id="user-content-calling-java" class="anchor" aria-label="Permalink: Calling Java" href="#calling-java"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">There are examples of calling JVM classes in the section on <a href="#java-interop">Java Interop</a> and in the <a href="/karatelabs/karate/blob/master/karate-demo">file-upload demo</a>. Also look at the section on <a href="#commonly-needed-utilities">commonly needed utilities</a> for more ideas.</p>
<p dir="auto">Calling any Java code is that easy.  Given this custom, user-defined Java class:</p>
<div class="highlight highlight-source-java notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="package com.mycompany;

import java.util.HashMap;
import java.util.Map;

public class JavaDemo {    
    
    public Map&lt;String, Object&gt; doWork(String fromJs) {
        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();
        map.put(&quot;someKey&quot;, &quot;hello &quot; + fromJs);
        return map;
    }

    public static String doWorkStatic(String fromJs) {
        return &quot;hello &quot; + fromJs;
    }   

}"><pre><span class="pl-k">package</span> <span class="pl-s1">com</span>.<span class="pl-s1">mycompany</span>;

<span class="pl-k">import</span> <span class="pl-s1">java</span>.<span class="pl-s1">util</span>.<span class="pl-s1">HashMap</span>;
<span class="pl-k">import</span> <span class="pl-s1">java</span>.<span class="pl-s1">util</span>.<span class="pl-s1">Map</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">JavaDemo</span> {    
    
    <span class="pl-k">public</span> <span class="pl-smi">Map</span>&lt;<span class="pl-smi">String</span>, <span class="pl-smi">Object</span>&gt; <span class="pl-en">doWork</span>(<span class="pl-smi">String</span> <span class="pl-s1">fromJs</span>) {
        <span class="pl-smi">Map</span>&lt;<span class="pl-smi">String</span>, <span class="pl-smi">Object</span>&gt; <span class="pl-s1">map</span> = <span class="pl-k">new</span> <span class="pl-smi">HashMap</span>&lt;&gt;();
        <span class="pl-s1">map</span>.<span class="pl-en">put</span>(<span class="pl-s">"someKey"</span>, <span class="pl-s">"hello "</span> + <span class="pl-s1">fromJs</span>);
        <span class="pl-k">return</span> <span class="pl-s1">map</span>;
    }

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">String</span> <span class="pl-en">doWorkStatic</span>(<span class="pl-smi">String</span> <span class="pl-s1">fromJs</span>) {
        <span class="pl-k">return</span> <span class="pl-s">"hello "</span> + <span class="pl-s1">fromJs</span>;
    }   

}</pre></div>
<p dir="auto">This is how it can be called from a test-script via <a href="#javascript-functions">JavaScript</a>, and yes, even static methods can be invoked:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def doWork =
  &quot;&quot;&quot;
  function(arg) {
    var JavaDemo = Java.type('com.mycompany.JavaDemo');
    var jd = new JavaDemo();
    return jd.doWork(arg);  
  }
  &quot;&quot;&quot;
# in this case the solitary 'call' argument is of type string
* def result = call doWork 'world'
* match result == { someKey: 'hello world' }

# using a static method - observe how java interop is truly seamless !
* def JavaDemo = Java.type('com.mycompany.JavaDemo')
* def result = JavaDemo.doWorkStatic('world')
* assert result == 'hello world'"><pre><span class="pl-k">* </span>def doWork =
  <span class="pl-s">"""</span>
<span class="pl-s">  function(arg) {</span>
<span class="pl-s">    var JavaDemo = Java.type('com.mycompany.JavaDemo');</span>
<span class="pl-s">    var jd = new JavaDemo();</span>
<span class="pl-s">    return jd.doWork(arg);  </span>
<span class="pl-s">  }</span>
<span class="pl-s">  """</span>
<span class="pl-c"># in this case the solitary 'call' argument is of type string</span>
<span class="pl-k">* </span>def result = call doWork <span class="pl-s">'world'</span>
<span class="pl-k">* </span>match result == { someKey: <span class="pl-s">'hello world'</span> }

<span class="pl-c"># using a static method - observe how java interop is truly seamless !</span>
<span class="pl-k">* </span>def JavaDemo = Java.type(<span class="pl-s">'com.mycompany.JavaDemo'</span>)
<span class="pl-k">* </span>def result = JavaDemo.doWorkStatic(<span class="pl-s">'world'</span>)
<span class="pl-k">* </span>assert result == <span class="pl-s">'hello world'</span></pre></div>
<p dir="auto">Note that JSON gets auto-converted to <code>Map</code> (or <code>List</code>) when making the cross-over to Java. Refer to the <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/java/cats-java.feature"><code>cats-java.feature</code></a> demo for an example.</p>
<blockquote>
<p dir="auto">An additional-level of auto-conversion happens when objects cross the boundary between JS and Java. In the rare case that you need to mutate a <code>Map</code> or <code>List</code> returned from Java but while still within a JS block, use <a href="#karate-tojson"><code>karate.toJson()</code></a> to convert.</p>
</blockquote>
<p dir="auto">Another example is <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/dogs/dogs.feature"><code>dogs.feature</code></a> -  which actually makes JDBC (database) calls, and since the data returned from the Java code is JSON, the last section of the test is able to use <a href="#match"><code>match</code></a> <em>very</em> effectively for data assertions.</p>
<p dir="auto">A great example of how you can extend Karate, even bypass the HTTP client but still use Karate's test-automation effectively, is this <a href="https://grpc.io" rel="nofollow">gRPC</a> example by <a href="https://github.com/thinkerou">@thinkerou</a>: <a href="https://github.com/thinkerou/karate-grpc"><code>karate-grpc</code></a>. And you can even handle asynchronous flows such as <a href="#async">listening to message-queues</a>.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">HTTP Basic Authentication Example</h4><a id="user-content-http-basic-authentication-example" class="anchor" aria-label="Permalink: HTTP Basic Authentication Example" href="#http-basic-authentication-example"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">This should make it clear why Karate does not provide 'out of the box' support for any particular HTTP authentication scheme. Things are designed so that you can plug-in what you need, without needing to compile Java code. You get to choose how to manage your environment-specific configuration values such as user-names and passwords.</p>
<p dir="auto">First the JavaScript file, <code>basic-auth.js</code>:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="function fn(creds) {
  var temp = creds.username + ':' + creds.password;
  var Base64 = Java.type('java.util.Base64');
  var encoded = Base64.getEncoder().encodeToString(temp.toString().getBytes());
  return 'Basic ' + encoded;
}"><pre><span class="pl-k">function</span> <span class="pl-en">fn</span><span class="pl-kos">(</span><span class="pl-s1">creds</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-k">var</span> <span class="pl-s1">temp</span> <span class="pl-c1">=</span> <span class="pl-s1">creds</span><span class="pl-kos">.</span><span class="pl-c1">username</span> <span class="pl-c1">+</span> <span class="pl-s">':'</span> <span class="pl-c1">+</span> <span class="pl-s1">creds</span><span class="pl-kos">.</span><span class="pl-c1">password</span><span class="pl-kos">;</span>
  <span class="pl-k">var</span> <span class="pl-v">Base64</span> <span class="pl-c1">=</span> <span class="pl-v">Java</span><span class="pl-kos">.</span><span class="pl-en">type</span><span class="pl-kos">(</span><span class="pl-s">'java.util.Base64'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-k">var</span> <span class="pl-s1">encoded</span> <span class="pl-c1">=</span> <span class="pl-v">Base64</span><span class="pl-kos">.</span><span class="pl-en">getEncoder</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">encodeToString</span><span class="pl-kos">(</span><span class="pl-s1">temp</span><span class="pl-kos">.</span><span class="pl-en">toString</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">.</span><span class="pl-en">getBytes</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
  <span class="pl-k">return</span> <span class="pl-s">'Basic '</span> <span class="pl-c1">+</span> <span class="pl-s1">encoded</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<p dir="auto">And here's how it works in a test-script using the <a href="#header"><code>header</code></a> keyword.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* header Authorization = call read('basic-auth.js') { username: 'john', password: 'secret' }"><pre><span class="pl-k">* </span>header Authorization = call read(<span class="pl-s">'basic-auth.js'</span>) { username: <span class="pl-s">'john'</span>, password: <span class="pl-s">'secret'</span> }</pre></div>
<p dir="auto">You can set this up for all subsequent requests or dynamically generate headers for each HTTP request if you <a href="#configure-headers"><code>configure headers</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>callonce</code></h2><a id="user-content-callonce" class="anchor" aria-label="Permalink: callonce" href="#callonce"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Cucumber has a limitation where <a href="#script-structure"><code>Background</code></a> steps are re-run for every <code>Scenario</code>. And if you have a <code>Scenario Outline</code>, this happens for <em>every</em> row in the <code>Examples</code>. This is a problem especially for expensive, time-consuming HTTP calls, and this has been an <a href="https://github.com/cucumber/cucumber-jvm/issues/515" data-hovercard-type="issue" data-hovercard-url="/cucumber/cucumber-jvm/issues/515/hovercard">open issue for a long time</a>.</p>
<p dir="auto">Karate's <code>callonce</code> keyword behaves exactly like <a href="#call"><code>call</code></a> but is guaranteed to execute only once. The results of the first call are cached, and any future calls will simply return the cached result instead of executing the JavaScript function (or feature) again and again.</p>
<p dir="auto">This does require you to move 'set-up' into a separate <code>*.feature</code> (or JavaScript) file. But this totally makes sense for things not part of the 'main' test flow and which typically need to be re-usable anyway.</p>
<p dir="auto">So when you use the combination of <code>callonce</code> in a <code>Background</code>, you can indeed get the same effect as using a <a href="https://junit.org/junit5/docs/5.0.0/api/org/junit/jupiter/api/BeforeAll.html" rel="nofollow"><code>@BeforeAll</code></a> annotation, and you can find examples in the <a href="/karatelabs/karate/blob/master/karate-demo">karate-demo</a>, such as this one: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/callonce/call-once.feature"><code>callonce.feature</code></a>.</p>
<p dir="auto">A <code>callonce</code> is ideally used for only "pure" JSON. You may face issues if you attempt to mix in JS functions or Java code. See <a href="#karatecallsingle"><code>karate.callSingle()</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto"><code>eval</code></h2><a id="user-content-eval" class="anchor" aria-label="Permalink: eval" href="#eval"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<blockquote>
<p dir="auto">This is for evaluating arbitrary JavaScript and you are advised to use this only as a last resort ! Conditional logic is not recommended especially within test scripts because <a href="https://martinfowler.com/articles/nonDeterminism.html" rel="nofollow">tests should be deterministic</a>.</p>
</blockquote>
<p dir="auto">There are a few situations where this comes in handy:</p>
<ul dir="auto">
<li>you <em>really</em> don't need to assign a result to a variable</li>
<li>statements in the <code>if</code> form (also see <a href="#conditional-logic">conditional logic</a>)</li>
<li>'one-off' logic (or <a href="#java-interop">Java interop</a>) where you don't need the 'ceremony' of a <a href="#calling-javascript-functions">re-usable function</a></li>
<li>JavaScript / JSON-style mutation of existing <a href="#def">variables</a> as a dynamic alternative to <a href="#set"><code>set</code></a> and <a href="#remove"><code>remove</code></a> - by using <a href="#karate-setpath"><code>karate.set()</code></a> and <a href="#karate-remove"><code>karate.remove()</code></a>.</li>
</ul>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# just perform an action, we don't care about saving the result
* eval myJavaScriptFunction()

# do something only if a condition is true
* eval if (zone == 'zone1') karate.set('temp', 'after')"><pre><span class="pl-c"># just perform an action, we don't care about saving the result</span>
<span class="pl-k">* </span>eval myJavaScriptFunction()

<span class="pl-c"># do something only if a condition is true</span>
<span class="pl-k">* </span>eval if (zone == <span class="pl-s">'zone1'</span>) karate.set(<span class="pl-s">'temp'</span>, <span class="pl-s">'after'</span>)</pre></div>
<p dir="auto">As a convenience, you can omit the <code>eval</code> keyword and so you can shorten the above to:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* myJavaScriptFunction()
* if (zone == 'zone1') karate.set('temp', 'after')"><pre><span class="pl-k">* </span>myJavaScriptFunction()
<span class="pl-k">* </span>if (zone == <span class="pl-s">'zone1'</span>) karate.set(<span class="pl-s">'temp'</span>, <span class="pl-s">'after'</span>)</pre></div>
<p dir="auto">This is <strong>very</strong> convenient especially if you are calling a method on a variable that has been <a href="#def">defined</a> such as the <a href="#the-karate-object"><code>karate</code></a> object, and for general-purpose scripting needs such as <a href="/karatelabs/karate/blob/master/karate-core">UI automation</a>. Note how <code>karate.set()</code> and <code>karate.remove()</code> below are used directly as a script "statement".</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="# you can use multiple lines of JavaScript if needed
* eval
  &quot;&quot;&quot;
  var foo = function(v){ return v * v };
  var nums = [0, 1, 2, 3, 4];
  var squares = [];
  for (var n in nums) {
    squares.push(foo(n));
  }
  karate.set('temp', squares);
  &quot;&quot;&quot;
* match temp == [0, 1, 4, 9, 16]

* def json = { a: 1 }
* def key = 'b'
# use dynamic path expressions to mutate json
* json[key] = 2
* match json == { a: 1, b: 2 }
* karate.remove('json', key)
* match json == { a: 1 }
* karate.set('json', '$.c[]', { d: 'e' })
* match json == { a: 1, c: [{ d: 'e' }] }"><pre><span class="pl-c"># you can use multiple lines of JavaScript if needed</span>
<span class="pl-k">* </span>eval
  <span class="pl-s">"""</span>
<span class="pl-s">  var foo = function(v){ return v * v };</span>
<span class="pl-s">  var nums = [0, 1, 2, 3, 4];</span>
<span class="pl-s">  var squares = [];</span>
<span class="pl-s">  for (var n in nums) {</span>
<span class="pl-s">    squares.push(foo(n));</span>
<span class="pl-s">  }</span>
<span class="pl-s">  karate.set('temp', squares);</span>
<span class="pl-s">  """</span>
<span class="pl-k">* </span>match temp == [0, 1, 4, 9, 16]

<span class="pl-k">* </span>def json = { a: 1 }
<span class="pl-k">* </span>def key = <span class="pl-s">'b'</span>
<span class="pl-c"># use dynamic path expressions to mutate json</span>
<span class="pl-k">* </span>json[key] = 2
<span class="pl-k">* </span>match json == { a: 1, b: 2 }
<span class="pl-k">* </span>karate.remove(<span class="pl-s">'json'</span>, key)
<span class="pl-k">* </span>match json == { a: 1 }
<span class="pl-k">* </span>karate.set(<span class="pl-s">'json'</span>, <span class="pl-s">'$.c[]'</span>, { d: <span class="pl-s">'e'</span> })
<span class="pl-k">* </span>match json == { a: 1, c: [{ d: <span class="pl-s">'e'</span> }] }</pre></div>
<div class="markdown-heading" dir="auto"><h1 tabindex="-1" class="heading-element" dir="auto">Advanced / Tricks</h1><a id="user-content-advanced--tricks" class="anchor" aria-label="Permalink: Advanced / Tricks" href="#advanced--tricks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Polling</h2><a id="user-content-polling" class="anchor" aria-label="Permalink: Polling" href="#polling"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The built-in <a href="#retry-until"><code>retry until</code></a> syntax should suffice for most needs, but if you have some specific needs, this demo example (using JavaScript) should get you up and running: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/polling/polling.feature"><code>polling.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Conditional Logic</h2><a id="user-content-conditional-logic" class="anchor" aria-label="Permalink: Conditional Logic" href="#conditional-logic"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The keywords <a href="#given-when-then"><code>Given</code> <code>When</code> <code>Then</code></a> are only for decoration and should not be thought of as similar to an <code>if - then - else</code> statement. And as a testing framework, Karate <a href="https://martinfowler.com/articles/nonDeterminism.html" rel="nofollow">discourages tests</a> that give different results on every run.</p>
<p dir="auto">That said, if you really need to implement 'conditional' checks, this can be one pattern:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def filename = zone == 'zone1' ? 'test1.feature' : 'test2.feature'
* def result = call read(filename)"><pre><span class="pl-k">* </span>def filename = zone == <span class="pl-s">'zone1'</span> ? <span class="pl-s">'test1.feature'</span> : <span class="pl-s">'test2.feature'</span>
<span class="pl-k">* </span>def result = call read(filename)</pre></div>
<p dir="auto">And this is another, using <a href="#karate-call"><code>karate.call()</code></a>. Here we want to <a href="#call"><code>call</code></a> a file only if a condition is satisfied:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def result = responseStatus == 404 ? {} : karate.call('delete-user.feature')"><pre><span class="pl-k">* </span>def result = responseStatus == 404 ? {} : karate.call(<span class="pl-s">'delete-user.feature'</span>)</pre></div>
<p dir="auto">Or if we don't care about the result, we can <a href="#eval"><code>eval</code></a> an <code>if</code> statement:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* if (responseStatus == 200) karate.call('delete-user.feature')"><pre><span class="pl-k">* </span>if (responseStatus == 200) karate.call(<span class="pl-s">'delete-user.feature'</span>)</pre></div>
<p dir="auto">And this may give you more ideas. You can always use a <a href="#javascript-functions">JavaScript function</a> or <a href="#calling-java">call Java</a> for more complex logic.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def expected = zone == 'zone1' ? { foo: '#string' } : { bar: '#number' }
* match response == expected"><pre><span class="pl-k">* </span>def expected = zone == <span class="pl-s">'zone1'</span> ? { foo: <span class="pl-s">'#string'</span> } : { bar: <span class="pl-s">'#number'</span> }
<span class="pl-k">* </span>match response == expected</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">JSON Lookup</h3><a id="user-content-json-lookup" class="anchor" aria-label="Permalink: JSON Lookup" href="#json-lookup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You can always use a JavaScript <a href="https://www.w3schools.com/js/js_switch.asp" rel="nofollow"><code>switch case</code></a> within an <a href="#eval"><code>eval</code></a> or <a href="#javascript-functions">function</a> block. But one pattern that you should be aware of is that JSON is actually a great data-structure for looking up data.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def data =
&quot;&quot;&quot;
{
   foo: 'hello',
   bar: 'world'  
}
&quot;&quot;&quot;
# in real-life key can be dynamic
* def key = 'bar'
# and used to lookup data
* match (data[key]) == 'world'"><pre><span class="pl-k">* </span>def data =
<span class="pl-s">"""</span>
<span class="pl-s">{</span>
<span class="pl-s">   foo: 'hello',</span>
<span class="pl-s">   bar: 'world'  </span>
<span class="pl-s">}</span>
<span class="pl-s">"""</span>
<span class="pl-c"># in real-life key can be dynamic</span>
<span class="pl-k">* </span>def key = <span class="pl-s">'bar'</span>
<span class="pl-c"># and used to lookup data</span>
<span class="pl-k">* </span>match (data[key]) == <span class="pl-s">'world'</span></pre></div>
<p dir="auto">You can find more details <a href="https://stackoverflow.com/a/59162760/143475" rel="nofollow">here</a>. Also note how you can wrap the LHS of the <a href="#match"><code>match</code></a> in parentheses in the rare cases where the parser expects JsonPath by default.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Abort and Fail</h3><a id="user-content-abort-and-fail" class="anchor" aria-label="Permalink: Abort and Fail" href="#abort-and-fail"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In some rare cases you need to exit a <code>Scenario</code> based on some condition. You can use <a href="#karate-abort"><code>karate.abort()</code></a> like so:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* if (responseStatus == 404) karate.abort()"><pre><span class="pl-k">* </span>if (responseStatus == 404) karate.abort()</pre></div>
<p dir="auto">Using <code>karate.abort()</code> will <em>not</em> fail the test. Conditionally making a test fail is easy with <a href="#karate-fail"><code>karate.fail()</code></a></p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* if (condition) karate.fail('a custom message')"><pre><span class="pl-k">* </span>if (condition) karate.fail(<span class="pl-s">'a custom message'</span>)</pre></div>
<p dir="auto">But normally a <a href="#match"><code>match</code></a> statement is preferred unless you want a really descriptive error message.</p>
<p dir="auto">Also refer to <a href="#polling">polling</a> for more ideas.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Commonly Needed Utilities</h2><a id="user-content-commonly-needed-utilities" class="anchor" aria-label="Permalink: Commonly Needed Utilities" href="#commonly-needed-utilities"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Since it is so easy to dive into <a href="#calling-java">Java-interop</a>, Karate does not include any random-number functions, uuid generator or date / time utilities out of the box. You simply roll your own.</p>
<p dir="auto">Here is an example of how to get the current date, and formatted the way you want:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def getDate =
  &quot;&quot;&quot;
  function() {
    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
    var sdf = new SimpleDateFormat('yyyy/MM/dd');
    var date = new java.util.Date();
    return sdf.format(date);
  } 
  &quot;&quot;&quot;

* def temp = getDate()
* print temp"><pre><span class="pl-k">* </span>def getDate =
  <span class="pl-s">"""</span>
<span class="pl-s">  function() {</span>
<span class="pl-s">    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');</span>
<span class="pl-s">    var sdf = new SimpleDateFormat('yyyy/MM/dd');</span>
<span class="pl-s">    var date = new java.util.Date();</span>
<span class="pl-s">    return sdf.format(date);</span>
<span class="pl-s">  } </span>
<span class="pl-s">  """</span>

<span class="pl-k">* </span>def temp = getDate()
<span class="pl-k">* </span>print temp</pre></div>
<p dir="auto">And the above will result in something like this being logged: <code>[print] 2017/10/16</code>.</p>
<p dir="auto">Here below are a few more common examples:</p>
<table>
<thead>
<tr>
<th>Utility</th>
<th>Recipe</th>
</tr>
</thead>
<tbody>
<tr>
<td>System Time (as a string)</td>
<td><code>function(){ return java.lang.System.currentTimeMillis() + '' }</code></td>
</tr>
<tr>
<td>UUID</td>
<td><code>function(){ return java.util.UUID.randomUUID() + '' }</code></td>
</tr>
<tr>
<td>Random Number (<code>0</code> to <code>max-1</code>)</td>
<td><code>function(max){ return Math.floor(Math.random() * max) }</code></td>
</tr>
<tr>
<td>Case Insensitive Comparison</td>
<td><code>function(a, b){ return a.equalsIgnoreCase(b) }</code></td>
</tr>
<tr>
<td>Sleep or Wait for <code>pause</code> milliseconds</td>
<td><code>function(pause){ java.lang.Thread.sleep(pause) }</code></td>
</tr>
</tbody>
</table>
<p dir="auto">The first three are good enough for random string generation for most situations. Note that if you need to do a lot of case-insensitive string checks, <a href="#karate-lowercase"><code>karate.lowerCase()</code></a> is what you are looking for.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Multiple Functions in One File</h3><a id="user-content-multiple-functions-in-one-file" class="anchor" aria-label="Permalink: Multiple Functions in One File" href="#multiple-functions-in-one-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">If you find yourself needing a complex helper or utility function, we strongly recommend that you <a href="#calling-java">use Java</a> because it is much easier to maintain and even debug if needed. And if you need multiple functions, you can easily organize them into a single Java class with multiple static methods.</p>
<p dir="auto">That said, if you want to stick to JavaScript, but find yourself accumulating a lot of helper functions that you need to use in multiple feature files, the following pattern is recommended.</p>
<p dir="auto">You can organize multiple "common" utilities into a single re-usable feature file as follows e.g. <code>common.feature</code></p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@ignore
Feature:

Scenario:
  * def hello = function(){ return 'hello' }
  * def world = function(){ return 'world' }"><pre><span class="pl-k">@ignore</span>
Feature:

<span class="pl-k">Scenario</span>:
  <span class="pl-k">* </span>def hello = function(){ return <span class="pl-s">'hello'</span> }
  <span class="pl-k">* </span>def world = function(){ return <span class="pl-s">'world'</span> }</pre></div>
<p dir="auto">And then you have two options. The first option using <a href="#shared-scope">shared scope</a> should be fine for most projects, but if you want to "name space" your functions, use "isolated scope":</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Scenario: function re-use, global / shared scope
    * call read('common.feature')
    * assert hello() == 'hello'
    * assert world() == 'world'

Scenario: function re-use, isolated / name-spaced scope
    * def utils = call read('common.feature')
    * assert utils.hello() == 'hello'
    * assert utils.world() == 'world'"><pre><span class="pl-k">Scenario</span>:<span class="pl-s"> function re-use, global / shared scope</span>
    <span class="pl-k">* </span>call read(<span class="pl-s">'common.feature'</span>)
    <span class="pl-k">* </span>assert hello() == <span class="pl-s">'hello'</span>
    <span class="pl-k">* </span>assert world() == <span class="pl-s">'world'</span>

<span class="pl-k">Scenario</span>:<span class="pl-s"> function re-use, isolated / name-spaced scope</span>
    <span class="pl-k">* </span>def utils = call read(<span class="pl-s">'common.feature'</span>)
    <span class="pl-k">* </span>assert utils.hello() == <span class="pl-s">'hello'</span>
    <span class="pl-k">* </span>assert utils.world() == <span class="pl-s">'world'</span></pre></div>
<p dir="auto">You can even move commonly used routines into <a href="#restrictions-on-global-variables"><code>karate-config.js</code></a> which means that they become "global". But we recommend that you do this only if you are sure that these routines are needed in almost <em>all</em> <code>*.feature</code> files. Bloating your configuration can lead to loss of performance, and maintainability may suffer.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Async</h2><a id="user-content-async" class="anchor" aria-label="Permalink: Async" href="#async"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The JS API has a <a href="#karate-signal"><code>karate.signal(result)</code></a> method that is useful for involving asynchronous flows into a test.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>listen</code></h3><a id="user-content-listen" class="anchor" aria-label="Permalink: listen" href="#listen"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You use the <code>listen</code> keyword (with a timeout) to wait until that event occurs. The <code>listenResult</code> magic variable will hold the value passed to the call to <code>karate.signal()</code>.</p>
<p dir="auto">This is best <a href="https://github.com/karatelabs/karate/tree/master/karate-netty#consumer-provider-example">explained</a> in this <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/mock/contract/payment-service.feature">example</a> that involves listening to an ActiveMQ / JMS queue.</p>
<p dir="auto">Note how <a href="#javascript-functions">JS functions</a> defined at run-time can be mixed with custom <a href="#java-interop">Java code</a> to get things done. You need to use <a href="#karate-tojava"><code>karate.toJava()</code></a> to "wrap" JS functions passed to custom Java code.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Background:
* def QueueConsumer = Java.type('mock.contract.QueueConsumer')
* def queue = new QueueConsumer(queueName)
* def handler = function(msg){ karate.signal(msg) }
* queue.listen(karate.toJava(handler))
* url paymentServiceUrl + '/payments'

Scenario: create, get, update, list and delete payments
    Given request { amount: 5.67, description: 'test one' }
    When method post
    Then status 200
    And match response == { id: '#number', amount: 5.67, description: 'test one' }
    And def id = response.id
    * listen 5000
    * json shipment = listenResult
    * print '### received:', shipment
    * match shipment == { paymentId: '#(id)', status: 'shipped' }"><pre><span class="pl-k">Background</span>:
<span class="pl-k">* </span>def QueueConsumer = Java.type(<span class="pl-s">'mock.contract.QueueConsumer'</span>)
<span class="pl-k">* </span>def queue = new QueueConsumer(queueName)
<span class="pl-k">* </span>def handler = function(msg){ karate.signal(msg) }
<span class="pl-k">* </span>queue.listen(karate.toJava(handler))
<span class="pl-k">* </span>url paymentServiceUrl + <span class="pl-s">'/payments'</span>

<span class="pl-k">Scenario</span>:<span class="pl-s"> create, get, update, list and delete payments</span>
    <span class="pl-k">Given </span>request { amount: 5.67, description: <span class="pl-s">'test one'</span> }
    <span class="pl-k">When </span>method post
    <span class="pl-k">Then </span>status 200
    <span class="pl-k">And </span>match response == { id: <span class="pl-s">'#number'</span>, amount: 5.67, description: <span class="pl-s">'test one'</span> }
    <span class="pl-k">And </span>def id = response.id
    <span class="pl-k">* </span>listen 5000
    <span class="pl-k">* </span>json shipment = listenResult
    <span class="pl-k">* </span>print <span class="pl-s">'### received:'</span>, shipment
    <span class="pl-k">* </span>match shipment == { paymentId: <span class="pl-s">'#(id)'</span>, status: <span class="pl-s">'shipped'</span> }</pre></div>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">WebSocket</h2><a id="user-content-websocket" class="anchor" aria-label="Permalink: WebSocket" href="#websocket"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate also has built-in support for <a href="http://www.websocket.org" rel="nofollow">websocket</a> that is based on the <a href="#async">async</a> capability and the <a href="#listen"><code>listen</code></a> keyword. The following method signatures are available on the <a href="#the-karate-object"><code>karate</code> JS object</a> to obtain a websocket client:</p>
<ul dir="auto">
<li><code>karate.webSocket(url)</code></li>
<li><code>karate.webSocket(url, handler)</code></li>
<li><code>karate.webSocket(url, handler, options)</code> - where <code>options</code> is an optional JSON (or map-like) object that takes the following optional keys:
<ul dir="auto">
<li><code>subProtocol</code> - in case the server expects it</li>
<li><code>headers</code> - another JSON of key-value pairs</li>
<li><code>maxPayloadSize</code> - this defaults to 4194304 (bytes, around 4 MB)</li>
</ul>
</li>
</ul>
<p dir="auto">These will init a websocket client for the given <code>url</code> and optional <code>subProtocol</code>. You can call <code>send()</code> on the returned object to send a message.</p>
<p dir="auto">If a <code>handler</code> <a href="#javascript-functions">function</a> (returning a boolean) is provided - it will be used to complete the <a href="#listen"><code>listen</code></a> "wait" if <code>true</code> is returned. A handler function is needed only if you have to ignore some incoming traffic and stop the "wait" when a certain payload arrives. If you don't pass a <code>handler</code> (or it is <code>null</code>), the first message is returned.</p>
<p dir="auto">Note that <code>karate.signal()</code> (described as part of the <a href="#listen"><code>listen</code></a> keyword) will be called internally and the <code>listenResult</code> will be the payload contents of the "selected" message.</p>
<p dir="auto">Here is an example, where the same websocket connection is used to send as well as receive a message.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def handler = function(msg){ return msg.startsWith('hello') }
* def socket = karate.webSocket(demoBaseUrl + '/websocket', handler)
* socket.send('Billie')
* listen 5000
* match listenResult == 'hello Billie !'"><pre><span class="pl-k">* </span>def handler = function(msg){ return msg.startsWith(<span class="pl-s">'hello'</span>) }
<span class="pl-k">* </span>def socket = karate.webSocket(demoBaseUrl + <span class="pl-s">'/websocket'</span>, handler)
<span class="pl-k">* </span>socket.send(<span class="pl-s">'Billie'</span>)
<span class="pl-k">* </span>listen 5000
<span class="pl-k">* </span>match listenResult == <span class="pl-s">'hello Billie !'</span></pre></div>
<p dir="auto">For handling binary messages, the same <code>karate.webSocket()</code> method signatures exist for <code>karate.webSocketBinary()</code>. Refer to these examples for more: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/websocket/echo.feature"><code>echo.feature</code></a> | <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/websocket/websocket.feature"><code>websocket.feature</code></a>. Note that any websocket instances created will be auto-closed at the end of the <code>Scenario</code>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Java Function References</h3><a id="user-content-java-function-references" class="anchor" aria-label="Permalink: Java Function References" href="#java-function-references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">JavaScript functions have some limitations when combined with multi-threaded Java code. So it is recommended that you directly use a Java <code>Function</code> when possible instead of using the <code>karate.toJava()</code> "wrapper" as shown above.</p>
<p dir="auto">One pattern you can adopt is to create a "factory" method that returns a Java function - where you can easily delegate to the logic you want. For example, see the <code>sayHelloFactory()</code> method below:</p>
<div class="highlight highlight-source-java notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="public class Hello {

    public static String sayHello(String message) {
        return &quot;hello &quot; + message;
    }

    public static Function&lt;String, String&gt; sayHelloFactory() {
        return s -&gt; sayHello(s);
    }

}"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">Hello</span> {

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">String</span> <span class="pl-en">sayHello</span>(<span class="pl-smi">String</span> <span class="pl-s1">message</span>) {
        <span class="pl-k">return</span> <span class="pl-s">"hello "</span> + <span class="pl-s1">message</span>;
    }

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">Function</span>&lt;<span class="pl-smi">String</span>, <span class="pl-smi">String</span>&gt; <span class="pl-en">sayHelloFactory</span>() {
        <span class="pl-k">return</span> <span class="pl-s1">s</span> -&gt; <span class="pl-en">sayHello</span>(<span class="pl-s1">s</span>);
    }

}</pre></div>
<p dir="auto">And now, to get a reference to that "function" you can do this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="* def sayHello = Java.type('com.myco.Hello').sayHelloFactory()"><pre><span class="pl-k">* </span>def sayHello = Java.type(<span class="pl-s">'com.myco.Hello'</span>).sayHelloFactory()</pre></div>
<p dir="auto">This can be convenient when using <a href="#shared-scope">shared scope</a> because you can just call <code>sayHello('myname')</code> where needed.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Tags</h2><a id="user-content-tags" class="anchor" aria-label="Permalink: Tags" href="#tags"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Gherkin has a great way to sprinkle meta-data into test-scripts - which gives you some interesting options when running tests in bulk.  The most common use-case would be to partition your tests into 'smoke', 'regression' and the like - which enables being able to selectively execute a sub-set of tests.</p>
<p dir="auto">The documentation on how to run tests via the <a href="#test-suites">command line</a> has an example of how to use tags to decide which tests to <em>not</em> run (or ignore). Also see <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/tags/first.feature"><code>first.feature</code></a> and <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/tags/second.feature"><code>second.feature</code></a> in the <a href="/karatelabs/karate/blob/master/karate-demo">demos</a>. If you find yourself juggling multiple tags with logical <code>AND</code> and <code>OR</code> complexity, refer to this <a href="https://stackoverflow.com/a/50693388/143475" rel="nofollow">Stack Overflow answer</a>.</p>
<blockquote>
<p dir="auto">For advanced users, Karate supports being able to query for tags within a test, and even tags in a <code>@name=value</code> form. Refer to <a href="#karate-tags"><code>karate.tags</code></a> and <a href="#karate-tagvalues"><code>karate.tagValues</code></a>.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Special Tags</h3><a id="user-content-special-tags" class="anchor" aria-label="Permalink: Special Tags" href="#special-tags"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">For completeness, the "built-in" tags are the following:</p>
<table>
<thead>
<tr>
<th>Tag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@ignore</code></td>
<td>Any <code>Scenario</code> with (or that has inherited) this tag will be skipped at run-time. This does not apply to anything that is "called" though</td>
</tr>
<tr>
<td><code>@parallel</code></td>
<td>See <a href="#parallelfalse"><code>@parallel=false</code></a></td>
</tr>
<tr>
<td><code>@report</code></td>
<td>See <a href="#reportfalse"><code>@report=false</code></a></td>
</tr>
<tr>
<td><code>@setup</code></td>
<td>See <a href="#setup"><code>@setup</code></a></td>
</tr>
<tr>
<td><code>@env</code></td>
<td>See below</td>
</tr>
<tr>
<td><code>@envnot</code></td>
<td>See below</td>
</tr>
</tbody>
</table>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Environment Tags</h3><a id="user-content-environment-tags" class="anchor" aria-label="Permalink: Environment Tags" href="#environment-tags"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">There are two special tags that allow you to "select" or "un-select" a <code>Scenario</code> depending on the value of <a href="#switching-the-environment"><code>karate.env</code></a>. This can be really convenient, for example to <em>never</em> run some tests in a certain "production like" or sensitive environment.</p>
<ul dir="auto">
<li><code>@env=foo,bar</code> - will run only when the value of <code>karate.env</code> is not-null <em>and</em> equal to <code>foo</code> <em>or</em> <code>bar</code></li>
<li><code>@envnot=foo</code> - will run when the value of <code>karate.env</code> is <code>null</code> or anything <em>other than</em> <code>foo</code></li>
</ul>
<p dir="auto">Here is an example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@env=dev  
Scenario: runs only when karate.env is 'dev'
* print 'karate.env is:', karate.env"><pre><span class="pl-k">@env=dev</span>  
<span class="pl-k">Scenario</span>:<span class="pl-s"> runs only when karate.env is 'dev'</span>
<span class="pl-k">* </span>print <span class="pl-s">'karate.env is:'</span>, karate.env</pre></div>
<p dir="auto">Since multiple values are supported, you can also do this:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="@envnot=perf,prod  
Scenario: never runs in perf or prod
* print 'karate.env is:', karate.env"><pre><span class="pl-k">@envnot=perf,prod</span>  
<span class="pl-k">Scenario</span>:<span class="pl-s"> never runs in perf or prod</span>
<span class="pl-k">* </span>print <span class="pl-s">'karate.env is:'</span>, karate.env</pre></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Tags And Examples</h3><a id="user-content-tags-and-examples" class="anchor" aria-label="Permalink: Tags And Examples" href="#tags-and-examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">A little-known capability of the Gherkin syntax is to be able to tag even specific rows in a bunch of examples ! You have to repeat the <code>Examples</code> section for each tag. The example below combines this with the advanced features described above.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Scenario Outline: examples partitioned by tag
* def vals = karate.tagValues
* match vals.region[0] == expected

  @region=US
  Examples:
    | expected |
    | US       |

  @region=GB
  Examples:
    | expected |
    | GB       |"><pre><span class="pl-k">Scenario Outline</span>:<span class="pl-s"> examples partitioned by tag</span>
<span class="pl-k">* </span>def vals = karate.tagValues
<span class="pl-k">* </span>match vals.region[0] == expected

  <span class="pl-k">@region=US</span>
  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">expected</span> |</span>
<span class="pl-k">    | <span class="pl-s1">US</span>       |</span>

  <span class="pl-k">@region=GB</span>
  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">expected</span> |</span>
<span class="pl-k">    | <span class="pl-s1">GB</span>       |</span></pre></div>
<p dir="auto">Note that if you tag <code>Examples</code> like this, and if a tag selector is used when running a given <code>Feature</code> - only the <code>Examples</code> that match the tag selector will be executed. There is no concept of a "default" where for e.g. if there is no matching tag - that the <code>Examples</code> without a tag will be executed. But note that you can use the negative form of a tag selector: <code>~@region=GB</code>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Dynamic Port Numbers</h2><a id="user-content-dynamic-port-numbers" class="anchor" aria-label="Permalink: Dynamic Port Numbers" href="#dynamic-port-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In situations where you start an (embedded) application server as part of the test set-up phase, a typical challenge is that the HTTP port may be determined at run-time. So how can you get this value injected into the Karate configuration ?</p>
<p dir="auto">It so happens that the <a href="#the-karate-object"><code>karate</code></a> object has a field called <code>properties</code> which can read a Java system-property by name like this: <a href="#karate-properties"><code>karate.properties['myName']</code></a>. Since the <code>karate</code> object is injected within <a href="#configuration"><code>karate-config.js</code></a> on start-up, it is a simple and effective way for other processes within the same JVM to pass configuration values to Karate at run-time. Refer to the 'demo' <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/karate-config.js"><code>karate-config.js</code></a> for an example and how the <code>demo.server.port</code> system-property is set-up in the test runner: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/TestBase.java"><code>TestBase.java</code></a>.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Java API</h2><a id="user-content-java-api" class="anchor" aria-label="Permalink: Java API" href="#java-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate has a <a href="https://twitter.com/KarateDSL/status/1353969718730788865" rel="nofollow">set of Java API-s</a> that expose the HTTP, JSON, data-assertion and UI automation capabilities. The primary classes are described below.</p>
<ul dir="auto">
<li><a href="/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/Http.java"><code>Http</code></a> - build and execute any HTTP request and retrieve responses</li>
<li><a href="/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/Json.java"><code>Json</code></a> - build and manipulate JSON data using JsonPath expressions, convert to and from Java <code>Map</code>-s and <code>List</code>-s, parse strings into JSON and convert Java objects into JSON</li>
<li><a href="/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/Match.java"><code>Match</code></a> - exposes all of Karate's <a href="#match"><code>match</code></a> capabilities, and this works for Java <code>Map</code> and <code>List</code> objects</li>
<li><a href="/karatelabs/karate/blob/master/karate-core/src/main/java/com/intuit/karate/driver/Driver.java"><code>Driver</code></a> - perform <a href="https://github.com/karatelabs/karate/tree/master/karate-core">web-browser automation</a></li>
</ul>
<p dir="auto">Do note that if you choose the Java API, you will naturally lose some of the test-automation framework benefits such as HTML reports, parallel execution and <a href="#the-karate-object">JavaScript</a> / <a href="#configuration">configuration</a>. You may have to rely on unit-testing frameworks or integrate additional dependencies.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">jbang</h3><a id="user-content-jbang" class="anchor" aria-label="Permalink: jbang" href="#jbang"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto"><a href="https://www.jbang.dev" rel="nofollow">jbang</a> is a great way for you to install and execute scripts that use Karate's Java API on any machine with minimal setup. Note that jbang itself is <a href="https://www.jbang.dev/documentation/guide/latest/installation.html" rel="nofollow">super-easy to install</a> and there is even a "<a href="https://www.jbang.dev/documentation/guide/latest/installation.html#zero-install" rel="nofollow">Zero Install</a>" option.</p>
<p dir="auto">Here below is an example jbang script that uses the Karate <a href="#java-api">Java API</a> to do some useful work. Name the file as <code>javadsl.java</code> and run using the command: <code>jbang javadsl.java</code>.</p>
<blockquote>
<p dir="auto">please replace <code>RELEASE</code> with the exact version of Karate you intend to use if applicable</p>
</blockquote>
<div class="highlight highlight-source-java notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="///usr/bin/env jbang &quot;$0&quot; &quot;$@&quot; ; exit $?
//DEPS com.intuit.karate:karate-core:RELEASE:all

import com.intuit.karate.*;
import java.util.List;

public class javadsl {

    public static void main(String[] args) {
        List users = Http.to(&quot;https://jsonplaceholder.typicode.com/users&quot;)
                .get().json().asList();
        Match.that(users.get(0)).contains(&quot;{ name: 'Leanne Graham' }&quot;);
        String city = Json.of(users).get(&quot;$[0].address.city&quot;);
        Match.that(&quot;Gwenborough&quot;).isEqualTo(city);
        System.out.println(&quot;\n*** second user: &quot; + Json.of(users.get(1)).toString());
    }

}"><pre><span class="pl-c">///usr/bin/env jbang "$0" "$@" ; exit $?</span>
<span class="pl-c">//DEPS com.intuit.karate:karate-core:RELEASE:all</span>

<span class="pl-k">import</span> <span class="pl-s1">com</span>.<span class="pl-s1">intuit</span>.<span class="pl-s1">karate</span>.*;
<span class="pl-k">import</span> <span class="pl-s1">java</span>.<span class="pl-s1">util</span>.<span class="pl-s1">List</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-smi">javadsl</span> {

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-smi">void</span> <span class="pl-en">main</span>(<span class="pl-smi">String</span>[] <span class="pl-s1">args</span>) {
        <span class="pl-smi">List</span> <span class="pl-s1">users</span> = <span class="pl-smi">Http</span>.<span class="pl-en">to</span>(<span class="pl-s">"https://jsonplaceholder.typicode.com/users"</span>)
                .<span class="pl-en">get</span>().<span class="pl-en">json</span>().<span class="pl-en">asList</span>();
        <span class="pl-smi">Match</span>.<span class="pl-en">that</span>(<span class="pl-s1">users</span>.<span class="pl-en">get</span>(<span class="pl-c1">0</span>)).<span class="pl-en">contains</span>(<span class="pl-s">"{ name: 'Leanne Graham' }"</span>);
        <span class="pl-smi">String</span> <span class="pl-s1">city</span> = <span class="pl-smi">Json</span>.<span class="pl-en">of</span>(<span class="pl-s1">users</span>).<span class="pl-en">get</span>(<span class="pl-s">"$[0].address.city"</span>);
        <span class="pl-smi">Match</span>.<span class="pl-en">that</span>(<span class="pl-s">"Gwenborough"</span>).<span class="pl-en">isEqualTo</span>(<span class="pl-s1">city</span>);
        <span class="pl-smi">System</span>.<span class="pl-s1">out</span>.<span class="pl-en">println</span>(<span class="pl-s">"<span class="pl-cce">\n</span>*** second user: "</span> + <span class="pl-smi">Json</span>.<span class="pl-en">of</span>(<span class="pl-s1">users</span>.<span class="pl-en">get</span>(<span class="pl-c1">1</span>)).<span class="pl-en">toString</span>());
    }

}</pre></div>
<p dir="auto">Read the documentation of the <a href="/karatelabs/karate/blob/master/karate-netty#jbang">stand-alone JAR</a> for more - such as how you can even install custom command-line applications using jbang !</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Invoking feature files using the Java API</h3><a id="user-content-invoking-feature-files-using-the-java-api" class="anchor" aria-label="Permalink: Invoking feature files using the Java API" href="#invoking-feature-files-using-the-java-api"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">It is also possible to invoke a feature file via a Java API which can be useful in some test-automation situations.</p>
<p dir="auto">A common use case is to mix API-calls into a larger test-suite, for example a Selenium or WebDriver UI test. So you can use Karate to set-up data via API calls, then run the UI test-automation, and finally again use Karate to assert that the system-state is as expected. Note that you can even include calls to a database from Karate using <a href="#calling-java">Java interop</a>. And <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/dogs/dogs.feature">this example</a> may make it clear why using Karate itself to drive even your UI-tests may be a good idea.</p>
<p dir="auto">The static method <code>com.intuit.karate.Runner.runFeature()</code> is best explained in this demo unit-test: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/java/JavaApiTest.java"><code>JavaApiTest.java</code></a>.</p>
<p dir="auto">You can optionally pass in variable values or over-ride config via a <code>HashMap</code> or leave the second-last argument as <code>null</code>. The variable state after feature execution would be returned as a <code>Map&lt;String, Object&gt;</code>. The last <code>boolean</code> argument is whether the <a href="#configuration"><code>karate-config.js</code></a> should be processed or not. Refer to the documentation on <a href="#type-conversion">type-conversion</a> to make sure you can 'unpack' data returned from Karate correctly, especially when dealing with XML.</p>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Hooks</h2><a id="user-content-hooks" class="anchor" aria-label="Permalink: Hooks" href="#hooks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">If you are looking for <a href="http://toolsqa.com/cucumber/cucumber-hooks/" rel="nofollow">Cucumber 'hooks'</a> Karate does not support them, mainly because they depend on Java code, which goes against the Karate Way™.</p>
<p dir="auto">Instead, Karate gives you all you need as part of the syntax. Here is a summary:</p>
<table>
<thead>
<tr>
<th>To Run Some Code</th>
<th>How</th>
</tr>
</thead>
<tbody>
<tr>
<td>Before <em>everything</em> (or 'globally' once)</td>
<td>See <a href="#karatecallsingle"><code>karate.callSingle()</code></a></td>
</tr>
<tr>
<td>Before every <code>Scenario</code></td>
<td>Use the <a href="#script-structure"><code>Background</code></a>. Note that <a href="#karate-configjs"><code>karate-config.js</code></a> is processed before <em>every</em> <code>Scenario</code> - so you can choose to put "global" config here, for example using <a href="#karate-configure"><code>karate.configure()</code></a>.</td>
</tr>
<tr>
<td>Once (or at the start of) every <code>Feature</code></td>
<td>Use a <a href="#callonce"><code>callonce</code></a> in the <a href="#script-structure"><code>Background</code></a>. The advantage is that you can set up variables (using <a href="#def"><code>def</code></a> if needed) which can be used in all <code>Scenario</code>-s within that <code>Feature</code>.</td>
</tr>
<tr>
<td>After every <code>Scenario</code></td>
<td><a href="#configure"><code>configure afterScenario</code></a> (see <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/hooks/hooks.feature">example</a>)</td>
</tr>
<tr>
<td>At the end of the <code>Feature</code></td>
<td><a href="#configure"><code>configure afterFeature</code></a> (see <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/hooks/hooks.feature">example</a>)</td>
</tr>
</tbody>
</table>
<blockquote>
<p dir="auto">Note that for the <code>afterFeature</code> hook to work, you should be using the <a href="#parallel-execution"><code>Runner</code> API</a> and not the JUnit runner.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto"><code>karate.callSingle()</code></h3><a id="user-content-karatecallsingle" class="anchor" aria-label="Permalink: karate.callSingle()" href="#karatecallsingle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Only recommended for advanced users, but this guarantees a routine is run only once, <em>even</em> when <a href="#parallel-execution">running tests in parallel</a>. You can use <a href="#karate-callsingle"><code>karate.callSingle()</code></a> in <a href="#karate-configjs"><code>karate-config.js</code></a> like this:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="var result = karate.callSingle('classpath:some/package/my.feature');"><pre><span class="pl-k">var</span> <span class="pl-s1">result</span> <span class="pl-c1">=</span> <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">callSingle</span><span class="pl-kos">(</span><span class="pl-s">'classpath:some/package/my.feature'</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">It can take a second JSON argument following the same rules as <a href="#call"><code>call</code></a>. Once you get a result, you typically use it to set global variables.</p>
<p dir="auto">Refer to this example:</p>
<ul dir="auto">
<li><a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/karate-config.js"><code>karate-config.js</code></a></li>
<li><a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/headers/headers-single.feature"><code>headers-single.feature</code></a></li>
</ul>
<p dir="auto">You <em>can</em> use <code>karate.callSingle()</code> directly in a <code>*.feature</code> file, but it logically fits better in the global "bootstrap". Ideally it should return "pure JSON" and note that you always get a "deep clone" of the cached result object.</p>
<p dir="auto">IMPORTANT: There are some restrictions when using <a href="#callonce"><code>callonce</code></a> or <code>karate.callSingle()</code> especially within <a href="#karate-configjs"><code>karate-config.js</code></a>. Ideally you should return only <em>pure</em> JSON data (or a primitive string, number etc.). Keep in mind that the reason this exists is to "cache" data, and <em>not</em> behavior. So if you return complex objects such as a custom Java instance or a JS function that depends on complex objects, this <a href="https://github.com/karatelabs/karate/issues/1558" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/1558/hovercard"><em>may</em> cause issues when you run in parallel</a>. If you really need to re-use a Java function, see <a href="#java-function-references">Java Function References</a>.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">Multiple calls using <code>karate.callSingle()</code></h4><a id="user-content-multiple-calls-using-karatecallsingle" class="anchor" aria-label="Permalink: Multiple calls using karate.callSingle()" href="#multiple-calls-using-karatecallsingle"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The first argument to <code>karate.callSingle()</code> is used as the "cache key". So if you tried to re-use the same feature but with multiple arguments, things will not work as you expect. But you can suffix a <code>?name</code> to the feature to de-dupe it, like so:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="var adminResponse = karate.callSingle('classpath:get-token.feature?admin', {'username': 'admin', 'password': 'password123' });
var userResponse = karate.callSingle('classpath:get-token.feature?user', {'username': 'user', 'password': 'password456' });"><pre><span class="pl-k">var</span> <span class="pl-s1">adminResponse</span> <span class="pl-c1">=</span> <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">callSingle</span><span class="pl-kos">(</span><span class="pl-s">'classpath:get-token.feature?admin'</span><span class="pl-kos">,</span> <span class="pl-kos">{</span><span class="pl-s">'username'</span>: <span class="pl-s">'admin'</span><span class="pl-kos">,</span> <span class="pl-s">'password'</span>: <span class="pl-s">'password123'</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-k">var</span> <span class="pl-s1">userResponse</span> <span class="pl-c1">=</span> <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">callSingle</span><span class="pl-kos">(</span><span class="pl-s">'classpath:get-token.feature?user'</span><span class="pl-kos">,</span> <span class="pl-kos">{</span><span class="pl-s">'username'</span>: <span class="pl-s">'user'</span><span class="pl-kos">,</span> <span class="pl-s">'password'</span>: <span class="pl-s">'password456'</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<p dir="auto">Now <code>adminResponse</code> and <code>userResponse</code> will be different, even though the same feature file is being used for a <code>callSingle()</code>.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>configure callSingleCache</code></h4><a id="user-content-configure-callsinglecache" class="anchor" aria-label="Permalink: configure callSingleCache" href="#configure-callsinglecache"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">When re-running tests in development mode and when your test suite depends on say an <code>Authorization</code> header set by <a href="#karatecallsingle"><code>karate.callSingle()</code></a>, you can cache the results locally to a file, which is very convenient when your "auth token" is valid for a period of a few minutes - which typically is the case. This means that as long as the token "on file" is valid, you can save time by not having to make the one or two HTTP calls needed to "sign-in" or create "throw-away" users in your SSO store.</p>
<p dir="auto">So in "dev mode" you can easily set this behavior like this. Just ensure that this is "configured" <em>before</em> you use <code>karate.callSingle()</code>:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="if (karate.env == 'local') {
  karate.configure('callSingleCache', { minutes: 15 });
}"><pre><span class="pl-k">if</span> <span class="pl-kos">(</span><span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-c1">env</span> <span class="pl-c1">==</span> <span class="pl-s">'local'</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>
  <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'callSingleCache'</span><span class="pl-kos">,</span> <span class="pl-kos">{</span> <span class="pl-c1">minutes</span>: <span class="pl-c1">15</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span>
<span class="pl-kos">}</span></pre></div>
<p dir="auto">By default Karate will use <code>target</code> (or <code>build</code>) as the "cache" folder, which you can over-ride by adding a <code>dir</code> key:</p>
<div class="highlight highlight-source-js notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="  karate.configure('callSingleCache', { minutes: 15, dir: 'some/other/folder' });"><pre>  <span class="pl-s1">karate</span><span class="pl-kos">.</span><span class="pl-en">configure</span><span class="pl-kos">(</span><span class="pl-s">'callSingleCache'</span><span class="pl-kos">,</span> <span class="pl-kos">{</span> <span class="pl-c1">minutes</span>: <span class="pl-c1">15</span><span class="pl-kos">,</span> <span class="pl-c1">dir</span>: <span class="pl-s">'some/other/folder'</span> <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">;</span></pre></div>
<blockquote>
<p dir="auto">This caching behavior will work only if the result of <code>karate.callSingle()</code> is a JSON-like object, and any JS functions or Java objects mixed in will be lost.</p>
</blockquote>
<div class="markdown-heading" dir="auto"><h2 tabindex="-1" class="heading-element" dir="auto">Data Driven Tests</h2><a id="user-content-data-driven-tests" class="anchor" aria-label="Permalink: Data Driven Tests" href="#data-driven-tests"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">The Cucumber Way</h3><a id="user-content-the-cucumber-way" class="anchor" aria-label="Permalink: The Cucumber Way" href="#the-cucumber-way"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Cucumber has a concept of <a href="https://docs.cucumber.io/gherkin/reference/#scenario-outline" rel="nofollow">Scenario Outlines</a> where you can re-use a set of data-driven steps and assertions, and the data can be declared in a very user-friendly fashion. Observe the usage of <code>Scenario Outline:</code> instead of <code>Scenario:</code>, and the new <code>Examples:</code> section.</p>
<p dir="auto">You should take a minute to compare this with the <a href="https://github.com/basdijkstra/rest-assured-workshop/blob/d9734da98bfcd8087055bdcd78545581dd23cb77/src/test/java/answers/RestAssuredAnswers2Test.java">exact same example implemented in REST-assured and TestNG</a>. Note that this example only does a "string equals" check on <em>parts</em> of the JSON, but with Karate you are always encouraged to match the <em>entire</em> payload in one step.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature: karate answers 2

Background:
  * url 'http://localhost:8080'

Scenario Outline: given circuit name, validate country
  Given path 'api/f1/circuits/&lt;name&gt;.json'
  When method get
  Then match $.MRData.CircuitTable.Circuits[0].Location.country == '&lt;country&gt;'

  Examples:
    | name   | country  |
    | monza  | Italy    |
    | spa    | Belgium  |
    | sepang | Malaysia |

Scenario Outline: given race number, validate number of pitstops for Max Verstappen in 2015
  Given path 'api/f1/2015/&lt;race&gt;/drivers/max_verstappen/pitstops.json'
  When method get
  Then assert response.MRData.RaceTable.Races[0].PitStops.length == &lt;stops&gt;

  Examples:
    | race | stops |
    | 1    | 1     |
    | 2    | 3     |
    | 3    | 2     |
    | 4    | 2     |"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> karate answers 2</span>

<span class="pl-k">Background</span>:
  <span class="pl-k">* </span>url <span class="pl-s">'http://localhost:8080'</span>

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> given circuit name, validate country</span>
  <span class="pl-k">Given </span>path <span class="pl-s">'api/f1/circuits/&lt;name&gt;.json'</span>
  <span class="pl-k">When </span>method get
  <span class="pl-k">Then </span>match $.MRData.CircuitTable.Circuits[0].Location.country == <span class="pl-s">'&lt;country&gt;'</span>

  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">name</span>   | <span class="pl-s1">country</span>  |</span>
<span class="pl-k">    | <span class="pl-s1">monza</span>  | <span class="pl-s1">Italy</span>    |</span>
<span class="pl-k">    | <span class="pl-s1">spa</span>    | <span class="pl-s1">Belgium</span>  |</span>
<span class="pl-k">    | <span class="pl-s1">sepang</span> | <span class="pl-s1">Malaysia</span> |</span>

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> given race number, validate number of pitstops for Max Verstappen in 2015</span>
  <span class="pl-k">Given </span>path <span class="pl-s">'api/f1/2015/&lt;race&gt;/drivers/max_verstappen/pitstops.json'</span>
  <span class="pl-k">When </span>method get
  <span class="pl-k">Then </span>assert response.MRData.RaceTable.Races[0].PitStops.length == <span class="pl-smi">&lt;stops&gt;</span>

  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">race</span> | <span class="pl-s1">stops</span> |</span>
<span class="pl-k">    | <span class="pl-s1">1</span>    | <span class="pl-s1">1</span>     |</span>
<span class="pl-k">    | <span class="pl-s1">2</span>    | <span class="pl-s1">3</span>     |</span>
<span class="pl-k">    | <span class="pl-s1">3</span>    | <span class="pl-s1">2</span>     |</span>
<span class="pl-k">    | <span class="pl-s1">4</span>    | <span class="pl-s1">2</span>     |</span></pre></div>
<p dir="auto">This is great for testing boundary conditions against a single end-point, with the added bonus that your test becomes even more readable. This approach can certainly enable product-owners or domain-experts who are not programmer-folk, to review, and even collaborate on test-scenarios and scripts.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Scenario Outline Enhancements</h3><a id="user-content-scenario-outline-enhancements" class="anchor" aria-label="Permalink: Scenario Outline Enhancements" href="#scenario-outline-enhancements"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">Karate has enhanced the Cucumber <code>Scenario Outline</code> as follows:</p>
<ul dir="auto">
<li><strong>Type Hints</strong>: if the <code>Examples</code> column header has a <code>!</code> appended, each value will be evaluated as a JavaScript data-type (number, boolean, or <em>even</em> in-line JSON) - else it defaults to string.</li>
<li><strong>Magic Variables</strong>: <code>__row</code> gives you the entire row as a JSON object, and <code>__num</code> gives you the row index (the first row is <code>0</code>).</li>
<li><strong>Auto Variables</strong>: in addition to <code>__row</code>, each column key-value will be available as a separate <a href="#def">variable</a>, which greatly simplifies JSON manipulation - especially when you want to re-use JSON <a href="#reading-files">files</a> containing <a href="#embedded-expressions">embedded expressions</a>.</li>
<li>Any empty cells will result in a <code>null</code> value for that column-key, and this can be useful to <a href="#remove-if-null">remove nodes</a> from JSON or XML documents</li>
</ul>
<p dir="auto">These are best explained with <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/outline.feature">examples</a>. You can choose between the string-placeholder style <code>&lt;foo&gt;</code> or <em>directly</em> refer to the <a href="#def">variable</a> <code>foo</code> (or even the <em>whole row</em> JSON as <code>__row</code>) in JSON-friendly <a href="#karate-expressions">expressions</a>.</p>
<p dir="auto">Note that even the scenario name can accept placeholders - which is very useful in reports.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Scenario Outline: name is &lt;name&gt; and age is &lt;age&gt;
  * def temp = '&lt;name&gt;'
  * match temp == name
  * match temp == __row.name
  * def expected = __num == 0 ? 'name is Bob and age is 5' : 'name is Nyan and age is 6'
  * match expected == karate.scenario.name

  Examples:
    | name | age |
    | Bob  | 5   |
    | Nyan | 6   |

Scenario Outline: magic variables with type hints
  * def expected = [{ name: 'Bob', age: 5 }, { name: 'Nyan', age: 6 }]
  * match __row == expected[__num]

  Examples:
    | name | age! |
    | Bob  | 5    |
    | Nyan | 6    |

Scenario Outline: embedded expressions and type hints
  * match __row == { name: '#(name)', alive: '#boolean' }

  Examples:
    | name | alive! |
    | Bob  | false  |
    | Nyan | true   |

Scenario Outline: inline json
  * match __row == { first: 'hello', second: { a: 1 } }
  * match first == 'hello'
  * match second == { a: 1 }

  Examples:
    | first  | second!  |
    | hello  | { a: 1 } |"><pre><span class="pl-k">Scenario Outline</span>:<span class="pl-s"> name is &lt;name&gt; and age is &lt;age&gt;</span>
  <span class="pl-k">* </span>def temp = <span class="pl-s">'&lt;name&gt;'</span>
  <span class="pl-k">* </span>match temp == name
  <span class="pl-k">* </span>match temp == __row.name
  <span class="pl-k">* </span>def expected = __num == 0 ? <span class="pl-s">'name is Bob and age is 5'</span> : <span class="pl-s">'name is Nyan and age is 6'</span>
  <span class="pl-k">* </span>match expected == karate.scenario.name

  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">name</span> | <span class="pl-s1">age</span> |</span>
<span class="pl-k">    | <span class="pl-s1">Bob</span>  | <span class="pl-s1">5</span>   |</span>
<span class="pl-k">    | <span class="pl-s1">Nyan</span> | <span class="pl-s1">6</span>   |</span>

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> magic variables with type hints</span>
  <span class="pl-k">* </span>def expected = [{ name: <span class="pl-s">'Bob'</span>, age: 5 }, { name: <span class="pl-s">'Nyan'</span>, age: 6 }]
  <span class="pl-k">* </span>match __row == expected[__num]

  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">name</span> | <span class="pl-s1">age</span>! |</span>
<span class="pl-k">    | <span class="pl-s1">Bob</span>  | <span class="pl-s1">5</span>    |</span>
<span class="pl-k">    | <span class="pl-s1">Nyan</span> | <span class="pl-s1">6</span>    |</span>

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> embedded expressions and type hints</span>
  <span class="pl-k">* </span>match __row == { name: <span class="pl-s">'#(name)'</span>, alive: <span class="pl-s">'#boolean'</span> }

  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">name</span> | <span class="pl-s1">alive</span>! |</span>
<span class="pl-k">    | <span class="pl-s1">Bob</span>  | <span class="pl-s1">false</span>  |</span>
<span class="pl-k">    | <span class="pl-s1">Nyan</span> | <span class="pl-s1">true</span>   |</span>

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> inline json</span>
  <span class="pl-k">* </span>match __row == { first: <span class="pl-s">'hello'</span>, second: { a: 1 } }
  <span class="pl-k">* </span>match first == <span class="pl-s">'hello'</span>
  <span class="pl-k">* </span>match second == { a: 1 }

  <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">first</span>  | <span class="pl-s1">second</span>!  |</span>
<span class="pl-k">    | <span class="pl-s1">hello</span>  | { <span class="pl-s1">a</span>: <span class="pl-s1">1</span> } |</span></pre></div>
<p dir="auto">For another example, see: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/outline/examples.feature"><code>examples.feature</code></a>.</p>
<p dir="auto">If you're looking for more complex ways of dynamically naming your scenarios you can use JS string interpolation by including placeholders in your scenario name.</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Scenario Outline: name is ${name.first} ${name.last} and age is ${age}
  * match name.first == &quot;#? _ == 'Bob' || _ == 'Nyan'&quot;
  * match name.last == &quot;#? _ == 'Dylan' || _ == 'Cat'&quot;
  * match title == karate.scenario.name

Examples:
  | name!                               | age | title                           |
  | { &quot;first&quot;: &quot;Bob&quot;, &quot;last&quot;: &quot;Dylan&quot; } | 10  | name is Bob Dylan and age is 10 |
  | { &quot;first&quot;: &quot;Nyan&quot;, &quot;last&quot;: &quot;Cat&quot; }  | 5   | name is Nyan Cat and age is 5   |"><pre><span class="pl-k">Scenario Outline</span>:<span class="pl-s"> name is ${name.first} ${name.last} and age is ${age}</span>
  <span class="pl-k">* </span>match name.first == <span class="pl-s">"#? _ == 'Bob' || _ == 'Nyan'"</span>
  <span class="pl-k">* </span>match name.last == <span class="pl-s">"#? _ == 'Dylan' || _ == 'Cat'"</span>
  <span class="pl-k">* </span>match title == karate.scenario.name

<span class="pl-k">Examples</span>:
<span class="pl-k">  | <span class="pl-s1">name</span>!                               | <span class="pl-s1">age</span> | <span class="pl-s1">title</span>                           |</span>
<span class="pl-k">  | { "<span class="pl-s1">first</span>": "<span class="pl-s1">Bob</span>", "<span class="pl-s1">last</span>": "<span class="pl-s1">Dylan</span>" } | <span class="pl-s1">10</span>  | <span class="pl-s1">name</span> <span class="pl-s1">is</span> <span class="pl-s1">Bob</span> <span class="pl-s1">Dylan</span> <span class="pl-s1">and</span> <span class="pl-s1">age</span> <span class="pl-s1">is</span> <span class="pl-s1">10</span> |</span>
<span class="pl-k">  | { "<span class="pl-s1">first</span>": "<span class="pl-s1">Nyan</span>", "<span class="pl-s1">last</span>": "<span class="pl-s1">Cat</span>" }  | <span class="pl-s1">5</span>   | <span class="pl-s1">name</span> <span class="pl-s1">is</span> <span class="pl-s1">Nyan</span> <span class="pl-s1">Cat</span> <span class="pl-s1">and</span> <span class="pl-s1">age</span> <span class="pl-s1">is</span> <span class="pl-s1">5</span>   |</span></pre></div>
<p dir="auto">String interpolation will support variables in scope and / or the <code>Examples</code> (including functions defined globally, but not functions defined in the background). Even Java interop and access to the <a href="#the-karate-object"><code>karate</code> JS API</a> would work.</p>
<p dir="auto">For some more examples check <a href="/karatelabs/karate/blob/master/karate-core/src/test/java/com/intuit/karate/core/parser/test-outline-name-js.feature"><code>test-outline-name-js.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">The Karate Way</h3><a id="user-content-the-karate-way" class="anchor" aria-label="Permalink: The Karate Way" href="#the-karate-way"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The limitation of the Cucumber <code>Scenario Outline:</code> (seen above) is that the number of rows in the <code>Examples:</code> is fixed. But take a look at how Karate can <a href="#data-driven-features">loop over a <code>*.feature</code> file</a> for each object in a JSON array - which gives you dynamic data-driven testing, if you need it. For advanced examples, refer to some of the scenarios within this <a href="/karatelabs/karate/blob/master/karate-demo">demo</a>: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/search/dynamic-params.feature#L70"><code>dynamic-params.feature</code></a>.</p>
<p dir="auto">Also see the option below, where you can data-drive an <code>Examples:</code> table using JSON.</p>
<div class="markdown-heading" dir="auto"><h3 tabindex="-1" class="heading-element" dir="auto">Dynamic Scenario Outline</h3><a id="user-content-dynamic-scenario-outline" class="anchor" aria-label="Permalink: Dynamic Scenario Outline" href="#dynamic-scenario-outline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">You can feed an <code>Examples</code> table from a custom data-source, which is great for those situations where the table-content is dynamically resolved at run-time. This capability is triggered when the table consists of a single "cell", i.e. there is exactly one row and one column in the table.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">JSON Array Data Source</h4><a id="user-content-json-array-data-source" class="anchor" aria-label="Permalink: JSON Array Data Source" href="#json-array-data-source"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">The "scenario expression" result is expected to be an array of JSON objects. Here is an example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature: scenario outline using a JSON array as the data-source

Scenario Outline: cat name: ${name}
    Given url demoBaseUrl
    And path 'cats'
    And request { name: '#(name)' }
    When method post
    Then status 200
    And match response == { id: '#number', name: '#(name)' }

    # the single cell can be any valid karate expression
    Examples:
    | read('../callarray/kittens.json') |"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> scenario outline using a JSON array as the data-source</span>

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> cat name: ${name}</span>
    <span class="pl-k">Given </span>url demoBaseUrl
    <span class="pl-k">And </span>path <span class="pl-s">'cats'</span>
    <span class="pl-k">And </span>request { name: <span class="pl-s">'#(name)'</span> }
    <span class="pl-k">When </span>method post
    <span class="pl-k">Then </span>status 200
    <span class="pl-k">And </span>match response == { id: <span class="pl-s">'#number'</span>, name: <span class="pl-s">'#(name)'</span> }

<span class="pl-c">    # the single cell can be any valid karate expression</span>
    <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">read</span>('../<span class="pl-s1">callarray</span>/<span class="pl-s1">kittens</span>.<span class="pl-s1">json</span>') |</span></pre></div>
<p dir="auto">You can see the structure of the data here: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/callarray/kittens.json"><code>kittens.json</code></a></p>
<p dir="auto">Any <a href="#karate-expressions">Karate expression</a> can be used in the "cell expression", and you can even use <a href="#calling-java">Java-interop</a> to use external data-sources such as a database.</p>
<p dir="auto">Note that Karate has built-in support for <a href="#csv-files">CSV files</a> and here is an example: <a href="/karatelabs/karate/blob/master/karate-demo/src/test/java/demo/outline/dynamic-csv.feature"><code>dynamic-csv.feature</code></a>.</p>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto"><code>@setup</code></h4><a id="user-content-setup" class="anchor" aria-label="Permalink: @setup" href="#setup"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">In cases where the data-source needs multiple steps, for e.g. if an API needs to be called to get a JSON array, you can call a separate <code>Scenario</code> to "set up" this data. The <code>@setup</code> tag is built-in for this purpose and any <code>Scenario</code> tagged with this will behave like <a href="#special-tags"><code>@ignore</code></a>. So the only way to call this <code>Scenario</code> is by using the <code>karate.setup()</code> JS API.</p>
<p dir="auto">Here is the above example re-written to do so:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature: scenario outline using a JSON array as the data-source

@setup
Scenario:
* def kittens = read('../callarray/kittens.json')

Scenario Outline: cat name: ${name}
    Given url demoBaseUrl
    And path 'cats'
    And request { name: '#(name)' }
    When method post
    Then status 200
    And match response == { id: '#number', name: '#(name)' }

    Examples:
    | karate.setup().kittens |"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> scenario outline using a JSON array as the data-source</span>

<span class="pl-k">@setup</span>
<span class="pl-k">Scenario</span>:
<span class="pl-k">* </span>def kittens = read(<span class="pl-s">'../callarray/kittens.json'</span>)

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> cat name: ${name}</span>
    <span class="pl-k">Given </span>url demoBaseUrl
    <span class="pl-k">And </span>path <span class="pl-s">'cats'</span>
    <span class="pl-k">And </span>request { name: <span class="pl-s">'#(name)'</span> }
    <span class="pl-k">When </span>method post
    <span class="pl-k">Then </span>status 200
    <span class="pl-k">And </span>match response == { id: <span class="pl-s">'#number'</span>, name: <span class="pl-s">'#(name)'</span> }

    <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">karate</span>.<span class="pl-s1">setup</span>().<span class="pl-s1">kittens</span> |</span></pre></div>
<p dir="auto">The result of <code>karate.setup()</code> will be a JSON of all the variables created within the <code>Scenario</code> tagged with <code>@setup</code>. Note how we "unpack" the <code>kittens</code> and use it to "data drive" the <code>Scenario Outline</code>. You can get really creative and use <a href="https://github.com/karatelabs/karate/issues/1905#issuecomment-1207342290" data-hovercard-type="issue" data-hovercard-url="/karatelabs/karate/issues/1905/hovercard">JS functions to filter data</a> for different needs.</p>
<p dir="auto">Note that <code>@setup</code> is designed specifically to create data for a <a href="#dynamic-scenario-outline">dynamic <code>Scenario Outline</code></a> and it is the first thing to execute within a <code>Feature</code>. In other words, it <em>cannot</em> depend on the <code>Background</code>. The <code>Background</code> will be used for each <code>Scenario</code> that is spawned from a <code>Scenario Outline</code>.</p>
<p dir="auto">Though not really recommended, you can have multiple <code>Scenario</code>-s within a <code>Feature</code> tagged with <code>@setup</code>. But in that case you should de-dupe them using a name:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature:

@setup=myname
Scenario:
* def data = [{ a: 1 }, { a: 2}]

Scenario Outline:
* print __row

Examples:
| karate.setup('myname').data |"><pre>Feature:

<span class="pl-k">@setup=myname</span>
<span class="pl-k">Scenario</span>:
<span class="pl-k">* </span>def data = [{ a: 1 }, { a: 2}]

<span class="pl-k">Scenario Outline</span>:
<span class="pl-k">* </span>print __row

<span class="pl-k">Examples</span>:
<span class="pl-k">| <span class="pl-s1">karate</span>.<span class="pl-s1">setup</span>('<span class="pl-s1">myname</span>').<span class="pl-s1">data</span> |</span></pre></div>
<p dir="auto">And since it is common to run a <code>@setup</code> <code>Scenario</code> only once per-feature you can call <code>karate.setupOnce()</code>. In the feature below, the <code>* print 'in setup'</code> step will run only once. Also note how the <code>Background</code> will run 4 times (twice per <code>Scenario</code>).</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature:

Background:
* print 'in background', __num

@setup
Scenario:
* print 'in setup'
* def data = [{a:1}, {a:2}]

Scenario Outline: first
* print __row

Examples:
| karate.setupOnce().data |

Scenario Outline: second
* print __row

Examples:
| karate.setupOnce().data |"><pre>Feature:

<span class="pl-k">Background</span>:
<span class="pl-k">* </span>print <span class="pl-s">'in background'</span>, __num

<span class="pl-k">@setup</span>
<span class="pl-k">Scenario</span>:
<span class="pl-k">* </span>print <span class="pl-s">'in setup'</span>
<span class="pl-k">* </span>def data = [{a:1}, {a:2}]

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> first</span>
<span class="pl-k">* </span>print __row

<span class="pl-k">Examples</span>:
<span class="pl-k">| <span class="pl-s1">karate</span>.<span class="pl-s1">setupOnce</span>().<span class="pl-s1">data</span> |</span>

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> second</span>
<span class="pl-k">* </span>print __row

<span class="pl-k">Examples</span>:
<span class="pl-k">| <span class="pl-s1">karate</span>.<span class="pl-s1">setupOnce</span>().<span class="pl-s1">data</span> |</span></pre></div>
<div class="markdown-heading" dir="auto"><h4 tabindex="-1" class="heading-element" dir="auto">JSON Function Data Source</h4><a id="user-content-json-function-data-source" class="anchor" aria-label="Permalink: JSON Function Data Source" href="#json-function-data-source"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path></svg></a></div>
<p dir="auto">An advanced option is where the "scenario expression" returns a JavaScript "generator" function. This is a very powerful way to generate test-data without having to load a large number of data rows into memory. The function has to return a JSON object. To signal the end of the data, just return <code>null</code>. The function argument is the row-index, so you can easily determine <em>when</em> to stop the generation of data. Here is an example:</p>
<div class="highlight highlight-text-gherkin-feature notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="Feature: scenario outline using a dynamic generator function

@setup
Scenario:
    * def generator = function(i){ if (i == 20) return null; return { name: 'cat' + i, age: i } }

Scenario Outline: cat name: ${name}
    Given url demoBaseUrl
    And path 'cats'
    And request { name: '#(name)', age: '#(age)' }
    When method post
    Then status 200
    And match response == { id: '#number', name: '#(name)' }

    Examples:
    | karate.setup().generator |"><pre><span class="pl-k">Feature</span>:<span class="pl-s"> scenario outline using a dynamic generator function</span>

<span class="pl-k">@setup</span>
<span class="pl-k">Scenario</span>:
    <span class="pl-k">* </span>def generator = function(i){ if (i == 20) return null; return { name: <span class="pl-s">'cat'</span> + i, age: i } }

<span class="pl-k">Scenario Outline</span>:<span class="pl-s"> cat name: ${name}</span>
    <span class="pl-k">Given </span>url demoBaseUrl
    <span class="pl-k">And </span>path <span class="pl-s">'cats'</span>
    <span class="pl-k">And </span>request { name: <span class="pl-s">'#(name)'</span>, age: <span class="pl-s">'#(age)'</span> }
    <span class="pl-k">When </span>method post
    <span class="pl-k">Then </span>status 200
    <span class="pl-k">And </span>match response == { id: <span class="pl-s">'#number'</span>, name: <span class="pl-s">'#(name)'</span> }

    <span class="pl-k">Examples</span>:
<span class="pl-k">    | <span class="pl-s1">karate</span>.<span class="pl-s1">setup</span>().<span class="pl-s1">generator</span> |</span></pre></div>
</article></div></div></div></div></div> <!-- --> <!-- --> <script type="application/json" id="__PRIMER_DATA_:R0:__">{"resolvedServerColorMode":"day"}</script></div>
</react-partial>

        <input type="hidden" data-csrf="true" value="h64dYbFpu5UcI6w2VvSXEFxiPFuR5drkdGhwIodvpTtd93rZqKwsUYo6g+4GHYEo9xSUsT3ShyzLPm5j2OodWQ==" />
</div>
  <div data-view-component="true" class="Layout-sidebar">      

      <div class="BorderGrid about-margin" data-pjax>
        <div class="BorderGrid-row">
          <div class="BorderGrid-cell">
            <div class="hide-sm hide-md">
  <h2 class="mb-3 h4">About</h2>

      <p class="f4 my-3">
        Test Automation Made Simple
      </p>
      <div class="my-3 d-flex flex-items-center">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link flex-shrink-0 mr-2">
    <path d="m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z"></path>
</svg>
        <span class="flex-auto min-width-0 css-truncate css-truncate-target width-fit">
          <a title="https://karatelabs.github.io/karate" role="link" target="_blank" rel="noopener noreferrer nofollow" class="text-bold" href="https://karatelabs.github.io/karate">karatelabs.github.io/karate</a>
        </span>
      </div>

    <h3 class="sr-only">Topics</h3>
    <div class="my-3">
        <div class="f6">
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:testing" href="/topics/testing" title="Topic: testing" data-view-component="true" class="topic-tag topic-tag-link">
  testing
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:automation" href="/topics/automation" title="Topic: automation" data-view-component="true" class="topic-tag topic-tag-link">
  automation
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:microservices" href="/topics/microservices" title="Topic: microservices" data-view-component="true" class="topic-tag topic-tag-link">
  microservices
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:webdriver" href="/topics/webdriver" title="Topic: webdriver" data-view-component="true" class="topic-tag topic-tag-link">
  webdriver
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:bdd" href="/topics/bdd" title="Topic: bdd" data-view-component="true" class="topic-tag topic-tag-link">
  bdd
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:mock-server" href="/topics/mock-server" title="Topic: mock-server" data-view-component="true" class="topic-tag topic-tag-link">
  mock-server
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:load-testing" href="/topics/load-testing" title="Topic: load-testing" data-view-component="true" class="topic-tag topic-tag-link">
  load-testing
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:assertions" href="/topics/assertions" title="Topic: assertions" data-view-component="true" class="topic-tag topic-tag-link">
  assertions
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:test-automation" href="/topics/test-automation" title="Topic: test-automation" data-view-component="true" class="topic-tag topic-tag-link">
  test-automation
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:cucumber" href="/topics/cucumber" title="Topic: cucumber" data-view-component="true" class="topic-tag topic-tag-link">
  cucumber
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:developer-tools" href="/topics/developer-tools" title="Topic: developer-tools" data-view-component="true" class="topic-tag topic-tag-link">
  developer-tools
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:testing-tools" href="/topics/testing-tools" title="Topic: testing-tools" data-view-component="true" class="topic-tag topic-tag-link">
  testing-tools
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:api-testing" href="/topics/api-testing" title="Topic: api-testing" data-view-component="true" class="topic-tag topic-tag-link">
  api-testing
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:contract-testing" href="/topics/contract-testing" title="Topic: contract-testing" data-view-component="true" class="topic-tag topic-tag-link">
  contract-testing
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:automated-testing" href="/topics/automated-testing" title="Topic: automated-testing" data-view-component="true" class="topic-tag topic-tag-link">
  automated-testing
</a>
      <a data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:testing-framework" href="/topics/testing-framework" title="Topic: testing-framework" data-view-component="true" class="topic-tag topic-tag-link">
  testing-framework
</a>
  </div>

    </div>

    <h3 class="sr-only">Resources</h3>
    <div class="mt-2">
      <a class="Link--muted" data-analytics-event="{&quot;category&quot;:&quot;Repository Overview&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;location:sidebar;file:readme&quot;}" href="#readme-ov-file">
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-book mr-2">
    <path d="M0 1.75A.75.75 0 0 1 .75 1h4.253c1.227 0 2.317.59 3 1.501A3.743 3.743 0 0 1 11.006 1h4.245a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-4.507a2.25 2.25 0 0 0-1.591.659l-.622.621a.75.75 0 0 1-1.06 0l-.622-.621A2.25 2.25 0 0 0 5.258 13H.75a.75.75 0 0 1-.75-.75Zm7.251 10.324.004-5.073-.002-2.253A2.25 2.25 0 0 0 5.003 2.5H1.5v9h3.757a3.75 3.75 0 0 1 1.994.574ZM8.755 4.75l-.004 7.322a3.752 3.752 0 0 1 1.992-.572H14.5v-9h-3.495a2.25 2.25 0 0 0-2.25 2.25Z"></path>
</svg>
        Readme
</a>    </div>

  
    <h3 class="sr-only">License</h3>
  <div class="mt-2">
    <a href="#MIT-1-ov-file"
      class="Link--muted"
      
      data-analytics-event="{&quot;category&quot;:&quot;Repository Overview&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;location:sidebar;file:license&quot;}"
    >
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-law mr-2">
    <path d="M8.75.75V2h.985c.304 0 .603.08.867.231l1.29.736c.038.022.08.033.124.033h2.234a.75.75 0 0 1 0 1.5h-.427l2.111 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.006.005-.01.01-.045.04c-.21.176-.441.327-.686.45C14.556 10.78 13.88 11 13 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L12.178 4.5h-.162c-.305 0-.604-.079-.868-.231l-1.29-.736a.245.245 0 0 0-.124-.033H8.75V13h2.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1 0-1.5h2.5V3.5h-.984a.245.245 0 0 0-.124.033l-1.289.737c-.265.15-.564.23-.869.23h-.162l2.112 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.016.015-.045.04c-.21.176-.441.327-.686.45C4.556 10.78 3.88 11 3 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L2.178 4.5H1.75a.75.75 0 0 1 0-1.5h2.234a.249.249 0 0 0 .125-.033l1.288-.737c.265-.15.564-.23.869-.23h.984V.75a.75.75 0 0 1 1.5 0Zm2.945 8.477c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L13 6.327Zm-10 0c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L3 6.327Z"></path>
</svg>
     MIT license
    </a>
  </div>


    <h3 class="sr-only">Code of conduct</h3>
    <div class="mt-2">
      <a href="#coc-ov-file"
        class="Link--muted"
        
        data-analytics-event="{&quot;category&quot;:&quot;Repository Overview&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;location:sidebar;file:code of conduct&quot;}"
      >
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code-of-conduct mr-2">
    <path d="M8.048 2.241c.964-.709 2.079-1.238 3.325-1.241a4.616 4.616 0 0 1 3.282 1.355c.41.408.757.86.996 1.428.238.568.348 1.206.347 1.968 0 2.193-1.505 4.254-3.081 5.862-1.496 1.526-3.213 2.796-4.249 3.563l-.22.163a.749.749 0 0 1-.895 0l-.221-.163c-1.036-.767-2.753-2.037-4.249-3.563C1.51 10.008.007 7.952.002 5.762a4.614 4.614 0 0 1 1.353-3.407C3.123.585 6.223.537 8.048 2.24Zm-1.153.983c-1.25-1.033-3.321-.967-4.48.191a3.115 3.115 0 0 0-.913 2.335c0 1.556 1.109 3.24 2.652 4.813C5.463 11.898 6.96 13.032 8 13.805c.353-.262.758-.565 1.191-.905l-1.326-1.223a.75.75 0 0 1 1.018-1.102l1.48 1.366c.328-.281.659-.577.984-.887L9.99 9.802a.75.75 0 1 1 1.019-1.103l1.384 1.28c.295-.329.566-.661.81-.995L12.92 8.7l-1.167-1.168c-.674-.671-1.78-.664-2.474.03-.268.269-.538.537-.802.797-.893.882-2.319.843-3.185-.032-.346-.35-.693-.697-1.043-1.047a.75.75 0 0 1-.04-1.016c.162-.191.336-.401.52-.623.62-.748 1.356-1.637 2.166-2.417Zm7.112 4.442c.313-.65.491-1.293.491-1.916v-.001c0-.614-.088-1.045-.23-1.385-.143-.339-.357-.633-.673-.949a3.111 3.111 0 0 0-2.218-.915c-1.092.003-2.165.627-3.226 1.602-.823.755-1.554 1.637-2.228 2.45l-.127.154.562.566a.755.755 0 0 0 1.066.02l.794-.79c1.258-1.258 3.312-1.31 4.594-.032.396.394.792.791 1.173 1.173Z"></path>
</svg>
        Code of conduct
      </a>
    </div>

    <h3 class="sr-only">Security policy</h3>
    <div class="mt-2">
      <a href="#security-ov-file"
        class="Link--muted"
        
        data-analytics-event="{&quot;category&quot;:&quot;Repository Overview&quot;,&quot;action&quot;:&quot;click&quot;,&quot;label&quot;:&quot;location:sidebar;file:security policy&quot;}"
      >
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-law mr-2">
    <path d="M8.75.75V2h.985c.304 0 .603.08.867.231l1.29.736c.038.022.08.033.124.033h2.234a.75.75 0 0 1 0 1.5h-.427l2.111 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.006.005-.01.01-.045.04c-.21.176-.441.327-.686.45C14.556 10.78 13.88 11 13 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L12.178 4.5h-.162c-.305 0-.604-.079-.868-.231l-1.29-.736a.245.245 0 0 0-.124-.033H8.75V13h2.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1 0-1.5h2.5V3.5h-.984a.245.245 0 0 0-.124.033l-1.289.737c-.265.15-.564.23-.869.23h-.162l2.112 4.692a.75.75 0 0 1-.154.838l-.53-.53.529.531-.001.002-.002.002-.006.006-.016.015-.045.04c-.21.176-.441.327-.686.45C4.556 10.78 3.88 11 3 11a4.498 4.498 0 0 1-2.023-.454 3.544 3.544 0 0 1-.686-.45l-.045-.04-.016-.015-.006-.006-.004-.004v-.001a.75.75 0 0 1-.154-.838L2.178 4.5H1.75a.75.75 0 0 1 0-1.5h2.234a.249.249 0 0 0 .125-.033l1.288-.737c.265-.15.564-.23.869-.23h.984V.75a.75.75 0 0 1 1.5 0Zm2.945 8.477c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L13 6.327Zm-10 0c.285.135.718.273 1.305.273s1.02-.138 1.305-.273L3 6.327Z"></path>
</svg>
        Security policy
      </a>
    </div>

  <include-fragment  src="/karatelabs/karate/hovercards/citation/sidebar_partial?tree_name=master">
  </include-fragment>

  <div class="mt-2">
    <a href="/karatelabs/karate/activity" data-view-component="true" class="Link Link--muted">
      <svg text="gray" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-pulse mr-2">
    <path d="M6 2c.306 0 .582.187.696.471L10 10.731l1.304-3.26A.751.751 0 0 1 12 7h3.25a.75.75 0 0 1 0 1.5h-2.742l-1.812 4.528a.751.751 0 0 1-1.392 0L6 4.77 4.696 8.03A.75.75 0 0 1 4 8.5H.75a.75.75 0 0 1 0-1.5h2.742l1.812-4.529A.751.751 0 0 1 6 2Z"></path>
</svg>
      <span class="color-fg-muted">Activity</span>
</a>  </div>

    <div class="mt-2">
      <a href="/karatelabs/karate/custom-properties" data-view-component="true" class="Link Link--muted">
        <svg text="gray" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-note mr-2">
    <path d="M0 3.75C0 2.784.784 2 1.75 2h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 14H1.75A1.75 1.75 0 0 1 0 12.25Zm1.75-.25a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-8.5a.25.25 0 0 0-.25-.25ZM3.5 6.25a.75.75 0 0 1 .75-.75h7a.75.75 0 0 1 0 1.5h-7a.75.75 0 0 1-.75-.75Zm.75 2.25h4a.75.75 0 0 1 0 1.5h-4a.75.75 0 0 1 0-1.5Z"></path>
</svg>
        <span class="color-fg-muted">Custom properties</span>
</a>    </div>

  <h3 class="sr-only">Stars</h3>
  <div class="mt-2">
    <a href="/karatelabs/karate/stargazers" data-view-component="true" class="Link Link--muted">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg>
      <strong>7.9k</strong>
      stars
</a>  </div>

  <h3 class="sr-only">Watchers</h3>
  <div class="mt-2">
    <a href="/karatelabs/karate/watchers" data-view-component="true" class="Link Link--muted">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-eye mr-2">
    <path d="M8 2c1.981 0 3.671.992 4.933 2.078 1.27 1.091 2.187 2.345 2.637 3.023a1.62 1.62 0 0 1 0 1.798c-.45.678-1.367 1.932-2.637 3.023C11.67 13.008 9.981 14 8 14c-1.981 0-3.671-.992-4.933-2.078C1.797 10.83.88 9.576.43 8.898a1.62 1.62 0 0 1 0-1.798c.45-.677 1.367-1.931 2.637-3.022C4.33 2.992 6.019 2 8 2ZM1.679 7.932a.12.12 0 0 0 0 .136c.411.622 1.241 1.75 2.366 2.717C5.176 11.758 6.527 12.5 8 12.5c1.473 0 2.825-.742 3.955-1.715 1.124-.967 1.954-2.096 2.366-2.717a.12.12 0 0 0 0-.136c-.412-.621-1.242-1.75-2.366-2.717C10.824 4.242 9.473 3.5 8 3.5c-1.473 0-2.825.742-3.955 1.715-1.124.967-1.954 2.096-2.366 2.717ZM8 10a2 2 0 1 1-.001-3.999A2 2 0 0 1 8 10Z"></path>
</svg>
      <strong>225</strong>
      watching
</a>  </div>

  <h3 class="sr-only">Forks</h3>
  <div class="mt-2">
    <a href="/karatelabs/karate/forks" data-view-component="true" class="Link Link--muted">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-2">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>
      <strong>1.9k</strong>
      forks
</a>  </div>

    <div class="mt-2">
      <a class="Link--muted" href="/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fkaratelabs%2Fkarate&amp;report=karatelabs+%28user%29">
          Report repository
</a>    </div>
</div>

          </div>
        </div>

        
            <div class="BorderGrid-row">
              <div class="BorderGrid-cell">
                <h2 class="h4 mb-3" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame">
  <a href="/karatelabs/karate/releases" data-view-component="true" class="Link--primary no-underline Link">
    Releases
      <span title="51" data-view-component="true" class="Counter">51</span>
</a></h2>

  <a class="Link--primary d-flex no-underline" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/karatelabs/karate/releases/tag/v1.4.1">
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-tag flex-shrink-0 mt-1 color-fg-success">
    <path d="M1 7.775V2.75C1 1.784 1.784 1 2.75 1h5.025c.464 0 .91.184 1.238.513l6.25 6.25a1.75 1.75 0 0 1 0 2.474l-5.026 5.026a1.75 1.75 0 0 1-2.474 0l-6.25-6.25A1.752 1.752 0 0 1 1 7.775Zm1.5 0c0 .066.026.13.073.177l6.25 6.25a.25.25 0 0 0 .354 0l5.025-5.025a.25.25 0 0 0 0-.354l-6.25-6.25a.25.25 0 0 0-.177-.073H2.75a.25.25 0 0 0-.25.25ZM6 5a1 1 0 1 1 0 2 1 1 0 0 1 0-2Z"></path>
</svg>
    <div class="ml-2 min-width-0">
      <div class="d-flex">
        <span class="css-truncate css-truncate-target text-bold mr-2" style="max-width: none;">v1.4.1</span>
        <span title="Label: Latest" data-view-component="true" class="Label Label--success flex-shrink-0">
          Latest
</span>      </div>
      <div class="text-small color-fg-muted"><relative-time datetime="2023-10-16T06:22:41Z" class="no-wrap">Oct 16, 2023</relative-time></div>
    </div>
</a>    <div data-view-component="true" class="mt-3">
      <a text="small" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/karatelabs/karate/releases" data-view-component="true" class="Link">
        + 50 releases
</a></div>
              </div>
            </div>

        
            <div class="BorderGrid-row">
              <div class="BorderGrid-cell">
                
<h2 class="h4 mb-3">Sponsor this project</h2>
<include-fragment src="/karatelabs/karate/sponsors_list?block_button=true&amp;current_repository=karate" aria-busy="true" aria-label="Loading sponsorable links">
        <div class="d-flex mb-3">
          <div class="Skeleton avatar avatar-user mr-2" style="width:32px;height:32px;"></div>
          <div class="Skeleton Skeleton--text flex-1 flex-self-center f4">&nbsp;</div>
        </div>
          <button type="button" disabled="disabled" data-view-component="true" class="btn btn-block">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart icon-sponsor mr-1 color-fg-sponsors">
    <path d="m8 14.25.345.666a.75.75 0 0 1-.69 0l-.008-.004-.018-.01a7.152 7.152 0 0 1-.31-.17 22.055 22.055 0 0 1-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.066 22.066 0 0 1-3.744 2.584l-.018.01-.006.003h-.002ZM4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.58 20.58 0 0 0 8 13.393a20.58 20.58 0 0 0 3.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.749.749 0 0 1-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5Z"></path>
</svg> Sponsor
</button></include-fragment>  <div class="text-small mt-3">
    <a href="/sponsors">Learn more about GitHub Sponsors</a>
  </div>

              </div>
            </div>

        
        
            <div class="BorderGrid-row" >
              <div class="BorderGrid-cell">
                
  <h2 class="h4 mb-3">
    <a href="/karatelabs/karate/network/dependents" data-view-component="true" class="Link--primary no-underline Link">
      Used by <span title="4,696" data-view-component="true" class="Counter">4.7k</span>
</a>  </h2>

  <a class="d-flex flex-items-center" href="/karatelabs/karate/network/dependents">
    <ul class="hx_flex-avatar-stack list-style-none min-width-0">
          <li class="hx_flex-avatar-stack-item">
            <img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/94045372?s=64&amp;v=4" width="32" height="32" alt="@mruthul-m" />
          </li>
          <li class="hx_flex-avatar-stack-item">
            <img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/167166723?s=64&amp;v=4" width="32" height="32" alt="@Harshvardhan-academian" />
          </li>
          <li class="hx_flex-avatar-stack-item">
            <img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/20544836?s=64&amp;v=4" width="32" height="32" alt="@Gabriel556633" />
          </li>
          <li class="hx_flex-avatar-stack-item">
            <img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/173241245?s=64&amp;v=4" width="32" height="32" alt="@TestAutomation1010" />
          </li>
          <li class="hx_flex-avatar-stack-item">
            <img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/173240039?s=64&amp;v=4" width="32" height="32" alt="@DijoJ-143" />
          </li>
          <li class="hx_flex-avatar-stack-item">
            <img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/56268369?s=64&amp;v=4" width="32" height="32" alt="@CristianHdezZ" />
          </li>
          <li class="hx_flex-avatar-stack-item">
            <img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/167165570?s=64&amp;v=4" width="32" height="32" alt="@shashi-mane" />
          </li>
          <li class="hx_flex-avatar-stack-item">
            <img class="avatar avatar-user" src="https://avatars.githubusercontent.com/u/167165570?s=64&amp;v=4" width="32" height="32" alt="@shashi-mane" />
          </li>
    </ul>
      <span class="px-2 text-bold text-small no-wrap">
        + 4,688
      </span>
  </a>

              </div>
            </div>

        
            <div class="BorderGrid-row">
              <div class="BorderGrid-cell">
                <h2 class="h4 mb-3">
  <a href="/karatelabs/karate/graphs/contributors" data-view-component="true" class="Link--primary no-underline Link d-flex flex-items-center">
    Contributors
      <span title="89" data-view-component="true" class="Counter ml-1">89</span>
</a></h2>


    
  <ul class="list-style-none d-flex flex-wrap mb-n2">
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/ptrthomas"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/ptrthomas/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/915480?s=64&amp;v=4" alt="@ptrthomas" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/joelpramos"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/joelpramos/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/53574318?s=64&amp;v=4" alt="@joelpramos" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/babusekaran"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/babusekaran/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/26348282?s=64&amp;v=4" alt="@babusekaran" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/ivangsa"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/ivangsa/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/1246876?s=64&amp;v=4" alt="@ivangsa" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/apps/dependabot"
          class=""
          
        >
        <img src="https://avatars.githubusercontent.com/in/29110?s=64&amp;v=4" alt="@dependabot[bot]" size="32" height="32" width="32" data-view-component="true" class="avatar" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/vmchukky"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/vmchukky/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/5195256?s=64&amp;v=4" alt="@vmchukky" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/Nishant-sehgal"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/Nishant-sehgal/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/16278936?s=64&amp;v=4" alt="@Nishant-sehgal" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/chaudharydeepak"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/chaudharydeepak/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/931030?s=64&amp;v=4" alt="@chaudharydeepak" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/rsmaan4u8"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/rsmaan4u8/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/3759206?s=64&amp;v=4" alt="@rsmaan4u8" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/ghostwriternr"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/ghostwriternr/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/10023615?s=64&amp;v=4" alt="@ghostwriternr" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/dinesh19aug"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/dinesh19aug/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/1176242?s=64&amp;v=4" alt="@dinesh19aug" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/paaco"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/paaco/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/22741486?s=64&amp;v=4" alt="@paaco" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/edwardsph"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/edwardsph/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/9445771?s=64&amp;v=4" alt="@edwardsph" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
    <li class="mb-2 mr-2"
        >
      <a href="https://github.com/athityakumar"
          class=""
            data-hovercard-type="user" data-hovercard-url="/users/athityakumar/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self"
          
        >
        <img src="https://avatars.githubusercontent.com/u/17109060?s=64&amp;v=4" alt="@athityakumar" size="32" height="32" width="32" data-view-component="true" class="avatar circle" />
      </a>
    </li>
</ul>




  <div data-view-component="true" class="mt-3">
    <a text="small" href="/karatelabs/karate/graphs/contributors" data-view-component="true" class="Link--inTextBlock Link">
      + 75 contributors
</a></div>
              </div>
            </div>

        
        
            <div class="BorderGrid-row">
              <div class="BorderGrid-cell">
                <h2 class="h4 mb-3">Languages</h2>
<div class="mb-2">
  <span data-view-component="true" class="Progress">
    <span style="background-color:#b07219 !important;;width: 83.5%;" itemprop="keywords" aria-label="Java 83.5" data-view-component="true" class="Progress-item color-bg-success-emphasis"></span>
    <span style="background-color:#5B2063 !important;;width: 10.6%;" itemprop="keywords" aria-label="Gherkin 10.6" data-view-component="true" class="Progress-item color-bg-success-emphasis"></span>
    <span style="background-color:#f1e05a !important;;width: 2.8%;" itemprop="keywords" aria-label="JavaScript 2.8" data-view-component="true" class="Progress-item color-bg-success-emphasis"></span>
    <span style="background-color:#e34c26 !important;;width: 1.8%;" itemprop="keywords" aria-label="HTML 1.8" data-view-component="true" class="Progress-item color-bg-success-emphasis"></span>
    <span style="background-color:#c22d40 !important;;width: 0.6%;" itemprop="keywords" aria-label="Scala 0.6" data-view-component="true" class="Progress-item color-bg-success-emphasis"></span>
    <span style="background-color:#563d7c !important;;width: 0.3%;" itemprop="keywords" aria-label="CSS 0.3" data-view-component="true" class="Progress-item color-bg-success-emphasis"></span>
    <span style="background-color:#ededed !important;;width: 0.4%;" itemprop="keywords" aria-label="Other 0.4" data-view-component="true" class="Progress-item color-bg-success-emphasis"></span>
</span></div>
<ul class="list-style-none">
    <li class="d-inline">
        <a class="d-inline-flex flex-items-center flex-nowrap Link--secondary no-underline text-small mr-3" href="/karatelabs/karate/search?l=java"  data-ga-click="Repository, language stats search click, location:repo overview">
          <svg style="color:#b07219;" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill mr-2">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
          <span class="color-fg-default text-bold mr-1">Java</span>
          <span>83.5%</span>
        </a>
    </li>
    <li class="d-inline">
        <a class="d-inline-flex flex-items-center flex-nowrap Link--secondary no-underline text-small mr-3" href="/karatelabs/karate/search?l=gherkin"  data-ga-click="Repository, language stats search click, location:repo overview">
          <svg style="color:#5B2063;" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill mr-2">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
          <span class="color-fg-default text-bold mr-1">Gherkin</span>
          <span>10.6%</span>
        </a>
    </li>
    <li class="d-inline">
        <a class="d-inline-flex flex-items-center flex-nowrap Link--secondary no-underline text-small mr-3" href="/karatelabs/karate/search?l=javascript"  data-ga-click="Repository, language stats search click, location:repo overview">
          <svg style="color:#f1e05a;" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill mr-2">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
          <span class="color-fg-default text-bold mr-1">JavaScript</span>
          <span>2.8%</span>
        </a>
    </li>
    <li class="d-inline">
        <a class="d-inline-flex flex-items-center flex-nowrap Link--secondary no-underline text-small mr-3" href="/karatelabs/karate/search?l=html"  data-ga-click="Repository, language stats search click, location:repo overview">
          <svg style="color:#e34c26;" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill mr-2">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
          <span class="color-fg-default text-bold mr-1">HTML</span>
          <span>1.8%</span>
        </a>
    </li>
    <li class="d-inline">
        <a class="d-inline-flex flex-items-center flex-nowrap Link--secondary no-underline text-small mr-3" href="/karatelabs/karate/search?l=scala"  data-ga-click="Repository, language stats search click, location:repo overview">
          <svg style="color:#c22d40;" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill mr-2">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
          <span class="color-fg-default text-bold mr-1">Scala</span>
          <span>0.6%</span>
        </a>
    </li>
    <li class="d-inline">
        <a class="d-inline-flex flex-items-center flex-nowrap Link--secondary no-underline text-small mr-3" href="/karatelabs/karate/search?l=css"  data-ga-click="Repository, language stats search click, location:repo overview">
          <svg style="color:#563d7c;" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill mr-2">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
          <span class="color-fg-default text-bold mr-1">CSS</span>
          <span>0.3%</span>
        </a>
    </li>
    <li class="d-inline">
      <span class="d-inline-flex flex-items-center flex-nowrap text-small mr-3">
        <svg style="color:#ededed;" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill mr-2">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
        <span class="color-fg-default text-bold mr-1">Other</span>
        <span>0.4%</span>
      </span>
    </li>
</ul>

              </div>
            </div>

              </div>
</div>
  
</div></div>

  </div>


  </div>

</turbo-frame>


    </main>
  </div>

  </div>

          <footer class="footer pt-8 pb-6 f6 color-fg-muted p-responsive" role="contentinfo" >
  <h2 class='sr-only'>Footer</h2>

  


  <div class="d-flex flex-justify-center flex-items-center flex-column-reverse flex-lg-row flex-wrap flex-lg-nowrap">
    <div class="d-flex flex-items-center flex-shrink-0 mx-2">
      <a aria-label="Homepage" title="GitHub" class="footer-octicon mr-2" href="https://github.com">
        <svg aria-hidden="true" height="24" viewBox="0 0 16 16" version="1.1" width="24" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M8 0c4.42 0 8 3.58 8 8a8.013 8.013 0 0 1-5.45 7.59c-.4.08-.55-.17-.55-.38 0-.27.01-1.13.01-2.2 0-.75-.25-1.23-.54-1.48 1.78-.2 3.65-.88 3.65-3.95 0-.88-.31-1.59-.82-2.15.08-.2.36-1.02-.08-2.12 0 0-.67-.22-2.2.82-.64-.18-1.32-.27-2-.27-.68 0-1.36.09-2 .27-1.53-1.03-2.2-.82-2.2-.82-.44 1.1-.16 1.92-.08 2.12-.51.56-.82 1.28-.82 2.15 0 3.06 1.86 3.75 3.64 3.95-.23.2-.44.55-.51 1.07-.46.21-1.61.55-2.33-.66-.15-.24-.6-.83-1.23-.82-.67.01-.27.38.01.53.34.19.73.9.82 1.13.16.45.68 1.31 2.69.94 0 .67.01 1.3.01 1.49 0 .21-.15.45-.55.38A7.995 7.995 0 0 1 0 8c0-4.42 3.58-8 8-8Z"></path>
</svg>
</a>
      <span>
        &copy; 2024 GitHub,&nbsp;Inc.
      </span>
    </div>

    <nav aria-label="Footer">
      <h3 class="sr-only" id="sr-footer-heading">Footer navigation</h3>

      <ul class="list-style-none d-flex flex-justify-center flex-wrap mb-2 mb-lg-0" aria-labelledby="sr-footer-heading">

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to Terms&quot;,&quot;label&quot;:&quot;text:terms&quot;}" href="https://docs.github.com/site-policy/github-terms/github-terms-of-service" data-view-component="true" class="Link--secondary Link">Terms</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to privacy&quot;,&quot;label&quot;:&quot;text:privacy&quot;}" href="https://docs.github.com/site-policy/privacy-policies/github-privacy-statement" data-view-component="true" class="Link--secondary Link">Privacy</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to security&quot;,&quot;label&quot;:&quot;text:security&quot;}" href="https://github.com/security" data-view-component="true" class="Link--secondary Link">Security</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to status&quot;,&quot;label&quot;:&quot;text:status&quot;}" href="https://www.githubstatus.com/" data-view-component="true" class="Link--secondary Link">Status</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to docs&quot;,&quot;label&quot;:&quot;text:docs&quot;}" href="https://docs.github.com/" data-view-component="true" class="Link--secondary Link">Docs</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to contact&quot;,&quot;label&quot;:&quot;text:contact&quot;}" href="https://support.github.com?tags=dotcom-footer" data-view-component="true" class="Link--secondary Link">Contact</a>
          </li>

          <li class="mr-3" >
  <cookie-consent-link>
    <button type="button" class="Link--secondary underline-on-hover border-0 p-0 color-bg-transparent" data-action="click:cookie-consent-link#showConsentManagement">
      Manage cookies
    </button>
  </cookie-consent-link>
</li>

<li class="mr-3">
  <cookie-consent-link>
    <button type="button" class="Link--secondary underline-on-hover border-0 p-0 color-bg-transparent" data-action="click:cookie-consent-link#showConsentManagement">
      Do not share my personal information
    </button>
  </cookie-consent-link>
</li>

      </ul>
    </nav>
  </div>
</footer>




    <ghcc-consent id="ghcc" class="position-fixed bottom-0 left-0" style="z-index: 999999" data-initial-cookie-consent-allowed="" data-cookie-consent-required="false"></ghcc-consent>


  <div id="ajax-error-message" class="ajax-error-message flash flash-error" hidden>
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    You can’t perform that action at this time.
  </div>

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box color-shadow-large" style="width:360px;">
  </div>
</div>

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0 tooltipped-no-delay" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 tooltipped-no-delay d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div>

    <div id="js-global-screen-reader-notice" class="sr-only mt-n1" aria-live="polite" aria-atomic="true" ></div>
    <div id="js-global-screen-reader-notice-assertive" class="sr-only mt-n1" aria-live="assertive" aria-atomic="true"></div>
  </body>
</html>

